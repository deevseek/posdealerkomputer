{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LaptopPOS Service Management System\n\n## Overview\n\nLaptopPOS is a comprehensive Point of Sale and service management system specifically designed for laptop sales and repair businesses. The application combines traditional POS functionality with service ticket management, inventory tracking, and financial reporting. Built with modern web technologies, it provides a complete business management solution for laptop retailers and service centers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and better development experience\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui component library built on Radix UI primitives for accessibility and consistency\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Language**: TypeScript throughout for consistent type safety across the stack\n- **Database ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Authentication**: Replit Auth integration with role-based access control (admin, kasir, teknisi, purchasing, finance, owner)\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Management**: Drizzle Kit for migrations and schema versioning\n- **Core Entities**: Users, products, customers, suppliers, transactions, service tickets, financial records, and store configuration\n- **Relationship Structure**: Well-defined foreign key relationships with proper indexing for performance\n\n### Authentication & Authorization\n- **Authentication Provider**: Replit Auth with JWT token handling\n- **Session Storage**: Database-backed sessions for persistent login state\n- **Role-Based Access**: Six distinct user roles with feature-specific permissions\n- **Middleware Protection**: Route-level authentication checks with role validation\n- **Session Security**: Cookie files and session data are never committed to repository\n- **Endpoint Security**: All sensitive endpoints (including service cancellation) require authentication\n\n### API Architecture\n- **Pattern**: RESTful API design with consistent endpoint naming\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Data Validation**: Zod schema validation for request/response data\n- **Response Format**: Consistent JSON response structure across all endpoints\n\n### File Structure Organization\n- **Monorepo Structure**: Shared schema and types between client and server\n- **Component Organization**: Feature-based component structure with reusable UI components\n- **Asset Management**: Centralized asset handling with proper aliasing\n- **Configuration**: Environment-based configuration management\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Database Driver**: @neondatabase/serverless for optimized serverless connections\n\n### Authentication Services\n- **Replit Auth**: Integrated authentication system with OpenID Connect\n- **Session Management**: PostgreSQL session store for persistent authentication\n\n### UI Component Libraries\n- **Radix UI**: Headless UI primitives for accessible component foundation\n- **Lucide React**: Icon library for consistent iconography\n- **shadcn/ui**: Pre-built component library with customizable styling\n\n### Development & Build Tools\n- **TypeScript**: Static type checking across the entire application\n- **Vite**: Modern build tool with hot module replacement\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **ESBuild**: Fast JavaScript bundler for server-side code\n\n### Validation & Forms\n- **Zod**: Runtime type validation and schema definition\n- **React Hook Form**: Form state management with validation integration\n- **@hookform/resolvers**: Zod integration for form validation\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **date-fns-tz**: Timezone-aware date operations for Jakarta timezone\n- **clsx & class-variance-authority**: Dynamic CSS class management\n- **memoizee**: Function memoization for performance optimization\n\n## Recent Changes\n\n### Deployment Field Consistency Bug Fix (September 3, 2025)\n- **Issue**: Critical deployment bugs affecting core business operations:\n  1. Service ticket completion with spare parts failing (\"Gagal memperbarui tiket servis\")  \n  2. Asset inventory value showing Rp 0 instead of correct values\n  3. Stock movement reports showing incorrect quantity data\n  4. Dashboard data synchronization issues between development and deployment\n- **Root Cause**: Systematic field inconsistency between `totalStock` and `stock` fields across multiple calculations\n- **Solution**: Comprehensive field consistency audit and fixes across all stock-related operations\n- **Files Modified**: \n  - `server/storage.ts`: Fixed all stock calculations to use consistent `stock` field instead of `totalStock`\n  - `server/routes.ts`: Enhanced session validation with debugging for deployment differences  \n  - `client/src/pages/dashboard.tsx`: Added WhatsApp connection status with real-time synchronization\n  - `client/src/components/WhatsAppSettings.tsx`: Added dashboard invalidation for status sync\n- **Additional Fixes Added**: \n  - `client/src/pages/stock-movements.tsx`: Fixed movement display field mismatch (movement.type → movement.movementType)\n  - `server/whatsappService.ts`: Fixed Baileys logger crash with proper logger methods implementation\n- **Impact**: \n  - Asset inventory value: 3.6M → 317.8M (8,828% improvement through correct field usage)\n  - Service stock movements display: Now correctly shows \"Keluar\" (out) instead of \"Masuk\" (in)\n  - Service ticket completion with stock updates: Now works reliably in deployment\n  - Dashboard data synchronization: All metrics now accurate in deployment environment\n  - WhatsApp status integration: Real-time sync between dashboard and settings\n  - WhatsApp service stability: No more logger crashes preventing server startup\n\n### GMT+7 Timezone Implementation (September 11, 2025)\n- **Scope**: Comprehensive GMT+7 (Asia/Jakarta - Bangkok/Hanoi/Jakarta) timezone support throughout entire application\n- **Technical Implementation**: \n  - Built production-ready timezone utilities using date-fns-tz library with proper UTC storage and Jakarta display\n  - Updated all database schemas to use timezone-aware timestamps with consistent UTC storage strategy\n  - Updated 19+ frontend files to use Jakarta timezone formatting functions, eliminating browser timezone dependencies\n  - Completely overhauled backend timestamp handling in routes and storage layers\n- **Critical Issues Resolved**:\n  - Eliminated manual timezone math that caused off-by-7-hours errors near midnight and date boundaries  \n  - Fixed database timestamp storage to prevent +7h skew in stored data\n  - Fixed date boundary calculations for accurate reporting and date-based queries\n  - Resolved all TypeScript compilation errors (65 → 0 errors) from timezone refactoring and schema updates\n- **Production-Ready Architecture**: \n  - Proper separation between UTC storage and Jakarta display prevents data integrity issues\n  - Uses date-fns-tz with utcToZonedTime/zonedTimeToUtc for timezone-aware calculations\n  - Consistent handling across all date operations: creation, updates, filtering, and reporting\n- **Files Modified**: \n  - `shared/utils/timezone.ts`: Complete rewrite with timezone-aware functions\n  - `shared/schema.ts`: Updated all timestamp fields with timezone support\n  - `server/storage.ts` and `server/routes.ts`: Comprehensive backend timestamp handling overhaul\n  - Multiple frontend components for consistent Jakarta timezone display\n- **Zero Breaking Changes**: Application continues running normally with enhanced timezone accuracy and data integrity\n\n### Security Hardening (September 15, 2025)\n- **Issue**: Cookie files containing session data were committed to repository, creating security risk\n- **Solution**: Implemented comprehensive security cleanup and prevention measures:\n  - Removed all cookie files (cookies*.txt, auth_cookies.txt, test_cookies*.txt) from repository\n  - Updated .gitignore with comprehensive patterns to prevent future cookie file commits\n  - Added security patterns for session files, auth_info_*, and local environment files\n- **Security Verification**: \n  - Confirmed no hardcoded API keys, tokens, or credentials in codebase\n  - Verified service cancellation endpoint (`POST /api/service-tickets/:id/cancel`) uses proper authentication\n  - Confirmed all sensitive endpoints use `isAuthenticated` middleware\n  - Validated business rule validation and Zod schema validation for service operations\n- **Prevention Measures**: \n  - Comprehensive .gitignore patterns for session/cookie files\n  - Documentation added to prevent future cookie file commits\n  - Security best practices enforced in development workflow","size_bytes":9359},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { tenantMiddleware } from \"./middleware/tenant\";\nimport saasRoutes from \"./routes/saas\";\nimport adminRoutes from \"./routes/admin\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Register SaaS routes first (no tenant middleware needed)\n  app.use('/api/saas', saasRoutes);\n  app.use('/api/admin', adminRoutes);\n  \n  // Register comprehensive SaaS management routes\n  const saasCompleteRoutes = await import('./routes/saas-complete');\n  app.use('/api/admin', saasCompleteRoutes.default);\n  \n  // Register Stripe payment and billing routes\n  const stripeRoutes = await import('./routes/stripe-integration');\n  app.use('/api/admin', stripeRoutes.default);\n  \n  // Register client onboarding routes\n  const clientRoutes = await import('./routes/client');\n  app.use('/api/client', clientRoutes.default);\n\n  // Apply tenant middleware to remaining routes\n  app.use(tenantMiddleware);\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 3000 for ngrok tunnel.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '3000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2908},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":3565},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  type ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      console.warn(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Object storage features will be disabled. \" +\n          \"Create a bucket in 'Object Storage' tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths) to enable object storage.\"\n      );\n      return [];\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string | null {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      console.warn(\n        \"PRIVATE_OBJECT_DIR not set. Private object storage features will be disabled. \" +\n          \"Create a bucket in 'Object Storage' tool and set PRIVATE_OBJECT_DIR env var to enable private object storage.\"\n      );\n      return null;\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: Error) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string | null> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      console.warn(\"Cannot generate upload URL: PRIVATE_OBJECT_DIR not configured\");\n      return null;\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir) {\n      throw new ObjectNotFoundError();\n    }\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir) {\n      return rawObjectPath;\n    }\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8684},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  \n  // Auto-create sessions table during setup to prevent errors\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true, // Auto-create table during fresh setup\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Detect if we're in production (Replit deployment)\n  const isProduction = process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === 'true' || !!process.env.REPLIT_DOMAINS;\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: 'auto', // Let express-session detect HTTPS automatically\n      sameSite: 'lax', // Use lax instead of none for better compatibility\n      maxAge: sessionTtl,\n      domain: undefined, // Let the browser determine the domain\n    },\n    name: 'laptoppos.session', // Custom session name\n    proxy: true, // Trust the proxy\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  // Trust proxy for Replit deployment\n  app.set(\"trust proxy\", true);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n  \n  for (const domain of domains) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n  \n  // Add localhost strategy for development\n  const localhostStrategy = new Strategy(\n    {\n      name: `replitauth:localhost`,\n      config,\n      scope: \"openid email profile offline_access\",\n      callbackURL: `https://${domains[0]}/api/callback`, // Use first domain as callback\n    },\n    verify,\n  );\n  passport.use(localhostStrategy);\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    const hostname = req.hostname;\n    const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n    \n    // Use localhost strategy for localhost, otherwise use the matching domain or first domain\n    let strategyName = `replitauth:${hostname}`;\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      strategyName = `replitauth:localhost`;\n    } else if (!domains.includes(hostname)) {\n      strategyName = `replitauth:${domains[0]}`;\n    }\n    \n    passport.authenticate(strategyName, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    const hostname = req.hostname;\n    const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n    \n    // Use localhost strategy for localhost, otherwise use the matching domain or first domain\n    let strategyName = `replitauth:${hostname}`;\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      strategyName = `replitauth:localhost`;\n    } else if (!domains.includes(hostname)) {\n      strategyName = `replitauth:${domains[0]}`;\n    }\n    \n    passport.authenticate(strategyName, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":6105},"server/routes.ts":{"content":"import type { Express, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { realtimeService } from \"./realtime\";\nimport { storage } from \"./storage\";\nimport { whatsappService } from \"./whatsappService\";\nimport QRCode from 'qrcode';\n// Conditional auth import based on environment\nimport { isAuthenticated, authenticateUser, hashPassword } from \"./auth\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\n// import htmlPdf from 'html-pdf-node';  // Removed due to Chromium dependencies issues\nimport XLSX from 'xlsx';\nimport multer from 'multer';\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, lt, desc, count, sql, isNull } from \"drizzle-orm\";\nimport {\n  products,\n  categories, \n  customers,\n  suppliers,\n  transactions,\n  transactionItems,\n  serviceTickets,\n  serviceTicketParts,\n  stockMovements,\n  purchaseOrders,\n  financialRecords,\n  storeConfig,\n  roles,\n  users,\n  employees,\n  payrollRecords,\n  attendanceRecords,\n  insertTransactionSchema,\n  insertTransactionItemSchema,\n  insertServiceTicketSchema,\n  warrantyClaims,\n  insertWarrantyClaimSchema\n} from \"@shared/schema\";\nimport { plans, clients, subscriptions, payments } from \"@shared/saas-schema\";\nimport {\n  getCurrentJakartaTime,\n  toJakartaTime,\n  formatDateForDatabase,\n  formatDateForDisplay,\n  formatDateShort,\n  parseWithTimezone,\n  getStartOfDayJakarta,\n  getEndOfDayJakarta,\n  createJakartaTimestamp,\n  createDatabaseTimestamp\n} from \"@shared/utils/timezone\";\n\n// HTML template generator for PDF reports\nfunction generateReportHTML(reportData: any, startDate: string, endDate: string): string {\n  const { salesReport, serviceReport, financialReport, inventoryReport } = reportData;\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Laporan Bisnis</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }\n        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #4F46E5; padding-bottom: 20px; }\n        .header h1 { color: #4F46E5; margin: 0; font-size: 28px; }\n        .header p { margin: 5px 0; color: #666; }\n        .period { background: #F3F4F6; padding: 15px; border-radius: 8px; margin-bottom: 25px; text-align: center; }\n        .section { margin-bottom: 30px; }\n        .section h2 { color: #4F46E5; border-bottom: 1px solid #E5E7EB; padding-bottom: 8px; }\n        .stats-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }\n        .stat-card { background: #F9FAFB; padding: 15px; border-radius: 8px; border-left: 4px solid #4F46E5; }\n        .stat-card h3 { margin: 0 0 8px 0; color: #6B7280; font-size: 14px; }\n        .stat-card .value { font-size: 24px; font-weight: bold; color: #111827; }\n        .breakdown { margin: 15px 0; }\n        .breakdown-item { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #E5E7EB; }\n        .table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n        .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #E5E7EB; }\n        .table th { background: #F9FAFB; font-weight: 600; color: #374151; }\n        .income { color: #059669; }\n        .expense { color: #DC2626; }\n        .footer { margin-top: 40px; text-align: center; color: #6B7280; font-size: 12px; border-top: 1px solid #E5E7EB; padding-top: 20px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>LaptopPOS - Laporan Bisnis</h1>\n        <p>Sistem Manajemen Penjualan & Servis Laptop</p>\n      </div>\n      \n      <div class=\"period\">\n        <strong>Periode Laporan: ${formatDateShort(startDate)} - ${formatDateShort(endDate)}</strong>\n      </div>\n      \n      <div class=\"section\">\n        <h2>📊 Ringkasan Keuangan</h2>\n        <div class=\"stats-grid\">\n          <div class=\"stat-card\">\n            <h3>Total Penjualan</h3>\n            <div class=\"value\">Rp ${Number(salesReport?.totalSales || 0).toLocaleString('id-ID')}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Omset Servis</h3>\n            <div class=\"value\">Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Total Pemasukan</h3>\n            <div class=\"value income\">Rp ${Number(financialReport?.totalIncome || 0).toLocaleString('id-ID')}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Total Pengeluaran</h3>\n            <div class=\"value expense\">Rp ${Number(financialReport?.totalExpense || 0).toLocaleString('id-ID')}</div>\n          </div>\n        </div>\n        \n        <div class=\"stat-card\" style=\"margin-top: 20px;\">\n          <h3>Laba Bersih</h3>\n          <div class=\"value income\">Rp ${Number(financialReport?.profit || 0).toLocaleString('id-ID')}</div>\n        </div>\n      </div>\n      \n      <div class=\"section\">\n        <h2>🔧 Laporan Servis</h2>\n        <div class=\"stats-grid\">\n          <div class=\"stat-card\">\n            <h3>Total Servis</h3>\n            <div class=\"value\">${serviceReport?.totalServices || 0} tiket</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Modal Parts</h3>\n            <div class=\"value expense\">Rp ${Number(serviceReport?.totalCost || 0).toLocaleString('id-ID')}</div>\n          </div>\n        </div>\n        \n        <div class=\"breakdown\">\n          <h3>Breakdown Revenue Servis:</h3>\n          <div class=\"breakdown-item\">\n            <span>Revenue Labor:</span>\n            <span class=\"income\">Rp ${Number(serviceReport?.revenueBreakdown?.laborRevenue || 0).toLocaleString('id-ID')}</span>\n          </div>\n          <div class=\"breakdown-item\">\n            <span>Revenue Parts:</span>\n            <span class=\"income\">Rp ${Number(serviceReport?.revenueBreakdown?.partsRevenue || 0).toLocaleString('id-ID')}</span>\n          </div>\n          <div class=\"breakdown-item\" style=\"font-weight: bold;\">\n            <span>Laba Servis:</span>\n            <span class=\"income\">Rp ${Number(serviceReport?.totalProfit || 0).toLocaleString('id-ID')}</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"section\">\n        <h2>📦 Laporan Inventory</h2>\n        <div class=\"stats-grid\">\n          <div class=\"stat-card\">\n            <h3>Total Produk</h3>\n            <div class=\"value\">${inventoryReport?.totalProducts || 0}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Stok Rendah</h3>\n            <div class=\"value expense\">${inventoryReport?.lowStockCount || 0}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Total Stok</h3>\n            <div class=\"value\">${inventoryReport?.totalStockQuantity || 0}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Nilai Aset</h3>\n            <div class=\"value\">Rp ${Number(inventoryReport?.totalAssetValue || 0).toLocaleString('id-ID')}</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"footer\">\n        <p>Laporan digenerate otomatis oleh LaptopPOS System pada ${formatDateForDisplay(getCurrentJakartaTime(), 'dd/MM/yyyy HH:mm:ss')}</p>\n        <p>© 2025 LaptopPOS - Sistem Manajemen Bisnis Laptop</p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\n// Additional schemas import\nimport { \n  insertProductSchema,\n  insertCustomerSchema,\n  insertSupplierSchema,\n  insertStockMovementSchema,\n  insertFinancialRecordSchema,\n  insertCategorySchema,\n  insertStoreConfigSchema,\n  insertRoleSchema,\n  insertUserSchema,\n  generateSKU,\n  generateBarcode\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Import service cancellation validation\nimport { \n  serviceCancellationSchema, \n  validateCancellationBusinessRules \n} from \"@shared/service-cancellation-schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure multer for file uploads\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      // Accept only Excel files\n      if (file.mimetype === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||\n          file.mimetype === 'application/vnd.ms-excel') {\n        cb(null, true);\n      } else {\n        cb(new Error('Only Excel files are allowed!') as any, false);\n      }\n    }\n  });\n\n  // Auth middleware\n  // Always use local authentication for universal deployment compatibility\n  const { setupAuth } = await import('./auth');\n  await setupAuth(app);\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: 'Username and password are required' });\n      }\n\n      const user = await authenticateUser({ username, password });\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid username or password' });\n      }\n\n      // Store user in session\n      req.session.user = user;\n      \n      res.json({ user, message: 'Login successful' });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: 'Failed to logout' });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: 'Logout successful' });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // User is already available in session\n      res.json(req.session.user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports API endpoints\n  app.get('/api/reports/sales/:startDate/:endDate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const start = getStartOfDayJakarta(parseWithTimezone(startDate, false));\n      const end = getEndOfDayJakarta(parseWithTimezone(endDate, false));\n      \n      const report = await storage.getSalesReport(start, end);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching sales report:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales report\" });\n    }\n  });\n\n  app.get('/api/reports/services/:startDate/:endDate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const start = getStartOfDayJakarta(parseWithTimezone(startDate, false));\n      const end = getEndOfDayJakarta(parseWithTimezone(endDate, false));\n      \n      const report = await storage.getServiceReport(start, end);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching service report:\", error);\n      res.status(500).json({ message: \"Failed to fetch service report\" });\n    }\n  });\n\n  app.get('/api/reports/financial/:startDate/:endDate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const start = getStartOfDayJakarta(parseWithTimezone(startDate, false));\n      const end = getEndOfDayJakarta(parseWithTimezone(endDate, false));\n      \n      const report = await storage.getFinancialReport(start, end);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching financial report:\", error);\n      res.status(500).json({ message: \"Failed to fetch financial report\" });\n    }\n  });\n\n  app.get('/api/reports/inventory', isAuthenticated, async (req, res) => {\n    try {\n      const report = await storage.getInventoryReport();\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching inventory report:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory report\" });\n    }\n  });\n\n  // Damaged goods report - Get damaged items from warranty returns\n  app.get('/api/reports/damaged-goods', isAuthenticated, async (req: any, res) => {\n    try {\n      // Get client ID from authenticated session for multi-tenant security\n      const clientId = req.tenant?.clientId || req.session?.user?.clientId || null;\n      \n      // Build where conditions for multi-tenant filtering\n      const whereConditions = [\n        eq(stockMovements.referenceType, 'warranty_return_damaged'),\n        // Multi-tenant filtering\n        clientId ? eq(stockMovements.clientId, clientId) : isNull(stockMovements.clientId)\n      ];\n      \n      // Get damaged goods with product details and original transaction info\n      const damagedGoods = await db\n        .select({\n          id: stockMovements.id,\n          productId: stockMovements.productId,\n          productName: products.name,\n          productSku: products.sku,\n          quantity: stockMovements.quantity,\n          unitPrice: sql<string>`\n            COALESCE(\n              (SELECT unit_price FROM transaction_items WHERE transaction_id = ${stockMovements.referenceId} AND product_id = ${stockMovements.productId} LIMIT 1),\n              ${products.sellingPrice}\n            )\n          `,\n          totalValue: sql<string>`\n            ${stockMovements.quantity} * COALESCE(\n              (SELECT unit_price FROM transaction_items WHERE transaction_id = ${stockMovements.referenceId} AND product_id = ${stockMovements.productId} LIMIT 1),\n              ${products.sellingPrice}\n            )\n          `,\n          originalTransactionNumber: sql<string>`\n            COALESCE(${transactions.transactionNumber}, 'TXN-' || substr(${stockMovements.referenceId}, 1, 8))\n          `,\n          customerName: sql<string>`\n            COALESCE(${customers.name}, 'Customer')\n          `,\n          damagedDate: stockMovements.createdAt,\n          notes: stockMovements.notes,\n        })\n        .from(stockMovements)\n        .leftJoin(products, and(\n          eq(stockMovements.productId, products.id),\n          clientId ? eq(products.clientId, clientId) : isNull(products.clientId)\n        ))\n        .leftJoin(transactions, and(\n          eq(stockMovements.referenceId, transactions.id),\n          clientId ? eq(transactions.clientId, clientId) : isNull(transactions.clientId)\n        ))\n        .leftJoin(customers, and(\n          eq(transactions.customerId, customers.id),\n          clientId ? eq(customers.clientId, clientId) : isNull(customers.clientId)\n        ))\n        .where(and(...whereConditions))\n        .orderBy(desc(stockMovements.createdAt));\n      \n      // Calculate total value of damaged goods\n      const totalDamagedValue = damagedGoods.reduce((sum, item) => {\n        return sum + Number(item.totalValue || 0);\n      }, 0);\n      \n      res.json({\n        damagedGoods,\n        totalDamagedValue,\n        totalItems: damagedGoods.length\n      });\n    } catch (error) {\n      console.error('Error fetching damaged goods report:', error);\n      res.status(500).json({ message: 'Failed to fetch damaged goods report' });\n    }\n  });\n\n  // TEMP DEBUG ENDPOINT (No auth for debugging)\n  app.get('/api/debug/stock-movements', async (req: any, res) => {\n    try {\n      console.log('🔍 DEBUG ENDPOINT: Stock movements debugging...');\n      \n      // Test 1: Count all records\n      const allRecords = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(stockMovements);\n      console.log('🔍 Total records in stock_movements:', allRecords[0]?.count || 0);\n      \n      // Test 2: Count records with null clientId only\n      const nullClientRecords = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(stockMovements)\n        .where(isNull(stockMovements.clientId));\n      console.log('🔍 Records with null clientId:', nullClientRecords[0]?.count || 0);\n      \n      // Test 3: Get actual data with null clientId\n      const actualData = await db\n        .select()\n        .from(stockMovements)\n        .where(isNull(stockMovements.clientId))\n        .limit(10);\n      console.log('🔍 Sample records with null clientId:', actualData.length);\n      \n      return res.json({\n        totalRecords: allRecords[0]?.count || 0,\n        nullClientRecords: nullClientRecords[0]?.count || 0,\n        sampleData: actualData\n      });\n    } catch (error) {\n      console.error('🔍 DEBUG ERROR:', error);\n      return res.status(500).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Stock movements report - Clean implementation\n  app.get('/api/reports/stock-movements', isAuthenticated, async (req: any, res) => {\n    try {\n      // Get client ID from authenticated session for multi-tenant security\n      const clientId = req.tenant?.clientId || req.session?.user?.clientId || null;\n      \n      // Build where conditions for multi-tenant filtering ONLY \n      const whereConditions = [\n        // Multi-tenant filtering - filter by clientId if in multi-tenant mode\n        // In single-tenant mode (clientId is null), show all records with null clientId\n        clientId ? eq(stockMovements.clientId, clientId) : isNull(stockMovements.clientId)\n      ].filter(Boolean);\n      \n      // Get stock movements with product names and readable references\n      const movementData = await db\n        .select({\n          id: stockMovements.id,\n          productId: stockMovements.productId,\n          productName: products.name,\n          movementType: stockMovements.movementType, // Frontend expects 'movementType'\n          quantity: stockMovements.quantity,\n          unitCost: stockMovements.unitCost,\n          referenceType: stockMovements.referenceType,\n          reference: sql<string>`\n            CASE \n              WHEN ${stockMovements.referenceType} = 'purchase' THEN 'PO#' || COALESCE(${purchaseOrders.poNumber}, substr(${stockMovements.referenceId}, 1, 8))\n              WHEN ${stockMovements.referenceType} = 'sale' THEN 'Penjualan #' || COALESCE(${transactions.transactionNumber}, substr(${stockMovements.referenceId}, 1, 8))\n              WHEN ${stockMovements.referenceType} = 'service' THEN 'Servis #' || COALESCE(${serviceTickets.ticketNumber}, substr(${stockMovements.referenceId}, 1, 8))\n              WHEN ${stockMovements.referenceType} = 'adjustment' THEN 'Penyesuaian #' || substr(${stockMovements.referenceId}, 1, 8)\n              WHEN ${stockMovements.referenceType} = 'return' THEN 'Retur #' || substr(${stockMovements.referenceId}, 1, 8)\n              ELSE 'Ref #' || substr(${stockMovements.referenceId}, 1, 8)\n            END\n          `,\n          notes: stockMovements.notes,\n          createdAt: stockMovements.createdAt,\n          userName: sql<string>`'Admin'`, // Add userName field\n        })\n        .from(stockMovements)\n        .leftJoin(products, and(\n          eq(stockMovements.productId, products.id),\n          // Add clientId filtering to joined tables for complete tenant isolation\n          clientId ? eq(products.clientId, clientId) : isNull(products.clientId)\n        ))\n        .leftJoin(purchaseOrders, and(\n          eq(stockMovements.referenceId, purchaseOrders.id),\n          clientId ? eq(purchaseOrders.clientId, clientId) : isNull(purchaseOrders.clientId)\n        ))\n        .leftJoin(transactions, and(\n          eq(stockMovements.referenceId, transactions.id),\n          clientId ? eq(transactions.clientId, clientId) : isNull(transactions.clientId)\n        ))\n        .leftJoin(serviceTickets, and(\n          eq(stockMovements.referenceId, serviceTickets.id),\n          clientId ? eq(serviceTickets.clientId, clientId) : isNull(serviceTickets.clientId)\n        ))\n        .where(whereConditions.length > 0 ? and(...whereConditions) : undefined)\n        .orderBy(desc(stockMovements.createdAt));\n      \n      // Frontend expects { movements: [...] } structure\n      res.json({ movements: movementData });\n    } catch (error) {\n      console.error('Error fetching stock movements:', error);\n      res.status(500).json({ message: 'Failed to fetch stock movements' });\n    }\n  });\n\n  // Export XLSX endpoint\n  app.post('/api/reports/export-xlsx', isAuthenticated, async (req, res) => {\n    try {\n      console.log('XLSX export request received');\n      const { startDate, endDate } = req.body;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      // Fetch fresh data from database instead of using cached client data\n      const start = getStartOfDayJakarta(parseWithTimezone(startDate, false));\n      const end = getEndOfDayJakarta(parseWithTimezone(endDate, false));\n      \n      const salesReport = await storage.getSalesReport(start, end);\n      const serviceReport = await storage.getServiceReport(start, end);\n      const financialReport = await storage.getFinancialReport(start, end);\n      const inventoryReport = await storage.getInventoryReport();\n      \n      // Create workbook\n      const wb = XLSX.utils.book_new();\n      \n      // No need for additional DB query, we'll use financialReport.records\n\n      // Overview sheet\n      const overviewData = [\n        ['Laporan Bisnis LaptopPOS'],\n        ['Periode', `${formatDateShort(startDate)} - ${formatDateShort(endDate)}`],\n        [],\n        ['Ringkasan Keuangan'],\n        ['Total Penjualan', Number(salesReport?.totalSales || 0)],\n        ['Omset Servis', Number(serviceReport?.totalRevenue || 0)],\n        ['Total Pemasukan', Number(financialReport?.totalIncome || 0)],\n        ['Total Pengeluaran', Number(financialReport?.totalExpense || 0)],\n        ['Laba Bersih', Number(financialReport?.profit || 0)],\n        []\n      ];\n\n      // Add expense breakdown section\n      if (financialReport?.records && financialReport.records.length > 0) {\n        // Group expenses by category\n        const expensesByCategory = financialReport.records\n          .filter((record: any) => record.type === 'expense')\n          .reduce((acc: any, record: any) => {\n            const category = record.category || 'Lainnya';\n            acc[category] = (acc[category] || 0) + Number(record.amount || 0);\n            return acc;\n          }, {});\n\n        overviewData.push(['Detail Pengeluaran']);\n        Object.entries(expensesByCategory).forEach(([category, amount]) => {\n          overviewData.push([`  ${category}`, Number(amount)]);\n        });\n        overviewData.push([]);\n      }\n\n      // Add service and inventory data\n      overviewData.push(\n        ['Laporan Servis'],\n        ['Total Servis', serviceReport?.totalServices || 0],\n        ['Revenue Labor', Number(serviceReport?.revenueBreakdown?.laborRevenue || 0)],\n        ['Revenue Parts', Number(serviceReport?.revenueBreakdown?.partsRevenue || 0)],\n        ['Modal Parts', Number(serviceReport?.totalCost || 0)],\n        ['Laba Servis', Number(serviceReport?.totalProfit || 0)],\n        [],\n        ['Laporan Inventory'],\n        ['Total Produk', inventoryReport?.totalProducts || 0],\n        ['Stok Rendah', inventoryReport?.lowStockCount || 0],\n        ['Total Stok', inventoryReport?.totalStockQuantity || 0],\n        ['Nilai Aset', Number(inventoryReport?.totalAssetValue || 0)]\n      );\n      \n      const ws = XLSX.utils.aoa_to_sheet(overviewData);\n      XLSX.utils.book_append_sheet(wb, ws, 'Overview');\n      \n      // Generate buffer\n      const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n      \n      console.log('XLSX generated successfully, size:', buffer.length);\n      \n      // Set headers and send file\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"laporan-bisnis-${startDate}-${endDate}.xlsx\"`);\n      res.setHeader('Content-Length', buffer.length);\n      \n      res.send(buffer);\n    } catch (error) {\n      console.error(\"Error exporting XLSX:\", error);\n      res.status(500).json({ \n        message: \"Failed to export XLSX\", \n        error: (error as Error).message \n      });\n    }\n  });\n\n  // Export PDF endpoint\n  app.post('/api/reports/export-pdf', isAuthenticated, async (req, res) => {\n    try {\n      console.log('PDF export request received');\n      const { startDate, endDate } = req.body;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      // Fetch fresh data from database instead of using cached client data\n      const start = getStartOfDayJakarta(parseWithTimezone(startDate, false));\n      const end = getEndOfDayJakarta(parseWithTimezone(endDate, false));\n      \n      const salesReport = await storage.getSalesReport(start, end);\n      const serviceReport = await storage.getServiceReport(start, end);\n      const financialReport = await storage.getFinancialReport(start, end);\n      const inventoryReport = await storage.getInventoryReport();\n      \n      const reportData = { salesReport, serviceReport, financialReport, inventoryReport };\n      \n      console.log('Generating HTML content...');\n      // Generate HTML template for PDF\n      const htmlContent = generateReportHTML(reportData, startDate, endDate);\n      \n      console.log('Generating PDF...');\n      // For now, return HTML version with PDF styling  \n      // Client-side PDF generation will be handled by jsPDF\n      res.setHeader('Content-Type', 'text/html');\n      res.setHeader('Content-Disposition', `inline; filename=\"laporan-bisnis-${startDate}-${endDate}.html\"`);\n      \n      // Send HTML content with PDF-optimized styling\n      res.send(htmlContent);\n    } catch (error) {\n      console.error(\"Error exporting PDF:\", error);\n      res.status(500).json({ \n        message: \"Failed to export PDF\", \n        error: (error as Error).message,\n        stack: (error as Error).stack \n      });\n    }\n  });\n\n  // Store configuration routes\n  // GET is public so app name can be displayed on login/landing pages\n  app.get('/api/store-config', async (req, res) => {\n    try {\n      const config = await storage.getStoreConfig();\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error fetching store config:\", error);\n      res.status(500).json({ message: \"Failed to fetch store config\" });\n    }\n  });\n\n  app.post('/api/store-config', isAuthenticated, async (req, res) => {\n    try {\n      const configData = insertStoreConfigSchema.parse(req.body);\n      const config = await storage.upsertStoreConfig(configData);\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error updating store config:\", error);\n      res.status(500).json({ message: \"Failed to update store config\" });\n    }\n  });\n\n  // Add PATCH method for store config updates\n  app.patch('/api/store-config', isAuthenticated, async (req, res) => {\n    try {\n      const configData = insertStoreConfigSchema.parse(req.body);\n      const config = await storage.upsertStoreConfig(configData);\n      res.json(config);\n    } catch (error: any) {\n      console.error(\"Error updating store config:\", error);\n      if (error.issues) {\n        console.error(\"Zod validation errors:\", error.issues);\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.issues \n        });\n      }\n      res.status(500).json({ message: \"Failed to update store config\" });\n    }\n  });\n\n  // Category routes\n  app.get('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', isAuthenticated, async (req, res) => {\n    try {\n      const { search } = req.query;\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/low-stock', isAuthenticated, async (req, res) => {\n    try {\n      const products = await storage.getLowStockProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching low stock products:\", error);\n      res.status(500).json({ message: \"Failed to fetch low stock products\" });\n    }\n  });\n\n  // Product Excel Template route - MUST be before /:id route to avoid route conflict\n  app.get('/api/products/template', isAuthenticated, async (req, res) => {\n    try {\n      // Create Excel template with product columns\n      const templateData = [\n        ['name', 'sku', 'brand', 'model', 'sellingPrice', 'stock', 'minStock', 'unit', 'specifications']\n      ];\n      \n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.aoa_to_sheet(templateData);\n      \n      // Set column widths for better readability\n      worksheet['!cols'] = [\n        { width: 25 }, // name\n        { width: 20 }, // sku\n        { width: 15 }, // brand\n        { width: 15 }, // model\n        { width: 15 }, // sellingPrice\n        { width: 10 }, // stock\n        { width: 12 }, // minStock\n        { width: 10 }, // unit\n        { width: 30 }  // specifications\n      ];\n      \n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Products');\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n      \n      res.setHeader('Content-Disposition', 'attachment; filename=product-template.xlsx');\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.send(excelBuffer);\n    } catch (error) {\n      console.error(\"Error generating product template:\", error);\n      res.status(500).json({ message: \"Failed to generate product template\" });\n    }\n  });\n\n  app.get('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, async (req: any, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const productWithCodes = {\n        ...productData,\n        sku: generateSKU(),\n        barcode: generateBarcode(),\n      };\n      const product = await storage.createProduct(productWithCodes);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'products',\n        action: 'create',\n        data: product\n      });\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'products',\n        action: 'update',\n        data: product,\n        id: req.params.id\n      });\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'products',\n        action: 'delete',\n        id: req.params.id\n      });\n      \n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Specialized pricing management endpoint\n  app.patch('/api/products/:id/pricing', isAuthenticated, async (req: any, res) => {\n    try {\n      const { sellingPrice, marginPercent } = req.body;\n      \n      // Calculate margin percentage if selling price provided\n      let updateData: any = {};\n      if (sellingPrice) updateData.sellingPrice = sellingPrice;\n      if (marginPercent) updateData.marginPercent = marginPercent;\n      \n      const product = await storage.updateProduct(req.params.id, updateData);\n      \n      // Return updated product with current HPP info\n      const currentHPP = await storage.getAveragePurchasePrice(req.params.id);\n      const updatedProduct = await storage.getProductById(req.params.id);\n      \n      // Broadcast real-time update for product pricing changes\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'products',\n        action: 'update',\n        data: updatedProduct,\n        id: req.params.id\n      });\n      \n      res.json({\n        ...updatedProduct,\n        currentHPP: currentHPP\n      });\n    } catch (error) {\n      console.error(\"Error updating product pricing:\", error);\n      res.status(500).json({ message: \"Failed to update product pricing\" });\n    }\n  });\n\n  // Product Excel Import/Export routes\n  app.post('/api/products/import', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ \n          success: false, \n          message: \"No file uploaded\",\n          imported: 0,\n          failed: 0,\n          errors: []\n        });\n      }\n\n      // Get client ID from authenticated session for multi-tenant security\n      const clientId = req.session?.user?.clientId || null;\n\n      // Parse Excel file\n      const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      \n      // Convert to JSON array\n      const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      if (rawData.length < 2) {\n        return res.status(400).json({ \n          success: false,\n          message: \"Excel file must contain header row and at least one data row\",\n          imported: 0,\n          failed: 0,\n          errors: []\n        });\n      }\n\n      const headers = rawData[0] as string[];\n      const dataRows = rawData.slice(1);\n\n      // Validate headers\n      const expectedHeaders = ['name', 'sku', 'brand', 'model', 'sellingPrice', 'stock', 'minStock', 'unit', 'specifications'];\n      const headerMap: Record<string, number> = {};\n      \n      for (const expectedHeader of expectedHeaders) {\n        const headerIndex = headers.findIndex(h => h?.toString().toLowerCase().trim() === expectedHeader.toLowerCase());\n        if (headerIndex === -1 && ['name', 'sku'].includes(expectedHeader)) {\n          return res.status(400).json({ \n            totalRows: dataRows.length,\n            successCount: 0,\n            errorCount: 0,\n            errors: [{ row: 0, message: `Required column '${expectedHeader}' not found in Excel file`, field: expectedHeader }]\n          });\n        }\n        headerMap[expectedHeader] = headerIndex;\n      }\n\n      const results = {\n        totalRows: dataRows.length,\n        successCount: 0,\n        errorCount: 0,\n        errors: [] as Array<{ row: number; message: string; field?: string }>\n      };\n\n      // Enhanced Zod schema with type coercion\n      const enhancedProductSchema = insertProductSchema.extend({\n        sellingPrice: z.coerce.string().optional(),\n        stock: z.coerce.number().int().min(0).optional(),\n        minStock: z.coerce.number().int().min(0).optional(),\n        clientId: z.string().nullable().optional()\n      });\n\n      // Check for existing SKUs to handle duplicates\n      const existingProducts = await storage.getProducts();\n      const existingSKUs = new Set(existingProducts.map(p => p.sku));\n\n      // Begin database transaction for data integrity\n      const successfulProducts = [];\n\n      // Process each row\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i] as any[];\n        const rowNumber = i + 2; // +2 because Excel rows start at 1 and we skip header\n        \n        try {\n          // Skip completely empty rows\n          if (row.every(cell => !cell || cell.toString().trim() === '')) {\n            continue;\n          }\n\n          // Extract data from row\n          const name = row[headerMap.name]?.toString().trim();\n          const sku = row[headerMap.sku]?.toString().trim();\n          const brand = row[headerMap.brand]?.toString().trim() || null;\n          const model = row[headerMap.model]?.toString().trim() || null;\n          const sellingPrice = row[headerMap.sellingPrice]?.toString().trim();\n          const stock = row[headerMap.stock]?.toString().trim();\n          const minStock = row[headerMap.minStock]?.toString().trim();\n          const unit = row[headerMap.unit]?.toString().trim() || 'pcs';\n          const specifications = row[headerMap.specifications]?.toString().trim() || null;\n\n          // Validate required fields\n          if (!name) {\n            results.errors.push({ row: rowNumber, message: \"Name is required\", field: \"name\" });\n            results.errorCount++;\n            continue;\n          }\n\n          if (!sku) {\n            results.errors.push({ row: rowNumber, message: \"SKU is required\", field: \"sku\" });\n            results.errorCount++;\n            continue;\n          }\n\n          // Check for duplicate SKU\n          if (existingSKUs.has(sku)) {\n            results.errors.push({ row: rowNumber, message: `SKU '${sku}' already exists`, field: \"sku\" });\n            results.errorCount++;\n            continue;\n          }\n\n          // Parse stock quantity first to use for calculations\n          let stockQuantity = 0;\n          if (stock && stock.trim() !== '') {\n            const parsedStock = parseInt(stock);\n            if (!isNaN(parsedStock) && parsedStock >= 0) {\n              stockQuantity = parsedStock;\n            }\n          }\n\n          let minStockQuantity = 0;\n          if (minStock && minStock.trim() !== '') {\n            const parsedMinStock = parseInt(minStock);\n            if (!isNaN(parsedMinStock) && parsedMinStock >= 0) {\n              minStockQuantity = parsedMinStock;\n            }\n          }\n\n          // Create product data with multi-tenant security and all required fields\n          const productData: any = {\n            name,\n            sku,\n            brand: brand || undefined,\n            model: model || undefined,\n            unit,\n            specifications: specifications || undefined,\n            clientId, // CRITICAL: Add clientId for multi-tenant security\n            // Stock management - ensure all required fields are set\n            stock: stockQuantity,\n            totalStock: stockQuantity,\n            availableStock: stockQuantity,\n            reservedStock: 0,\n            minStock: minStockQuantity,\n          };\n\n          // Parse pricing fields with proper coercion\n          if (sellingPrice && sellingPrice.trim() !== '') {\n            const parsedPrice = parseFloat(sellingPrice);\n            if (!isNaN(parsedPrice) && parsedPrice >= 0) {\n              productData.sellingPrice = parsedPrice.toString();\n            }\n          }\n\n          // Validate with enhanced schema\n          const validatedData = enhancedProductSchema.parse(productData);\n          \n          // Add auto-generated barcode if not provided and ensure all required fields\n          const productWithCodes = {\n            ...validatedData,\n            barcode: generateBarcode(),\n            sellingPrice: validatedData.sellingPrice || '0',\n            sku: sku || generateSKU(),\n            minStock: validatedData.minStock || 0,\n            stock: validatedData.stock || 0,\n          };\n\n          // Add to successful products list for transaction\n          successfulProducts.push(productWithCodes);\n          existingSKUs.add(sku); // Add to set to prevent duplicates within the same import\n\n        } catch (error) {\n          console.error(`Error processing row ${rowNumber}:`, error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          results.errors.push({ row: rowNumber, message: errorMessage });\n          results.errorCount++;\n        }\n      }\n\n      // Create all products in a transaction-safe manner\n      try {\n        for (const productData of successfulProducts) {\n          await storage.createProduct(productData);\n          results.successCount++;\n        }\n      } catch (error) {\n        console.error(\"Error during bulk product creation:\", error);\n        return res.status(500).json({ \n          totalRows: results.totalRows,\n          successCount: 0,\n          errorCount: results.totalRows,\n          errors: [{ row: 0, message: \"Database transaction failed\" }]\n        });\n      }\n\n      // Broadcast real-time update for imported products\n      realtimeService.broadcastToTenant(req.tenant?.id || clientId, {\n        resource: 'products',\n        action: 'create',\n        data: { imported: results.successCount }\n      });\n\n      res.json({\n        totalRows: results.totalRows,\n        successCount: results.successCount,\n        errorCount: results.errorCount,\n        errors: results.errors\n      });\n\n    } catch (error) {\n      console.error(\"Error importing products:\", error);\n      res.status(500).json({ \n        totalRows: 0,\n        successCount: 0,\n        errorCount: 0,\n        errors: [{ row: 0, message: \"Server error during import\" }]\n      });\n    }\n  });\n\n  // Location routes\n  app.get('/api/locations', isAuthenticated, async (req, res) => {\n    try {\n      const locations = await storage.getLocations();\n      res.json(locations);\n    } catch (error) {\n      console.error(\"Error fetching locations:\", error);\n      res.status(500).json({ message: \"Failed to fetch locations\" });\n    }\n  });\n\n  app.post('/api/locations', isAuthenticated, async (req, res) => {\n    try {\n      const locationData = req.body; // Create proper schema later\n      const location = await storage.createLocation(locationData);\n      res.json(location);\n    } catch (error) {\n      console.error(\"Error creating location:\", error);\n      res.status(500).json({ message: \"Failed to create location\" });\n    }\n  });\n\n  // Purchase Order routes\n  app.get('/api/purchase-orders', isAuthenticated, async (req, res) => {\n    try {\n      const orders = await storage.getPurchaseOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching purchase orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchase orders\" });\n    }\n  });\n\n  // Get ALL outstanding items from ALL purchase orders (for reports) - MUST be before /:id routes\n  app.get('/api/purchase-orders/outstanding-items', isAuthenticated, async (req, res) => {\n    try {\n      const outstandingItems = await storage.getAllOutstandingItems();\n      res.json(outstandingItems);\n    } catch (error) {\n      console.error(\"Error fetching outstanding items:\", error);\n      res.status(500).json({ message: \"Failed to fetch outstanding items\" });\n    }\n  });\n\n  app.get('/api/purchase-orders/:id', isAuthenticated, async (req, res) => {\n    try {\n      const order = await storage.getPurchaseOrderById(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Purchase order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching purchase order:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchase order\" });\n    }\n  });\n\n  app.post('/api/purchase-orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const { items, ...poData } = req.body;\n      \n      console.log('Purchase Order Request Body:', JSON.stringify(req.body, null, 2));\n      console.log('Items received:', items);\n      console.log('PO Data received:', poData);\n      \n      // Calculate totals from items if provided\n      let subtotal = 0;\n      let taxAmount = 0;\n      let totalAmount = 0;\n      \n      if (items && items.length > 0) {\n        console.log('Processing items for calculation...');\n        subtotal = items.reduce((sum: number, item: any) => {\n          const unitCost = parseFloat(item.unitCost || item.hargaSatuan || '0');\n          const quantity = parseInt(item.quantity || item.kuantitas || '0');\n          const itemTotal = unitCost * quantity;\n          console.log(`Item: ${item.productId}, Unit Cost: ${unitCost}, Quantity: ${quantity}, Item Total: ${itemTotal}`);\n          return sum + itemTotal;\n        }, 0);\n        \n        // Calculate tax if applicable (assuming tax rate from poData or default 0%)\n        const taxRate = parseFloat(poData.taxRate || '0') / 100;\n        taxAmount = subtotal * taxRate;\n        totalAmount = subtotal + taxAmount;\n        \n        console.log(`Calculated - Subtotal: ${subtotal}, Tax: ${taxAmount}, Total: ${totalAmount}`);\n      } else {\n        console.log('No items provided, using default values');\n      }\n      \n      // Remove any null/undefined financial fields from poData to avoid override\n      const { subtotal: _, taxAmount: __, totalAmount: ___, ...cleanPoData } = poData;\n      \n      const orderData = {\n        ...cleanPoData,\n        subtotal: (subtotal || 0).toString(),\n        taxAmount: (taxAmount || 0).toString(), \n        totalAmount: (totalAmount || 0).toString(),\n        requestedBy: req.session.user.id\n      };\n      \n      console.log('Final Order Data:', JSON.stringify(orderData, null, 2));\n      \n      const order = await storage.createPurchaseOrder(orderData);\n      \n      // Create items if provided\n      if (items && items.length > 0) {\n        for (const item of items) {\n          const unitCost = parseFloat(item.unitCost || item.hargaSatuan || '0');\n          const quantity = parseInt(item.quantity || item.kuantitas || '0');\n          \n          await storage.createPurchaseOrderItem({\n            ...item,\n            purchaseOrderId: order.id,\n            orderedQuantity: quantity,\n            unitCost: unitCost.toString(),\n            totalCost: (unitCost * quantity).toString()\n          });\n        }\n      }\n      \n      // Emit real-time update for purchase order creation\n      realtimeService.broadcast({\n        resource: 'purchase_orders',\n        action: 'create',\n        data: order,\n        id: order.id\n      });\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating purchase order:\", error);\n      res.status(500).json({ message: \"Failed to create purchase order\" });\n    }\n  });\n\n  app.post('/api/purchase-orders/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const order = await storage.approvePurchaseOrder(req.params.id, req.session.user.id);\n      \n      // Emit real-time update for purchase order approval\n      realtimeService.broadcast({\n        resource: 'purchase_orders',\n        action: 'update',\n        data: order,\n        id: order.id\n      });\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error approving purchase order:\", error);\n      res.status(500).json({ message: \"Failed to approve purchase order\" });\n    }\n  });\n\n  // Purchase Order Items routes\n  app.get('/api/purchase-orders/:id/items', isAuthenticated, async (req, res) => {\n    try {\n      const items = await storage.getPurchaseOrderItems(req.params.id);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching purchase order items:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchase order items\" });\n    }\n  });\n\n  app.post('/api/purchase-orders/:id/items', isAuthenticated, async (req, res) => {\n    try {\n      const quantity = parseInt(req.body.quantity) || 1;\n      const unitCost = parseFloat(req.body.unitCost) || 0;\n      const itemData = {\n        purchaseOrderId: req.params.id,\n        productId: req.body.productId,\n        quantity: quantity, // Maps to quantity field (NOT NULL)\n        orderedQuantity: quantity, // Maps to ordered_quantity field\n        receivedQuantity: 0, // Initial received quantity is 0\n        outstandingQuantity: quantity, // Initial outstanding = quantity\n        unitCost: String(unitCost), // Maps to unit_cost (varchar)\n        totalCost: String(quantity * unitCost), // Maps to total_cost (varchar)\n        notes: req.body.notes || \"\",\n      };\n      console.log(\"Creating PO item with data:\", itemData);\n      const item = await storage.createPurchaseOrderItem(itemData);\n      \n      // Emit real-time update for item addition\n      realtimeService.broadcast({\n        resource: 'purchase_order_items',\n        action: 'create',\n        data: item,\n        id: item.id\n      });\n      \n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating purchase order item:\", error);\n      res.status(500).json({ message: \"Failed to create purchase order item\" });\n    }\n  });\n\n  // Delete purchase order item\n  app.delete('/api/purchase-orders/:poId/items/:itemId', isAuthenticated, async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      await storage.deletePurchaseOrderItem(itemId);\n      res.json({ message: \"Item berhasil dihapus\" });\n    } catch (error) {\n      console.error(\"Error deleting purchase order item:\", error);\n      res.status(500).json({ message: \"Gagal menghapus item\", error: (error as Error).message });\n    }\n  });\n\n  // Receiving routes\n  app.post('/api/purchase-orders/items/:itemId/receive', isAuthenticated, async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      const { receivedQuantity } = req.body;\n      const userId = req.session.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      console.log(\"Receiving items:\", { itemId, receivedQuantity, userId });\n      await storage.receivePurchaseOrderItem(itemId, parseInt(receivedQuantity), userId);\n      \n      // Emit real-time update for stock changes\n      realtimeService.broadcast({\n        resource: 'inventory',\n        action: 'update',\n        data: { itemId, message: 'Barang telah diterima dan stok diperbarui' },\n        id: itemId\n      });\n      \n      res.json({ message: \"Items received successfully\" });\n    } catch (error) {\n      console.error(\"Error receiving items:\", error);\n      res.status(500).json({ message: \"Failed to receive items\", error: (error as Error).message });\n    }\n  });\n\n  // Outstanding item management\n  app.post('/api/purchase-orders/items/:itemId/outstanding-status', isAuthenticated, async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      const { status, reason } = req.body;\n      const userId = req.session.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      await storage.updateOutstandingItemStatus(itemId, status, reason, userId);\n      res.json({ message: \"Outstanding status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating outstanding status:\", error);\n      res.status(500).json({ message: \"Failed to update outstanding status\", error: (error as Error).message });\n    }\n  });\n\n  // Product Batch routes\n  app.get('/api/product-batches', isAuthenticated, async (req, res) => {\n    try {\n      const { productId } = req.query;\n      const batches = await storage.getProductBatches(productId as string);\n      res.json(batches);\n    } catch (error) {\n      console.error(\"Error fetching product batches:\", error);\n      res.status(500).json({ message: \"Failed to fetch product batches\" });\n    }\n  });\n\n  app.post('/api/product-batches', isAuthenticated, async (req, res) => {\n    try {\n      const batch = await storage.createProductBatch(req.body);\n      res.json(batch);\n    } catch (error) {\n      console.error(\"Error creating product batch:\", error);\n      res.status(500).json({ message: \"Failed to create product batch\" });\n    }\n  });\n\n  // Inventory Adjustment routes\n  app.get('/api/inventory-adjustments', isAuthenticated, async (req, res) => {\n    try {\n      const adjustments = await storage.getInventoryAdjustments();\n      res.json(adjustments);\n    } catch (error) {\n      console.error(\"Error fetching inventory adjustments:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory adjustments\" });\n    }\n  });\n\n  app.post('/api/inventory-adjustments', isAuthenticated, async (req: any, res) => {\n    try {\n      const adjustmentData = {\n        ...req.body,\n        createdBy: req.session.user.id\n      };\n      const adjustment = await storage.createInventoryAdjustment(adjustmentData);\n      res.json(adjustment);\n    } catch (error) {\n      console.error(\"Error creating inventory adjustment:\", error);\n      res.status(500).json({ message: \"Failed to create inventory adjustment\" });\n    }\n  });\n\n  app.post('/api/inventory-adjustments/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const adjustment = await storage.approveInventoryAdjustment(req.params.id, req.session.user.id);\n      res.json(adjustment);\n    } catch (error) {\n      console.error(\"Error approving inventory adjustment:\", error);\n      res.status(500).json({ message: \"Failed to approve inventory adjustment\" });\n    }\n  });\n\n  // Special endpoint for handling refunded goods that arrived\n  app.post('/api/purchase-orders/:poId/receive-refunded-item', isAuthenticated, async (req: any, res) => {\n    try {\n      const { poId } = req.params;\n      const { itemId, quantityReceived, unitCost, reason } = req.body;\n      const userId = req.session.user.id;\n\n      // Get the item details and current PO\n      const poItems = await storage.getPurchaseOrderItems(poId);\n      const poItem = poItems.find(item => item.id === itemId);\n      if (!poItem) {\n        return res.status(404).json({ message: \"PO item not found\" });\n      }\n\n      // Create inventory adjustment for the refunded goods\n      const adjustmentNumber = `ADJ-REF-${Date.now()}`;\n      const adjustment = await storage.createInventoryAdjustment({\n        adjustmentNumber,\n        type: 'increase',\n        reason: `Refunded goods received - ${reason || 'Previously refunded item arrived'}`,\n        status: 'approved', // Auto-approve since it's from receiving\n        createdBy: userId,\n        approvedBy: userId,\n        approvedDate: new Date(),\n        notes: `Adjustment for refunded item from PO: ${poId}, Item: ${poItem.productName}`,\n      });\n\n      // Create adjustment item\n      await storage.createInventoryAdjustmentItem({\n        adjustmentId: adjustment.id,\n        productId: poItem.productId,\n        quantity: quantityReceived, // Add required quantity field\n        systemQuantity: 0, // Since it was refunded, system shows 0\n        actualQuantity: quantityReceived,\n        adjustmentQuantity: quantityReceived,\n        unitCost: unitCost || poItem.unitPrice,\n        totalCostImpact: (quantityReceived * parseFloat(unitCost || poItem.unitPrice)).toString(),\n        notes: `Refunded goods received: ${quantityReceived} units`,\n      });\n\n      // Update product stock - we'll create a stock movement instead\n      // The stock will be updated through the stock movement\n\n      // Create stock movement\n      await storage.createStockMovement({\n        productId: poItem.productId,\n        movementType: 'in',\n        quantity: quantityReceived,\n        unitCost: unitCost || poItem.unitPrice,\n        referenceId: adjustment.id,\n        referenceType: 'adjustment',\n        reason: 'refunded-goods-received',\n        notes: `Refunded goods received from PO: ${poId}`,\n        userId\n      });\n\n      // Create journal entry for the inventory adjustment\n      const totalValue = quantityReceived * (unitCost || poItem.unitPrice);\n      await storage.createJournalEntry({\n        journalNumber: `JE-REF-${Date.now()}`,\n        date: new Date(),\n        description: `Inventory adjustment - Refunded goods received`,\n        reference: adjustment.id,\n        referenceType: 'inventory-adjustment',\n        totalAmount: totalValue,\n        userId,\n        lines: [\n          {\n            accountCode: '1300', // Inventory account\n            description: `Inventory increase - ${poItem.productName}`,\n            debitAmount: totalValue,\n            creditAmount: 0\n          },\n          {\n            accountCode: '5200', // Cost adjustment account\n            description: `Cost adjustment - Refunded goods`,\n            debitAmount: 0,\n            creditAmount: totalValue\n          }\n        ]\n      });\n\n      // Note: PO item status will be updated when the adjustment is processed\n      // We don't need to update it here since this is a special case\n\n      res.json({ \n        message: \"Refunded goods successfully processed\",\n        adjustment,\n        totalValue,\n        quantityReceived\n      });\n    } catch (error) {\n      console.error(\"Error processing refunded goods:\", error);\n      res.status(500).json({ message: \"Failed to process refunded goods\" });\n    }\n  });\n\n  // Customer routes\n  app.get('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const { search } = req.query;\n      let customers;\n      \n      if (search) {\n        customers = await storage.searchCustomers(search as string);\n      } else {\n        customers = await storage.getCustomers();\n      }\n      \n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Customer Excel Template route - MUST be before /:id route to avoid route conflict\n  app.get('/api/customers/template', isAuthenticated, async (req, res) => {\n    try {\n      // Create Excel template with customer columns\n      const templateData = [\n        ['name', 'email', 'phone', 'address']\n      ];\n      \n      const workbook = XLSX.utils.book_new();\n      const worksheet = XLSX.utils.aoa_to_sheet(templateData);\n      \n      // Set column widths for better readability\n      worksheet['!cols'] = [\n        { width: 20 }, // name\n        { width: 25 }, // email  \n        { width: 15 }, // phone\n        { width: 30 }  // address\n      ];\n      \n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Customers');\n      \n      // Generate Excel buffer\n      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n      \n      res.setHeader('Content-Disposition', 'attachment; filename=customer-template.xlsx');\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.send(excelBuffer);\n    } catch (error) {\n      console.error(\"Error generating customer template:\", error);\n      res.status(500).json({ message: \"Failed to generate customer template\" });\n    }\n  });\n\n  app.get('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const customer = await storage.getCustomerById(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error fetching customer:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer\" });\n    }\n  });\n\n  app.post('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'customers',\n        action: 'create',\n        data: customer\n      });\n      \n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  app.put('/api/customers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'customers',\n        action: 'update',\n        data: customer,\n        id: req.params.id\n      });\n      \n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  // Customer Excel Import/Export routes\n\n  app.post('/api/customers/import', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ \n          success: false, \n          message: \"No file uploaded\",\n          imported: 0,\n          failed: 0,\n          errors: []\n        });\n      }\n\n      // Get client ID from authenticated session for multi-tenant security\n      const clientId = req.session?.user?.clientId || null;\n\n      // Parse Excel file\n      const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      \n      // Convert to JSON array\n      const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n      \n      if (rawData.length < 2) {\n        return res.status(400).json({ \n          success: false,\n          message: \"Excel file must contain header row and at least one data row\",\n          imported: 0,\n          failed: 0,\n          errors: []\n        });\n      }\n\n      const headers = rawData[0] as string[];\n      const dataRows = rawData.slice(1);\n\n      // Validate headers\n      const expectedHeaders = ['name', 'email', 'phone', 'address'];\n      const headerMap: Record<string, number> = {};\n      \n      for (const expectedHeader of expectedHeaders) {\n        const headerIndex = headers.findIndex(h => h?.toString().toLowerCase().trim() === expectedHeader);\n        if (headerIndex === -1 && expectedHeader === 'name') {\n          return res.status(400).json({ \n            success: false,\n            message: `Required column '${expectedHeader}' not found in Excel file`,\n            imported: 0,\n            failed: 0,\n            errors: []\n          });\n        }\n        headerMap[expectedHeader] = headerIndex;\n      }\n\n      const results = {\n        totalRows: dataRows.length,\n        successCount: 0,\n        errorCount: 0,\n        errors: [] as Array<{ row: number; message: string; field?: string }>\n      };\n\n      // Enhanced Zod schema with type coercion\n      const enhancedCustomerSchema = insertCustomerSchema.extend({\n        clientId: z.string().nullable().optional(),\n        email: z.string().email().optional().or(z.literal(\"\")).transform(val => val === \"\" ? undefined : val),\n        phone: z.string().optional().or(z.literal(\"\")).transform(val => val === \"\" ? undefined : val),\n        address: z.string().optional().or(z.literal(\"\")).transform(val => val === \"\" ? undefined : val)\n      });\n\n      // Check for existing customers to handle duplicates\n      const existingCustomers = await storage.getCustomers();\n      const existingEmails = new Set(existingCustomers.map(c => c.email).filter(Boolean));\n\n      // Begin database transaction for data integrity\n      const successfulCustomers = [];\n\n      // Process each row\n      for (let i = 0; i < dataRows.length; i++) {\n        const row = dataRows[i] as any[];\n        const rowNumber = i + 2; // +2 because Excel rows start at 1 and we skip header\n        \n        try {\n          // Skip completely empty rows\n          if (row.every(cell => !cell || cell.toString().trim() === '')) {\n            continue;\n          }\n\n          // Extract data from row\n          const name = row[headerMap.name]?.toString().trim();\n          const email = row[headerMap.email]?.toString().trim() || null;\n          const phone = row[headerMap.phone]?.toString().trim() || null;\n          const address = row[headerMap.address]?.toString().trim() || null;\n\n          // Validate required fields\n          if (!name) {\n            results.errors.push({ row: rowNumber, message: \"Name is required\", field: \"name\" });\n            results.errorCount++;\n            continue;\n          }\n\n          // Check for duplicate email if provided\n          if (email && existingEmails.has(email)) {\n            results.errors.push({ row: rowNumber, message: `Email '${email}' already exists`, field: \"email\" });\n            results.errorCount++;\n            continue;\n          }\n\n          // Create customer data with multi-tenant security\n          const customerData = {\n            name,\n            email: email || undefined,\n            phone: phone || undefined,\n            address: address || undefined,\n            clientId, // CRITICAL: Add clientId for multi-tenant security\n          };\n\n          // Validate with enhanced schema\n          const validatedData = enhancedCustomerSchema.parse(customerData);\n          \n          // Add to successful customers list for transaction\n          successfulCustomers.push(validatedData);\n          if (email) {\n            existingEmails.add(email); // Add to set to prevent duplicates within the same import\n          }\n\n        } catch (error) {\n          console.error(`Error processing row ${rowNumber}:`, error);\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          results.errors.push({ row: rowNumber, message: errorMessage });\n          results.errorCount++;\n        }\n      }\n\n      // Create all customers in a transaction-safe manner\n      try {\n        for (const customerData of successfulCustomers) {\n          await storage.createCustomer(customerData);\n          results.successCount++;\n        }\n      } catch (error) {\n        console.error(\"Error during bulk customer creation:\", error);\n        return res.status(500).json({ \n          totalRows: results.totalRows,\n          successCount: 0,\n          errorCount: results.totalRows,\n          errors: [{ row: 0, message: \"Database transaction failed\" }]\n        });\n      }\n\n      // Broadcast real-time update for imported customers\n      realtimeService.broadcastToTenant(req.tenant?.id || clientId, {\n        resource: 'customers',\n        action: 'create',\n        data: { imported: results.successCount }\n      });\n\n      res.json({\n        totalRows: results.totalRows,\n        successCount: results.successCount,\n        errorCount: results.errorCount,\n        errors: results.errors\n      });\n\n    } catch (error) {\n      console.error(\"Error importing customers:\", error);\n      res.status(500).json({ \n        totalRows: 0,\n        successCount: 0,\n        errorCount: 0,\n        errors: [{ row: 0, message: \"Server error during import\" }]\n      });\n    }\n  });\n\n  // Supplier routes\n  app.get('/api/suppliers', isAuthenticated, async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      console.error(\"Error fetching suppliers:\", error);\n      res.status(500).json({ message: \"Failed to fetch suppliers\" });\n    }\n  });\n\n  app.post('/api/suppliers', isAuthenticated, async (req, res) => {\n    try {\n      const supplierData = insertSupplierSchema.parse(req.body);\n      const supplier = await storage.createSupplier(supplierData);\n      res.json(supplier);\n    } catch (error) {\n      console.error(\"Error creating supplier:\", error);\n      res.status(500).json({ message: \"Failed to create supplier\" });\n    }\n  });\n\n  // Transaction routes\n  app.get('/api/transactions', isAuthenticated, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const transactions = await storage.getTransactions(limit);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get('/api/transactions/:id', isAuthenticated, async (req, res) => {\n    try {\n      const transaction = await storage.getTransactionById(req.params.id);\n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error fetching transaction:\", error);\n      res.status(500).json({ message: \"Failed to fetch transaction\" });\n    }\n  });\n\n  const createTransactionSchema = z.object({\n    transaction: insertTransactionSchema,\n    items: z.array(insertTransactionItemSchema),\n  });\n\n  app.post('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log(\"Raw request body:\", JSON.stringify(req.body, null, 2));\n      \n      const { transaction: transactionData, items } = createTransactionSchema.parse(req.body);\n      \n      console.log(\"Parsed transaction data:\", JSON.stringify(transactionData, null, 2));\n      console.log(\"Parsed items:\", JSON.stringify(items, null, 2));\n      \n      // Generate transaction number\n      const transactionNumber = `TRX-${Date.now()}`;\n      \n      // Normalize warranty dates to Date objects for database compatibility\n      const normalize = (v: any) => (v ? new Date(v) : null);\n      const normalizedData = {\n        ...transactionData,\n        warrantyStartDate: normalize(transactionData.warrantyStartDate),\n        warrantyEndDate: normalize(transactionData.warrantyEndDate)\n      };\n      \n      console.log(\"DEBUG - Warranty dates after normalization:\");\n      console.log(\"- warrantyStartDate:\", normalizedData.warrantyStartDate, \"Type:\", typeof normalizedData.warrantyStartDate);\n      console.log(\"- warrantyEndDate:\", normalizedData.warrantyEndDate, \"Type:\", typeof normalizedData.warrantyEndDate);\n      console.log(\"- Is warrantyStartDate a Date?\", normalizedData.warrantyStartDate instanceof Date);\n      console.log(\"- Is warrantyEndDate a Date?\", normalizedData.warrantyEndDate instanceof Date);\n      \n      // Add transaction number and user ID to transaction data  \n      const completeTransactionData = {\n        ...normalizedData,\n        transactionNumber,\n        userId: req.session.user?.id\n      };\n      \n      const transaction = await storage.createTransaction(\n        completeTransactionData,\n        items\n      );\n      \n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating transaction:\", error);\n      if (error instanceof Error) {\n        console.error(\"Error stack:\", error.stack);\n      }\n      res.status(500).json({ message: \"Failed to create transaction\" });\n    }\n  });\n\n  // Service Ticket routes\n  app.get('/api/service-tickets', isAuthenticated, async (req, res) => {\n    try {\n      const { active } = req.query;\n      let tickets;\n      \n      if (active === 'true') {\n        tickets = await storage.getActiveServiceTickets();\n      } else {\n        tickets = await storage.getServiceTickets();\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching service tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch service tickets\" });\n    }\n  });\n\n  app.get('/api/service-tickets/:id', isAuthenticated, async (req, res) => {\n    try {\n      const ticket = await storage.getServiceTicketById(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Service ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error fetching service ticket:\", error);\n      res.status(500).json({ message: \"Failed to fetch service ticket\" });\n    }\n  });\n\n  app.post('/api/service-tickets', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"Raw request body:\", JSON.stringify(req.body, null, 2));\n      \n      // Use proper schema validation to include warranty fields\n      const ticketData = insertServiceTicketSchema.parse(req.body);\n      \n      console.log(\"Processed ticket data:\", JSON.stringify(ticketData, null, 2));\n      \n      // Generate ticket number\n      const ticketNumber = `SVC-${Date.now()}`;\n      \n      const ticket = await storage.createServiceTicket({\n        ...ticketData,\n        ticketNumber,\n      });\n      \n      // Send WhatsApp notification for new service (async, don't block response)\n      setImmediate(async () => {\n        try {\n          const config = await storage.getStoreConfig();\n          console.log(`🔔 Service creation notification for ticket ${ticket.ticketNumber}`);\n          \n          if (config?.whatsappEnabled && whatsappService.isConnected()) {\n            console.log(`WhatsApp enabled and connected, getting customer data...`);\n            const customer = await storage.getCustomerById(ticket.customerId);\n            \n            if (customer?.phone) {\n              console.log(`Sending service creation notification to ${customer.phone}...`);\n              await whatsappService.sendServiceCreatedNotification(\n                customer.phone,\n                ticket,\n                customer,\n                config\n              );\n            } else {\n              console.log('No phone number for customer, skipping WhatsApp notification');\n            }\n          } else {\n            console.log('WhatsApp not enabled or not connected, skipping notification');\n          }\n        } catch (error) {\n          console.error('Error sending WhatsApp notification for new service:', error);\n        }\n      });\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error creating service ticket:\", error);\n      res.status(500).json({ message: \"Failed to create service ticket\" });\n    }\n  });\n\n  app.put('/api/service-tickets/:id', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"Raw update body:\", JSON.stringify(req.body, null, 2));\n      \n      // Manual validation and transformation for update\n      const { customerId, deviceType, deviceBrand, deviceModel, serialNumber, completeness, problem, diagnosis, solution, status, technicianId, estimatedCost, laborCost, parts, warrantyDuration, warrantyStartDate, warrantyEndDate } = req.body;\n      \n      const ticketData: any = {};\n      \n      if (customerId !== undefined) ticketData.customerId = customerId;\n      if (deviceType !== undefined) ticketData.deviceType = deviceType;\n      if (deviceBrand !== undefined) ticketData.deviceBrand = deviceBrand || null;\n      if (deviceModel !== undefined) ticketData.deviceModel = deviceModel || null;\n      if (serialNumber !== undefined) ticketData.serialNumber = serialNumber || null;\n      if (completeness !== undefined) ticketData.completeness = completeness || null;\n      if (problem !== undefined) ticketData.problem = problem;\n      if (diagnosis !== undefined) ticketData.diagnosis = diagnosis || null;\n      if (solution !== undefined) ticketData.solution = solution || null;\n      if (status !== undefined) ticketData.status = status;\n      if (technicianId !== undefined) ticketData.technicianId = technicianId || null;\n      if (estimatedCost !== undefined) ticketData.estimatedCost = estimatedCost ? String(estimatedCost) : null;\n      if (laborCost !== undefined) ticketData.laborCost = laborCost ? String(laborCost) : null;\n      \n      // Handle warranty fields with proper Date conversion\n      if (warrantyDuration !== undefined) ticketData.warrantyDuration = warrantyDuration;\n      if (warrantyStartDate !== undefined) {\n        ticketData.warrantyStartDate = warrantyStartDate ? new Date(warrantyStartDate) : null;\n      }\n      if (warrantyEndDate !== undefined) {\n        ticketData.warrantyEndDate = warrantyEndDate ? new Date(warrantyEndDate) : null;\n      }\n      \n      console.log(\"Processed update data:\", JSON.stringify(ticketData, null, 2));\n      \n      // Get old ticket for status comparison\n      const oldTicket = await storage.getServiceTicketById(req.params.id);\n      const userId = req.session.user?.id;\n      \n      console.log(\"Session data:\", { \n        sessionExists: !!req.session, \n        userExists: !!req.session.user, \n        userId: userId,\n        sessionId: req.sessionID \n      });\n      \n      if (!userId) {\n        console.error(\"No user ID in session for service ticket update\");\n        return res.status(401).json({ message: \"User session invalid. Please login again.\" });\n      }\n      \n      const ticket = await storage.updateServiceTicket(req.params.id, ticketData, parts, userId);\n      \n      // Send WhatsApp notification for status change (async, don't block response)\n      if (status !== undefined && oldTicket && status !== oldTicket.status) {\n        setImmediate(async () => {\n          try {\n            const config = await storage.getStoreConfig();\n            console.log(`🔄 Status update notification for ticket ${ticket.ticketNumber}: ${oldTicket.status} → ${status}`);\n            \n            if (config?.whatsappEnabled && whatsappService.isConnected()) {\n              console.log(`WhatsApp enabled and connected, getting customer data...`);\n              const customer = await storage.getCustomerById(ticket.customerId);\n              \n              if (customer?.phone) {\n                console.log(`Sending status update notification to ${customer.phone}...`);\n                await whatsappService.sendServiceStatusNotification(\n                  customer.phone,\n                  ticket,\n                  customer,\n                  config\n                );\n              } else {\n                console.log('No phone number for customer, skipping WhatsApp status notification');\n              }\n            } else {\n              console.log('WhatsApp not enabled or not connected, skipping status notification');\n            }\n          } catch (error) {\n            console.error('Error sending WhatsApp notification for status change:', error);\n          }\n        });\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error updating service ticket:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to update service ticket\" });\n    }\n  });\n\n  // Delete service ticket\n  app.delete('/api/service-tickets/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteServiceTicket(id);\n      res.json({ message: \"Service ticket deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting service ticket:\", error);\n      res.status(500).json({ message: \"Failed to delete service ticket\" });\n    }\n  });\n\n  // Cancel service ticket with 3 different scenarios - Enhanced with Zod validation\n  app.post('/api/service-tickets/:id/cancel', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Zod validation for request body\n      const validationResult = serviceCancellationSchema.safeParse({\n        ...req.body,\n        userId: req.session.user.id\n      });\n      \n      if (!validationResult.success) {\n        const errorMessages = validationResult.error.errors.map(err => err.message);\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: errorMessages \n        });\n      }\n      \n      const { cancellationFee, cancellationReason, cancellationType } = validationResult.data;\n\n      // Get service ticket for business rule validation\n      const existingTicket = await storage.getServiceTicketById(id);\n      if (!existingTicket) {\n        return res.status(404).json({ message: \"Service ticket not found\" });\n      }\n\n      // Business rule validation\n      const ticketValidation = await validateCancellationBusinessRules.validateTicketEligibility(id, existingTicket);\n      if (!ticketValidation.isValid) {\n        return res.status(400).json({ \n          message: \"Business rule validation failed\", \n          errors: ticketValidation.errors \n        });\n      }\n\n      // Warranty specific validation\n      if (cancellationType === 'warranty_refund') {\n        const warrantyValidation = await validateCancellationBusinessRules.validateWarrantyEligibility(id, existingTicket);\n        if (!warrantyValidation.isValid) {\n          return res.status(400).json({ \n            message: \"Warranty validation failed\", \n            errors: warrantyValidation.errors \n          });\n        }\n      }\n\n      // Status-specific validation based on cancellation type  \n      if (cancellationType === 'after_completed' && existingTicket.status !== 'completed' && existingTicket.status !== 'delivered') {\n        return res.status(400).json({ \n          message: \"Cannot cancel with 'after_completed' type - service ticket is not completed\" \n        });\n      }\n      \n      if (cancellationType === 'warranty_refund' && existingTicket.status !== 'warranty_claim') {\n        if (existingTicket.status !== 'completed' && existingTicket.status !== 'delivered') {\n          return res.status(400).json({ \n            message: \"Cannot cancel with 'warranty_refund' type - service ticket must be completed or under warranty claim\" \n          });\n        }\n      }\n\n      // Execute cancellation\n      const result = await storage.cancelServiceTicket(id, {\n        cancellationFee: cancellationFee,\n        cancellationReason: cancellationReason,\n        cancellationType,\n        userId: req.session.user.id\n      });\n\n      if (!result.success) {\n        return res.status(400).json({ message: result.message || \"Failed to cancel service ticket\" });\n      }\n\n      // Broadcast realtime update\n      realtimeService.broadcastToTenant(undefined, {\n        resource: 'service-tickets',\n        action: 'update',\n        data: { id, cancellationType, reason: cancellationReason },\n        id: id\n      });\n\n      res.json({ \n        message: result.message || \"Service ticket cancelled successfully\",\n        success: true,\n        cancellationType,\n        cancellationFee: parseFloat(cancellationFee)\n      });\n\n    } catch (error) {\n      console.error(\"Error cancelling service ticket:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to cancel service ticket\" \n      });\n    }\n  });\n\n  // Get parts for a service ticket\n  app.get('/api/service-tickets/:id/parts', isAuthenticated, async (req, res) => {\n    try {\n      const parts = await storage.getServiceTicketParts(req.params.id);\n      res.json(parts);\n    } catch (error) {\n      console.error(\"Error fetching service ticket parts:\", error);\n      res.status(500).json({ message: \"Failed to fetch service ticket parts\" });\n    }\n  });\n\n  // Stock Movement routes\n  app.get('/api/stock-movements', isAuthenticated, async (req, res) => {\n    try {\n      const { productId } = req.query;\n      const movements = await storage.getStockMovements(productId as string);\n      res.json(movements);\n    } catch (error) {\n      console.error(\"Error fetching stock movements:\", error);\n      res.status(500).json({ message: \"Failed to fetch stock movements\" });\n    }\n  });\n\n  app.post('/api/stock-movements', isAuthenticated, async (req: any, res) => {\n    try {\n      const movementData = insertStockMovementSchema.parse(req.body);\n      const movement = await storage.createStockMovement({\n        ...movementData,\n        userId: req.session.user.id,\n      });\n      res.json(movement);\n    } catch (error) {\n      console.error(\"Error creating stock movement:\", error);\n      res.status(500).json({ message: \"Failed to create stock movement\" });\n    }\n  });\n\n\n  // Permission checking middleware\n  const requirePermission = (permission: string) => {\n    return async (req: any, res: Response, next: NextFunction) => {\n      try {\n        // Super admin bypasses permission checks\n        if (req.isSuperAdmin) {\n          return next();\n        }\n\n        // Check if user is authenticated\n        if (!req.session?.user) {\n          return res.status(401).json({ message: \"Unauthorized\" });\n        }\n\n        const user = req.session.user;\n\n        // Check user role permissions\n        if (user.role === 'admin') {\n          // Admin has all permissions\n          return next();\n        }\n\n        // For non-admin users, check specific permissions\n        const userPermissions = await getUserPermissions(user.role);\n        \n        if (!userPermissions.includes(permission)) {\n          return res.status(403).json({ \n            message: \"Anda tidak memiliki izin untuk mengakses resource ini\",\n            requiredPermission: permission,\n            userRole: user.role\n          });\n        }\n\n        next();\n      } catch (error) {\n        console.error(\"Permission check error:\", error);\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    };\n  };\n\n  // Helper function to get user permissions based on role\n  const getUserPermissions = async (role: string): Promise<string[]> => {\n    const roleConfig = {\n      admin: [\n        'dashboard_view', 'pos_access', 'inventory_full', 'purchasing_full',\n        'financial_full', 'reports_full', 'customers_full', 'suppliers_full',\n        'service_tickets_full', 'users_full', 'roles_full', 'settings_full',\n        'whatsapp_settings', 'store_settings', 'system_admin'\n      ],\n      kasir: [\n        'dashboard_view', 'pos_access', 'inventory_view', 'customers_view',\n        'customers_create', 'customers_edit', 'transactions_create',\n        'reports_sales_view'\n      ],\n      teknisi: [\n        'dashboard_view', 'service_tickets_full', 'inventory_view',\n        'inventory_update_stock', 'customers_view', 'customers_create',\n        'customers_edit', 'reports_services_view'\n      ],\n      purchasing: [\n        'dashboard_view', 'purchasing_full', 'suppliers_full', 'inventory_full',\n        'reports_purchasing_view', 'reports_inventory_view'\n      ],\n      finance: [\n        'dashboard_view', 'financial_full', 'reports_full', 'customers_view',\n        'suppliers_view', 'transactions_view'\n      ],\n      owner: [\n        'dashboard_view', 'pos_access', 'inventory_view', 'purchasing_view',\n        'financial_full', 'reports_full', 'customers_full', 'suppliers_view',\n        'service_tickets_view', 'users_view', 'settings_view'\n      ]\n    };\n\n    return roleConfig[role as keyof typeof roleConfig] || [];\n  };\n\n  // User Management routes\n  app.get('/api/users', isAuthenticated, requirePermission('users_view'), async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/users', isAuthenticated, requirePermission('users_full'), async (req: any, res) => {\n    try {\n      const { username, email, firstName, lastName, password, role } = req.body;\n\n      // Validate required fields\n      if (!username || !email || !password || !role) {\n        return res.status(400).json({ \n          message: \"Username, email, password, dan role wajib diisi\" \n        });\n      }\n\n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username sudah digunakan\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email sudah digunakan\" });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      // Create user\n      const userData = {\n        username,\n        email,\n        firstName,\n        lastName,\n        password: hashedPassword,\n        role,\n        isActive: true\n      };\n\n      const user = await storage.createUser(userData);\n      \n      // Remove password from response\n      const { password: _, ...userResponse } = user;\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'users',\n        action: 'create',\n        data: userResponse\n      });\n      \n      res.status(201).json(userResponse);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, requirePermission('users_full'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userData = req.body;\n      const user = await storage.updateUser(id, userData);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'users',\n        action: 'update',\n        data: user,\n        id\n      });\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, requirePermission('users_full'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      \n      // Broadcast real-time update\n      realtimeService.broadcastToTenant(req.tenant?.id, {\n        resource: 'users',\n        action: 'delete',\n        id\n      });\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Role Management routes\n  app.get('/api/roles', isAuthenticated, async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.post('/api/roles', isAuthenticated, async (req, res) => {\n    try {\n      const roleData = insertRoleSchema.parse(req.body);\n      const role = await storage.createRole(roleData);\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error creating role:\", error);\n      res.status(500).json({ message: \"Failed to create role\" });\n    }\n  });\n\n  app.put('/api/roles/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const roleData = req.body;\n      const role = await storage.updateRole(id, roleData);\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.delete('/api/roles/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteRole(id);\n      res.json({ message: \"Role deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting role:\", error);\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n  // New Finance Management Routes\n  const { financeManager } = await import('./financeManager');\n\n  // Financial Transactions\n  app.get('/api/finance/transactions', isAuthenticated, async (req, res) => {\n    try {\n      const { type, category, startDate, endDate, referenceType } = req.query;\n      const filters = {\n        type: type as string,\n        category: category as string,\n        startDate: startDate ? parseWithTimezone(startDate as string, false) : undefined,\n        endDate: endDate ? parseWithTimezone(endDate as string, false) : undefined,\n        referenceType: referenceType as string\n      };\n      const transactions = await financeManager.getTransactions(filters);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/finance/transactions', isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const transaction = await financeManager.createTransaction({\n        ...req.body,\n        userId\n      });\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating transaction:\", error);\n      res.status(500).json({ message: \"Failed to create transaction\" });\n    }\n  });\n\n  app.get('/api/finance/summary', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const summary = await financeManager.getSummary(\n        startDate ? parseWithTimezone(startDate as string, false) : undefined,\n        endDate ? parseWithTimezone(endDate as string, false) : undefined\n      );\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching summary:\", error);\n      res.status(500).json({ message: \"Failed to fetch summary\" });\n    }\n  });\n\n  app.delete('/api/finance/service-records/:serviceId', isAuthenticated, async (req, res) => {\n    try {\n      const { serviceId } = req.params;\n      \n      // Delete all financial records related to this service\n      await db.delete(financialRecords).where(eq(financialRecords.reference, serviceId));\n      \n      res.json({ message: \"Service financial records cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing service financial records:\", error);\n      res.status(500).json({ message: \"Failed to clear records\" });\n    }\n  });\n  \n  // Enhanced Accounting Reports API\n  app.get('/api/finance/balance-sheet', isAuthenticated, async (req, res) => {\n    try {\n      const { asOfDate } = req.query;\n      const asOf = asOfDate ? new Date(asOfDate as string) : undefined;\n      const balanceSheet = await storage.getBalanceSheet(asOf);\n      res.json(balanceSheet);\n    } catch (error) {\n      console.error(\"Error fetching balance sheet:\", error);\n      res.status(500).json({ message: \"Failed to fetch balance sheet\" });\n    }\n  });\n  \n  app.get('/api/finance/income-statement', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? parseWithTimezone(startDate as string, false) : undefined;\n      const end = endDate ? parseWithTimezone(endDate as string, false) : undefined;\n      const incomeStatement = await storage.getIncomeStatement(start, end);\n      res.json(incomeStatement);\n    } catch (error) {\n      console.error(\"Error fetching income statement:\", error);\n      res.status(500).json({ message: \"Failed to fetch income statement\" });\n    }\n  });\n  \n  app.get('/api/finance/chart-of-accounts', isAuthenticated, async (req, res) => {\n    try {\n      const accounts = await storage.getChartOfAccounts();\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching chart of accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch chart of accounts\" });\n    }\n  });\n  \n  app.post('/api/finance/journal-entry', isAuthenticated, async (req, res) => {\n    try {\n      const data = req.body;\n      data.userId = req.session?.user?.id;\n      const result = await storage.createJournalEntry(data);\n      \n      if (result.success) {\n        res.status(201).json(result.journalEntry);\n      } else {\n        res.status(400).json({ message: result.error });\n      }\n    } catch (error) {\n      console.error(\"Error creating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to create journal entry\" });\n    }\n  });\n\n  // Reset database (keep only users and roles)\n  app.post('/api/admin/reset-database', isAuthenticated, async (req, res) => {\n    try {\n      await db.transaction(async (tx) => {\n        // Delete in correct order to handle foreign keys\n        await tx.delete(attendanceRecords);\n        await tx.delete(payrollRecords);\n        await tx.delete(employees);\n        await tx.delete(financialRecords);\n        await tx.delete(stockMovements);\n        await tx.delete(serviceTicketParts);\n        await tx.delete(serviceTickets);\n        await tx.delete(transactionItems);\n        await tx.delete(transactions);\n        await tx.delete(products);\n        await tx.delete(categories);\n        await tx.delete(customers);\n        await tx.delete(suppliers);\n        await tx.delete(storeConfig);\n      });\n      \n      res.json({ message: \"Database reset completed. Users and roles preserved.\" });\n    } catch (error) {\n      console.error(\"Error resetting database:\", error);\n      res.status(500).json({ message: \"Failed to reset database\" });\n    }\n  });\n\n  // Employee Management\n  app.get('/api/employees', isAuthenticated, async (req, res) => {\n    try {\n      const { includeInactive } = req.query;\n      const employees = await financeManager.getEmployees(includeInactive === 'true');\n      res.json(employees);\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.post('/api/employees', isAuthenticated, async (req, res) => {\n    try {\n      const employee = await financeManager.createEmployee(req.body);\n      res.json(employee);\n    } catch (error) {\n      console.error(\"Error creating employee:\", error);\n      res.status(500).json({ message: \"Failed to create employee\" });\n    }\n  });\n\n  app.put('/api/employees/:id', isAuthenticated, async (req, res) => {\n    try {\n      const employee = await financeManager.updateEmployee(req.params.id, req.body);\n      res.json(employee);\n    } catch (error) {\n      console.error(\"Error updating employee:\", error);\n      res.status(500).json({ message: \"Failed to update employee\" });\n    }\n  });\n\n  // Payroll Management\n  app.get('/api/payroll', isAuthenticated, async (req, res) => {\n    try {\n      const { employeeId } = req.query;\n      const payrolls = await financeManager.getPayrollRecords(employeeId as string);\n      res.json(payrolls);\n    } catch (error) {\n      console.error(\"Error fetching payroll records:\", error);\n      res.status(500).json({ message: \"Failed to fetch payroll records\" });\n    }\n  });\n\n  app.post('/api/payroll', isAuthenticated, async (req: any, res) => {\n    try {\n      const payroll = await financeManager.createPayroll({\n        ...req.body,\n        userId: req.session.user.id\n      });\n      res.json(payroll);\n    } catch (error) {\n      console.error(\"Error creating payroll:\", error);\n      res.status(500).json({ message: \"Failed to create payroll\" });\n    }\n  });\n\n  app.put('/api/payroll/:id/status', isAuthenticated, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const payroll = await financeManager.updatePayrollStatus(req.params.id, status);\n      res.json(payroll);\n    } catch (error) {\n      console.error(\"Error updating payroll status:\", error);\n      res.status(500).json({ message: \"Failed to update payroll status\" });\n    }\n  });\n\n  // Object storage routes\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      // Check if object storage is configured\n      const searchPaths = objectStorageService.getPublicObjectSearchPaths();\n      if (searchPaths.length === 0) {\n        return res.status(503).json({ error: \"Object storage not configured\" });\n      }\n      \n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      // Check if private object storage is configured\n      const privateDir = objectStorageService.getPrivateObjectDir();\n      if (!privateDir) {\n        return res.status(503).json({ error: \"Private object storage not configured\" });\n      }\n      \n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      if (!uploadURL) {\n        return res.status(503).json({ error: \"Object storage not configured for uploads\" });\n      }\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      return res.status(500).json({ error: \"Failed to generate upload URL\" });\n    }\n  });\n\n  app.put(\"/api/logos\", isAuthenticated, async (req, res) => {\n    if (!req.body.logoURL) {\n      return res.status(400).json({ error: \"logoURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      \n      // Check if private object storage is configured\n      const privateDir = objectStorageService.getPrivateObjectDir();\n      if (!privateDir) {\n        return res.status(503).json({ error: \"Object storage not configured\" });\n      }\n      \n      const objectPath = objectStorageService.normalizeObjectEntityPath(\n        req.body.logoURL,\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting logo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // WhatsApp API endpoints\n  \n  // Get WhatsApp status\n  app.get('/api/whatsapp/status', isAuthenticated, async (req, res) => {\n    try {\n      const rawQrCode = whatsappService.getQRCode();\n      let qrCodeDataUrl = null;\n      \n      // Convert raw QR string to data URL for frontend display\n      if (rawQrCode) {\n        try {\n          console.log('Converting QR code to data URL, raw length:', rawQrCode.length);\n          qrCodeDataUrl = await QRCode.toDataURL(rawQrCode);\n          console.log('QR conversion successful, data URL length:', qrCodeDataUrl ? qrCodeDataUrl.length : 0);\n        } catch (qrError) {\n          console.error('Error converting QR code to data URL:', qrError);\n        }\n      } else {\n        console.log('No raw QR code available for conversion');\n      }\n      \n      res.json({\n        connected: whatsappService.isConnected(),\n        connectionState: whatsappService.getConnectionState(),\n        qrCode: qrCodeDataUrl,\n      });\n    } catch (error) {\n      console.error('Error getting WhatsApp status:', error);\n      res.status(500).json({ message: 'Failed to get WhatsApp status' });\n    }\n  });\n\n  // Enable WhatsApp\n  app.post('/api/whatsapp/enable', isAuthenticated, async (req, res) => {\n    try {\n      const existingConfig = await storage.getStoreConfig();\n      await storage.upsertStoreConfig({\n        name: existingConfig?.name || \"LaptopPOS\",\n        address: existingConfig?.address || \"\",\n        phone: existingConfig?.phone || \"\",\n        email: existingConfig?.email || \"\",\n        taxRate: existingConfig?.taxRate || \"11.00\",\n        defaultDiscount: existingConfig?.defaultDiscount || \"0.00\",\n        databasePort: existingConfig?.databasePort || 5432,\n        whatsappEnabled: true,\n      });\n      res.json({ message: 'WhatsApp enabled successfully' });\n    } catch (error) {\n      console.error('Error enabling WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to enable WhatsApp' });\n    }\n  });\n\n  // Disable WhatsApp\n  app.post('/api/whatsapp/disable', isAuthenticated, async (req, res) => {\n    try {\n      // Disconnect if currently connected\n      if (whatsappService.isConnected()) {\n        await whatsappService.disconnect();\n      }\n      \n      const existingConfig = await storage.getStoreConfig();\n      await storage.upsertStoreConfig({\n        name: existingConfig?.name || \"LaptopPOS\",\n        address: existingConfig?.address || \"\",\n        phone: existingConfig?.phone || \"\",\n        email: existingConfig?.email || \"\",\n        taxRate: existingConfig?.taxRate || \"11.00\",\n        defaultDiscount: existingConfig?.defaultDiscount || \"0.00\",\n        databasePort: existingConfig?.databasePort || 5432,\n        whatsappEnabled: false,\n      });\n      res.json({ message: 'WhatsApp disabled successfully' });\n    } catch (error) {\n      console.error('Error disabling WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to disable WhatsApp' });\n    }\n  });\n\n  // Connect WhatsApp\n  app.post('/api/whatsapp/connect', isAuthenticated, async (req, res) => {\n    try {\n      const config = await storage.getStoreConfig();\n      if (!config?.whatsappEnabled) {\n        return res.status(400).json({ message: 'WhatsApp not enabled in settings' });\n      }\n\n      await whatsappService.initialize();\n      res.json({ message: 'WhatsApp connection initiated' });\n    } catch (error) {\n      console.error('Error connecting WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to connect WhatsApp' });\n    }\n  });\n\n  // Disconnect WhatsApp\n  app.post('/api/whatsapp/disconnect', isAuthenticated, async (req, res) => {\n    try {\n      await whatsappService.disconnect();\n      res.json({ message: 'WhatsApp disconnected successfully' });\n    } catch (error) {\n      console.error('Error disconnecting WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to disconnect WhatsApp' });\n    }\n  });\n\n  // Test message\n  app.post('/api/whatsapp/test-message', isAuthenticated, async (req, res) => {\n    try {\n      const { phoneNumber } = req.body;\n      \n      if (!phoneNumber) {\n        return res.status(400).json({ message: 'Phone number is required' });\n      }\n\n      if (!whatsappService.isConnected()) {\n        return res.status(400).json({ message: 'WhatsApp not connected' });\n      }\n\n      const testMessage = `🔧 Test pesan dari LaptopPOS Service Center\n\nIni adalah pesan test untuk memastikan koneksi WhatsApp berfungsi dengan baik.\n\nTerima kasih!\n- LaptopPOS Team`;\n\n      const success = await whatsappService.sendMessage(phoneNumber, testMessage);\n      \n      if (success) {\n        res.json({ message: 'Test message sent successfully' });\n      } else {\n        res.status(500).json({ message: 'Failed to send test message' });\n      }\n    } catch (error) {\n      console.error('Error sending test message:', error);\n      res.status(500).json({ message: 'Failed to send test message' });\n    }\n  });\n\n  // Public API for customers to check service status with query parameter\n  app.get('/api/public/service-status', async (req, res) => {\n    try {\n      const { ticket } = req.query;\n      \n      if (!ticket) {\n        return res.status(400).json({ message: 'Ticket number is required' });\n      }\n\n      // Get service ticket with customer info using Drizzle\n      const serviceTicket = await db\n        .select()\n        .from(serviceTickets)\n        .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n        .where(eq(serviceTickets.ticketNumber, ticket as string))\n        .limit(1);\n\n      if (!serviceTicket.length) {\n        return res.status(404).json({ message: 'Service not found' });\n      }\n\n      const service = serviceTicket[0];\n      \n      // Return limited info for customer\n      res.json({\n        ticketNumber: service.service_tickets.ticketNumber,\n        customerName: service.customers?.name,\n        deviceType: service.service_tickets.deviceType,\n        deviceBrand: service.service_tickets.deviceBrand,\n        deviceModel: service.service_tickets.deviceModel,\n        problem: service.service_tickets.problem,\n        diagnosis: service.service_tickets.diagnosis,\n        status: service.service_tickets.status,\n        estimatedCost: service.service_tickets.estimatedCost,\n        estimatedCompletion: service.service_tickets.estimatedCompletion,\n        completedAt: service.service_tickets.completedAt,\n        createdAt: service.service_tickets.createdAt,\n      });\n    } catch (error) {\n      console.error('Error getting service status:', error);\n      res.status(500).json({ message: 'Failed to get service status' });\n    }\n  });\n\n  // Public API for customers to check service status\n  app.get('/api/public/service-status/:serviceNumber', async (req, res) => {\n    try {\n      const { serviceNumber } = req.params;\n      \n      if (!serviceNumber) {\n        return res.status(400).json({ message: 'Service number is required' });\n      }\n\n      // Get service ticket with customer info using Drizzle\n      const serviceTicket = await db\n        .select()\n        .from(serviceTickets)\n        .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n        .where(eq(serviceTickets.ticketNumber, serviceNumber as string))\n        .limit(1);\n\n      if (!serviceTicket.length) {\n        return res.status(404).json({ message: 'Service not found' });\n      }\n\n      const service = serviceTicket[0];\n      \n      // Get customer info and parts from the service ticket\n      const ticket = service.service_tickets;\n      const customer = service.customers;\n      \n      // Get used parts\n      const parts = await storage.getServiceTicketParts(ticket.id);\n      \n      // Return complete status info with parts (single response)\n      res.json({\n        ticketNumber: ticket.ticketNumber,\n        customerName: customer?.name,\n        deviceType: ticket.deviceType,\n        deviceBrand: ticket.deviceBrand,\n        deviceModel: ticket.deviceModel,\n        problem: ticket.problem,\n        diagnosis: ticket.diagnosis,\n        status: ticket.status,\n        estimatedCost: ticket.estimatedCost,\n        estimatedCompletion: ticket.estimatedCompletion,\n        completedAt: ticket.completedAt,\n        createdAt: ticket.createdAt,\n        parts: parts.map(part => ({\n          name: part.productName,\n          quantity: part.quantity,\n          unitPrice: part.unitPrice\n        }))\n      });\n    } catch (error) {\n      console.error('Error getting service status:', error);\n      res.status(500).json({ message: 'Failed to get service status' });\n    }\n  });\n\n  // Import default roles config\n  const { defaultRoleConfigs } = await import('./defaultRoles.js');\n\n  // Function to create default roles\n  async function createDefaultRoles() {\n    try {\n      console.log('Creating default roles...');\n      \n      for (const roleConfig of defaultRoleConfigs) {\n        // Check if role already exists\n        const existingRoles = await storage.getRoles();\n        const roleExists = existingRoles.some(role => role.name === roleConfig.name);\n        \n        if (!roleExists) {\n          await storage.createRole({\n            name: roleConfig.name,\n            displayName: roleConfig.displayName,\n            description: roleConfig.description,\n            permissions: roleConfig.permissions,\n            isActive: true\n          });\n          console.log(`✅ Created role: ${roleConfig.displayName}`);\n        } else {\n          console.log(`ℹ️ Role already exists: ${roleConfig.displayName}`);\n        }\n      }\n      \n      console.log('✅ Default roles setup completed');\n    } catch (error) {\n      console.error('Error creating default roles:', error);\n    }\n  }\n\n  // Initialize SaaS system with default subscription plans\n  async function initializeSaaSSystem() {\n    try {\n      console.log('🚀 Initializing SaaS system...');\n      \n      // Default subscription plans\n      const defaultPlans = [\n        {\n          name: 'Basic',\n          description: 'Paket dasar untuk usaha kecil',\n          price: 149000,\n          currency: 'IDR',\n          billingPeriod: 'monthly',\n          isActive: true,\n          features: JSON.stringify([\"POS System\", \"Inventory Management\", \"Basic Reports\", \"1 Store Location\"]),\n          limits: JSON.stringify({\n            maxUsers: 3,\n            maxProducts: 500,\n            maxTransactions: 1000,\n            maxStorage: 1\n          }),\n          maxUsers: 3,\n          maxTransactionsPerMonth: 1000,\n          maxStorageGB: 1,\n          whatsappIntegration: false,\n          customBranding: false,\n          apiAccess: false,\n          prioritySupport: false\n        },\n        {\n          name: 'Professional',\n          description: 'Paket lengkap untuk usaha menengah',\n          price: 299000,\n          currency: 'IDR',\n          billingPeriod: 'monthly',\n          isActive: true,\n          features: JSON.stringify([\"Advanced POS\", \"Multi-Store\", \"Service Management\", \"Advanced Reports\", \"WhatsApp Integration\"]),\n          limits: JSON.stringify({\n            maxUsers: 10,\n            maxProducts: 2000,\n            maxTransactions: 5000,\n            maxStorage: 5\n          }),\n          maxUsers: 10,\n          maxTransactionsPerMonth: 5000,\n          maxStorageGB: 5,\n          whatsappIntegration: true,\n          customBranding: false,\n          apiAccess: false,\n          prioritySupport: false\n        },\n        {\n          name: 'Enterprise',\n          description: 'Solusi enterprise untuk usaha besar',\n          price: 599000,\n          currency: 'IDR',\n          billingPeriod: 'monthly',\n          isActive: true,\n          features: JSON.stringify([\"Full Features\", \"Unlimited Stores\", \"API Access\", \"Custom Reports\", \"Priority Support\"]),\n          limits: JSON.stringify({\n            maxUsers: 50,\n            maxProducts: 10000,\n            maxTransactions: 50000,\n            maxStorage: 20\n          }),\n          maxUsers: 50,\n          maxTransactionsPerMonth: 50000,\n          maxStorageGB: 20,\n          whatsappIntegration: true,\n          customBranding: true,\n          apiAccess: true,\n          prioritySupport: true\n        }\n      ];\n\n      // Check and create default plans\n      const existingPlans = await db.select().from(plans);\n      \n      for (const planConfig of defaultPlans) {\n        const planExists = existingPlans.some(plan => plan.name === planConfig.name);\n        \n        if (!planExists) {\n          await db.insert(plans).values(planConfig);\n          console.log(`✅ Created subscription plan: ${planConfig.name}`);\n        } else {\n          console.log(`ℹ️ Subscription plan already exists: ${planConfig.name}`);\n        }\n      }\n\n      console.log('✅ SaaS system initialization completed');\n    } catch (error) {\n      console.error('Error initializing SaaS system:', error);\n    }\n  }\n\n  // Setup Wizard Endpoints - untuk installer\n  \n  // Database migration endpoint\n  app.post('/api/setup/migrate-database', async (req, res) => {\n    try {\n      console.log('Starting database migration...');\n      \n      // Import child_process to run drizzle migration\n      const { exec } = await import('child_process');\n      const { promisify } = await import('util');\n      const execAsync = promisify(exec);\n\n      // Run drizzle push command to apply schema changes\n      await execAsync('npm run db:push --force', {\n        cwd: process.cwd(),\n        timeout: 60000, // 1 minute timeout\n      });\n\n      console.log('Database migration completed successfully');\n\n      // Create default roles after migration\n      await createDefaultRoles();\n      \n      // Initialize SaaS system with default subscription plans\n      await initializeSaaSSystem();\n\n      // Update setup steps\n      const config = await storage.getStoreConfig();\n      const setupSteps = config?.setupSteps ? JSON.parse(config.setupSteps) : {};\n      setupSteps.database = true;\n\n      if (config) {\n        await storage.upsertStoreConfig({\n          name: config.name,\n          taxRate: config.taxRate || '11.00',\n          defaultDiscount: config.defaultDiscount || '0.00',\n          databasePort: config.databasePort || 5432,\n          clientId: config.clientId,\n          email: config.email,\n          address: config.address,\n          phone: config.phone,\n          logo: config.logo,\n          setupCompleted: config.setupCompleted,\n          setupSteps: JSON.stringify(setupSteps),\n          databaseUrl: config.databaseUrl,\n          databaseHost: config.databaseHost,\n          databaseName: config.databaseName,\n          databaseUser: config.databaseUser,\n          databasePassword: config.databasePassword,\n          whatsappEnabled: config.whatsappEnabled,\n          whatsappSessionData: config.whatsappSessionData,\n          whatsappQR: config.whatsappQR,\n          whatsappConnected: config.whatsappConnected\n        });\n      }\n\n      res.json({ \n        success: true, \n        message: 'Database migration completed successfully' \n      });\n    } catch (error) {\n      console.error('Database migration failed:', error);\n      res.status(500).json({ \n        message: 'Database migration failed', \n        error: (error as Error).message \n      });\n    }\n  });\n\n  // Check setup status\n  app.get('/api/setup/status', async (req: any, res) => {\n    try {\n      // Extract clientId from tenant info (SaaS mode) or use null (single-tenant mode)\n      const clientId = req.tenant?.clientId || null;\n      \n      let config = null;\n      let userCount = 0;\n      \n      try {\n        config = await storage.getStoreConfig(clientId);\n      } catch (configError) {\n        // Store config table doesn't exist yet - fresh installation\n        console.log('Store config table not found - fresh installation');\n      }\n      \n      try {\n        userCount = await storage.getUserCount(clientId);\n      } catch (userError) {\n        // Users table doesn't exist yet - fresh installation \n        console.log('Users table not found - fresh installation');\n      }\n      \n      // Check if all required steps are completed\n      const setupSteps = config?.setupSteps ? JSON.parse(config.setupSteps || '{}') : {};\n      const allStepsCompleted = Boolean(\n        setupSteps.store && \n        setupSteps.database && \n        setupSteps.admin && \n        setupSteps.initialData\n      );\n      \n      const isSetupCompleted = Boolean(\n        config && \n        config.name && \n        userCount > 0 &&\n        (config.setupCompleted === true || allStepsCompleted)\n      );\n      \n      res.json({\n        setupCompleted: isSetupCompleted,\n        hasStoreConfig: Boolean(config?.name),\n        hasAdminUser: userCount > 0,\n        storeName: config?.name,\n        setupSteps: config?.setupSteps ? JSON.parse(config.setupSteps || '{}') : {},\n        databaseMigrated: config?.setupSteps ? JSON.parse(config.setupSteps || '{}').database : false,\n        clientId: clientId // Include client context\n      });\n    } catch (error) {\n      // Silence table missing errors during fresh setup to avoid console spam\n      if ((error as any)?.code !== '42P01') {  \n        console.error('Error checking setup status:', error);\n      }\n      res.json({\n        setupCompleted: false,\n        hasStoreConfig: false,\n        hasAdminUser: false,\n        setupSteps: {}\n      });\n    }\n  });\n\n  // Setup store configuration\n  app.post('/api/setup/store', async (req: any, res) => {\n    try {\n      const { name, address, phone, email, taxRate } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ message: 'Store name is required' });\n      }\n\n      // Extract clientId from tenant info (SaaS mode) or use null (single-tenant mode)\n      const clientId = req.tenant?.clientId || null;\n      \n      const existingConfig = await storage.getStoreConfig(clientId);\n      const setupSteps = existingConfig?.setupSteps ? JSON.parse(existingConfig.setupSteps) : {};\n      setupSteps.store = true;\n\n      await storage.upsertStoreConfig({\n        name,\n        address: address || '',\n        phone: phone || '',\n        email: email || '',\n        taxRate: taxRate || '11.00',\n        defaultDiscount: '0.00',\n        databasePort: 5432,\n        setupSteps: JSON.stringify(setupSteps),\n        setupCompleted: false, // Will be completed in final step\n      }, clientId);\n\n      res.json({ \n        success: true, \n        message: 'Store configuration saved successfully' \n      });\n    } catch (error) {\n      console.error('Error saving store config:', error);\n      res.status(500).json({ message: 'Failed to save store configuration' });\n    }\n  });\n\n  // Setup admin user\n  app.post('/api/setup/admin', async (req: any, res) => {\n    try {\n      const { username, password, email, firstName, lastName } = req.body;\n      \n      if (!username || !password || !email) {\n        return res.status(400).json({ message: 'Username, password, and email are required' });\n      }\n\n      // Extract clientId from tenant info (SaaS mode) or use null (single-tenant mode)\n      const clientId = req.tenant?.clientId || null;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists' });\n      }\n\n      const emailExists = await storage.getUserByEmail(email);\n      if (emailExists) {\n        return res.status(400).json({ message: 'Email already exists' });\n      }\n\n      // Hash password and create user with tenant isolation\n      const hashedPassword = await hashPassword(password);\n      \n      await storage.createUser({\n        username,\n        password: hashedPassword,\n        email,\n        firstName: firstName || 'System',\n        lastName: lastName || 'Administrator',\n        role: 'admin',\n        isActive: true,\n        profileImageUrl: null\n      }, clientId);\n\n      // Update setup steps\n      const config = await storage.getStoreConfig(clientId || undefined);\n      const setupSteps = config?.setupSteps ? JSON.parse(config.setupSteps) : {};\n      setupSteps.admin = true;\n\n      if (config) {\n        await storage.upsertStoreConfig({\n          name: config.name,\n          taxRate: config.taxRate || '11.00',\n          defaultDiscount: config.defaultDiscount || '0.00',\n          databasePort: config.databasePort || 5432,\n          clientId: config.clientId,\n          email: config.email,\n          address: config.address,\n          phone: config.phone,\n          logo: config.logo,\n          setupCompleted: config.setupCompleted,\n          setupSteps: JSON.stringify(setupSteps),\n          databaseUrl: config.databaseUrl,\n          databaseHost: config.databaseHost,\n          databaseName: config.databaseName,\n          databaseUser: config.databaseUser,\n          databasePassword: config.databasePassword,\n          whatsappEnabled: config.whatsappEnabled,\n          whatsappSessionData: config.whatsappSessionData,\n          whatsappQR: config.whatsappQR,\n          whatsappConnected: config.whatsappConnected\n        }, clientId || undefined);\n      }\n\n      res.json({ \n        success: true, \n        message: 'Admin user created successfully' \n      });\n    } catch (error) {\n      console.error('Error creating admin user:', error);\n      res.status(500).json({ message: 'Failed to create admin user' });\n    }\n  });\n\n  // Setup initial data (categories, locations, accounts)\n  app.post('/api/setup/initial-data', async (req, res) => {\n    try {\n      console.log('Setting up initial data...');\n      \n      // Create default categories\n      const defaultCategories = [\n        { name: 'Laptop', description: 'Laptop dan notebook' },\n        { name: 'Aksesoris', description: 'Aksesoris laptop dan komputer' },\n        { name: 'Sparepart', description: 'Suku cadang laptop' },\n        { name: 'Software', description: 'Software dan aplikasi' }\n      ];\n\n      for (const category of defaultCategories) {\n        try {\n          const existingCategories = await storage.getCategories();\n          const categoryExists = existingCategories.some(cat => cat.name === category.name);\n          \n          if (!categoryExists) {\n            await storage.createCategory(category);\n            console.log(`✅ Created category: ${category.name}`);\n          } else {\n            console.log(`ℹ️ Category already exists: ${category.name}`);\n          }\n        } catch (error) {\n          console.error(`Error creating category ${category.name}:`, error);\n        }\n      }\n\n      // Create default location\n      try {\n        const existingLocations = await storage.getLocations();\n        if (existingLocations.length === 0) {\n          await storage.createLocation({\n            name: 'Main Store',\n            code: 'MAIN-001',\n            description: 'Lokasi utama toko'\n          });\n          console.log('✅ Created default location: Main Store');\n        }\n      } catch (error) {\n        console.error('Error creating default location:', error);\n      }\n\n      // Import finance manager to set up accounts\n      const { FinanceManager } = await import('./financeManager');\n      const financeManager = new FinanceManager();\n      \n      try {\n        const accountsResult = await financeManager.initializeDefaultAccounts();\n        if (accountsResult.success) {\n          console.log(`✅ ${accountsResult.message}`);\n        } else {\n          console.error(`❌ ${accountsResult.message}`);\n        }\n      } catch (error) {\n        console.error('Error initializing accounts:', error);\n      }\n\n      // Initialize WhatsApp service config (prevent crashes)\n      try {\n        const config = await storage.getStoreConfig();\n        if (config && (!config.whatsappEnabled || config.whatsappEnabled === null)) {\n          await storage.upsertStoreConfig({\n            name: config.name,\n            taxRate: config.taxRate || '11.00',\n            defaultDiscount: config.defaultDiscount || '0.00',\n            databasePort: config.databasePort || 5432,\n            clientId: config.clientId,\n            email: config.email,\n            address: config.address,\n            phone: config.phone,\n            logo: config.logo,\n            setupCompleted: config.setupCompleted,\n            setupSteps: config.setupSteps,\n            databaseUrl: config.databaseUrl,\n            databaseHost: config.databaseHost,\n            databaseName: config.databaseName,\n            databaseUser: config.databaseUser,\n            databasePassword: config.databasePassword,\n            whatsappEnabled: false,\n            whatsappSessionData: config.whatsappSessionData,\n            whatsappQR: config.whatsappQR,\n            whatsappConnected: false\n          });\n          console.log('✅ WhatsApp service config initialized (disabled by default)');\n        }\n      } catch (error) {\n        console.error('Error initializing WhatsApp config:', error);\n      }\n\n      // Update setup steps  \n      const clientId = req.tenant?.id || null;\n      const config = await storage.getStoreConfig(clientId || undefined);\n      const setupSteps = config?.setupSteps ? JSON.parse(config.setupSteps) : {};\n      setupSteps.initialData = true;\n\n      if (config) {\n        await storage.upsertStoreConfig({\n          name: config.name,\n          taxRate: config.taxRate || '11.00',\n          defaultDiscount: config.defaultDiscount || '0.00',\n          databasePort: config.databasePort || 5432,\n          clientId: config.clientId,\n          email: config.email,\n          address: config.address,\n          phone: config.phone,\n          logo: config.logo,\n          setupCompleted: config.setupCompleted,\n          setupSteps: JSON.stringify(setupSteps),\n          databaseUrl: config.databaseUrl,\n          databaseHost: config.databaseHost,\n          databaseName: config.databaseName,\n          databaseUser: config.databaseUser,\n          databasePassword: config.databasePassword,\n          whatsappEnabled: config.whatsappEnabled,\n          whatsappSessionData: config.whatsappSessionData,\n          whatsappQR: config.whatsappQR,\n          whatsappConnected: config.whatsappConnected\n        }, clientId || undefined);\n      }\n\n      res.json({ \n        success: true, \n        message: 'Initial data setup completed successfully' \n      });\n    } catch (error) {\n      console.error('Error setting up initial data:', error);\n      res.status(500).json({ \n        message: 'Failed to setup initial data', \n        error: (error as Error).message \n      });\n    }\n  });\n\n  // Complete setup\n  app.post('/api/setup/complete', async (req: any, res) => {\n    try {\n      // Extract clientId from tenant info (SaaS mode) or use null (single-tenant mode)\n      const clientId = req.tenant?.clientId || null;\n      \n      const config = await storage.getStoreConfig(clientId || undefined);\n      \n      if (!config) {\n        return res.status(400).json({ message: 'Store configuration not found' });\n      }\n\n      const setupSteps = config.setupSteps ? JSON.parse(config.setupSteps) : {};\n      setupSteps.completed = true;\n\n      await storage.upsertStoreConfig({\n        name: config.name,\n        taxRate: config.taxRate || '11.00',\n        defaultDiscount: config.defaultDiscount || '0.00',\n        databasePort: config.databasePort || 5432,\n        clientId: config.clientId,\n        email: config.email,\n        address: config.address,\n        phone: config.phone,\n        logo: config.logo,\n        setupCompleted: true,\n        setupSteps: JSON.stringify(setupSteps),\n        databaseUrl: config.databaseUrl,\n        databaseHost: config.databaseHost,\n        databaseName: config.databaseName,\n        databaseUser: config.databaseUser,\n        databasePassword: config.databasePassword,\n        whatsappEnabled: config.whatsappEnabled,\n        whatsappSessionData: config.whatsappSessionData,\n        whatsappQR: config.whatsappQR,\n        whatsappConnected: config.whatsappConnected\n      }, clientId);\n\n      res.json({ \n        success: true, \n        message: 'Setup completed successfully! You can now use the application.' \n      });\n    } catch (error) {\n      console.error('Error completing setup:', error);\n      res.status(500).json({ message: 'Failed to complete setup' });\n    }\n  });\n\n  // =============================\n  // 🚀 SAAS MANAGEMENT ROUTES\n  // =============================\n\n  // Subscription limits middleware\n  const checkSubscriptionLimits = (feature: string) => {\n    return async (req: any, res: Response, next: NextFunction) => {\n      try {\n        // Skip if super admin\n        if (req.isSuperAdmin) {\n          return next();\n        }\n\n        // Check if tenant has valid subscription\n        if (!req.tenant) {\n          return res.status(403).json({ \n            error: 'No tenant context',\n            message: 'Subscription validation failed'\n          });\n        }\n\n        // Get active subscription\n        const activeSubscription = await db\n          .select()\n          .from(subscriptions)\n          .where(\n            and(\n              eq(subscriptions.clientId, req.tenant.id),\n              eq(subscriptions.paymentStatus, 'paid'),\n              gte(subscriptions.endDate, new Date())\n            )\n          )\n          .orderBy(subscriptions.endDate)\n          .limit(1);\n\n        if (!activeSubscription.length) {\n          return res.status(402).json({\n            error: 'Subscription required',\n            message: 'This feature requires an active subscription'\n          });\n        }\n\n        const subscription = activeSubscription[0];\n        \n        // Get plan details\n        const planResult = await db\n          .select()\n          .from(plans)\n          .where(eq(plans.id, subscription.planId as any))\n          .limit(1);\n\n        if (!planResult.length) {\n          return res.status(500).json({ error: 'Plan not found' });\n        }\n\n        // Check feature availability based on plan\n        const planData = planResult[0];\n        const featureAccess = {\n          'whatsapp': planData.whatsappIntegration,\n          'export': planData.name !== 'basic',\n          'api': planData.apiAccess,\n          'custom_branding': planData.customBranding,\n          'priority_support': planData.prioritySupport\n        };\n\n        if (!featureAccess[feature as keyof typeof featureAccess]) {\n          return res.status(402).json({\n            error: 'Feature not available',\n            message: `This feature requires ${planData.name === 'basic' ? 'Pro' : 'Premium'} plan or higher`,\n            currentPlan: planData.name,\n            feature\n          });\n        }\n\n        // Add subscription info to request\n        req.subscription = subscription;\n        req.plan = planData;\n        \n        next();\n      } catch (error) {\n        console.error('Subscription limits check error:', error);\n        res.status(500).json({ error: 'Subscription validation failed' });\n      }\n    };\n  };\n\n  // SaaS Admin Routes - Client Management\n  app.get('/api/admin/saas/clients', isAuthenticated, requirePermission('saas_admin'), async (req, res) => {\n    try {\n      const clientsWithSubscriptions = await db\n        .select({\n          id: clients.id,\n          name: clients.name,\n          subdomain: clients.subdomain,\n          email: clients.email,\n          status: clients.status,\n          trialEndsAt: clients.trialEndsAt,\n          createdAt: clients.createdAt,\n          subscription: {\n            id: subscriptions.id,\n            planName: subscriptions.planName,\n            plan: subscriptions.plan,\n            paymentStatus: subscriptions.paymentStatus,\n            startDate: subscriptions.startDate,\n            endDate: subscriptions.endDate,\n            amount: subscriptions.amount\n          }\n        })\n        .from(clients)\n        .leftJoin(\n          subscriptions, \n          and(\n            eq(subscriptions.clientId, clients.id),\n            eq(subscriptions.paymentStatus, 'paid')\n          )\n        )\n        .orderBy(desc(clients.createdAt));\n\n      res.json(clientsWithSubscriptions);\n    } catch (error) {\n      console.error('Error fetching SaaS clients:', error);\n      res.status(500).json({ message: 'Failed to fetch clients' });\n    }\n  });\n\n  // Create new client\n  app.post('/api/admin/saas/clients', isAuthenticated, requirePermission('saas_admin'), async (req, res) => {\n    try {\n      const { name, subdomain, email, planId, trialDays = 7 } = req.body;\n\n      // Validate required fields\n      if (!name || !subdomain || !email || !planId) {\n        return res.status(400).json({ message: 'All fields are required' });\n      }\n\n      // Check if subdomain already exists\n      const [existingClient] = await db\n        .select()\n        .from(clients)\n        .where(eq(clients.subdomain, subdomain))\n        .limit(1);\n\n      if (existingClient) {\n        return res.status(400).json({ message: 'Subdomain already exists' });\n      }\n\n      // Get plan details\n      const [plan] = await db\n        .select()\n        .from(plans)\n        .where(eq(plans.id, planId))\n        .limit(1);\n\n      if (!plan) {\n        return res.status(400).json({ message: 'Plan not found' });\n      }\n\n      // Calculate trial end date\n      const trialEndsAt = new Date();\n      trialEndsAt.setDate(trialEndsAt.getDate() + trialDays);\n\n      // Create client\n      const [newClient] = await db\n        .insert(clients)\n        .values({\n          name,\n          subdomain,\n          email,\n          status: 'trial',\n          trialEndsAt,\n          settings: JSON.stringify({\n            planId: plan.id,\n            planName: plan.name,\n            maxUsers: plan.maxUsers || 10,\n            maxStorage: plan.maxStorageGB || 1\n          })\n        })\n        .returning();\n\n      // Create trial subscription\n      await db\n        .insert(subscriptions)\n        .values({\n          clientId: newClient.id,\n          planId: plan.id,\n          planName: plan.name,\n          plan: plan.name.toLowerCase() as any,\n          amount: '0',\n          paymentStatus: 'paid',\n          startDate: new Date(),\n          endDate: trialEndsAt\n        });\n\n      // Broadcast real-time update\n      realtimeService.broadcast({\n        resource: 'saas-clients',\n        action: 'create',\n        data: newClient\n      });\n\n      res.json({\n        message: 'Client created successfully',\n        client: newClient,\n        trialUrl: `https://${subdomain}.profesionalservis.my.id`\n      });\n    } catch (error) {\n      console.error('Error creating SaaS client:', error);\n      res.status(500).json({ message: 'Failed to create client' });\n    }\n  });\n\n  // Update client status\n  app.patch('/api/admin/saas/clients/:id/status', isAuthenticated, requirePermission('saas_admin'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!['active', 'suspended', 'expired', 'trial'].includes(status)) {\n        return res.status(400).json({ message: 'Invalid status' });\n      }\n\n      const [updatedClient] = await db\n        .update(clients)\n        .set({ \n          status,\n          updatedAt: new Date()\n        })\n        .where(eq(clients.id, id))\n        .returning();\n\n      if (!updatedClient) {\n        return res.status(404).json({ message: 'Client not found' });\n      }\n\n      // Broadcast real-time update\n      realtimeService.broadcast({\n        resource: 'saas-clients',\n        action: 'update',\n        data: updatedClient,\n        id\n      });\n\n      res.json({\n        message: 'Client status updated successfully',\n        client: updatedClient\n      });\n    } catch (error) {\n      console.error('Error updating client status:', error);\n      res.status(500).json({ message: 'Failed to update client status' });\n    }\n  });\n\n  // SaaS Dashboard Stats\n  app.get('/api/admin/saas/stats', isAuthenticated, requirePermission('saas_admin'), async (req, res) => {\n    try {\n      // Total clients\n      const [totalClientsResult] = await db\n        .select({ count: count() })\n        .from(clients);\n      const totalClients = totalClientsResult.count;\n\n      // Active clients\n      const [activeClientsResult] = await db\n        .select({ count: count() })\n        .from(clients)\n        .where(eq(clients.status, 'active'));\n      const activeClients = activeClientsResult.count;\n\n      // Trial clients\n      const [trialClientsResult] = await db\n        .select({ count: count() })\n        .from(clients)\n        .where(eq(clients.status, 'trial'));\n      const trialClients = trialClientsResult.count;\n\n      // New clients this month\n      const currentDate = new Date();\n      const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const [newClientsResult] = await db\n        .select({ count: count() })\n        .from(clients)\n        .where(gte(clients.createdAt, firstDayOfMonth));\n      const newClientsThisMonth = newClientsResult.count;\n\n      // Revenue calculation (mock for now)\n      const monthlyRevenue = activeClients * 199000; // Assuming average Rp 199k per client\n\n      // Expiring trials (trials ending in next 7 days)\n      const nextWeek = new Date();\n      nextWeek.setDate(nextWeek.getDate() + 7);\n      const [expiringTrialsResult] = await db\n        .select({ count: count() })\n        .from(clients)\n        .where(\n          and(\n            eq(clients.status, 'trial'),\n            lte(clients.trialEndsAt, nextWeek)\n          )\n        );\n      const expiringTrials = expiringTrialsResult.count;\n\n      res.json({\n        totalClients,\n        activeClients,\n        trialClients,\n        newClientsThisMonth,\n        monthlyRevenue,\n        revenueGrowth: 15, // Mock growth percentage\n        expiringTrials,\n        averageRevenuePerClient: Math.round(monthlyRevenue / Math.max(activeClients, 1))\n      });\n    } catch (error) {\n      console.error('Error fetching SaaS stats:', error);\n      res.status(500).json({ message: 'Failed to fetch SaaS dashboard stats' });\n    }\n  });\n\n  // Plan Management\n  app.get('/api/admin/saas/plans', isAuthenticated, requirePermission('saas_admin'), async (req, res) => {\n    try {\n      const allPlans = await db\n        .select()\n        .from(plans)\n        .orderBy(plans.price);\n\n      res.json(allPlans);\n    } catch (error) {\n      console.error('Error fetching plans:', error);\n      res.status(500).json({ message: 'Failed to fetch plans' });\n    }\n  });\n\n  // Update plan\n  app.put('/api/admin/saas/plans/:id', isAuthenticated, requirePermission('saas_admin'), async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const planData = req.body;\n\n      const [updatedPlan] = await db\n        .update(plans)\n        .set({ \n          ...planData,\n          updatedAt: new Date()\n        })\n        .where(eq(plans.id, id))\n        .returning();\n\n      if (!updatedPlan) {\n        return res.status(404).json({ message: 'Plan not found' });\n      }\n\n      // Broadcast real-time update\n      realtimeService.broadcast({\n        resource: 'saas-plans',\n        action: 'update',\n        data: updatedPlan,\n        id\n      });\n\n      res.json({\n        message: 'Plan updated successfully',\n        plan: updatedPlan\n      });\n    } catch (error) {\n      console.error('Error updating plan:', error);\n      res.status(500).json({ message: 'Failed to update plan' });\n    }\n  });\n\n  // Public Routes - No authentication required\n  app.get('/api/saas/plans', async (req, res) => {\n    try {\n      const publicPlans = await db\n        .select({\n          id: plans.id,\n          name: plans.name,\n          description: plans.description,\n          price: plans.price,\n          currency: plans.currency,\n          billingPeriod: plans.billingPeriod,\n          features: plans.features,\n          maxUsers: plans.maxUsers,\n          maxTransactionsPerMonth: plans.maxTransactionsPerMonth,\n          maxStorageGB: plans.maxStorageGB,\n          whatsappIntegration: plans.whatsappIntegration,\n          customBranding: plans.customBranding,\n          apiAccess: plans.apiAccess,\n          prioritySupport: plans.prioritySupport\n        })\n        .from(plans)\n        .where(eq(plans.isActive, true))\n        .orderBy(plans.price);\n\n      res.json(publicPlans);\n    } catch (error) {\n      console.error('Error fetching public plans:', error);\n      res.status(500).json({ message: 'Failed to fetch plans' });\n    }\n  });\n\n  // Feature-gated routes examples\n  app.post('/api/whatsapp/send', isAuthenticated, checkSubscriptionLimits('whatsapp'), async (req: any, res) => {\n    try {\n      // WhatsApp send logic here\n      res.json({ \n        message: 'WhatsApp message sent successfully',\n        plan: req.plan?.name,\n        remainingQuota: 'unlimited' \n      });\n    } catch (error) {\n      console.error('Error sending WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to send WhatsApp message' });\n    }\n  });\n\n  app.post('/api/data/export', isAuthenticated, checkSubscriptionLimits('export'), async (req: any, res) => {\n    try {\n      // Data export logic here\n      res.json({ \n        message: 'Data export initiated successfully',\n        plan: req.plan?.name,\n        exportUrl: '/downloads/export.xlsx'\n      });\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      res.status(500).json({ message: 'Failed to export data' });\n    }\n  });\n\n  // Auto-expire subscriptions (runs periodically)\n  app.post('/api/admin/saas/check-expirations', isAuthenticated, requirePermission('saas_admin'), async (req, res) => {\n    try {\n      const now = new Date();\n      \n      // Find expired subscriptions\n      const expiredSubscriptions = await db\n        .select()\n        .from(subscriptions)\n        .where(\n          and(\n            eq(subscriptions.paymentStatus, 'paid'),\n            lt(subscriptions.endDate, now)\n          )\n        );\n\n      let updated = 0;\n      \n      for (const subscription of expiredSubscriptions) {\n        // Update client status to expired\n        await db\n          .update(clients)\n          .set({ \n            status: 'expired',\n            updatedAt: new Date()\n          })\n          .where(eq(clients.id, subscription.clientId));\n\n        // Update subscription status\n        await db\n          .update(subscriptions)\n          .set({ \n            paymentStatus: 'failed',\n            updatedAt: new Date()\n          })\n          .where(eq(subscriptions.id, subscription.id));\n\n        updated++;\n      }\n\n      res.json({\n        message: `Checked and updated ${updated} expired subscriptions`,\n        expiredCount: updated\n      });\n    } catch (error) {\n      console.error('Error checking subscription expirations:', error);\n      res.status(500).json({ message: 'Failed to check expirations' });\n    }\n  });\n\n  // Warranty Claims API Endpoints\n  \n  // GET /api/warranty-claims - List warranty claims with optional filtering\n  app.get('/api/warranty-claims', isAuthenticated, async (req, res) => {\n    try {\n      const { status } = req.query;\n      const claims = await storage.getWarrantyClaims(status as string);\n      res.json(claims);\n    } catch (error) {\n      console.error(\"Error fetching warranty claims:\", error);\n      res.status(500).json({ message: \"Failed to fetch warranty claims\" });\n    }\n  });\n\n  // GET /api/warranty-claims/:id - Get warranty claim by ID\n  app.get('/api/warranty-claims/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const claim = await storage.getWarrantyClaimById(id);\n      \n      if (!claim) {\n        return res.status(404).json({ message: \"Warranty claim not found\" });\n      }\n      \n      res.json(claim);\n    } catch (error) {\n      console.error(\"Error fetching warranty claim:\", error);\n      res.status(500).json({ message: \"Failed to fetch warranty claim\" });\n    }\n  });\n\n  // POST /api/warranty-claims - Create new warranty claim\n  app.post('/api/warranty-claims', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Validate request data\n      const claimData = insertWarrantyClaimSchema.parse({\n        ...req.body\n      });\n\n      // Validate warranty eligibility\n      const eligibilityCheck = await storage.validateWarrantyEligibility(\n        claimData.originalTransactionId || undefined,\n        claimData.originalServiceTicketId || undefined\n      );\n\n      if (!eligibilityCheck.isValid) {\n        return res.status(400).json({ \n          message: eligibilityCheck.message,\n          isEligible: false\n        });\n      }\n\n      // Create warranty claim\n      const claim = await storage.createWarrantyClaim(claimData);\n      \n      // Broadcast warranty claim creation to all clients\n      realtimeService.broadcastToTenant(req.clientId, {\n        resource: 'warranty-claims',\n        action: 'create',\n        data: claim,\n        id: claim.id\n      });\n      \n      res.status(201).json({\n        claim,\n        message: \"Warranty claim created successfully\"\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: \"Validation error\",\n          errors: error.errors\n        });\n      }\n      \n      console.error(\"Error creating warranty claim:\", error);\n      res.status(500).json({ message: \"Failed to create warranty claim\" });\n    }\n  });\n\n  // PUT /api/warranty-claims/:id/process - Process warranty claim (approve/reject)\n  app.put('/api/warranty-claims/:id/process', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { action, adminNotes, returnCondition } = req.body;\n      const userId = req.session.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Validate action and map to status\n      if (!['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ \n          message: \"Action must be either 'approve' or 'reject'\" \n        });\n      }\n\n      // Map frontend action to backend status\n      const status = action === 'approve' ? 'approved' : 'rejected';\n\n      // Get warranty claim details\n      const existingClaim = await storage.getWarrantyClaimById(id);\n      if (!existingClaim) {\n        return res.status(404).json({ message: \"Warranty claim not found\" });\n      }\n\n      if (existingClaim.status !== 'pending') {\n        return res.status(400).json({ \n          message: \"Only pending warranty claims can be processed\" \n        });\n      }\n\n      // For sales return claims that are approved, require returnCondition\n      if (existingClaim.claimType === 'sales_return' && status === 'approved') {\n        if (!returnCondition || !['normal_stock', 'damaged_stock'].includes(returnCondition)) {\n          return res.status(400).json({\n            message: \"returnCondition is required for approved sales return claims and must be 'normal_stock' or 'damaged_stock'\"\n          });\n        }\n      }\n\n      // Process warranty claim\n      const updatedClaim = await storage.processWarrantyClaim(\n        id, \n        status, \n        userId, \n        returnCondition\n      );\n\n      // Broadcast warranty claim update to all clients\n      realtimeService.broadcastToTenant(req.clientId, {\n        resource: 'warranty-claims',\n        action: 'update',\n        data: updatedClaim,\n        id: updatedClaim.id\n      });\n\n      res.json({\n        claim: updatedClaim,\n        message: `Warranty claim ${status} successfully`\n      });\n    } catch (error) {\n      console.error(\"Error processing warranty claim:\", error);\n      res.status(500).json({ message: \"Failed to process warranty claim\" });\n    }\n  });\n\n  // PUT /api/warranty-claims/:id/complete - Mark warranty claim as completed\n  app.put('/api/warranty-claims/:id/complete', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.session.user?.id;\n\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Get warranty claim details\n      const existingClaim = await storage.getWarrantyClaimById(id);\n      if (!existingClaim) {\n        return res.status(404).json({ message: \"Warranty claim not found\" });\n      }\n\n      if (existingClaim.status !== 'approved') {\n        return res.status(400).json({ \n          message: \"Only approved warranty claims can be marked as completed\" \n        });\n      }\n\n      // Handle sales return inventory and finance integration\n      if (existingClaim.claimType === 'sales_return' && existingClaim.originalTransactionId) {\n        await storage.processSalesReturnWarranty(\n          existingClaim.originalTransactionId,\n          existingClaim.returnCondition || 'normal_stock',\n          userId\n        );\n      }\n\n      // Mark warranty claim as processed/completed\n      const updatedClaim = await storage.updateWarrantyClaimStatus(\n        id,\n        'processed',\n        userId\n      );\n\n      // Broadcast warranty claim completion to all clients\n      realtimeService.broadcastToTenant(req.clientId, {\n        resource: 'warranty-claims',\n        action: 'update',\n        data: updatedClaim,\n        id: updatedClaim.id\n      });\n\n      res.json({\n        claim: updatedClaim,\n        message: \"Warranty claim marked as completed successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error completing warranty claim:\", error);\n      res.status(500).json({ message: \"Failed to complete warranty claim\" });\n    }\n  });\n\n  // GET /api/warranty-claims/validate/:type/:id - Validate warranty eligibility\n  app.get('/api/warranty-claims/validate/:type/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { type, id } = req.params;\n      \n      let originalTransactionId: string | undefined;\n      let originalServiceTicketId: string | undefined;\n      \n      if (type === 'sale') {\n        originalTransactionId = id;\n      } else if (type === 'service') {\n        originalServiceTicketId = id;\n      } else {\n        return res.status(400).json({ \n          message: \"Type must be either 'sale' or 'service'\" \n        });\n      }\n\n      const eligibilityCheck = await storage.validateWarrantyEligibility(\n        originalTransactionId,\n        originalServiceTicketId\n      );\n\n      res.json({\n        isEligible: eligibilityCheck.isValid,\n        message: eligibilityCheck.message,\n        type,\n        id\n      });\n    } catch (error) {\n      console.error(\"Error validating warranty eligibility:\", error);\n      res.status(500).json({ \n        message: \"Failed to validate warranty eligibility\",\n        isEligible: false\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket server for real-time updates\n  realtimeService.initialize(httpServer);\n  \n  return httpServer;\n}\n","size_bytes":154034},"server/storage.ts":{"content":"import {\n  users,\n  roles,\n  storeConfig,\n  categories,\n  products,\n  customers,\n  suppliers,\n  locations,\n  productBatches,\n  purchaseOrders,\n  purchaseOrderItems,\n  inventoryAdjustments,\n  inventoryAdjustmentItems,\n  transactions,\n  transactionItems,\n  serviceTickets,\n  serviceTicketParts,\n  stockMovements,\n  financialRecords,\n  warrantyClaims,\n  type User,\n  type InsertUser,\n  type Role,\n  type InsertRole,\n  type StoreConfig,\n  type InsertStoreConfig,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Customer,\n  type InsertCustomer,\n  type Supplier,\n  type InsertSupplier,\n  type Location,\n  type InsertLocation,\n  type ProductBatch,\n  type InsertProductBatch,\n  type PurchaseOrder,\n  type InsertPurchaseOrder,\n  type PurchaseOrderItem,\n  type InsertPurchaseOrderItem,\n  type InventoryAdjustment,\n  type InsertInventoryAdjustment,\n  type InventoryAdjustmentItem,\n  type InsertInventoryAdjustmentItem,\n  type Transaction,\n  type InsertTransaction,\n  type TransactionItem,\n  type InsertTransactionItem,\n  type ServiceTicket,\n  type InsertServiceTicket,\n  type ServiceTicketPart,\n  type InsertServiceTicketPart,\n  type StockMovement,\n  type InsertStockMovement,\n  type FinancialRecord,\n  type InsertFinancialRecord,\n  type WarrantyClaim,\n  type InsertWarrantyClaim,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, gte, lte, like, ilike, count, sum, sql, isNotNull, gt } from \"drizzle-orm\";\nimport {\n  getCurrentJakartaTime,\n  toJakartaTime,\n  formatDateForDatabase,\n  parseWithTimezone,\n  getStartOfDayJakarta,\n  getEndOfDayJakarta,\n  createJakartaTimestamp,\n  createDatabaseTimestamp\n} from \"@shared/utils/timezone\";\nimport { FinanceManager } from \"./financeManager\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser, clientId?: string): Promise<User>;\n  upsertUser(user: Partial<InsertUser> & { id: string }): Promise<User>;\n  \n  // User management\n  getUsers(): Promise<User[]>;\n  getUserCount(clientId?: string): Promise<number>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Role management\n  getRoles(): Promise<Role[]>;\n  getRoleById(id: string): Promise<Role | undefined>;\n  getRoleByName(name: string): Promise<Role | undefined>;\n  createRole(role: InsertRole): Promise<Role>;\n  updateRole(id: string, role: Partial<InsertRole>): Promise<Role>;\n  deleteRole(id: string): Promise<void>;\n  \n  // Store configuration\n  getStoreConfig(clientId?: string): Promise<StoreConfig | undefined>;\n  upsertStoreConfig(config: InsertStoreConfig, clientId?: string): Promise<StoreConfig>;\n  \n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n  \n  // Products\n  getProducts(search?: string): Promise<Product[]>;\n  getProductById(id: string): Promise<Product | undefined>;\n  getProductBySku(sku: string): Promise<Product | undefined>;\n  getProductByBarcode(barcode: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Locations\n  getLocations(): Promise<Location[]>;\n  getLocationById(id: string): Promise<Location | undefined>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  updateLocation(id: string, location: Partial<InsertLocation>): Promise<Location>;\n  deleteLocation(id: string): Promise<void>;\n  \n  // Product Batches\n  getProductBatches(productId?: string): Promise<ProductBatch[]>;\n  getProductBatchById(id: string): Promise<ProductBatch | undefined>;\n  createProductBatch(batch: InsertProductBatch): Promise<ProductBatch>;\n  updateProductBatch(id: string, batch: Partial<InsertProductBatch>): Promise<ProductBatch>;\n  \n  // Purchase Orders\n  getPurchaseOrders(): Promise<PurchaseOrder[]>;\n  getPurchaseOrderById(id: string): Promise<PurchaseOrder | undefined>;\n  createPurchaseOrder(po: InsertPurchaseOrder): Promise<PurchaseOrder>;\n  updatePurchaseOrder(id: string, po: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder>;\n  deletePurchaseOrder(id: string): Promise<void>;\n  approvePurchaseOrder(id: string, approvedBy: string): Promise<PurchaseOrder>;\n  \n  // Purchase Order Items\n  getPurchaseOrderItems(poId: string): Promise<(PurchaseOrderItem & { productName: string; productSku: string })[]>;\n  getAllOutstandingItems(): Promise<(PurchaseOrderItem & { productName: string; productSku: string; poNumber: string })[]>;\n  createPurchaseOrderItem(item: InsertPurchaseOrderItem): Promise<PurchaseOrderItem>;\n  updatePurchaseOrderItem(id: string, item: Partial<InsertPurchaseOrderItem>): Promise<PurchaseOrderItem>;\n  deletePurchaseOrderItem(id: string): Promise<void>;\n  recalculatePurchaseOrderTotal(poId: string): Promise<void>;\n  receivePurchaseOrderItem(itemId: string, receivedQuantity: number, userId: string): Promise<void>;\n  \n  // Inventory Adjustments\n  getInventoryAdjustments(): Promise<InventoryAdjustment[]>;\n  getInventoryAdjustmentById(id: string): Promise<InventoryAdjustment | undefined>;\n  createInventoryAdjustment(adjustment: InsertInventoryAdjustment): Promise<InventoryAdjustment>;\n  approveInventoryAdjustment(id: string, approvedBy: string): Promise<InventoryAdjustment>;\n  \n  // Inventory Adjustment Items\n  getInventoryAdjustmentItems(adjustmentId: string): Promise<InventoryAdjustmentItem[]>;\n  createInventoryAdjustmentItem(item: InsertInventoryAdjustmentItem): Promise<InventoryAdjustmentItem>;\n  \n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomerById(id: string): Promise<Customer | undefined>;\n  searchCustomers(query: string): Promise<Customer[]>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n  \n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplierById(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: string, supplier: Partial<InsertSupplier>): Promise<Supplier>;\n  deleteSupplier(id: string): Promise<void>;\n  \n  // Transactions\n  getTransactions(limit?: number): Promise<Transaction[]>;\n  getTransactionById(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction, items: InsertTransactionItem[]): Promise<Transaction>;\n  \n  // Service Tickets\n  getServiceTickets(): Promise<ServiceTicket[]>;\n  getServiceTicketById(id: string): Promise<ServiceTicket | undefined>;\n  getActiveServiceTickets(): Promise<ServiceTicket[]>;\n  createServiceTicket(ticket: InsertServiceTicket): Promise<ServiceTicket>;\n  updateServiceTicket(id: string, ticket: Partial<InsertServiceTicket>, parts?: InsertServiceTicketPart[], userId?: string): Promise<ServiceTicket>;\n  deleteServiceTicket(id: string): Promise<void>;\n  cancelServiceTicket(id: string, data: {\n    cancellationFee: string;\n    cancellationReason: string;\n    cancellationType: 'before_completed' | 'after_completed' | 'warranty_refund';\n    userId: string;\n  }): Promise<{ success: boolean; message?: string }>;\n  \n  // Stock Movements\n  getStockMovements(productId?: string): Promise<StockMovement[]>;\n  createStockMovement(movement: InsertStockMovement): Promise<StockMovement>;\n  \n  // Financial Records\n  getFinancialRecords(startDate?: Date, endDate?: Date): Promise<FinancialRecord[]>;\n  createFinancialRecord(record: InsertFinancialRecord): Promise<FinancialRecord>;\n  \n  // Reports\n  getSalesReport(startDate: Date, endDate: Date): Promise<{ totalSales: string; transactions: any[] }>;\n  getServiceReport(startDate: Date, endDate: Date): Promise<{ totalServices: number; tickets: any[] }>;\n  getFinancialReport(startDate: Date, endDate: Date): Promise<{ totalIncome: string; totalExpense: string; profit: string; records: any[] }>;\n  getInventoryReport(): Promise<{ lowStockCount: number; lowStockProducts: any[]; totalProducts: number }>;\n  \n  // Enhanced Accounting Reports\n  getBalanceSheet(asOfDate?: Date): Promise<any>;\n  getIncomeStatement(startDate?: Date, endDate?: Date): Promise<any>;\n  getChartOfAccounts(): Promise<any[]>;\n  createJournalEntry(data: any): Promise<{ success: boolean; journalEntry?: any; error?: string }>;\n  \n  // Dashboard Statistics\n  getDashboardStats(): Promise<{\n    todaySales: string;\n    todayRevenue: string;\n    activeServices: number;\n    lowStockCount: number;\n    monthlyProfit: string;\n    whatsappConnected: boolean;\n  }>;\n  \n  // Warranty Claims\n  getWarrantyClaims(status?: string): Promise<WarrantyClaim[]>;\n  getWarrantyClaimById(id: string): Promise<WarrantyClaim | undefined>;\n  createWarrantyClaim(claim: InsertWarrantyClaim): Promise<WarrantyClaim>;\n  updateWarrantyClaimStatus(id: string, status: string, processedBy?: string): Promise<WarrantyClaim>;\n  processWarrantyClaim(id: string, status: string, processedBy: string, returnCondition?: string): Promise<WarrantyClaim>;\n  validateWarrantyEligibility(originalTransactionId?: string, originalServiceTicketId?: string): Promise<{ isValid: boolean; message: string }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: InsertUser, clientId?: string): Promise<User> {\n    const userDataWithClient = {\n      ...userData,\n      clientId: clientId || null\n    };\n    const [user] = await db\n      .insert(users)\n      .values(userDataWithClient)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: Partial<InsertUser> & { id: string }): Promise<User> {\n    // Try to find existing user\n    const existingUser = await this.getUser(userData.id);\n    \n    if (existingUser) {\n      // User exists, update them\n      const [user] = await db\n        .update(users)\n        .set({ ...userData, updatedAt: new Date() })\n        .where(eq(users.id, userData.id))\n        .returning();\n      return user;\n    } else {\n      // User doesn't exist, create them with defaults\n      const newUserData: InsertUser = {\n        username: userData.email || `user_${userData.id}`,\n        email: userData.email || null,\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        password: '', // No password for Replit Auth users\n        role: 'admin', // Default to admin for first user, or could be 'kasir'\n        isActive: true,\n        profileImageUrl: userData.profileImageUrl || null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        ...userData\n      };\n      \n      const [user] = await db\n        .insert(users)\n        .values(newUserData)\n        .returning();\n      return user;\n    }\n  }\n\n  // User management\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getUserCount(clientId?: string): Promise<number> {\n    if (clientId) {\n      // Multi-tenant mode: count users for specific client\n      const result = await db\n        .select({ count: count() })\n        .from(users)\n        .where(eq(users.clientId, clientId));\n      return result[0]?.count || 0;\n    } else {\n      // Single-tenant mode: count all users (legacy behavior)\n      const result = await db\n        .select({ count: count() })\n        .from(users);\n      return result[0]?.count || 0;\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Role management\n  async getRoles(): Promise<Role[]> {\n    return await db.select().from(roles).where(eq(roles.isActive, true)).orderBy(asc(roles.displayName));\n  }\n\n  async getRoleById(id: string): Promise<Role | undefined> {\n    const [role] = await db.select().from(roles).where(eq(roles.id, id));\n    return role;\n  }\n\n  async getRoleByName(name: string): Promise<Role | undefined> {\n    const [role] = await db.select().from(roles).where(eq(roles.name, name));\n    return role;\n  }\n\n  async createRole(roleData: InsertRole): Promise<Role> {\n    const [role] = await db.insert(roles).values(roleData).returning();\n    return role;\n  }\n\n  async updateRole(id: string, roleData: Partial<InsertRole>): Promise<Role> {\n    const [role] = await db\n      .update(roles)\n      .set({ ...roleData, updatedAt: new Date() })\n      .where(eq(roles.id, id))\n      .returning();\n    return role;\n  }\n\n  async deleteRole(id: string): Promise<void> {\n    await db.update(roles).set({ isActive: false }).where(eq(roles.id, id));\n  }\n\n  // Store configuration (tenant-aware)\n  async getStoreConfig(clientId?: string): Promise<StoreConfig | undefined> {\n    if (clientId) {\n      // Multi-tenant mode: get config for specific client\n      const [config] = await db\n        .select()\n        .from(storeConfig)\n        .where(eq(storeConfig.clientId, clientId))\n        .limit(1);\n      return config;\n    } else {\n      // Single-tenant mode: get first config (legacy behavior)\n      const [config] = await db.select().from(storeConfig).limit(1);\n      return config;\n    }\n  }\n\n  async upsertStoreConfig(configData: InsertStoreConfig, clientId?: string): Promise<StoreConfig> {\n    const existing = await this.getStoreConfig(clientId);\n    \n    if (existing) {\n      const [config] = await db\n        .update(storeConfig)\n        .set({ ...configData, updatedAt: new Date() })\n        .where(eq(storeConfig.id, existing.id))\n        .returning();\n      return config;\n    } else {\n      const [config] = await db\n        .insert(storeConfig)\n        .values({\n          ...configData,\n          clientId: clientId || null\n        })\n        .returning();\n      return config;\n    }\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(asc(categories.name));\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category;\n  }\n\n  async createCategory(categoryData: InsertCategory): Promise<Category> {\n    const [category] = await db.insert(categories).values(categoryData).returning();\n    return category;\n  }\n\n  async updateCategory(id: string, categoryData: Partial<InsertCategory>): Promise<Category> {\n    const [category] = await db\n      .update(categories)\n      .set(categoryData)\n      .where(eq(categories.id, id))\n      .returning();\n    return category;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isActive, true)).orderBy(asc(products.name));\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async getProductBySku(sku: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.sku, sku));\n    return product;\n  }\n\n  async getProductByBarcode(barcode: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.barcode, barcode));\n    return product;\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          ilike(products.name, `%${query}%`)\n        )\n      )\n      .orderBy(asc(products.name));\n  }\n\n  async getLowStockProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.stock} <= ${products.minStock}`\n        )\n      )\n      .orderBy(asc(products.name));\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(productData as any).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db\n      .update(products)\n      .set({ ...productData, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  // Locations\n  async getLocations(): Promise<Location[]> {\n    return await db.select().from(locations).where(eq(locations.isActive, true)).orderBy(asc(locations.name));\n  }\n\n  async getLocationById(id: string): Promise<Location | undefined> {\n    const [location] = await db.select().from(locations).where(eq(locations.id, id));\n    return location;\n  }\n\n  async createLocation(locationData: InsertLocation): Promise<Location> {\n    const [location] = await db.insert(locations).values(locationData).returning();\n    return location;\n  }\n\n  async updateLocation(id: string, locationData: Partial<InsertLocation>): Promise<Location> {\n    const [location] = await db\n      .update(locations)\n      .set(locationData)\n      .where(eq(locations.id, id))\n      .returning();\n    return location;\n  }\n\n  async deleteLocation(id: string): Promise<void> {\n    await db.update(locations).set({ isActive: false }).where(eq(locations.id, id));\n  }\n\n  // Product Batches\n  async getProductBatches(productId?: string): Promise<ProductBatch[]> {\n    if (productId) {\n      return await db.select().from(productBatches).where(eq(productBatches.productId, productId)).orderBy(desc(productBatches.receivedDate));\n    }\n    return await db.select().from(productBatches).orderBy(desc(productBatches.receivedDate));\n  }\n\n  async getProductBatchById(id: string): Promise<ProductBatch | undefined> {\n    const [batch] = await db.select().from(productBatches).where(eq(productBatches.id, id));\n    return batch;\n  }\n\n  async createProductBatch(batchData: InsertProductBatch): Promise<ProductBatch> {\n    const [batch] = await db.insert(productBatches).values(batchData).returning();\n    return batch;\n  }\n\n  async updateProductBatch(id: string, batchData: Partial<InsertProductBatch>): Promise<ProductBatch> {\n    const [batch] = await db\n      .update(productBatches)\n      .set({ ...batchData, updatedAt: new Date() })\n      .where(eq(productBatches.id, id))\n      .returning();\n    return batch;\n  }\n\n  // Purchase Orders\n  async getPurchaseOrders(): Promise<(PurchaseOrder & { supplierName: string; itemCount?: number; outstandingCount?: number })[]> {\n    // Get base purchase orders first\n    const purchaseOrdersWithSupplier = await db\n      .select({\n        id: purchaseOrders.id,\n        clientId: purchaseOrders.clientId,\n        createdAt: purchaseOrders.createdAt,\n        updatedAt: purchaseOrders.updatedAt,\n        status: purchaseOrders.status,\n        notes: purchaseOrders.notes,\n        paymentTerms: purchaseOrders.paymentTerms,\n        supplierId: purchaseOrders.supplierId,\n        subtotal: purchaseOrders.subtotal,\n        taxAmount: purchaseOrders.taxAmount,\n        discountAmount: purchaseOrders.discountAmount,\n        totalAmount: purchaseOrders.totalAmount,\n        poNumber: purchaseOrders.poNumber,\n        orderDate: purchaseOrders.orderDate,\n        expectedDeliveryDate: purchaseOrders.expectedDeliveryDate,\n        actualDeliveryDate: purchaseOrders.actualDeliveryDate,\n        approvedBy: purchaseOrders.approvedBy,\n        approvedDate: purchaseOrders.approvedDate,\n        requestedBy: purchaseOrders.requestedBy,\n        deliveryAddress: purchaseOrders.deliveryAddress,\n        shippingMethod: purchaseOrders.shippingMethod,\n        trackingNumber: purchaseOrders.trackingNumber,\n        shippingCost: purchaseOrders.shippingCost,\n        internalNotes: purchaseOrders.internalNotes,\n        supplierName: suppliers.name,\n      })\n      .from(purchaseOrders)\n      .leftJoin(suppliers, eq(purchaseOrders.supplierId, suppliers.id))\n      .orderBy(desc(purchaseOrders.orderDate));\n\n    // Add item counts separately to avoid complex SQL\n    const result = await Promise.all(\n      purchaseOrdersWithSupplier.map(async (po) => {\n        const itemCountResult = await db\n          .select({ count: count() })\n          .from(purchaseOrderItems)\n          .where(eq(purchaseOrderItems.purchaseOrderId, po.id));\n\n        const outstandingResult = await db\n          .select({ count: count() })\n          .from(purchaseOrderItems)\n          .where(\n            and(\n              eq(purchaseOrderItems.purchaseOrderId, po.id),\n              or(\n                isNotNull(purchaseOrderItems.outstandingQuantity),\n                eq(purchaseOrderItems.outstandingStatus, 'pending')\n              )\n            )\n          );\n\n        return {\n          ...po,\n          supplierName: po.supplierName || 'Unknown Supplier',\n          itemCount: itemCountResult[0]?.count || 0,\n          outstandingCount: outstandingResult[0]?.count || 0,\n        };\n      })\n    );\n\n    return result;\n  }\n\n  async getPurchaseOrderById(id: string): Promise<PurchaseOrder | undefined> {\n    const [po] = await db.select().from(purchaseOrders).where(eq(purchaseOrders.id, id));\n    return po;\n  }\n\n  async createPurchaseOrder(poData: InsertPurchaseOrder): Promise<PurchaseOrder> {\n    // Generate PO number\n    const countResult = await db.select({ count: count() }).from(purchaseOrders);\n    const poNumber = `PO-${String(countResult[0].count + 1).padStart(5, '0')}`;\n    \n    const [po] = await db.insert(purchaseOrders).values({\n      ...poData,\n      poNumber,\n    }).returning();\n    return po;\n  }\n\n  async updatePurchaseOrder(id: string, poData: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder> {\n    const [po] = await db\n      .update(purchaseOrders)\n      .set({ ...poData, updatedAt: new Date() })\n      .where(eq(purchaseOrders.id, id))\n      .returning();\n    return po;\n  }\n\n  async deletePurchaseOrder(id: string): Promise<void> {\n    await db.delete(purchaseOrders).where(eq(purchaseOrders.id, id));\n  }\n\n  async approvePurchaseOrder(id: string, approvedBy: string): Promise<PurchaseOrder> {\n    const [po] = await db\n      .update(purchaseOrders)\n      .set({ \n        status: 'confirmed',\n        approvedBy: approvedBy,\n        approvedDate: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrders.id, id))\n      .returning();\n    return po;\n  }\n\n  // Purchase Order Items\n  async getPurchaseOrderItems(poId: string): Promise<(PurchaseOrderItem & { productName: string; productSku: string })[]> {\n    const items = await db\n      .select({\n        id: purchaseOrderItems.id,\n        clientId: purchaseOrderItems.clientId,\n        createdAt: purchaseOrderItems.createdAt,\n        updatedAt: purchaseOrderItems.updatedAt,\n        notes: purchaseOrderItems.notes,\n        productId: purchaseOrderItems.productId,\n        quantity: purchaseOrderItems.quantity,\n        unitPrice: purchaseOrderItems.unitPrice,\n        unitCost: purchaseOrderItems.unitCost,\n        receivedQuantity: purchaseOrderItems.receivedQuantity,\n        outstandingQuantity: purchaseOrderItems.outstandingQuantity,\n        outstandingStatus: purchaseOrderItems.outstandingStatus,\n        purchaseOrderId: purchaseOrderItems.purchaseOrderId,\n        orderedQuantity: purchaseOrderItems.orderedQuantity,\n        outstandingReason: purchaseOrderItems.outstandingReason,\n        outstandingUpdatedBy: purchaseOrderItems.outstandingUpdatedBy,\n        outstandingUpdatedAt: purchaseOrderItems.outstandingUpdatedAt,\n        totalCost: purchaseOrderItems.totalCost,\n        totalPrice: purchaseOrderItems.totalPrice,\n        productName: products.name,\n        productSku: products.sku,\n      })\n      .from(purchaseOrderItems)\n      .leftJoin(products, eq(purchaseOrderItems.productId, products.id))\n      .where(eq(purchaseOrderItems.purchaseOrderId, poId));\n    \n    return items.map(item => ({\n      ...item,\n      productName: item.productName || 'Unknown Product',\n      productSku: item.productSku || 'N/A'\n    }));\n  }\n\n  // Get ALL outstanding items from ALL purchase orders (for reports)\n  async getAllOutstandingItems(): Promise<(PurchaseOrderItem & { productName: string; productSku: string; poNumber: string })[]> {\n    const items = await db\n      .select({\n        id: purchaseOrderItems.id,\n        clientId: purchaseOrderItems.clientId,\n        createdAt: purchaseOrderItems.createdAt,\n        updatedAt: purchaseOrderItems.updatedAt,\n        notes: purchaseOrderItems.notes,\n        productId: purchaseOrderItems.productId,\n        quantity: purchaseOrderItems.quantity,\n        unitPrice: purchaseOrderItems.unitPrice,\n        unitCost: purchaseOrderItems.unitCost,\n        receivedQuantity: purchaseOrderItems.receivedQuantity,\n        outstandingQuantity: purchaseOrderItems.outstandingQuantity,\n        outstandingStatus: purchaseOrderItems.outstandingStatus,\n        purchaseOrderId: purchaseOrderItems.purchaseOrderId,\n        orderedQuantity: purchaseOrderItems.orderedQuantity,\n        outstandingReason: purchaseOrderItems.outstandingReason,\n        outstandingUpdatedBy: purchaseOrderItems.outstandingUpdatedBy,\n        outstandingUpdatedAt: purchaseOrderItems.outstandingUpdatedAt,\n        totalCost: purchaseOrderItems.totalCost,\n        totalPrice: purchaseOrderItems.totalPrice,\n        productName: products.name,\n        productSku: products.sku,\n        poNumber: purchaseOrders.poNumber,\n      })\n      .from(purchaseOrderItems)\n      .leftJoin(products, eq(purchaseOrderItems.productId, products.id))\n      .leftJoin(purchaseOrders, eq(purchaseOrderItems.purchaseOrderId, purchaseOrders.id))\n      .where(and(\n        isNotNull(purchaseOrderItems.outstandingQuantity),\n        gt(purchaseOrderItems.outstandingQuantity, 0)\n      ))\n      .orderBy(desc(purchaseOrders.orderDate));\n    \n    return items.map(item => ({\n      ...item,\n      productName: item.productName || 'Unknown Product',\n      productSku: item.productSku || 'N/A',\n      poNumber: item.poNumber || 'N/A'\n    }));\n  }\n\n  async createPurchaseOrderItem(itemData: InsertPurchaseOrderItem): Promise<PurchaseOrderItem> {\n    const [item] = await db.insert(purchaseOrderItems).values(itemData).returning();\n    \n    // Auto recalculate PO total and update status\n    await this.recalculatePurchaseOrderTotal(itemData.purchaseOrderId);\n    \n    return item;\n  }\n\n  async recalculatePurchaseOrderTotal(poId: string): Promise<void> {\n    // Calculate total from all items\n    const result = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(${purchaseOrderItems.quantity} * CAST(${purchaseOrderItems.unitCost} AS NUMERIC)), 0)`,\n        count: sql<number>`COUNT(${purchaseOrderItems.id})`\n      })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.purchaseOrderId, poId));\n    \n    const calculatedTotal = result[0]?.total || 0;\n    const itemCount = result[0]?.count || 0;\n    \n    // Update PO with new total and status\n    const updateData: any = {\n      totalAmount: calculatedTotal.toString(),\n      updatedAt: new Date()\n    };\n    \n    // Change status from draft to pending if there are items\n    if (itemCount > 0) {\n      updateData.status = 'pending';\n    }\n    \n    await db\n      .update(purchaseOrders)\n      .set(updateData)\n      .where(eq(purchaseOrders.id, poId));\n  }\n\n  async updatePurchaseOrderItem(id: string, itemData: Partial<InsertPurchaseOrderItem>): Promise<PurchaseOrderItem> {\n    // Get PO ID for recalculation\n    const [existingItem] = await db.select({ purchaseOrderId: purchaseOrderItems.purchaseOrderId })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, id));\n    \n    const [item] = await db\n      .update(purchaseOrderItems)\n      .set(itemData)\n      .where(eq(purchaseOrderItems.id, id))\n      .returning();\n    \n    // Recalculate total after update\n    if (existingItem) {\n      await this.recalculatePurchaseOrderTotal(existingItem.purchaseOrderId);\n    }\n    \n    return item;\n  }\n\n  async deletePurchaseOrderItem(id: string): Promise<void> {\n    // Get PO ID before deleting item\n    const [item] = await db.select({ purchaseOrderId: purchaseOrderItems.purchaseOrderId })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, id));\n    \n    await db.delete(purchaseOrderItems).where(eq(purchaseOrderItems.id, id));\n    \n    // Recalculate total after deletion\n    if (item) {\n      await this.recalculatePurchaseOrderTotal(item.purchaseOrderId);\n    }\n  }\n\n  // Update outstanding status for purchase order item\n  async updateOutstandingItemStatus(itemId: string, status: string, reason?: string, userId?: string): Promise<void> {\n    const [item] = await db\n      .select({ outstandingQuantity: purchaseOrderItems.outstandingQuantity })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, itemId));\n\n    if (!item) throw new Error(\"Purchase order item not found\");\n    if (!item.outstandingQuantity || item.outstandingQuantity <= 0) {\n      throw new Error(\"No outstanding quantity to update\");\n    }\n\n    await db\n      .update(purchaseOrderItems)\n      .set({\n        outstandingStatus: status,\n        outstandingReason: reason,\n        outstandingUpdatedBy: userId,\n        outstandingUpdatedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrderItems.id, itemId));\n  }\n\n  async receivePurchaseOrderItem(itemId: string, receivedQuantity: number, userId: string): Promise<void> {\n    // Get item details with select all - no complex field selection\n    const [item] = await db\n      .select()\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, itemId));\n\n    if (!item) throw new Error(\"Purchase order item not found\");\n\n    const newReceivedQuantity = (item.receivedQuantity || 0) + receivedQuantity;\n    const newOutstandingQuantity = item.quantity - newReceivedQuantity;\n    \n    // Update received quantity and outstanding tracking\n    await db\n      .update(purchaseOrderItems)\n      .set({ \n        receivedQuantity: newReceivedQuantity,\n        outstandingQuantity: newOutstandingQuantity,\n        // Clear outstanding status when fully received or keep as completed for refunded items\n        outstandingStatus: newOutstandingQuantity > 0 ? (item.outstandingStatus || 'pending') : 'completed',\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrderItems.id, itemId));\n\n    // Record stock movement with actual purchase price - different for refunded items\n    const movementNotes = item.outstandingStatus === 'refunded' \n      ? `Refunded goods received from PO` \n      : `Received from PO`;\n      \n    await db.insert(stockMovements).values({\n      productId: item.productId,\n      movementType: 'in',\n      quantity: receivedQuantity,\n      unitCost: item.unitCost || item.unitPrice, // Try both field names for HPP calculation\n      referenceId: item.purchaseOrderId,\n      referenceType: item.outstandingStatus === 'refunded' ? 'purchase_refund' : 'purchase',\n      notes: movementNotes,\n      userId: userId,\n    });\n\n    // CREATE PROPER JOURNAL ENTRY for purchase (inventory in, cash/accounts payable out)\n    const totalCost = parseFloat(item.unitCost || item.unitPrice || '0') * receivedQuantity;\n    if (totalCost > 0) {\n      try {\n        const { FinanceManager } = await import('./financeManager');\n        const financeManager = new FinanceManager();\n        \n        // Create different journal entries for refunded vs normal items\n        if (item.outstandingStatus === 'refunded') {\n          // For refunded items: Debit Inventory, Credit Refund Recovery\n          await financeManager.createJournalEntry({\n            description: `Refund recovery - ${receivedQuantity} units received`,\n            reference: item.purchaseOrderId,\n            referenceType: 'purchase_refund',\n            lines: [\n              {\n                accountCode: '1300', // Inventory asset account\n                description: `Inventory increase - Refund Recovery`,\n                debitAmount: totalCost.toString()\n              },\n              {\n                accountCode: '1200', // Accounts Receivable or Refund Recovery\n                description: `Refund recovery - Supplier returned goods`,\n                creditAmount: totalCost.toString()\n              }\n            ],\n            userId: userId\n          });\n        } else {\n          // Normal purchase: Debit Inventory, Credit Accounts Payable\n          await financeManager.createJournalEntry({\n            description: `Inventory purchase - ${receivedQuantity} units received`,\n            reference: item.purchaseOrderId,\n            referenceType: 'purchase_order',\n            lines: [\n              {\n                accountCode: '1300', // Inventory asset account\n                description: `Inventory increase - Purchase`,\n                debitAmount: totalCost.toString()\n              },\n              {\n                accountCode: '2000', // Accounts Payable (or could be cash if paid immediately)\n                description: `Purchase liability - PO payment due`,\n                creditAmount: totalCost.toString()\n              }\n            ],\n            userId: userId\n          });\n        }\n\n        // Also create the simple financial record for backward compatibility\n        // IMPORTANT: Refunds should NOT be counted as income for accounting accuracy\n        const recordType = item.outstandingStatus === 'refunded' ? 'refund_recovery' : 'expense';\n        const recordDescription = item.outstandingStatus === 'refunded' \n          ? `Refund Recovery: ${receivedQuantity} units received`\n          : `Purchase: ${receivedQuantity} units received`;\n        const recordCategory = item.outstandingStatus === 'refunded' \n          ? 'Returns and Allowances'\n          : 'Inventory Purchase';\n          \n        await db.insert(financialRecords).values({\n          type: recordType,\n          amount: totalCost.toString(),\n          description: recordDescription,\n          category: recordCategory,\n          reference: item.purchaseOrderId,\n          referenceType: item.outstandingStatus === 'refunded' ? 'refund_recovery' : 'purchase_order',\n          userId: userId,\n        });\n      } catch (error) {\n        console.error(\"Error creating journal entry for purchase:\", error);\n        // Fallback to simple financial record\n        await db.insert(financialRecords).values({\n          type: 'expense',\n          amount: totalCost.toString(),\n          description: `Purchase: ${receivedQuantity} units received`,\n          category: 'Inventory Purchase',\n          reference: item.purchaseOrderId,\n          referenceType: 'purchase_order',\n          userId: userId,\n        });\n      }\n    }\n\n    // DIRECT UPDATE: Use SQL arithmetic to ensure stock update works\n    await db\n      .update(products)\n      .set({ \n        stock: sql`${products.stock} + ${receivedQuantity}`,\n        lastPurchasePrice: item.unitCost || item.unitPrice, // Update last purchase price - use available field\n        updatedAt: new Date()\n      })\n      .where(eq(products.id, item.productId));\n\n    // CALCULATE AND UPDATE HPP (Average Cost) after receiving new stock\n    const newAverageCost = await this.getAveragePurchasePrice(item.productId);\n    await db\n      .update(products)\n      .set({ \n        averageCost: newAverageCost.toString(),\n        updatedAt: new Date()\n      })\n      .where(eq(products.id, item.productId));\n\n    // Check if PO should be updated to received status\n    await this.updatePurchaseOrderStatus(item.purchaseOrderId);\n  }\n\n  async updatePurchaseOrderStatus(poId: string): Promise<void> {\n    // Get all items for this PO\n    const items = await db\n      .select({\n        quantity: purchaseOrderItems.quantity,\n        receivedQuantity: purchaseOrderItems.receivedQuantity\n      })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.purchaseOrderId, poId));\n\n    if (items.length === 0) return;\n\n    const totalOrdered = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totalReceived = items.reduce((sum, item) => sum + (item.receivedQuantity || 0), 0);\n\n    let newStatus = 'confirmed';\n    if (totalReceived === totalOrdered) {\n      newStatus = 'received';\n    } else if (totalReceived > 0) {\n      newStatus = 'partial_received';\n    }\n\n    await db\n      .update(purchaseOrders)\n      .set({ \n        status: newStatus as any,\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrders.id, poId));\n  }\n\n  // Inventory Adjustments\n  async getInventoryAdjustments(): Promise<InventoryAdjustment[]> {\n    return await db.select().from(inventoryAdjustments).orderBy(desc(inventoryAdjustments.createdAt));\n  }\n\n  async getInventoryAdjustmentById(id: string): Promise<InventoryAdjustment | undefined> {\n    const [adjustment] = await db.select().from(inventoryAdjustments).where(eq(inventoryAdjustments.id, id));\n    return adjustment;\n  }\n\n  async createInventoryAdjustment(adjustmentData: InsertInventoryAdjustment): Promise<InventoryAdjustment> {\n    // Generate adjustment number\n    const countResult = await db.select({ count: count() }).from(inventoryAdjustments);\n    const adjustmentNumber = `ADJ-${String(countResult[0].count + 1).padStart(5, '0')}`;\n    \n    const [adjustment] = await db.insert(inventoryAdjustments).values({\n      ...adjustmentData,\n      adjustmentNumber,\n    }).returning();\n    return adjustment;\n  }\n\n  async approveInventoryAdjustment(id: string, approvedBy: string): Promise<InventoryAdjustment> {\n    return await db.transaction(async (tx) => {\n      // Get adjustment and items\n      const [adjustment] = await tx.select().from(inventoryAdjustments).where(eq(inventoryAdjustments.id, id));\n      if (!adjustment) {\n        throw new Error('Adjustment not found');\n      }\n\n      const items = await tx.select().from(inventoryAdjustmentItems).where(eq(inventoryAdjustmentItems.adjustmentId, id));\n\n      // Update product stocks based on adjustment\n      for (const item of items) {\n        await tx\n          .update(products)\n          .set({ \n            stock: sql`${products.stock} + ${item.adjustmentQuantity}`,\n            updatedAt: new Date()\n          })\n          .where(eq(products.id, item.productId));\n\n        // Create stock movement\n        await tx.insert(stockMovements).values({\n          productId: item.productId,\n          batchId: item.batchId,\n          locationId: item.locationId,\n          movementType: item.adjustmentQuantity > 0 ? 'in' : 'out',\n          quantity: Math.abs(item.adjustmentQuantity),\n          unitCost: item.unitCost,\n          referenceId: id,\n          referenceType: 'adjustment',\n          notes: `Inventory adjustment: ${adjustment.reason}`,\n          userId: approvedBy,\n        });\n      }\n\n      // Update adjustment status\n      const [updatedAdjustment] = await tx\n        .update(inventoryAdjustments)\n        .set({ \n          status: 'approved',\n          approvedBy: approvedBy,\n          approvedDate: new Date(),\n          updatedAt: new Date()\n        })\n        .where(eq(inventoryAdjustments.id, id))\n        .returning();\n\n      return updatedAdjustment;\n    });\n  }\n\n  // Inventory Adjustment Items\n  async getInventoryAdjustmentItems(adjustmentId: string): Promise<InventoryAdjustmentItem[]> {\n    return await db.select().from(inventoryAdjustmentItems).where(eq(inventoryAdjustmentItems.adjustmentId, adjustmentId));\n  }\n\n  async createInventoryAdjustmentItem(itemData: InsertInventoryAdjustmentItem): Promise<InventoryAdjustmentItem> {\n    const [item] = await db.insert(inventoryAdjustmentItems).values(itemData).returning();\n    return item;\n  }\n\n  // Enhanced stock movement with new system\n  async createStockMovement(movementData: InsertStockMovement): Promise<StockMovement> {\n    const [movement] = await db.insert(stockMovements).values(movementData).returning();\n    \n    // CREATE FINANCE TRANSACTION for stock movements that have cost impact\n    if (movement.unitCost && parseFloat(movement.unitCost) > 0) {\n      const totalCost = parseFloat(movement.unitCost) * movement.quantity;\n      let transactionType: 'income' | 'expense' = 'expense';\n      let description = `Stock movement: ${movement.movementType}`;\n      \n      if (movement.movementType === 'out') {\n        // When stock goes out, it's usually a sale (income) or expense (cost of goods sold)\n        transactionType = movement.referenceType === 'sale' ? 'income' : 'expense';\n        description = movement.referenceType === 'sale' ? \n          `Sale: ${movement.quantity} units` : \n          `Stock out: ${movement.quantity} units`;\n      } else {\n        // When stock comes in, it's usually a purchase (expense)\n        transactionType = 'expense';\n        description = `Stock in: ${movement.quantity} units`;\n      }\n      \n      await db.insert(financialRecords).values({\n        type: transactionType,\n        amount: totalCost.toString(),\n        description,\n        category: movement.referenceType === 'sale' ? 'Sales Revenue' : 'Inventory',\n        reference: movement.referenceId,\n        referenceType: movement.referenceType,\n        userId: movement.userId,\n      });\n    }\n    \n    return movement;\n  }\n\n  async getAveragePurchasePrice(productId: string): Promise<number> {\n    // Get all stock movements where stock came in (type: 'in') for this product\n    const movements = await db\n      .select({\n        quantity: stockMovements.quantity,\n        unitCost: stockMovements.unitCost\n      })\n      .from(stockMovements)\n      .where(and(\n        eq(stockMovements.productId, productId),\n        eq(stockMovements.movementType, 'in'),\n        isNotNull(stockMovements.unitCost)\n      ));\n\n    if (movements.length === 0) {\n      // If no stock movements with price found, fallback to product's purchase price\n      const [product] = await db.select({ purchasePrice: products.lastPurchasePrice })\n        .from(products)\n        .where(eq(products.id, productId));\n      return parseFloat(product?.purchasePrice || '0');\n    }\n\n    // Calculate weighted average: sum(quantity * price) / sum(quantity)\n    let totalWeightedCost = 0;\n    let totalQuantity = 0;\n    \n    for (const movement of movements) {\n      const price = parseFloat(movement.unitCost || '0');\n      const quantity = movement.quantity;\n      totalWeightedCost += price * quantity;\n      totalQuantity += quantity;\n    }\n\n    return totalQuantity > 0 ? totalWeightedCost / totalQuantity : 0;\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(asc(customers.name));\n  }\n\n  async getCustomerById(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async searchCustomers(query: string): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(ilike(customers.name, `%${query}%`))\n      .orderBy(asc(customers.name));\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<Customer> {\n    const [customer] = await db.insert(customers).values(customerData).returning();\n    return customer;\n  }\n\n  async updateCustomer(id: string, customerData: Partial<InsertCustomer>): Promise<Customer> {\n    const [customer] = await db\n      .update(customers)\n      .set({ ...customerData, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return customer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db.delete(customers).where(eq(customers.id, id));\n  }\n\n  // Suppliers\n  async getSuppliers(): Promise<Supplier[]> {\n    return await db.select().from(suppliers).orderBy(asc(suppliers.name));\n  }\n\n  async getSupplierById(id: string): Promise<Supplier | undefined> {\n    const [supplier] = await db.select().from(suppliers).where(eq(suppliers.id, id));\n    return supplier;\n  }\n\n  async createSupplier(supplierData: InsertSupplier): Promise<Supplier> {\n    const [supplier] = await db.insert(suppliers).values(supplierData).returning();\n    return supplier;\n  }\n\n  async updateSupplier(id: string, supplierData: Partial<InsertSupplier>): Promise<Supplier> {\n    const [supplier] = await db\n      .update(suppliers)\n      .set({ ...supplierData, updatedAt: new Date() })\n      .where(eq(suppliers.id, id))\n      .returning();\n    return supplier;\n  }\n\n  async deleteSupplier(id: string): Promise<void> {\n    await db.delete(suppliers).where(eq(suppliers.id, id));\n  }\n\n  // Transactions\n  async getTransactions(limit: number = 50): Promise<Transaction[]> {\n    const transactionList = await db\n      .select()\n      .from(transactions)\n      .leftJoin(customers, eq(transactions.customerId, customers.id))\n      .leftJoin(users, eq(transactions.userId, users.id))\n      .orderBy(desc(transactions.createdAt))\n      .limit(limit);\n    \n    // For each transaction, get its items with product details\n    const transactionsWithItems = await Promise.all(\n      transactionList.map(async (row) => {\n        const transaction = row.transactions;\n        \n        const items = await db\n          .select({\n            id: transactionItems.id,\n            quantity: transactionItems.quantity,\n            unitPrice: transactionItems.unitPrice,\n            totalPrice: transactionItems.totalPrice,\n            product: {\n              id: products.id,\n              name: products.name,\n              sku: products.sku,\n            }\n          })\n          .from(transactionItems)\n          .leftJoin(products, eq(transactionItems.productId, products.id))\n          .where(eq(transactionItems.transactionId, transaction.id));\n        \n        const { password: _, ...userWithoutPassword } = row.users || {};\n        \n        return {\n          ...transaction,\n          items,\n          customer: row.customers,\n          user: userWithoutPassword\n        };\n      })\n    );\n    \n    return transactionsWithItems as any;\n  }\n\n  async getTransactionById(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    if (!transaction) return undefined;\n    \n    // Get transaction items with product details\n    const items = await db\n      .select({\n        id: transactionItems.id,\n        quantity: transactionItems.quantity,\n        unitPrice: transactionItems.unitPrice,\n        totalPrice: transactionItems.totalPrice,\n        product: {\n          id: products.id,\n          name: products.name,\n          sku: products.sku,\n        }\n      })\n      .from(transactionItems)\n      .leftJoin(products, eq(transactionItems.productId, products.id))\n      .where(eq(transactionItems.transactionId, id));\n    \n    // Get customer details if exists\n    let customer = null;\n    if (transaction.customerId) {\n      const [customerData] = await db.select().from(customers).where(eq(customers.id, transaction.customerId));\n      customer = customerData;\n    }\n    \n    // Get user details\n    let user = null;\n    if (transaction.userId) {\n      const [userData] = await db.select().from(users).where(eq(users.id, transaction.userId));\n      if (userData) {\n        const { password, ...userWithoutPassword } = userData;\n        user = userWithoutPassword;\n      }\n    }\n    \n    return {\n      ...transaction,\n      items,\n      customer,\n      user\n    } as any;\n  }\n\n  async createTransaction(transactionData: InsertTransaction, items: InsertTransactionItem[]): Promise<Transaction> {\n    return await db.transaction(async (tx) => {\n      // Create transaction\n      const [transaction] = await tx.insert(transactions).values(transactionData as any).returning();\n      \n      // Create transaction items\n      const itemsWithTransactionId = items.map(item => ({\n        ...item,\n        transactionId: transaction.id,\n      }));\n      await tx.insert(transactionItems).values(itemsWithTransactionId);\n      \n      // Update stock for sales\n      if (transactionData.type === 'sale') {\n        for (const item of items) {\n          await tx\n            .update(products)\n            .set({ \n              stock: sql`${products.stock} - ${item.quantity}`,\n              updatedAt: new Date()\n            })\n            .where(eq(products.id, item.productId));\n          \n          // Create stock movement record\n          await tx.insert(stockMovements).values({\n            productId: item.productId,\n            movementType: 'out',\n            quantity: item.quantity,\n            unitCost: item.unitPrice, // Record sale price for profit tracking\n            referenceId: transaction.id,\n            referenceType: 'sale',\n            notes: `Penjualan - ${transaction.transactionNumber}`,\n            userId: transaction.userId,\n          });\n        }\n\n        // Create financial records via new finance manager\n        try {\n          const { financeManager } = await import('./financeManager');\n          \n          // Record revenue (income)\n          await financeManager.createTransaction({\n            type: 'income',\n            category: 'Sales Revenue',\n            subcategory: 'Product Sales',\n            amount: transaction.total,\n            description: `Penjualan ${transaction.transactionNumber}`,\n            referenceType: 'sale',\n            reference: transaction.id,\n            paymentMethod: transaction.paymentMethod?.toLowerCase() || 'cash',\n            userId: transaction.userId\n          });\n\n          // Calculate and record COGS (Cost of Goods Sold) using average purchase price\n          let totalCOGS = 0;\n          for (const item of items) {\n            // Use weighted average purchase price instead of current product price\n            const averagePrice = await this.getAveragePurchasePrice(item.productId);\n            const itemCOGS = averagePrice * item.quantity;\n            totalCOGS += itemCOGS;\n          }\n\n          // Record COGS as expense\n          if (totalCOGS > 0) {\n            await financeManager.createTransaction({\n              type: 'expense',\n              category: 'Cost of Goods Sold',\n              subcategory: 'Product Cost',\n              amount: totalCOGS.toString(),\n              description: `COGS - ${transaction.transactionNumber}`,\n              referenceType: 'sale',\n              reference: transaction.id,\n              paymentMethod: 'system',\n              userId: transaction.userId\n            });\n          }\n        } catch (error) {\n          console.error(\"Error creating financial records via finance manager:\", error);\n        }\n      }\n      \n      // Fetch complete transaction with items for receipt\n      const completeTransaction = await this.getTransactionById(transaction.id);\n      return completeTransaction || transaction;\n    });\n  }\n\n  // Service Tickets\n  async getServiceTickets(): Promise<ServiceTicket[]> {\n    const tickets = await db\n      .select({\n        id: serviceTickets.id,\n        clientId: serviceTickets.clientId,\n        createdAt: serviceTickets.createdAt,\n        updatedAt: serviceTickets.updatedAt,\n        status: serviceTickets.status,\n        customerId: serviceTickets.customerId,\n        deviceType: serviceTickets.deviceType,\n        deviceBrand: serviceTickets.deviceBrand,\n        deviceModel: serviceTickets.deviceModel,\n        serialNumber: serviceTickets.serialNumber,\n        completeness: serviceTickets.completeness,\n        problem: serviceTickets.problem,\n        diagnosis: serviceTickets.diagnosis,\n        solution: serviceTickets.solution,\n        estimatedCost: serviceTickets.estimatedCost,\n        actualCost: serviceTickets.actualCost,\n        laborCost: serviceTickets.laborCost,\n        partsCost: serviceTickets.partsCost,\n        estimatedCompletion: serviceTickets.estimatedCompletion,\n        technicianId: serviceTickets.technicianId,\n        warrantyDuration: serviceTickets.warrantyDuration,\n        warrantyStartDate: serviceTickets.warrantyStartDate,\n        warrantyEndDate: serviceTickets.warrantyEndDate,\n        // Cancellation fields\n        cancellationFee: serviceTickets.cancellationFee,\n        cancellationReason: serviceTickets.cancellationReason,\n        cancelledAt: serviceTickets.cancelledAt,\n        cancelledBy: serviceTickets.cancelledBy,\n        cancellationType: serviceTickets.cancellationType,\n\n        ticketNumber: serviceTickets.ticketNumber,\n        completedAt: serviceTickets.completedAt,\n        customerName: customers.name\n      })\n      .from(serviceTickets)\n      .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n      .orderBy(desc(serviceTickets.createdAt));\n    \n    return tickets.map(ticket => ({\n      ...ticket,\n      customerName: ticket.customerName || null, // Keep string field for backward compatibility\n      customer: ticket.customerName ? { name: ticket.customerName } : null // Object field for new usage\n    })) as ServiceTicket[];\n  }\n\n  async getServiceTicketById(id: string): Promise<ServiceTicket | undefined> {\n    const [ticket] = await db.select().from(serviceTickets).where(eq(serviceTickets.id, id));\n    return ticket;\n  }\n\n  async getActiveServiceTickets(): Promise<ServiceTicket[]> {\n    const tickets = await db\n      .select({\n        id: serviceTickets.id,\n        clientId: serviceTickets.clientId,\n        createdAt: serviceTickets.createdAt,\n        updatedAt: serviceTickets.updatedAt,\n        status: serviceTickets.status,\n        customerId: serviceTickets.customerId,\n        deviceType: serviceTickets.deviceType,\n        deviceBrand: serviceTickets.deviceBrand,\n        deviceModel: serviceTickets.deviceModel,\n        serialNumber: serviceTickets.serialNumber,\n        completeness: serviceTickets.completeness,\n        problem: serviceTickets.problem,\n        diagnosis: serviceTickets.diagnosis,\n        solution: serviceTickets.solution,\n        estimatedCost: serviceTickets.estimatedCost,\n        actualCost: serviceTickets.actualCost,\n        laborCost: serviceTickets.laborCost,\n        partsCost: serviceTickets.partsCost,\n        estimatedCompletion: serviceTickets.estimatedCompletion,\n        technicianId: serviceTickets.technicianId,\n        warrantyDuration: serviceTickets.warrantyDuration,\n        warrantyStartDate: serviceTickets.warrantyStartDate,\n        warrantyEndDate: serviceTickets.warrantyEndDate,\n        // Cancellation fields\n        cancellationFee: serviceTickets.cancellationFee,\n        cancellationReason: serviceTickets.cancellationReason,\n        cancelledAt: serviceTickets.cancelledAt,\n        cancelledBy: serviceTickets.cancelledBy,\n        cancellationType: serviceTickets.cancellationType,\n\n        ticketNumber: serviceTickets.ticketNumber,\n        completedAt: serviceTickets.completedAt,\n        customerName: customers.name\n      })\n      .from(serviceTickets)\n      .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n      .where(sql`${serviceTickets.status} != 'completed' AND ${serviceTickets.status} != 'cancelled'`)\n      .orderBy(desc(serviceTickets.createdAt));\n    \n    return tickets.map(ticket => ({\n      ...ticket,\n      customerName: ticket.customerName || null, // Keep string field for backward compatibility\n      customer: ticket.customerName ? { name: ticket.customerName } : null // Object field for new usage\n    })) as ServiceTicket[];\n  }\n\n  async createServiceTicket(ticketData: InsertServiceTicket): Promise<ServiceTicket> {\n    const [ticket] = await db.insert(serviceTickets).values(ticketData as any).returning();\n    return ticket;\n  }\n\n  async updateServiceTicket(id: string, ticketData: Partial<InsertServiceTicket>, parts?: InsertServiceTicketPart[], userId?: string): Promise<ServiceTicket> {\n    return await db.transaction(async (tx) => {\n      const [ticket] = await tx\n        .update(serviceTickets)\n        .set({ ...ticketData, updatedAt: new Date() })\n        .where(eq(serviceTickets.id, id))\n        .returning();\n      \n      // Handle parts if provided\n      if (parts && parts.length > 0) {\n        // Clear existing parts\n        await tx.delete(serviceTicketParts).where(eq(serviceTicketParts.serviceTicketId, id));\n        \n        let totalPartsCost = 0;\n        \n        // Add new parts and handle stock based on status\n        for (const part of parts) {\n          // Check if product exists\n          const [product] = await tx.select().from(products).where(eq(products.id, part.productId));\n          \n          if (!product) {\n            throw new Error(`Product dengan ID ${part.productId} tidak ditemukan`);\n          }\n          \n          // Use product selling price as default\n          const unitPrice = part.unitPrice || product.sellingPrice || '0';\n          const totalPrice = (parseFloat(unitPrice) * part.quantity).toString();\n          \n          // Insert service ticket part\n          await tx.insert(serviceTicketParts).values({\n            serviceTicketId: id,\n            productId: part.productId,\n            quantity: part.quantity,\n            unitPrice: unitPrice,\n            totalPrice: totalPrice\n          });\n          \n          // Only update stock and record movement for completed/delivered status\n          if (ticket.status === 'completed' || ticket.status === 'delivered') {\n            const currentStock = product.stock || 0;\n            \n            // Check stock for completed services - allow negative stock but warn\n            if (currentStock < part.quantity) {\n              console.warn(`WARNING: Stock ${product.name} tidak cukup. Tersedia: ${currentStock}, Diperlukan: ${part.quantity}. Melanjutkan dengan stock negatif.`);\n              // Don't throw error, just proceed with negative stock\n            }\n            \n            // Update product stock\n            const newStock = currentStock - part.quantity;\n            await tx.update(products)\n              .set({ \n                stock: newStock,\n                updatedAt: new Date()\n              })\n              .where(eq(products.id, part.productId));\n            \n            // Record stock movement\n            await tx.insert(stockMovements).values({\n              productId: part.productId,\n              movementType: 'out',\n              quantity: part.quantity,\n              referenceId: id,\n              referenceType: 'service',\n              notes: `Digunakan untuk servis ${ticket.ticketNumber}`,\n              userId: userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n            });\n          } else {\n            // For non-completed status, just reserve stock (optional - estimate only)\n            const currentReserved = product.reservedStock || 0;\n            // Note: Reserved stock - for now we'll keep it simple and just track main stock\n            // await tx.update(products)\n            //   .set({ \n            //     reservedStock: currentReserved + part.quantity,\n            //     updatedAt: new Date()\n            //   })\n            //   .where(eq(products.id, part.productId));\n          }\n          \n          totalPartsCost += parseFloat(totalPrice);\n        }\n        \n        // Update ticket with parts cost\n        const currentLaborCost = parseFloat(ticket.laborCost || '0');\n        const newActualCost = (currentLaborCost + totalPartsCost).toString();\n        \n        await tx.update(serviceTickets)\n          .set({ \n            partsCost: totalPartsCost.toString(),\n            actualCost: newActualCost,\n            updatedAt: new Date()\n          })\n          .where(eq(serviceTickets.id, id));\n          \n        ticket.partsCost = totalPartsCost.toString();\n        ticket.actualCost = newActualCost;\n      }\n      \n      // Auto-record financial transactions for completed services\n      if (ticket && (ticket.status === 'completed' || ticket.status === 'delivered')) {\n        try {\n          const { financeManager } = await import('./financeManager');\n          \n          // Record labor cost as income if exists\n          if (ticket.laborCost && parseFloat(ticket.laborCost) > 0) {\n            await financeManager.recordLaborCost(\n              ticket.id,\n              ticket.laborCost,\n              `${ticket.ticketNumber}: ${ticket.problem}`,\n              userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n            );\n          }\n          \n          // Record parts costs and revenue for each part used\n          if (parts && parts.length > 0) {\n            for (const part of parts) {\n              // Get product details to get modal price\n              const [product] = await tx.select().from(products).where(eq(products.id, part.productId));\n              if (product) {\n                await financeManager.recordPartsCost(\n                  ticket.id,\n                  product.name,\n                  part.quantity,\n                  product.lastPurchasePrice || '0', // modal price\n                  part.unitPrice, // selling price\n                  userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n                );\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Error recording service financial transactions:\", error);\n        }\n      }\n      \n      return ticket;\n    });\n  }\n\n  async deleteServiceTicket(id: string): Promise<void> {\n    return await db.transaction(async (tx) => {\n      // First get the ticket to check if it has financial records\n      const [ticket] = await tx.select().from(serviceTickets).where(eq(serviceTickets.id, id));\n      \n      if (ticket) {\n        // Delete related service ticket parts\n        await tx.delete(serviceTicketParts).where(eq(serviceTicketParts.serviceTicketId, id));\n        \n        // Delete related financial records if any\n        await tx.delete(financialRecords).where(eq(financialRecords.reference, id));\n      }\n      \n      // Delete the service ticket\n      await tx.delete(serviceTickets).where(eq(serviceTickets.id, id));\n    });\n  }\n\n  async cancelServiceTicket(id: string, data: {\n    cancellationFee: string;\n    cancellationReason: string;\n    cancellationType: 'before_completed' | 'after_completed' | 'warranty_refund';\n    userId: string;\n  }): Promise<{ success: boolean; message?: string }> {\n    try {\n      return await db.transaction(async (tx) => {\n        // Get the service ticket\n        const [ticket] = await tx.select().from(serviceTickets).where(eq(serviceTickets.id, id));\n        \n        if (!ticket) {\n          return { success: false, message: 'Service ticket not found' };\n        }\n\n        if (ticket.status === 'cancelled') {\n          return { success: false, message: 'Service ticket is already cancelled' };\n        }\n\n        // Get service ticket parts for stock operations\n        const serviceParts = await tx.select({\n          id: serviceTicketParts.id,\n          productId: serviceTicketParts.productId,\n          quantity: serviceTicketParts.quantity,\n          unitPrice: serviceTicketParts.unitPrice,\n          productName: products.name\n        })\n        .from(serviceTicketParts)\n        .innerJoin(products, eq(serviceTicketParts.productId, products.id))\n        .where(eq(serviceTicketParts.serviceTicketId, id));\n\n        const now = getCurrentJakartaTime();\n        \n        // Update service ticket with cancellation data\n        await tx.update(serviceTickets).set({\n          status: 'cancelled',\n          cancellationFee: data.cancellationFee,\n          cancellationReason: data.cancellationReason,\n          cancellationType: data.cancellationType,\n          cancelledAt: now,\n          cancelledBy: data.userId,\n          updatedAt: now\n        }).where(eq(serviceTickets.id, id));\n\n        // Import finance manager for accounting\n        const { financeManager } = await import('./financeManager');\n\n        // Handle different cancellation scenarios\n        switch (data.cancellationType) {\n          case 'before_completed':\n            // Scenario 1: Cancel Before Completed\n            const beforeResult = await financeManager.recordServiceCancellationBeforeCompleted(\n              id,\n              data.cancellationFee,\n              data.cancellationReason,\n              data.userId,\n              tx\n            );\n            \n            if (!beforeResult.success) {\n              return { success: false, message: beforeResult.error };\n            }\n            break;\n\n          case 'after_completed':\n            // Scenario 2: Cancel After Completed\n            // Return parts to stock and reverse stock movements\n            for (const part of serviceParts) {\n              // Get current product stock\n              const [product] = await tx.select().from(products).where(eq(products.id, part.productId));\n              if (product) {\n                // Return parts to stock\n                const newStock = (product.stock || 0) + part.quantity;\n                await tx.update(products).set({\n                  stock: newStock,\n                  updatedAt: now\n                }).where(eq(products.id, part.productId));\n\n                // Get cost basis for proper stock movement tracking\n                const avgCost = await this.getAveragePurchasePrice(part.productId);\n                \n                // Record stock movement for return with cost\n                await tx.insert(stockMovements).values({\n                  productId: part.productId,\n                  movementType: 'in',\n                  quantity: part.quantity,\n                  unitCost: avgCost.toString(),\n                  referenceId: id,\n                  referenceType: 'service',\n                  notes: `Dikembalikan dari pembatalan servis ${ticket.ticketNumber}`,\n                  userId: data.userId\n                });\n              }\n            }\n\n            // Record financial transactions with cost basis\n            const partsForFinance = [];\n            for (const part of serviceParts) {\n              const avgCost = await this.getAveragePurchasePrice(part.productId);\n              partsForFinance.push({\n                name: part.productName,\n                quantity: part.quantity,\n                sellingPrice: part.unitPrice,\n                costPrice: avgCost.toString()\n              });\n            }\n\n            const afterResult = await financeManager.recordServiceCancellationAfterCompleted(\n              id,\n              data.cancellationFee,\n              data.cancellationReason,\n              partsForFinance,\n              data.userId,\n              tx\n            );\n            \n            if (!afterResult.success) {\n              return { success: false, message: afterResult.error };\n            }\n            break;\n\n          case 'warranty_refund':\n            // Scenario 3: Cancel Warranty Service (Full Refund)\n            // Move parts to damaged goods stock with proper cost tracking\n            for (const part of serviceParts) {\n              const [product] = await tx.select().from(products).where(eq(products.id, part.productId));\n              if (product) {\n                // Get cost basis for proper loss calculation\n                const avgCost = await this.getAveragePurchasePrice(part.productId);\n                \n                // Reduce normal stock (parts moved to damaged)\n                const newStock = Math.max(0, (product.stock || 0) - part.quantity);\n                await tx.update(products).set({\n                  stock: newStock,\n                  updatedAt: now\n                }).where(eq(products.id, part.productId));\n\n                // Record movement to damaged goods with cost\n                await tx.insert(stockMovements).values({\n                  productId: part.productId,\n                  movementType: 'out',\n                  quantity: part.quantity,\n                  unitCost: avgCost.toString(),\n                  referenceId: id,\n                  referenceType: 'service',\n                  notes: `Dipindahkan ke barang rusak - warranty refund ${ticket.ticketNumber}`,\n                  userId: data.userId\n                });\n              }\n            }\n\n            // Record financial transactions with full refund and proper cost basis\n            const partsForWarrantyFinance = [];\n            for (const part of serviceParts) {\n              const avgCost = await this.getAveragePurchasePrice(part.productId);\n              partsForWarrantyFinance.push({\n                name: part.productName,\n                quantity: part.quantity,\n                sellingPrice: part.unitPrice,\n                costPrice: avgCost.toString()\n              });\n            }\n\n            const warrantyResult = await financeManager.recordServiceCancellationWarrantyRefund(\n              id,\n              data.cancellationFee,\n              ticket.laborCost || '0',\n              ticket.partsCost || '0',\n              data.cancellationReason,\n              partsForWarrantyFinance,\n              data.userId,\n              tx\n            );\n            \n            if (!warrantyResult.success) {\n              return { success: false, message: warrantyResult.error };\n            }\n            break;\n\n          default:\n            return { success: false, message: 'Invalid cancellation type' };\n        }\n\n        return { \n          success: true, \n          message: `Service ticket cancelled successfully with ${data.cancellationType} scenario` \n        };\n      });\n    } catch (error) {\n      console.error('Error cancelling service ticket:', error);\n      return { \n        success: false, \n        message: `Failed to cancel service ticket: ${error instanceof Error ? error.message : 'Unknown error'}` \n      };\n    }\n  }\n\n  // Service Ticket Parts\n  async getServiceTicketParts(serviceTicketId: string): Promise<(ServiceTicketPart & { productName: string })[]> {\n    const parts = await db\n      .select({\n        id: serviceTicketParts.id,\n        clientId: serviceTicketParts.clientId,\n        serviceTicketId: serviceTicketParts.serviceTicketId,\n        productId: serviceTicketParts.productId,\n        quantity: serviceTicketParts.quantity,\n        unitPrice: serviceTicketParts.unitPrice,\n        totalPrice: serviceTicketParts.totalPrice,\n        createdAt: serviceTicketParts.createdAt,\n        productName: products.name\n      })\n      .from(serviceTicketParts)\n      .innerJoin(products, eq(serviceTicketParts.productId, products.id))\n      .where(eq(serviceTicketParts.serviceTicketId, serviceTicketId))\n      .orderBy(desc(serviceTicketParts.createdAt));\n    \n    return parts;\n  }\n\n  // Stock Movements\n  async getStockMovements(productId?: string): Promise<StockMovement[]> {\n    const query = db.select().from(stockMovements);\n    \n    if (productId) {\n      return await query.where(eq(stockMovements.productId, productId)).orderBy(desc(stockMovements.createdAt));\n    }\n    \n    return await query.orderBy(desc(stockMovements.createdAt));\n  }\n\n  // Financial Records (delegated to FinanceManager but interface still needed)\n  async getFinancialRecords(startDate?: Date, endDate?: Date): Promise<FinancialRecord[]> {\n    const { financeManager } = await import('./financeManager');\n    return await financeManager.getTransactions({\n      startDate,\n      endDate\n    });\n  }\n\n  async createFinancialRecord(record: InsertFinancialRecord): Promise<FinancialRecord> {\n    const { financeManager } = await import('./financeManager');\n    return await financeManager.createTransaction({\n      type: record.type as 'income' | 'expense' | 'transfer',\n      category: record.category,\n      subcategory: record.subcategory || undefined,\n      amount: record.amount,\n      description: record.description,\n      referenceType: record.referenceType || undefined,\n      reference: record.reference || undefined,\n      paymentMethod: record.paymentMethod || undefined,\n      tags: record.tags || undefined,\n      userId: record.userId\n    });\n  }\n\n  // Dashboard Statistics\n  // Reports\n  async getSalesReport(startDate: Date, endDate: Date): Promise<{\n    totalSales: string;\n    transactions: any[];\n  }> {\n    const [totalResult] = await db\n      .select({ total: sum(transactions.total) })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.type, 'sale'),\n          gte(transactions.createdAt, startDate),\n          lte(transactions.createdAt, endDate)\n        )\n      );\n\n    const transactionList = await db\n      .select()\n      .from(transactions)\n      .leftJoin(customers, eq(transactions.customerId, customers.id))\n      .where(\n        and(\n          eq(transactions.type, 'sale'),\n          gte(transactions.createdAt, startDate),\n          lte(transactions.createdAt, endDate)\n        )\n      )\n      .orderBy(desc(transactions.createdAt));\n\n    return {\n      totalSales: totalResult.total || '0',\n      transactions: transactionList.map(t => ({\n        ...t.transactions,\n        customer: t.customers\n      }))\n    };\n  }\n\n  async getServiceReport(startDate: Date, endDate: Date): Promise<{\n    totalServices: number;\n    totalRevenue: string;\n    totalCost: string;\n    totalProfit: string;\n    revenueBreakdown: {\n      laborRevenue: string;\n      partsRevenue: string;\n    };\n    tickets: any[];\n  }> {\n    // Use same method as financeManager for consistency\n    try {\n      const { financeManager } = await import('./financeManager');\n      const summary = await financeManager.getSummary(startDate, endDate);\n      \n      // Get service-specific financial data\n      const [serviceIncomeResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            or(\n              eq(financialRecords.referenceType, 'service_labor'),\n              eq(financialRecords.referenceType, 'service_parts_revenue')\n            ),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const [serviceCostResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'expense'),\n            eq(financialRecords.referenceType, 'service_parts_cost'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      // Get labor revenue\n      const [laborRevenueResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            eq(financialRecords.referenceType, 'service_labor'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      // Get parts revenue\n      const [partsRevenueResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            eq(financialRecords.referenceType, 'service_parts_revenue'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const [totalResult] = await db\n        .select({ count: count() })\n        .from(serviceTickets)\n        .where(\n          and(\n            gte(serviceTickets.createdAt, startDate),\n            lte(serviceTickets.createdAt, endDate)\n          )\n        );\n\n      const ticketList = await db\n        .select()\n        .from(serviceTickets)\n        .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n        .where(\n          and(\n            gte(serviceTickets.createdAt, startDate),\n            lte(serviceTickets.createdAt, endDate)\n          )\n        )\n        .orderBy(desc(serviceTickets.createdAt));\n\n      const totalRevenue = Number(serviceIncomeResult.total || 0);\n      const totalCost = Number(serviceCostResult.total || 0);\n      const totalProfit = totalRevenue - totalCost;\n\n      return {\n        totalServices: totalResult.count,\n        totalRevenue: totalRevenue.toString(),\n        totalCost: totalCost.toString(),\n        totalProfit: totalProfit.toString(),\n        revenueBreakdown: {\n          laborRevenue: (Number(laborRevenueResult.total || 0)).toString(),\n          partsRevenue: (Number(partsRevenueResult.total || 0)).toString(),\n        },\n        tickets: ticketList.map(t => ({\n          ...t.service_tickets,\n          customer: t.customers\n        }))\n      };\n    } catch (error) {\n      console.error(\"Error getting service report:\", error);\n      // Fallback to simple count\n      const [totalResult] = await db\n        .select({ count: count() })\n        .from(serviceTickets)\n        .where(\n          and(\n            gte(serviceTickets.createdAt, startDate),\n            lte(serviceTickets.createdAt, endDate)\n          )\n        );\n\n      return {\n        totalServices: totalResult.count,\n        totalRevenue: \"0\",\n        totalCost: \"0\", \n        totalProfit: \"0\",\n        revenueBreakdown: {\n          laborRevenue: \"0\",\n          partsRevenue: \"0\",\n        },\n        tickets: []\n      };\n    }\n  }\n\n  async getFinancialReport(startDate: Date, endDate: Date): Promise<{\n    totalIncome: string;\n    totalExpense: string;\n    profit: string;\n    records: any[];\n  }> {\n    try {\n      const { financeManager } = await import('./financeManager');\n      \n      const summary = await financeManager.getSummary(startDate, endDate);\n      const records = await financeManager.getTransactions({\n        startDate,\n        endDate\n      });\n\n      return {\n        totalIncome: summary.totalIncome,\n        totalExpense: summary.totalExpense,\n        profit: summary.netProfit,\n        records\n      };\n    } catch (error) {\n      console.error(\"Error getting financial report from finance manager:\", error);\n      // Fallback to old method\n      const [incomeResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const [expenseResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'expense'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const records = await db\n        .select()\n        .from(financialRecords)\n        .where(\n          and(\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        )\n        .orderBy(desc(financialRecords.createdAt));\n\n      const totalIncome = Number(incomeResult.total || 0);\n      const totalExpense = Number(expenseResult.total || 0);\n\n      return {\n        totalIncome: totalIncome.toString(),\n        totalExpense: totalExpense.toString(),\n        profit: (totalIncome - totalExpense).toString(),\n        records\n      };\n    }\n  }\n\n  async getInventoryReport(): Promise<{\n    lowStockCount: number;\n    lowStockProducts: any[];\n    totalProducts: number;\n    totalAssetValue: string;\n    totalStockQuantity: number;\n  }> {\n    const [lowStockResult] = await db\n      .select({ count: count() })\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.stock} <= ${products.minStock}`\n        )\n      );\n\n    const lowStockProducts = await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id))\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.stock} <= ${products.minStock}`\n        )\n      )\n      .orderBy(products.stock);\n\n    const [totalResult] = await db\n      .select({ count: count() })\n      .from(products)\n      .where(eq(products.isActive, true));\n\n    // Calculate total asset value (stock × purchase price)\n    const assetValueResult = await db\n      .select({\n        totalValue: sql<number>`SUM(${products.stock} * COALESCE(${products.lastPurchasePrice}, 0))`,\n        totalQuantity: sql<number>`SUM(${products.stock})`\n      })\n      .from(products)\n      .where(and(eq(products.isActive, true), gte(products.stock, 0)));\n\n    const totalAssetValue = Number(assetValueResult[0]?.totalValue || 0);\n    const totalStockQuantity = Number(assetValueResult[0]?.totalQuantity || 0);\n\n    return {\n      lowStockCount: lowStockResult.count,\n      lowStockProducts: lowStockProducts.map(p => ({\n        ...p.products,\n        category: p.categories\n      })),\n      totalProducts: totalResult.count,\n      totalAssetValue: totalAssetValue.toString(),\n      totalStockQuantity: totalStockQuantity\n    };\n  }\n\n  async getDashboardStats(): Promise<{\n    todaySales: string;\n    todayRevenue: string;\n    activeServices: number;\n    lowStockCount: number;\n    monthlyProfit: string;\n    whatsappConnected: boolean;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    \n    // Today's product sales (POS transactions only)\n    const [todayProductSalesResult] = await db\n      .select({ total: sum(transactions.total) })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.type, 'sale'),\n          gte(transactions.createdAt, today)\n        )\n      );\n    \n    // Today's total revenue (all income including services)\n    const [todayRevenueResult] = await db\n      .select({ total: sum(financialRecords.amount) })\n      .from(financialRecords)\n      .where(\n        and(\n          eq(financialRecords.type, 'income'),\n          gte(financialRecords.createdAt, today)\n        )\n      );\n    \n    // Active services\n    const [activeServicesResult] = await db\n      .select({ count: count() })\n      .from(serviceTickets)\n      .where(sql`${serviceTickets.status} != 'completed' AND ${serviceTickets.status} != 'cancelled'`);\n    \n    // Low stock count\n    const [lowStockResult] = await db\n      .select({ count: count() })\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.stock} <= ${products.minStock}`\n        )\n      );\n    \n    // Monthly profit from finance manager\n    let monthlyProfit = 0;\n    try {\n      const { financeManager } = await import('./financeManager');\n      const summary = await financeManager.getSummary(startOfMonth, new Date());\n      monthlyProfit = Number(summary.netProfit || 0);\n    } catch (error) {\n      console.error(\"Error getting monthly profit from finance manager:\", error);\n      // Fallback to transaction-based calculation\n      const [monthlySalesResult] = await db\n        .select({ total: sum(transactions.total) })\n        .from(transactions)\n        .where(\n          and(\n            eq(transactions.type, 'sale'),\n            gte(transactions.createdAt, startOfMonth)\n          )\n        );\n      \n      const [monthlyPurchasesResult] = await db\n        .select({ total: sum(transactions.total) })\n        .from(transactions)\n        .where(\n          and(\n            eq(transactions.type, 'purchase'),\n            gte(transactions.createdAt, startOfMonth)\n          )\n        );\n      \n      const monthlySales = Number(monthlySalesResult.total || 0);\n      const monthlyPurchases = Number(monthlyPurchasesResult.total || 0);\n      monthlyProfit = monthlySales - monthlyPurchases;\n    }\n    \n    // Get WhatsApp connection status from store config\n    const storeConfig = await this.getStoreConfig();\n    const whatsappConnected = storeConfig?.whatsappConnected || false;\n    \n    return {\n      todaySales: todayProductSalesResult.total || '0',\n      todayRevenue: todayRevenueResult.total || '0',\n      activeServices: activeServicesResult.count,\n      lowStockCount: lowStockResult.count,\n      monthlyProfit: monthlyProfit.toString(),\n      whatsappConnected,\n    };\n  }\n  \n  // Enhanced Accounting Methods Implementation\n  async getBalanceSheet(asOfDate?: Date): Promise<any> {\n    // Import and use FinanceManager to implement double-entry bookkeeping\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.getBalanceSheet(asOfDate);\n  }\n  \n  async getIncomeStatement(startDate?: Date, endDate?: Date): Promise<any> {\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.getIncomeStatement(startDate, endDate);\n  }\n  \n  async getChartOfAccounts(): Promise<any[]> {\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.getChartOfAccounts();\n  }\n  \n  async createJournalEntry(data: any): Promise<{ success: boolean; journalEntry?: any; error?: string }> {\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.createJournalEntry(data);\n  }\n\n  // Warranty Claims\n  async getWarrantyClaims(status?: string): Promise<any[]> {\n    // Join with transactions and service tickets to get reference numbers\n    const query = db\n      .select({\n        // Warranty claim fields\n        id: warrantyClaims.id,\n        claimNumber: warrantyClaims.claimNumber,\n        claimType: warrantyClaims.claimType,\n        status: warrantyClaims.status,\n        claimReason: warrantyClaims.claimReason,\n        claimDate: warrantyClaims.claimDate,\n        processedDate: warrantyClaims.processedDate,\n        returnCondition: warrantyClaims.returnCondition,\n        notes: warrantyClaims.notes,\n        createdAt: warrantyClaims.createdAt,\n        updatedAt: warrantyClaims.updatedAt,\n        \n        // Reference information\n        originalTransactionId: warrantyClaims.originalTransactionId,\n        originalServiceTicketId: warrantyClaims.originalServiceTicketId,\n        \n        // Customer info\n        customerId: warrantyClaims.customerId,\n        customerName: customers.name,\n        \n        // Transaction reference (if applicable)\n        transactionNumber: transactions.transactionNumber,\n        \n        // Service ticket reference (if applicable)\n        serviceTicketNumber: serviceTickets.ticketNumber,\n      })\n      .from(warrantyClaims)\n      .leftJoin(customers, eq(warrantyClaims.customerId, customers.id))\n      .leftJoin(transactions, eq(warrantyClaims.originalTransactionId, transactions.id))\n      .leftJoin(serviceTickets, eq(warrantyClaims.originalServiceTicketId, serviceTickets.id));\n    \n    if (status) {\n      query.where(eq(warrantyClaims.status, status as any));\n    }\n    \n    return await query.orderBy(desc(warrantyClaims.claimDate));\n  }\n\n  async getWarrantyClaimById(id: string): Promise<WarrantyClaim | undefined> {\n    const [claim] = await db.select().from(warrantyClaims).where(eq(warrantyClaims.id, id));\n    return claim;\n  }\n\n  async createWarrantyClaim(claimData: InsertWarrantyClaim): Promise<WarrantyClaim> {\n    // Generate unique claim number\n    const claimNumber = `WC-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    \n    const [claim] = await db\n      .insert(warrantyClaims)\n      .values({\n        ...claimData,\n        claimNumber,\n        // Let database use default timestamps\n      })\n      .returning();\n\n    // For service warranty claims, auto-approve and create new service ticket\n    if (claimData.claimType === 'service' && claimData.originalServiceTicketId) {\n      await this.processServiceWarrantyClaim(claim.id, claimData.originalServiceTicketId, claimData.customerId);\n    }\n\n    return claim;\n  }\n\n  async updateWarrantyClaimStatus(id: string, status: string, processedBy?: string): Promise<WarrantyClaim> {\n    const updateData: any = {\n      status,\n      // Let database handle updatedAt timestamp\n    };\n\n    if (processedBy) {\n      updateData.processedBy = processedBy;\n      updateData.processedDate = new Date(); // Use Date object for timestamp\n    }\n\n    const [claim] = await db\n      .update(warrantyClaims)\n      .set(updateData)\n      .where(eq(warrantyClaims.id, id))\n      .returning();\n\n    return claim;\n  }\n\n  async processWarrantyClaim(id: string, status: string, processedBy: string, returnCondition?: string): Promise<WarrantyClaim> {\n    const updateData: any = {\n      status,\n      processedBy,\n      processedDate: new Date(), // Use Date object for timestamp\n      // Let database handle updatedAt timestamp\n    };\n\n    if (returnCondition) {\n      updateData.returnCondition = returnCondition;\n    }\n\n    const [claim] = await db\n      .update(warrantyClaims)\n      .set(updateData)\n      .where(eq(warrantyClaims.id, id))\n      .returning();\n\n    return claim;\n  }\n\n  async validateWarrantyEligibility(originalTransactionId?: string, originalServiceTicketId?: string): Promise<{ isValid: boolean; message: string }> {\n    try {\n      if (originalTransactionId) {\n        // Validate sales warranty\n        const [transaction] = await db\n          .select()\n          .from(transactions)\n          .where(eq(transactions.id, originalTransactionId));\n\n        if (!transaction) {\n          return { isValid: false, message: 'Original transaction not found' };\n        }\n\n        if (!transaction.warrantyEndDate) {\n          return { isValid: false, message: 'No warranty information found for this transaction' };\n        }\n\n        const now = getCurrentJakartaTime();\n        if (now > transaction.warrantyEndDate) {\n          return { isValid: false, message: 'Warranty has expired' };\n        }\n\n        // Check for existing warranty claims\n        const [existingClaim] = await db\n          .select()\n          .from(warrantyClaims)\n          .where(eq(warrantyClaims.originalTransactionId, originalTransactionId));\n\n        if (existingClaim && existingClaim.status !== 'rejected') {\n          return { isValid: false, message: 'A warranty claim already exists for this transaction' };\n        }\n\n        return { isValid: true, message: 'Transaction is eligible for warranty claim' };\n      }\n\n      if (originalServiceTicketId) {\n        // Validate service warranty\n        const [serviceTicket] = await db\n          .select()\n          .from(serviceTickets)\n          .where(eq(serviceTickets.id, originalServiceTicketId));\n\n        if (!serviceTicket) {\n          return { isValid: false, message: 'Original service ticket not found' };\n        }\n\n        if (!serviceTicket.warrantyEndDate) {\n          return { isValid: false, message: 'No warranty information found for this service' };\n        }\n\n        const now = getCurrentJakartaTime();\n        if (now > serviceTicket.warrantyEndDate) {\n          return { isValid: false, message: 'Service warranty has expired' };\n        }\n\n        // Check for existing warranty claims\n        const [existingClaim] = await db\n          .select()\n          .from(warrantyClaims)\n          .where(eq(warrantyClaims.originalServiceTicketId, originalServiceTicketId));\n\n        if (existingClaim && existingClaim.status !== 'rejected') {\n          return { isValid: false, message: 'A warranty claim already exists for this service' };\n        }\n\n        return { isValid: true, message: 'Service ticket is eligible for warranty claim' };\n      }\n\n      return { isValid: false, message: 'No original transaction or service ticket specified' };\n    } catch (error) {\n      console.error('Error validating warranty eligibility:', error);\n      return { isValid: false, message: 'Error validating warranty eligibility' };\n    }\n  }\n\n  // Private helper method for processing service warranty claims\n  private async processServiceWarrantyClaim(claimId: string, originalServiceTicketId: string, customerId: string): Promise<void> {\n    try {\n      // Get the original service ticket details\n      const [originalTicket] = await db\n        .select()\n        .from(serviceTickets)\n        .where(eq(serviceTickets.id, originalServiceTicketId));\n\n      if (!originalTicket) {\n        throw new Error('Original service ticket not found');\n      }\n\n      // Create new service ticket for warranty service\n      const warrantyServiceData: InsertServiceTicket = {\n        ticketNumber: `WS-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n        customerId: customerId,\n        deviceType: originalTicket.deviceType,\n        deviceBrand: originalTicket.deviceBrand,\n        deviceModel: originalTicket.deviceModel,\n        serialNumber: originalTicket.serialNumber,\n        problem: `Warranty Service - Follow up for ticket: ${originalTicket.ticketNumber}`,\n        status: 'pending',\n        laborCost: '0.00', // Free labor for warranty service\n        estimatedCompletion: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n        warrantyDuration: originalTicket.warrantyDuration || 90, // Default 90 days\n        warrantyStartDate: new Date(),\n        warrantyEndDate: new Date(Date.now() + (originalTicket.warrantyDuration || 90) * 24 * 60 * 60 * 1000),\n      };\n\n      await db.insert(serviceTickets).values(warrantyServiceData as any);\n\n      // Update original service ticket status to indicate warranty claim\n      await db\n        .update(serviceTickets)\n        .set({ \n          status: 'warranty_claim' as any,\n          updatedAt: new Date(),\n        })\n        .where(eq(serviceTickets.id, originalServiceTicketId));\n\n      // Auto-approve the warranty claim since it's for internal service\n      await this.updateWarrantyClaimStatus(claimId, 'approved');\n\n    } catch (error) {\n      console.error('Error processing service warranty claim:', error);\n      throw error;\n    }\n  }\n\n  // Process sales return warranty - handle inventory and finance integration\n  async processSalesReturnWarranty(\n    originalTransactionId: string, \n    returnCondition: 'normal_stock' | 'damaged_stock',\n    userId: string\n  ): Promise<void> {\n    try {\n      // Get original transaction details\n      const [originalTransaction] = await db\n        .select()\n        .from(transactions)\n        .where(eq(transactions.id, originalTransactionId));\n\n      if (!originalTransaction) {\n        throw new Error('Original transaction not found');\n      }\n\n      // Get transaction items that were sold\n      const soldItems = await db\n        .select()\n        .from(transactionItems)\n        .where(eq(transactionItems.transactionId, originalTransactionId));\n\n      // Process each item return\n      for (const item of soldItems) {\n        const productId = item.productId;\n        const quantity = item.quantity;\n        \n        if (returnCondition === 'normal_stock') {\n          // Add back to normal inventory\n          await db\n            .update(products)\n            .set({ \n              stock: sql`${products.stock} + ${quantity}`,\n              updatedAt: new Date()\n            })\n            .where(eq(products.id, productId));\n\n          // Create stock movement record\n          await db.insert(stockMovements).values({\n            productId: productId,\n            movementType: 'adjustment',\n            referenceType: 'warranty_return',\n            quantity: quantity,\n            referenceId: originalTransactionId,\n            notes: `Retur garansi - kondisi barang normal, dapat dijual kembali`,\n            userId: userId\n          });\n\n          // Create proper journal entries for normal stock return\n          const financeManager = new FinanceManager();\n          const itemValue = parseFloat(item.unitPrice) * quantity;\n          \n          // Journal Entry: Restore inventory value\n          // Debit: Persediaan (Inventory), Credit: Beban Garansi (Warranty Expense)\n          const journalResult = await financeManager.createJournalEntry({\n            description: `Retur garansi - penambahan stok normal (${quantity} unit)`,\n            reference: originalTransactionId,\n            referenceType: 'warranty_return',\n            lines: [\n              {\n                accountCode: '1130', // INVENTORY - Persediaan Barang\n                description: `Penambahan persediaan dari retur garansi - Produk ID ${productId}`,\n                debitAmount: itemValue.toString()\n              },\n              {\n                accountCode: '5120', // WARRANTY_EXPENSE - Beban Garansi\n                description: `Pemulihan beban garansi dari retur normal - Produk ID ${productId}`,\n                creditAmount: itemValue.toString()\n              }\n            ],\n            userId: userId\n          });\n          \n          if (!journalResult.success) {\n            console.warn(`Failed to create journal entry for normal warranty return: ${journalResult.error}`);\n            \n            // For normal stock returns, we should NOT create any financial record\n            // as it should be financially neutral - only restore inventory\n            // The warranty return does not generate new revenue/income\n            console.log(`Normal warranty return processed without financial impact - only inventory restored`);\n          }\n        \n        } else if (returnCondition === 'damaged_stock') {\n          // Handle damaged stock with proper accounting principles\n          \n          // Create stock movement record for damaged goods tracking\n          await db.insert(stockMovements).values({\n            productId: productId,\n            movementType: 'adjustment',\n            referenceType: 'warranty_return_damaged',\n            quantity: quantity,\n            referenceId: originalTransactionId,\n            notes: `Retur garansi - barang rusak tidak dapat dijual kembali`,\n            userId: userId\n          });\n\n          // Create proper journal entries for damaged goods\n          const financeManager = new FinanceManager();\n          const itemValue = parseFloat(item.unitPrice) * quantity;\n          \n          // Journal Entry: Record damaged goods inventory and write-off\n          // Debit: Kerugian Barang Rusak (Loss), Credit: Persediaan (Inventory)\n          const journalResult = await financeManager.createJournalEntry({\n            description: `Retur garansi - kerugian barang rusak (${quantity} unit)`,\n            reference: originalTransactionId,\n            referenceType: 'warranty_return_damaged',\n            lines: [\n              {\n                accountCode: '5130', // DAMAGED_GOODS_LOSS - Kerugian Barang Rusak\n                description: `Kerugian barang rusak dari retur garansi - Produk ID ${productId}`,\n                debitAmount: itemValue.toString()\n              },\n              {\n                accountCode: '1130', // INVENTORY - Persediaan Barang\n                description: `Pengurangan persediaan akibat barang rusak - Produk ID ${productId}`,\n                creditAmount: itemValue.toString()\n              }\n            ],\n            userId: userId\n          });\n          \n          if (!journalResult.success) {\n            console.warn(`Failed to create journal entry for damaged goods: ${journalResult.error}`);\n            \n            // Fallback: Create financial record entry if journal entry fails\n            await db.insert(financialRecords).values({\n              type: 'expense',\n              category: 'Kerugian Barang Rusak',\n              subcategory: 'Retur Garansi',\n              description: `Retur garansi - kerugian barang rusak (${quantity} unit, Produk ID ${productId})`,\n              amount: itemValue.toString(),\n              reference: originalTransactionId,\n              referenceType: 'warranty_return_damaged',\n              userId: userId\n            });\n          }\n        }\n      }\n\n    } catch (error) {\n      console.error('Error processing sales return warranty:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":101125},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  date,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n\n// Import SaaS-specific tables and types\nexport * from './saas-schema';\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\", { withTimezone: true }).notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'kasir', 'teknisi', 'purchasing', 'finance', 'owner']);\nexport const transactionTypeEnum = pgEnum('transaction_type', ['sale', 'service', 'purchase', 'return']);\nexport const paymentMethodEnum = pgEnum('payment_method', ['cash', 'transfer', 'qris', 'installment']);\nexport const serviceStatusEnum = pgEnum('service_status', ['pending', 'checking', 'in-progress', 'waiting-technician', 'testing', 'waiting-confirmation', 'waiting-parts', 'completed', 'delivered', 'cancelled', 'warranty_claim']);\nexport const stockMovementTypeEnum = pgEnum('stock_movement_type', ['in', 'out', 'adjustment']);\nexport const stockReferenceTypeEnum = pgEnum('stock_reference_type', ['sale', 'service', 'purchase', 'adjustment', 'return']);\nexport const warrantyClaimTypeEnum = pgEnum('warranty_claim_type', ['service', 'sales_return']);\nexport const warrantyClaimStatusEnum = pgEnum('warranty_claim_status', ['pending', 'approved', 'rejected', 'processed']);\nexport const returnConditionEnum = pgEnum('return_condition', ['normal_stock', 'damaged_stock']);\nexport const cancellationTypeEnum = pgEnum('cancellation_type', ['before_completed', 'after_completed', 'warranty_refund']);\n\n// User storage table (multi-tenant aware)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  username: varchar(\"username\"),\n  password: varchar(\"password\"),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('kasir'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Roles table for role management\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").unique().notNull(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  permissions: text(\"permissions\").array(), // JSON array of permissions\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Store configuration\nexport const storeConfig = pgTable(\"store_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default('11.00'),\n  defaultDiscount: decimal(\"default_discount\", { precision: 5, scale: 2 }).default('0.00'),\n  logo: varchar(\"logo\"),\n  // Setup wizard status\n  setupCompleted: boolean(\"setup_completed\").default(false),\n  setupSteps: text(\"setup_steps\"), // JSON: store, database, admin completed steps\n  // Database configuration (if needed for self-hosted)\n  databaseUrl: text(\"database_url\"),\n  databaseHost: varchar(\"database_host\"),\n  databasePort: integer(\"database_port\"),\n  databaseName: varchar(\"database_name\"),\n  databaseUser: varchar(\"database_user\"),\n  databasePassword: varchar(\"database_password\"),\n  // WhatsApp settings\n  whatsappEnabled: boolean(\"whatsapp_enabled\").default(false),\n  whatsappSessionData: text(\"whatsapp_session_data\"), // Store session data\n  whatsappQR: text(\"whatsapp_qr\"), // Store QR code\n  whatsappConnected: boolean(\"whatsapp_connected\").default(false),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Categories\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Products - Enhanced inventory system\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  sku: varchar(\"sku\").unique().notNull(),\n  barcode: varchar(\"barcode\"),\n  brand: varchar(\"brand\"),\n  model: varchar(\"model\"),\n  unit: varchar(\"unit\").default(\"pcs\"), // unit of measurement\n  specifications: text(\"specifications\"), // JSON string for detailed specs\n  \n  // Pricing\n  lastPurchasePrice: decimal(\"last_purchase_price\", { precision: 12, scale: 2 }),\n  averageCost: decimal(\"average_cost\", { precision: 12, scale: 2 }), // calculated COGS\n  sellingPrice: decimal(\"selling_price\", { precision: 12, scale: 2 }),\n  marginPercent: decimal(\"margin_percent\", { precision: 5, scale: 2 }),\n  \n  // Stock management\n  stock: integer(\"stock\").default(0), // Main stock field for purchasing integration\n  totalStock: integer(\"total_stock\").default(0),\n  availableStock: integer(\"available_stock\").default(0), // total - reserved\n  reservedStock: integer(\"reserved_stock\").default(0),\n  minStock: integer(\"min_stock\").default(0),\n  maxStock: integer(\"max_stock\"),\n  reorderPoint: integer(\"reorder_point\"),\n  reorderQuantity: integer(\"reorder_quantity\"),\n  \n  // Tracking\n  trackBatches: boolean(\"track_batches\").default(false),\n  trackSerial: boolean(\"track_serial\").default(false),\n  trackExpiry: boolean(\"track_expiry\").default(false),\n  \n  // Status\n  isActive: boolean(\"is_active\").default(true),\n  isDiscontinued: boolean(\"is_discontinued\").default(false),\n  \n  // Metadata\n  weight: decimal(\"weight\", { precision: 8, scale: 3 }),\n  dimensions: varchar(\"dimensions\"), // LxWxH format\n  supplierProductCode: varchar(\"supplier_product_code\"),\n  notes: text(\"notes\"),\n  \n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Customers\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Suppliers - Enhanced supplier management\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  code: varchar(\"code\").unique().notNull(), // supplier code\n  name: varchar(\"name\").notNull(),\n  companyName: varchar(\"company_name\"),\n  \n  // Contact information\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  altPhone: varchar(\"alt_phone\"),\n  website: varchar(\"website\"),\n  \n  // Address\n  address: text(\"address\"),\n  city: varchar(\"city\"),\n  province: varchar(\"province\"),\n  postalCode: varchar(\"postal_code\"),\n  country: varchar(\"country\").default(\"Indonesia\"),\n  \n  // Contact persons\n  contactPerson: varchar(\"contact_person\"),\n  contactTitle: varchar(\"contact_title\"),\n  contactEmail: varchar(\"contact_email\"),\n  contactPhone: varchar(\"contact_phone\"),\n  \n  // Business details\n  taxNumber: varchar(\"tax_number\"), // NPWP\n  businessLicense: varchar(\"business_license\"),\n  \n  // Terms\n  paymentTerms: integer(\"payment_terms\").default(30), // days\n  creditLimit: decimal(\"credit_limit\", { precision: 15, scale: 2 }),\n  \n  // Status and ratings\n  isActive: boolean(\"is_active\").default(true),\n  rating: integer(\"rating\").default(5), // 1-5 stars\n  \n  // Banking\n  bankName: varchar(\"bank_name\"),\n  bankAccount: varchar(\"bank_account\"),\n  bankAccountName: varchar(\"bank_account_name\"),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Transactions\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  transactionNumber: varchar(\"transaction_number\").notNull().unique(),\n  type: transactionTypeEnum(\"type\").notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 12, scale: 2 }).default('0.00'),\n  discountAmount: decimal(\"discount_amount\", { precision: 12, scale: 2 }).default('0.00'),\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\"),\n  notes: text(\"notes\"),\n  // Warranty fields\n  warrantyDuration: integer(\"warranty_duration\"), // Duration in days\n  warrantyStartDate: timestamp(\"warranty_start_date\", { withTimezone: true }).default(sql`now()`),\n  warrantyEndDate: timestamp(\"warranty_end_date\", { withTimezone: true }).default(sql`now()`),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Transaction Items\nexport const transactionItems = pgTable(\"transaction_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  transactionId: varchar(\"transaction_id\").references(() => transactions.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }).notNull(),\n});\n\n// Service Tickets\nexport const serviceTickets = pgTable(\"service_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  ticketNumber: varchar(\"ticket_number\").notNull().unique(),\n  customerId: varchar(\"customer_id\").references(() => customers.id).notNull(),\n  deviceType: varchar(\"device_type\").notNull(),\n  deviceBrand: varchar(\"device_brand\"),\n  deviceModel: varchar(\"device_model\"),\n  serialNumber: varchar(\"serial_number\"),\n  completeness: text(\"completeness\"),\n  problem: text(\"problem\").notNull(),\n  diagnosis: text(\"diagnosis\"),\n  solution: text(\"solution\"),\n  estimatedCost: decimal(\"estimated_cost\", { precision: 12, scale: 2 }),\n  actualCost: decimal(\"actual_cost\", { precision: 12, scale: 2 }),\n  laborCost: decimal(\"labor_cost\", { precision: 12, scale: 2 }),\n  partsCost: decimal(\"parts_cost\", { precision: 12, scale: 2 }),\n  status: serviceStatusEnum(\"status\").default('pending'),\n  technicianId: varchar(\"technician_id\").references(() => users.id),\n  estimatedCompletion: timestamp(\"estimated_completion\", { withTimezone: true }).default(sql`now()`),\n  completedAt: timestamp(\"completed_at\", { withTimezone: true }).default(sql`now()`),\n  // Warranty fields\n  warrantyDuration: integer(\"warranty_duration\"), // Duration in days\n  warrantyStartDate: timestamp(\"warranty_start_date\", { withTimezone: true }).default(sql`now()`),\n  warrantyEndDate: timestamp(\"warranty_end_date\", { withTimezone: true }).default(sql`now()`),\n  \n  // Cancellation fields\n  cancellationFee: decimal(\"cancellation_fee\", { precision: 12, scale: 2 }),\n  cancellationReason: text(\"cancellation_reason\"),\n  cancelledAt: timestamp(\"cancelled_at\", { withTimezone: true }),\n  cancelledBy: varchar(\"cancelled_by\").references(() => users.id),\n  cancellationType: cancellationTypeEnum(\"cancellation_type\"),\n  \n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Service Ticket Parts - Track parts used in service repairs\nexport const serviceTicketParts = pgTable(\"service_ticket_parts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  serviceTicketId: varchar(\"service_ticket_id\").references(() => serviceTickets.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Warranty Claims - Track warranty claims for both sales and service\nexport const warrantyClaims = pgTable(\"warranty_claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  claimNumber: varchar(\"claim_number\").notNull().unique(),\n  \n  // Reference to original transaction/service\n  originalTransactionId: varchar(\"original_transaction_id\").references(() => transactions.id),\n  originalServiceTicketId: varchar(\"original_service_ticket_id\").references(() => serviceTickets.id),\n  \n  // Claim details\n  claimType: warrantyClaimTypeEnum(\"claim_type\").notNull(), // 'service' | 'sales_return'\n  status: warrantyClaimStatusEnum(\"status\").default('pending'), // 'pending' | 'approved' | 'rejected' | 'processed'\n  customerId: varchar(\"customer_id\").references(() => customers.id).notNull(),\n  claimReason: text(\"claim_reason\").notNull(),\n  \n  // Dates and processing\n  claimDate: timestamp(\"claim_date\", { withTimezone: true }).default(sql`now()`),\n  processedDate: timestamp(\"processed_date\", { withTimezone: true }),\n  processedBy: varchar(\"processed_by\").references(() => users.id),\n  \n  // Return condition (for sales returns)\n  returnCondition: returnConditionEnum(\"return_condition\"), // 'normal_stock' | 'damaged_stock'\n  \n  // Additional information\n  notes: text(\"notes\"),\n  \n  // Timestamps\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Product Locations - Warehouse/Location management\nexport const locations = pgTable(\"locations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  code: varchar(\"code\").unique().notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  locationType: varchar(\"location_type\").default(\"warehouse\"), // warehouse, store, etc\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Product Batches/Lots - For batch tracking\nexport const productBatches = pgTable(\"product_batches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchNumber: varchar(\"batch_number\").notNull(),\n  serialNumbers: text(\"serial_numbers\").array(), // for serial tracking\n  \n  // Pricing for this batch\n  unitCost: decimal(\"unit_cost\", { precision: 12, scale: 2 }).notNull(),\n  \n  // Quantities\n  receivedQuantity: integer(\"received_quantity\").notNull(),\n  currentQuantity: integer(\"current_quantity\").notNull(),\n  reservedQuantity: integer(\"reserved_quantity\").default(0),\n  \n  // Dates\n  manufactureDate: date(\"manufacture_date\"),\n  expiryDate: date(\"expiry_date\"),\n  receivedDate: timestamp(\"received_date\", { withTimezone: true }).default(sql`now()`),\n  \n  // References\n  purchaseOrderId: varchar(\"purchase_order_id\"),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  locationId: varchar(\"location_id\").references(() => locations.id),\n  \n  // Status\n  status: varchar(\"status\").default(\"active\"), // active, expired, recalled, sold_out\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Purchase Orders - Comprehensive purchasing system\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  poNumber: varchar(\"po_number\").unique().notNull(),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id).notNull(),\n  \n  // Dates\n  orderDate: date(\"order_date\").default(sql`((now() at time zone 'Asia/Jakarta')::date)`),\n  expectedDeliveryDate: date(\"expected_delivery_date\"),\n  actualDeliveryDate: date(\"actual_delivery_date\"),\n  \n  // Status workflow\n  status: varchar(\"status\").default(\"draft\"), // draft, sent, confirmed, partial_received, received, cancelled\n  \n  // Financial\n  subtotal: decimal(\"subtotal\", { precision: 15, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  shippingCost: decimal(\"shipping_cost\", { precision: 15, scale: 2 }).default(\"0\"),\n  totalAmount: decimal(\"total_amount\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Approval workflow\n  requestedBy: varchar(\"requested_by\").references(() => users.id).notNull(),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedDate: timestamp(\"approved_date\", { withTimezone: true }).default(sql`now()`),\n  \n  // Delivery\n  deliveryAddress: text(\"delivery_address\"),\n  shippingMethod: varchar(\"shipping_method\"),\n  trackingNumber: varchar(\"tracking_number\"),\n  \n  // Terms\n  paymentTerms: integer(\"payment_terms\").default(30),\n  \n  notes: text(\"notes\"),\n  internalNotes: text(\"internal_notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Purchase Order Items\nexport const purchaseOrderItems = pgTable(\"purchase_order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  purchaseOrderId: varchar(\"purchase_order_id\").references(() => purchaseOrders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  \n  // Quantities - both fields exist in database\n  quantity: integer(\"quantity\").notNull(),\n  orderedQuantity: integer(\"ordered_quantity\"),\n  receivedQuantity: integer(\"received_quantity\").default(0),\n  \n  // Outstanding quantity tracking - NEW FIELDS\n  outstandingQuantity: integer(\"outstanding_quantity\").default(0), // quantity - receivedQuantity\n  outstandingStatus: varchar(\"outstanding_status\").default('pending'), // 'pending', 'cancelled', 'refunded', 'backordered', 'partial_delivered'\n  outstandingReason: text(\"outstanding_reason\"), // reason for status change\n  outstandingUpdatedBy: varchar(\"outstanding_updated_by\").references(() => users.id),\n  outstandingUpdatedAt: timestamp(\"outstanding_updated_at\", { withTimezone: true }).default(sql`now()`),\n  \n  // Pricing - both naming conventions exist\n  unitCost: varchar(\"unit_cost\").notNull(),\n  totalCost: varchar(\"total_cost\"),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }),\n  \n  // Product info at time of order (for historical tracking)\n  productName: varchar(\"product_name\"),\n  productSku: varchar(\"product_sku\"),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Stock Movements - Enhanced tracking system\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  \n  // Product tracking\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchId: varchar(\"batch_id\").references(() => productBatches.id),\n  locationId: varchar(\"location_id\").references(() => locations.id),\n  \n  // Movement details\n  movementType: varchar(\"movement_type\").notNull(), // in, out, transfer, adjustment\n  quantity: integer(\"quantity\").notNull(),\n  unitCost: decimal(\"unit_cost\", { precision: 12, scale: 2 }),\n  \n  // References\n  referenceId: varchar(\"reference_id\"), // PO ID, Sale ID, Adjustment ID, etc\n  referenceType: varchar(\"reference_type\").notNull(), // purchase, sale, adjustment, transfer, service\n  \n  // Additional tracking\n  fromLocationId: varchar(\"from_location_id\").references(() => locations.id),\n  toLocationId: varchar(\"to_location_id\").references(() => locations.id),\n  \n  // Metadata\n  notes: text(\"notes\"),\n  reason: varchar(\"reason\"), // damaged, expired, sold, etc\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  \n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Inventory Adjustments - For manual stock corrections\nexport const inventoryAdjustments = pgTable(\"inventory_adjustments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  adjustmentNumber: varchar(\"adjustment_number\").unique().notNull(),\n  \n  // Adjustment details\n  type: varchar(\"type\").notNull(), // increase, decrease, recount\n  reason: varchar(\"reason\").notNull(), // damage, theft, expiry, recount, etc\n  \n  // Approval\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedDate: timestamp(\"approved_date\", { withTimezone: true }).default(sql`now()`),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Inventory Adjustment Items\nexport const inventoryAdjustmentItems = pgTable(\"inventory_adjustment_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  adjustmentId: varchar(\"adjustment_id\").references(() => inventoryAdjustments.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchId: varchar(\"batch_id\").references(() => productBatches.id),\n  locationId: varchar(\"location_id\").references(() => locations.id),\n  \n  // Quantities\n  systemQuantity: integer(\"system_quantity\").notNull(), // what system shows\n  actualQuantity: integer(\"actual_quantity\").notNull(), // what was counted\n  adjustmentQuantity: integer(\"adjustment_quantity\").notNull(), // difference\n  \n  // Cost impact\n  unitCost: decimal(\"unit_cost\", { precision: 12, scale: 2 }),\n  totalCostImpact: decimal(\"total_cost_impact\", { precision: 12, scale: 2 }),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Financial Records - Complete rebuild\n// Financial Records - Legacy compatibility (keep for migration)\nexport const financialRecords = pgTable(\"financial_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  type: varchar(\"type\", { length: 20 }).notNull(), // income, expense, transfer\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  subcategory: varchar(\"subcategory\", { length: 100 }),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  reference: varchar(\"reference\"), // Reference to transaction, service ticket, payroll, etc.\n  referenceType: varchar(\"reference_type\", { length: 50 }), // sale, service, payroll, expense, etc.\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  journalEntryId: varchar(\"journal_entry_id\").references(() => journalEntries.id), // Link to journal entry\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // cash, bank_transfer, credit_card, etc.\n  status: varchar(\"status\", { length: 20 }).default(\"confirmed\"), // pending, confirmed, cancelled\n  tags: text(\"tags\").array(), // For better categorization\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Chart of Accounts\nexport const accounts: any = pgTable(\"accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  code: varchar(\"code\", { length: 20 }).unique().notNull(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  type: varchar(\"type\", { length: 30 }).notNull(), // asset, liability, equity, revenue, expense\n  subtype: varchar(\"subtype\", { length: 50 }), // current_asset, fixed_asset, operating_revenue, etc.\n  parentId: varchar(\"parent_id\").references((): any => accounts.id),\n  normalBalance: varchar(\"normal_balance\", { length: 10 }).notNull(), // debit or credit\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Journal Entries for Double-Entry Bookkeeping\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  journalNumber: varchar(\"journal_number\", { length: 50 }).unique().notNull(),\n  date: timestamp(\"date\", { withTimezone: true }).notNull().default(sql`now()`),\n  description: text(\"description\").notNull(),\n  reference: varchar(\"reference\"), // Reference to source transaction\n  referenceType: varchar(\"reference_type\", { length: 50 }), // sale, purchase, service, payroll, etc.\n  totalAmount: decimal(\"total_amount\", { precision: 15, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"posted\"), // draft, posted, reversed\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Journal Entry Lines (Debit/Credit entries)\nexport const journalEntryLines = pgTable(\"journal_entry_lines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  journalEntryId: varchar(\"journal_entry_id\").references(() => journalEntries.id).notNull(),\n  accountId: varchar(\"account_id\").references(() => accounts.id).notNull(),\n  description: text(\"description\").notNull(),\n  debitAmount: decimal(\"debit_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  creditAmount: decimal(\"credit_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Employees for Payroll\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  employeeNumber: varchar(\"employee_number\", { length: 50 }).unique().notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  position: varchar(\"position\", { length: 100 }).notNull(),\n  department: varchar(\"department\", { length: 100 }),\n  salary: decimal(\"salary\", { precision: 12, scale: 2 }).notNull(),\n  salaryType: varchar(\"salary_type\", { length: 20 }).default(\"monthly\"), // monthly, weekly, daily, hourly\n  joinDate: timestamp(\"join_date\", { withTimezone: true }).notNull().default(sql`now()`),\n  endDate: timestamp(\"end_date\", { withTimezone: true }).default(sql`now()`),\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // active, inactive, terminated\n  bankAccount: varchar(\"bank_account\", { length: 50 }),\n  taxId: varchar(\"tax_id\", { length: 50 }),\n  address: text(\"address\"),\n  phone: varchar(\"phone\", { length: 20 }),\n  emergencyContact: jsonb(\"emergency_contact\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Payroll Records\nexport const payrollRecords = pgTable(\"payroll_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  employeeId: varchar(\"employee_id\").references(() => employees.id).notNull(),\n  payrollNumber: varchar(\"payroll_number\", { length: 50 }).unique().notNull(),\n  periodStart: timestamp(\"period_start\", { withTimezone: true }).notNull().default(sql`now()`),\n  periodEnd: timestamp(\"period_end\", { withTimezone: true }).notNull().default(sql`now()`),\n  baseSalary: decimal(\"base_salary\", { precision: 12, scale: 2 }).notNull(),\n  overtime: decimal(\"overtime\", { precision: 12, scale: 2 }).default(\"0\"),\n  bonus: decimal(\"bonus\", { precision: 12, scale: 2 }).default(\"0\"),\n  allowances: decimal(\"allowances\", { precision: 12, scale: 2 }).default(\"0\"),\n  grossPay: decimal(\"gross_pay\", { precision: 12, scale: 2 }).notNull(),\n  taxDeduction: decimal(\"tax_deduction\", { precision: 12, scale: 2 }).default(\"0\"),\n  socialSecurity: decimal(\"social_security\", { precision: 12, scale: 2 }).default(\"0\"),\n  healthInsurance: decimal(\"health_insurance\", { precision: 12, scale: 2 }).default(\"0\"),\n  otherDeductions: decimal(\"other_deductions\", { precision: 12, scale: 2 }).default(\"0\"),\n  netPay: decimal(\"net_pay\", { precision: 12, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"draft\"), // draft, approved, paid\n  paidDate: timestamp(\"paid_date\", { withTimezone: true }).default(sql`now()`),\n  notes: text(\"notes\"),\n  userId: varchar(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Attendance Records\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\"), // Add tenant ID for SaaS multi-tenancy\n  employeeId: varchar(\"employee_id\").references(() => employees.id).notNull(),\n  date: timestamp(\"date\", { withTimezone: true }).notNull().default(sql`now()`),\n  clockIn: timestamp(\"clock_in\", { withTimezone: true }).default(sql`now()`),\n  clockOut: timestamp(\"clock_out\", { withTimezone: true }).default(sql`now()`),\n  breakStart: timestamp(\"break_start\", { withTimezone: true }).default(sql`now()`),\n  breakEnd: timestamp(\"break_end\", { withTimezone: true }).default(sql`now()`),\n  hoursWorked: decimal(\"hours_worked\", { precision: 4, scale: 2 }).default(\"0\"),\n  overtimeHours: decimal(\"overtime_hours\", { precision: 4, scale: 2 }).default(\"0\"),\n  status: varchar(\"status\", { length: 20 }).default(\"present\"), // present, absent, late, half_day\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Relations  \nexport const usersRelations = relations(users, ({ many }) => ({\n  transactions: many(transactions),\n  serviceTickets: many(serviceTickets),\n  stockMovements: many(stockMovements),\n  financialRecords: many(financialRecords),\n  employees: many(employees),\n  payrollRecords: many(payrollRecords),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one, many }) => ({\n  parent: one(accounts, {\n    fields: [accounts.parentId],\n    references: [accounts.id],\n  }),\n  children: many(accounts),\n  financialRecords: many(financialRecords),\n  journalEntryLines: many(journalEntryLines),\n}));\n\nexport const journalEntriesRelations = relations(journalEntries, ({ one, many }) => ({\n  user: one(users, {\n    fields: [journalEntries.userId],\n    references: [users.id],\n  }),\n  lines: many(journalEntryLines),\n  financialRecords: many(financialRecords),\n}));\n\nexport const journalEntryLinesRelations = relations(journalEntryLines, ({ one }) => ({\n  journalEntry: one(journalEntries, {\n    fields: [journalEntryLines.journalEntryId],\n    references: [journalEntries.id],\n  }),\n  account: one(accounts, {\n    fields: [journalEntryLines.accountId],\n    references: [accounts.id],\n  }),\n}));\n\nexport const employeesRelations = relations(employees, ({ one, many }) => ({\n  user: one(users, {\n    fields: [employees.userId],\n    references: [users.id],\n  }),\n  payrollRecords: many(payrollRecords),\n  attendanceRecords: many(attendanceRecords),\n}));\n\nexport const payrollRecordsRelations = relations(payrollRecords, ({ one }) => ({\n  employee: one(employees, {\n    fields: [payrollRecords.employeeId],\n    references: [employees.id],\n  }),\n  user: one(users, {\n    fields: [payrollRecords.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const attendanceRecordsRelations = relations(attendanceRecords, ({ one }) => ({\n  employee: one(employees, {\n    fields: [attendanceRecords.employeeId],\n    references: [employees.id],\n  }),\n}));\n\nexport const financialRecordsRelations = relations(financialRecords, ({ one }) => ({\n  account: one(accounts, {\n    fields: [financialRecords.accountId],\n    references: [accounts.id],\n  }),\n  user: one(users, {\n    fields: [financialRecords.userId],\n    references: [users.id],\n  }),\n  journalEntry: one(journalEntries, {\n    fields: [financialRecords.journalEntryId],\n    references: [journalEntries.id],\n  }),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  transactionItems: many(transactionItems),\n  stockMovements: many(stockMovements),\n}));\n\nexport const customersRelations = relations(customers, ({ many }) => ({\n  transactions: many(transactions),\n  serviceTickets: many(serviceTickets),\n}));\n\nexport const suppliersRelations = relations(suppliers, ({ many }) => ({\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one, many }) => ({\n  customer: one(customers, {\n    fields: [transactions.customerId],\n    references: [customers.id],\n  }),\n  supplier: one(suppliers, {\n    fields: [transactions.supplierId],\n    references: [suppliers.id],\n  }),\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n  items: many(transactionItems),\n}));\n\nexport const transactionItemsRelations = relations(transactionItems, ({ one }) => ({\n  transaction: one(transactions, {\n    fields: [transactionItems.transactionId],\n    references: [transactions.id],\n  }),\n  product: one(products, {\n    fields: [transactionItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const serviceTicketsRelations = relations(serviceTickets, ({ one }) => ({\n  customer: one(customers, {\n    fields: [serviceTickets.customerId],\n    references: [customers.id],\n  }),\n  technician: one(users, {\n    fields: [serviceTickets.technicianId],\n    references: [users.id],\n  }),\n}));\n\nexport const stockMovementsRelations = relations(stockMovements, ({ one }) => ({\n  product: one(products, {\n    fields: [stockMovements.productId],\n    references: [products.id],\n  }),\n  user: one(users, {\n    fields: [stockMovements.userId],\n    references: [users.id],\n  }),\n}));\n\n\n// Helper function to transform empty strings to default values for numeric fields\nconst transformNumericField = (defaultValue: string = \"0\") => \n  z.string().transform((val) => val === \"\" || val === undefined || val === null ? defaultValue : val);\n\nconst transformIntegerField = (defaultValue: number = 0) => \n  z.union([z.string(), z.number()]).transform((val) => {\n    if (val === \"\" || val === undefined || val === null) return defaultValue;\n    return typeof val === \"string\" ? (val === \"\" ? defaultValue : parseInt(val) || defaultValue) : val;\n  });\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStoreConfigSchema = createInsertSchema(storeConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  taxRate: transformNumericField(\"11.00\"),\n  defaultDiscount: transformNumericField(\"0.00\").optional(),\n  databasePort: transformIntegerField(5432).optional(),\n}).partial().extend({\n  // Keep essential fields required\n  name: z.string().min(1, \"Store name is required\"),\n  taxRate: transformNumericField(\"11.00\"),\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  sku: true,      // Auto-generated\n  barcode: true,  // Auto-generated\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  lastPurchasePrice: transformNumericField(\"0.00\").optional(),\n  averageCost: transformNumericField(\"0.00\").optional(),\n  sellingPrice: transformNumericField(\"0.00\"),\n  marginPercent: transformNumericField(\"0.00\").optional(),\n  stock: transformIntegerField(0),\n  totalStock: transformIntegerField(0),\n  availableStock: transformIntegerField(0),\n  reservedStock: transformIntegerField(0),\n  minStock: transformIntegerField(0),\n  maxStock: transformIntegerField().optional(),\n  reorderPoint: transformIntegerField().optional(),\n  reorderQuantity: transformIntegerField().optional(),\n  weight: transformNumericField().optional(),\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  paymentTerms: transformIntegerField(30),\n  creditLimit: transformNumericField(\"0.00\").optional(),\n  rating: transformIntegerField(5),\n});\n\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  paymentTerms: transformIntegerField(30),\n  creditLimit: transformNumericField(\"0.00\").optional(),\n  rating: transformIntegerField(5),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  transactionNumber: true, // Auto-generated by server\n  userId: true,            // Set by server from auth\n  createdAt: true,\n}).extend({\n  subtotal: transformNumericField(\"0.00\"),\n  taxAmount: transformNumericField(\"0.00\"),\n  discountAmount: transformNumericField(\"0.00\"),\n  total: transformNumericField(\"0.00\"),\n  // Warranty fields\n  warrantyDuration: transformIntegerField().optional(),\n  warrantyStartDate: z.coerce.date().nullable().optional(),\n  warrantyEndDate: z.coerce.date().nullable().optional(),\n});\n\nexport const insertTransactionItemSchema = createInsertSchema(transactionItems).omit({\n  id: true,\n  transactionId: true, // This will be set by the server\n}).extend({\n  quantity: transformIntegerField(1),\n  unitPrice: transformNumericField(\"0.00\"),\n  totalPrice: transformNumericField(\"0.00\"),\n});\n\nexport const insertServiceTicketSchema = createInsertSchema(serviceTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  ticketNumber: z.string().optional(), // Auto-generated by server, but needed for storage method\n  estimatedCost: z.union([z.string(), z.null()]).transform((val) => val === null || val === \"\" ? null : val).optional(),\n  actualCost: z.union([z.string(), z.null()]).transform((val) => val === null || val === \"\" ? null : val).optional(),\n  laborCost: z.union([z.string(), z.null()]).transform((val) => val === null || val === \"\" ? null : val).optional(),\n  partsCost: z.union([z.string(), z.null()]).transform((val) => val === null || val === \"\" ? null : val).optional(),\n  // Warranty fields\n  warrantyDuration: transformIntegerField().optional(),\n  warrantyStartDate: z.coerce.date().nullable().optional(),\n  warrantyEndDate: z.coerce.date().nullable().optional(),\n});\n\nexport const insertStockMovementSchema = createInsertSchema(stockMovements).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  quantity: transformIntegerField(1),\n  unitCost: transformNumericField(\"0.00\").optional(),\n});\n\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductBatchSchema = createInsertSchema(productBatches).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  unitCost: transformNumericField(\"0.00\"),\n  receivedQuantity: transformIntegerField(0),\n  currentQuantity: transformIntegerField(0),\n  reservedQuantity: transformIntegerField(0),\n});\n\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  subtotal: transformNumericField(\"0.00\"),\n  taxAmount: transformNumericField(\"0.00\"),\n  discountAmount: transformNumericField(\"0.00\"),\n  shippingCost: transformNumericField(\"0.00\"),\n  totalAmount: transformNumericField(\"0.00\"),\n  paymentTerms: transformIntegerField(30),\n});\n\nexport const insertPurchaseOrderItemSchema = createInsertSchema(purchaseOrderItems).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  quantity: transformIntegerField(1),\n  orderedQuantity: transformIntegerField().optional(),\n  receivedQuantity: transformIntegerField(0),\n  outstandingQuantity: transformIntegerField(0),\n  unitPrice: transformNumericField(\"0.00\").optional(),\n  totalPrice: transformNumericField(\"0.00\").optional(),\n});\n\nexport const insertInventoryAdjustmentSchema = createInsertSchema(inventoryAdjustments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInventoryAdjustmentItemSchema = createInsertSchema(inventoryAdjustmentItems).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  quantity: transformIntegerField(0),\n  systemQuantity: transformIntegerField(0),\n  actualQuantity: transformIntegerField(0),\n  adjustmentQuantity: transformIntegerField(0),\n  unitCost: transformNumericField(\"0.00\").optional(),\n  totalCostImpact: transformNumericField(\"0.00\").optional(),\n});\n\nexport const insertServiceTicketPartSchema = createInsertSchema(serviceTicketParts).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  quantity: transformIntegerField(1),\n  unitPrice: transformNumericField(\"0.00\"),\n  totalPrice: transformNumericField(\"0.00\"),\n});\n\nexport const insertWarrantyClaimSchema = createInsertSchema(warrantyClaims).omit({\n  id: true,\n  claimNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFinancialRecordSchema = createInsertSchema(financialRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  amount: transformNumericField(\"0.00\"),\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  balance: transformNumericField(\"0.00\"),\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  salary: transformNumericField(\"0.00\"),\n});\n\nexport const insertPayrollRecordSchema = createInsertSchema(payrollRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  baseSalary: transformNumericField(\"0.00\"),\n  overtime: transformNumericField(\"0.00\"),\n  bonus: transformNumericField(\"0.00\"),\n});\n\nexport const insertAttendanceRecordSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  journalNumber: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  totalAmount: transformNumericField(\"0.00\"),\n});\n\nexport const insertJournalEntryLineSchema = createInsertSchema(journalEntryLines).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  debitAmount: transformNumericField(\"0.00\"),\n  creditAmount: transformNumericField(\"0.00\"),\n});\n\nexport const insertAccountSchema2 = createInsertSchema(accounts).omit({\n  id: true,\n  balance: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type LoginUser = {\n  username: string;\n  password: string;\n};\nexport type InsertStoreConfig = z.infer<typeof insertStoreConfigSchema>;\nexport type StoreConfig = typeof storeConfig.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\n// Auto-generation utilities\nexport function generateSKU(): string {\n  const date = new Date();\n  const dateString = date.toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD\n  const randomNum = Math.floor(Math.random() * 9999).toString().padStart(4, '0');\n  return `SKU-${dateString}-${randomNum}`;\n}\n\nexport function generateBarcode(): string {\n  // Generate 13-digit EAN barcode format: Country(2) + Manufacturer(5) + Product(5) + Check(1)\n  const country = '62'; // Indonesia country code for barcodes\n  const manufacturer = Math.floor(Math.random() * 99999).toString().padStart(5, '0');\n  const product = Math.floor(Math.random() * 99999).toString().padStart(5, '0');\n  \n  // Simple check digit calculation (modulo 10)\n  const digits = (country + manufacturer + product).split('').map(Number);\n  let checkSum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    checkSum += digits[i] * (i % 2 === 0 ? 1 : 3);\n  }\n  const checkDigit = (10 - (checkSum % 10)) % 10;\n  \n  return country + manufacturer + product + checkDigit;\n}\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransactionItem = z.infer<typeof insertTransactionItemSchema>;\nexport type TransactionItem = typeof transactionItems.$inferSelect;\nexport type InsertServiceTicket = z.infer<typeof insertServiceTicketSchema>;\nexport type ServiceTicket = typeof serviceTickets.$inferSelect;\nexport type InsertStockMovement = z.infer<typeof insertStockMovementSchema>;\nexport type StockMovement = typeof stockMovements.$inferSelect;\nexport type InsertServiceTicketPart = z.infer<typeof insertServiceTicketPartSchema>;\nexport type ServiceTicketPart = typeof serviceTicketParts.$inferSelect;\nexport type InsertWarrantyClaim = z.infer<typeof insertWarrantyClaimSchema>;\nexport type WarrantyClaim = typeof warrantyClaims.$inferSelect;\nexport type InsertFinancialRecord = z.infer<typeof insertFinancialRecordSchema>;\nexport type FinancialRecord = typeof financialRecords.$inferSelect;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertPayrollRecord = z.infer<typeof insertPayrollRecordSchema>;\nexport type PayrollRecord = typeof payrollRecords.$inferSelect;\nexport type InsertAttendanceRecord = z.infer<typeof insertAttendanceRecordSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertJournalEntryLine = z.infer<typeof insertJournalEntryLineSchema>;\nexport type JournalEntryLine = typeof journalEntryLines.$inferSelect;\nexport type InsertAccount2 = z.infer<typeof insertAccountSchema2>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type Role = typeof roles.$inferSelect;\n\n// New inventory system types\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\nexport type Location = typeof locations.$inferSelect;\nexport type InsertProductBatch = z.infer<typeof insertProductBatchSchema>;\nexport type ProductBatch = typeof productBatches.$inferSelect;\nexport type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type InsertPurchaseOrderItem = z.infer<typeof insertPurchaseOrderItemSchema>;\nexport type PurchaseOrderItem = typeof purchaseOrderItems.$inferSelect;\nexport type InsertInventoryAdjustment = z.infer<typeof insertInventoryAdjustmentSchema>;\nexport type InventoryAdjustment = typeof inventoryAdjustments.$inferSelect;\nexport type InsertInventoryAdjustmentItem = z.infer<typeof insertInventoryAdjustmentItemSchema>;\nexport type InventoryAdjustmentItem = typeof inventoryAdjustmentItems.$inferSelect;\n","size_bytes":50872},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSetup } from \"@/hooks/useSetup\";\nimport { useWebSocket } from \"@/lib/websocket\";\nimport { useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport POS from \"@/pages/pos\";\nimport ServiceTickets from \"@/pages/service-tickets\";\nimport Inventory from \"@/pages/inventory\";\nimport Purchasing from \"@/pages/purchasing\";\nimport Customers from \"@/pages/customers\";\nimport Suppliers from \"@/pages/suppliers\";\nimport Financial from \"@/pages/financial\";\nimport FinanceNew from \"@/pages/finance-new\";\nimport Reports from \"@/pages/reports\";\nimport StockMovements from \"@/pages/stock-movements\";\nimport Settings from \"@/pages/settings\";\nimport RolesPage from \"@/pages/roles\";\nimport UsersPage from \"@/pages/users\";\nimport ServiceStatus from \"@/pages/ServiceStatus\";\nimport Setup from \"@/pages/setup\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminSaaS from \"@/pages/admin-saas\";\nimport ClientOnboarding from \"@/pages/client-onboarding\";\nimport Warranty from \"@/pages/warranty\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { needsSetup, isSetupLoading, setupStatus, error } = useSetup();\n  const { connect, disconnect } = useWebSocket();\n\n  // Connect to WebSocket when authenticated\n  useEffect(() => {\n    if (isAuthenticated && !needsSetup && !isSetupLoading) {\n      console.log('🔄 Connecting to real-time updates...');\n      connect();\n    } else {\n      disconnect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, [isAuthenticated, needsSetup, isSetupLoading, connect, disconnect]);\n\n  // Debug logging for development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Router Debug:', {\n      needsSetup,\n      isSetupLoading,\n      setupStatus,\n      isAuthenticated,\n      isLoading,\n      error: error?.message\n    });\n  }\n\n  // Show setup if not completed (regardless of auth status)\n  if (needsSetup || isSetupLoading) {\n    return (\n      <Switch>\n        <Route path=\"/setup\" component={Setup} />\n        <Route path=\"*\" component={Setup} /> {/* Redirect all routes to setup */}\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Login} />\n          <Route path=\"/login\" component={Login} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/pos\" component={POS} />\n          <Route path=\"/service\" component={ServiceTickets} />\n          <Route path=\"/inventory\" component={Inventory} />\n          <Route path=\"/purchasing\" component={Purchasing} />\n          <Route path=\"/customers\" component={Customers} />\n          <Route path=\"/suppliers\" component={Suppliers} />\n          <Route path=\"/financial\" component={Financial} />\n          <Route path=\"/finance-new\" component={FinanceNew} />\n          <Route path=\"/users\" component={UsersPage} />\n          <Route path=\"/roles\" component={RolesPage} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/stock-movements\" component={StockMovements} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/warranty\" component={Warranty} />\n          <Route path=\"/admin-dashboard\" component={AdminDashboard} />\n          <Route path=\"/admin-saas\" component={AdminSaaS} />\n        </>\n      )}\n      <Route path=\"/service-status\" component={ServiceStatus} />\n      <Route path=\"/setup\" component={Setup} />\n      <Route path=\"/client-onboarding\" component={ClientOnboarding} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4234},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(158, 64%, 52%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221, 83%, 53%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(158, 64%, 52%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(221, 83%, 53%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@media print {\n  .no-print { \n    display: none !important; \n  }\n  .print-only { \n    display: block !important; \n  }\n}\n\n.print-only { \n  display: none; \n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3226},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\n// CSS for uppy will be loaded automatically\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2826},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes instead of Infinity for real-time updates\n      gcTime: 10 * 60 * 1000, // 10 minutes garbage collection time (replaces cacheTime)\n      retry: false,\n      enabled: true,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1623},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, User, Edit, Trash2, Phone, Mail, MapPin, Download, Upload, FileSpreadsheet } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCustomerSchema, type Customer } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDateShort } from '@shared/utils/timezone';\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { validateExcelFile, downloadTemplate, uploadExcelFile, type ImportResult } from \"@/lib/importExportUtils\";\nimport ImportResultsDialog from \"@/components/ImportResultsDialog\";\n\nconst customerFormSchema = insertCustomerSchema;\n\nexport default function Customers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  \n  // Import/Export state\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [showImportResults, setShowImportResults] = useState(false);\n  const [importResults, setImportResults] = useState<ImportResult | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isDownloading, setIsDownloading] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: customers = [], isLoading } = useQuery({\n    queryKey: [\"/api/customers\", searchQuery],\n    queryFn: async () => {\n      const url = searchQuery ? `/api/customers?search=${encodeURIComponent(searchQuery)}` : '/api/customers';\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch customers');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      // Add additional fields that might be in schema\n      paymentTerms: 30,\n      creditLimit: \"\",\n      rating: 5,\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/customers', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setShowDialog(false);\n      setEditingCustomer(null);\n      form.reset();\n      toast({ title: \"Berhasil\", description: \"Pelanggan berhasil dibuat\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Tidak Diotorisasi\",\n          description: \"Anda telah logout. Masuk kembali...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal membuat pelanggan\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest('PUT', `/api/customers/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setShowDialog(false);\n      setEditingCustomer(null);\n      form.reset();\n      toast({ title: \"Berhasil\", description: \"Pelanggan berhasil diupdate\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Tidak Diotorisasi\",\n          description: \"Anda telah logout. Masuk kembali...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal mengupdate pelanggan\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/customers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Berhasil\", description: \"Pelanggan berhasil dihapus\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Tidak Diotorisasi\",\n          description: \"Anda telah logout. Masuk kembali...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal menghapus pelanggan\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    console.log(\"🔥 Customer handleSubmit called with data:\", data);\n    console.log(\"🔥 Customer Form errors:\", form.formState.errors);\n    console.log(\"🔥 Customer Form is valid:\", form.formState.isValid);\n    console.log(\"🔥 Customer Create mutation pending:\", createMutation.isPending);\n    console.log(\"🔥 Customer Update mutation pending:\", updateMutation.isPending);\n    \n    if (editingCustomer) {\n      updateMutation.mutate({ id: editingCustomer.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (customer: Customer) => {\n    setEditingCustomer(customer);\n    form.reset({\n      name: customer.name,\n      email: customer.email || \"\",\n      phone: customer.phone || \"\",\n      address: customer.address || \"\",\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus pelanggan ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleNew = () => {\n    setEditingCustomer(null);\n    form.reset();\n    setShowDialog(true);\n  };\n\n  // Import/Export handlers\n  const handleDownloadTemplate = async () => {\n    try {\n      setIsDownloading(true);\n      await downloadTemplate('/api/customers/template', 'customer-template.xlsx');\n      toast({ \n        title: \"Berhasil\", \n        description: \"Template berhasil diunduh\" \n      });\n    } catch (error) {\n      console.error('Download template error:', error);\n      toast({ \n        title: \"Error\", \n        description: \"Failed to download template\", \n        variant: \"destructive\" \n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const validation = validateExcelFile(file);\n    if (!validation.isValid) {\n      toast({ \n        title: \"Invalid File\", \n        description: validation.error, \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  const handleImportExcel = async () => {\n    if (!selectedFile) {\n      toast({ \n        title: \"No File Selected\", \n        description: \"Please select an Excel file to import\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    try {\n      setIsUploading(true);\n      const result = await uploadExcelFile(selectedFile, '/api/customers/import');\n      setImportResults(result);\n      setShowImportResults(true);\n      setSelectedFile(null);\n      \n      // Clear the file input\n      const fileInput = document.getElementById('customer-file-input') as HTMLInputElement;\n      if (fileInput) fileInput.value = '';\n\n      // Refresh customers data\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      \n      if (result.successCount > 0) {\n        toast({ \n          title: \"Import Completed\", \n          description: `Successfully imported ${result.successCount} customers` \n        });\n      }\n    } catch (error) {\n      console.error('Import error:', error);\n      toast({ \n        title: \"Import Failed\", \n        description: error instanceof Error ? error.message : \"Failed to import file\", \n        variant: \"destructive\" \n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Manajemen Pelanggan\" \n          breadcrumb=\"Beranda / Pelanggan\"\n          action={\n            <div className=\"flex items-center space-x-2\">\n              {/* Import/Export Buttons */}\n              <Button \n                variant=\"outline\" \n                onClick={handleDownloadTemplate}\n                disabled={isDownloading}\n                data-testid=\"button-download-customer-template\"\n              >\n                {isDownloading ? (\n                  <FileSpreadsheet className=\"w-4 h-4 mr-2 animate-pulse\" />\n                ) : (\n                  <Download className=\"w-4 h-4 mr-2\" />\n                )}\n                {isDownloading ? \"Mengunduh...\" : \"Unduh Template\"}\n              </Button>\n              \n              <div className=\"flex items-center space-x-2\">\n                <input\n                  id=\"customer-file-input\"\n                  type=\"file\"\n                  accept=\".xlsx,.xls\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  data-testid=\"input-customer-file\"\n                />\n                <Button \n                  variant=\"outline\"\n                  onClick={() => document.getElementById('customer-file-input')?.click()}\n                  data-testid=\"button-select-customer-file\"\n                >\n                  <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                  Pilih File\n                </Button>\n                \n                {selectedFile && (\n                  <Button \n                    onClick={handleImportExcel}\n                    disabled={isUploading}\n                    data-testid=\"button-import-customers\"\n                  >\n                    {isUploading ? (\n                      <Upload className=\"w-4 h-4 mr-2 animate-pulse\" />\n                    ) : (\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                    )}\n                    {isUploading ? \"Mengimpor...\" : \"Import Excel\"}\n                  </Button>\n                )}\n              </div>\n              \n              <Button onClick={handleNew} data-testid=\"button-add-customer\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Tambah Pelanggan\n              </Button>\n            </div>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search Bar */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Cari pelanggan berdasarkan nama, email, atau telepon...\"\n                    className=\"pl-10\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-customer-search\"\n                  />\n                </div>\n                {selectedFile && (\n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <FileSpreadsheet className=\"w-4 h-4\" />\n                    <span data-testid=\"selected-file-name\">{selectedFile.name}</span>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      onClick={() => {\n                        setSelectedFile(null);\n                        const fileInput = document.getElementById('customer-file-input') as HTMLInputElement;\n                        if (fileInput) fileInput.value = '';\n                      }}\n                      data-testid=\"button-clear-selected-file\"\n                    >\n                      ×\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customers Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Customers ({(customers as Customer[]).length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (customers as Customer[]).length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No customers found</p>\n                  <Button className=\"mt-4\" onClick={handleNew}>\n                    Add First Customer\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Contact Information</TableHead>\n                      <TableHead>Address</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {(customers as Customer[]).map((customer: Customer) => (\n                      <TableRow key={customer.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <User className=\"w-5 h-5 text-primary\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`customer-name-${customer.id}`}>\n                                {customer.name}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            {customer.email && (\n                              <div className=\"flex items-center text-sm\">\n                                <Mail className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`customer-email-${customer.id}`}>\n                                  {customer.email}\n                                </span>\n                              </div>\n                            )}\n                            {customer.phone && (\n                              <div className=\"flex items-center text-sm\">\n                                <Phone className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`customer-phone-${customer.id}`}>\n                                  {customer.phone}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {customer.address && (\n                            <div className=\"flex items-center text-sm\">\n                              <MapPin className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span className=\"text-muted-foreground truncate max-w-xs\" data-testid={`customer-address-${customer.id}`}>\n                                {customer.address}\n                              </span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`customer-joined-${customer.id}`}>\n                            {customer.createdAt ? formatDateShort(customer.createdAt) : '-'}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(customer)}\n                              data-testid={`button-edit-customer-${customer.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(customer.id)}\n                              data-testid={`button-delete-customer-${customer.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Customer Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingCustomer ? \"Edit Customer\" : \"Add New Customer\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter customer name\" {...field} data-testid=\"input-customer-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"customer@example.com\" \n                          {...field} \n                          data-testid=\"input-customer-email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"08123456789\" \n                          {...field} \n                          data-testid=\"input-customer-phone\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Customer address\" \n                        {...field} \n                        data-testid=\"textarea-customer-address\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-3 pt-6\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowDialog(false)}\n                  data-testid=\"button-cancel-customer\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-customer\"\n                  onClick={(e) => {\n                    console.log(\"🔥 Customer Button clicked!\");\n                    console.log(\"🔥 Customer Form state:\", form.formState);\n                    console.log(\"🔥 Customer Form values:\", form.getValues());\n                    console.log(\"🔥 Customer Form errors:\", form.formState.errors);\n                    console.log(\"🔥 Customer Form is valid:\", form.formState.isValid);\n                  }}\n                >\n                  {editingCustomer ? \"Update Customer\" : \"Create Customer\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Import Results Dialog */}\n      <ImportResultsDialog\n        open={showImportResults}\n        onOpenChange={setShowImportResults}\n        result={importResults}\n        title=\"Customer Import Results\"\n      />\n    </div>\n  );\n}","size_bytes":22703},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatCard from \"@/components/dashboard/stat-card\";\nimport RecentTransactions from \"@/components/dashboard/recent-transactions\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport ServiceStatus from \"@/components/dashboard/service-status\";\nimport InventoryAlerts from \"@/components/dashboard/inventory-alerts\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, Users, DollarSign, BarChart3 } from \"lucide-react\";\nimport { useWebSocket } from \"@/lib/websocket\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const { isConnected } = useWebSocket();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Tidak Diotorisasi\",\n        description: \"Anda telah logout. Masuk kembali...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  // Auto-refresh data setiap 5 detik untuk dashboard real-time\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!document.hidden) {\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/recent-transactions'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/low-stock-products'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/purchase-orders/outstanding-items'] });\n      }\n    }, 5000); // 5 detik untuk update yang lebih instan\n    \n    return () => clearInterval(interval);\n  }, [queryClient]);\n  \n  // Refresh saat user berinteraksi\n  useEffect(() => {\n    let lastActivity = Date.now();\n    const refreshOnActivity = () => {\n      const now = Date.now();\n      if (now - lastActivity > 3000) {\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        lastActivity = now;\n      }\n    };\n    \n    const handleActivity = () => {\n      lastActivity = Date.now();\n      setTimeout(refreshOnActivity, 3000);\n    };\n    \n    window.addEventListener('click', handleActivity);\n    return () => window.removeEventListener('click', handleActivity);\n  }, [queryClient]);\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    if (isConnected) {\n      // WebSocket is connected, real-time updates will be handled by the WebSocket manager\n      console.log('Dashboard: WebSocket connected for real-time updates');\n    }\n  }, [isConnected]);\n\n  // Auto-refresh saat visibility change - lebih comprehensive\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        // Full dashboard refresh saat kembali ke tab\n        queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/recent-transactions'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/low-stock-products'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/service-tickets'] });\n      }\n    };\n    \n    const handleFocus = () => {\n      // Refresh stats saat window focus\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('focus', handleFocus);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [queryClient]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div>Memuat...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Dasbor\" breadcrumb=\"Beranda / Dasbor\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Dashboard Stats Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <StatCard\n              title=\"Penjualan Hari Ini\"\n              value={statsLoading ? \"Memuat...\" : `Rp ${Number((stats as any)?.todaySales || 0).toLocaleString('id-ID')}`}\n              change=\"+12% dari kemarin\"\n              icon=\"money-bill-wave\"\n              color=\"primary\"\n              data-testid=\"stat-today-sales\"\n            />\n            <StatCard\n              title=\"Service Aktif\"\n              value={statsLoading ? \"Memuat...\" : (stats as any)?.activeServices?.toString() || \"0\"}\n              change=\"5 mendesak\"\n              icon=\"tools\"\n              color=\"accent\"\n              data-testid=\"stat-active-services\"\n            />\n            <StatCard\n              title=\"Stok Menipis\"\n              value={statsLoading ? \"Memuat...\" : (stats as any)?.lowStockCount?.toString() || \"0\"}\n              change=\"Perlu perhatian\"\n              icon=\"exclamation-triangle\"\n              color=\"destructive\"\n              data-testid=\"stat-low-stock\"\n            />\n            <StatCard\n              title=\"Profit Bulanan\"\n              value={statsLoading ? \"Memuat...\" : `Rp ${Number((stats as any)?.monthlyProfit || 0).toLocaleString('id-ID')}`}\n              change=\"+8% bulan ini\"\n              icon=\"chart-line\"\n              color=\"accent\"\n              data-testid=\"stat-monthly-profit\"\n            />\n          </div>\n\n          {/* WhatsApp Status Card */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <StatCard\n              title=\"Status WhatsApp\"\n              value={statsLoading ? \"Memuat...\" : ((stats as any)?.whatsappConnected ? \"🟢 Terhubung\" : \"🔴 Terputus\")}\n              change={(stats as any)?.whatsappConnected ? \"Siap mengirim\" : \"Perlu koneksi\"}\n              icon=\"message-circle\"\n              color={(stats as any)?.whatsappConnected ? \"primary\" : \"destructive\"}\n              data-testid=\"stat-whatsapp-status\"\n            />\n          </div>\n\n          {/* SaaS Management Access Card */}\n          <div className=\"mb-8\">\n            <Card className=\"border-2 border-dashed border-primary/20 hover:border-primary/40 transition-all duration-200 bg-gradient-to-br from-blue-50 to-purple-50\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg\">\n                      <Building2 className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg\">🚀 SaaS Management Dashboard</CardTitle>\n                      <CardDescription>\n                        Comprehensive client & subscription management system\n                      </CardDescription>\n                    </div>\n                  </div>\n                  <Link href=\"/admin-saas\">\n                    <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n                      <BarChart3 className=\"h-4 w-4 mr-2\" />\n                      Open SaaS Dashboard\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n                  <div className=\"flex flex-col items-center p-3 bg-white/60 rounded-lg\">\n                    <Users className=\"h-5 w-5 text-blue-600 mb-2\" />\n                    <div className=\"text-sm font-medium\">Client Management</div>\n                    <div className=\"text-xs text-muted-foreground\">CRUD Operations</div>\n                  </div>\n                  <div className=\"flex flex-col items-center p-3 bg-white/60 rounded-lg\">\n                    <DollarSign className=\"h-5 w-5 text-green-600 mb-2\" />\n                    <div className=\"text-sm font-medium\">Revenue Analytics</div>\n                    <div className=\"text-xs text-muted-foreground\">MRR Tracking</div>\n                  </div>\n                  <div className=\"flex flex-col items-center p-3 bg-white/60 rounded-lg\">\n                    <Building2 className=\"h-5 w-5 text-purple-600 mb-2\" />\n                    <div className=\"text-sm font-medium\">Subscriptions</div>\n                    <div className=\"text-xs text-muted-foreground\">Plan Management</div>\n                  </div>\n                  <div className=\"flex flex-col items-center p-3 bg-white/60 rounded-lg\">\n                    <BarChart3 className=\"h-5 w-5 text-orange-600 mb-2\" />\n                    <div className=\"text-sm font-medium\">Billing System</div>\n                    <div className=\"text-xs text-muted-foreground\">Payment Tracking</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            <div className=\"lg:col-span-2\">\n              <RecentTransactions />\n            </div>\n            <QuickActions />\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <ServiceStatus />\n            <InventoryAlerts />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10205},"client/src/pages/financial.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, CreditCard, Users, TrendingUp } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Financial() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Auto redirect to new finance system after 3 seconds\n    const timer = setTimeout(() => {\n      setLocation('/finance-new');\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, [setLocation]);\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        <main className=\"flex-1 overflow-x-hidden overflow-y-auto bg-background p-6\">\n          <div className=\"container mx-auto\">\n            <div className=\"max-w-2xl mx-auto text-center space-y-8\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-4xl font-bold text-foreground\">Sistem Keuangan Terbaru</h1>\n                <p className=\"text-xl text-muted-foreground\">\n                  Selamat datang di sistem keuangan dan payroll yang telah diperbarui\n                </p>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-3\">\n                <Card className=\"p-6\">\n                  <CardHeader className=\"space-y-1 p-0\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto\">\n                      <CreditCard className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <CardTitle className=\"text-center\">Transaksi Keuangan</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0 pt-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Kelola pemasukan dan pengeluaran dengan sistem yang lebih canggih\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <CardHeader className=\"space-y-1 p-0\">\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto\">\n                      <Users className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <CardTitle className=\"text-center\">Manajemen Karyawan</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0 pt-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Kelola data karyawan dan sistem payroll terintegrasi\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <CardHeader className=\"space-y-1 p-0\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto\">\n                      <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <CardTitle className=\"text-center\">Laporan & Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0 pt-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Dashboard lengkap dengan analisis keuangan mendalam\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <p className=\"text-blue-800 text-sm\">\n                    <strong>Sistem telah diperbarui!</strong> Anda akan dialihkan ke sistem keuangan baru dalam beberapa detik...\n                  </p>\n                </div>\n\n                <Button \n                  onClick={() => setLocation('/finance-new')}\n                  size=\"lg\"\n                  className=\"w-full max-w-md\"\n                >\n                  Buka Sistem Keuangan Baru\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </div>\n\n              <div className=\"text-sm text-muted-foreground\">\n                <p>Sistem keuangan lama akan segera dihentikan. Silakan gunakan sistem baru untuk pengalaman yang lebih baik.</p>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":4588},"client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Search, Package, AlertTriangle, History, TrendingUp, DollarSign, Plus, Tag, Download, Upload, FileSpreadsheet } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { insertProductSchema, insertCategorySchema } from \"@shared/schema\";\nimport { useWebSocket } from \"@/lib/websocket\";\nimport { validateExcelFile, downloadTemplate, uploadExcelFile, type ImportResult } from \"@/lib/importExportUtils\";\nimport { formatDateShort } from '@shared/utils/timezone';\nimport ImportResultsDialog from \"@/components/ImportResultsDialog\";\n\nconst pricingSchema = z.object({\n  sellingPrice: z.string().min(1, \"Harga jual harus diisi\"),\n  marginPercent: z.string().optional(),\n});\n\ntype PricingFormData = z.infer<typeof pricingSchema>;\ntype ProductFormData = z.infer<typeof insertProductSchema>;\ntype CategoryFormData = z.infer<typeof insertCategorySchema>;\n\n// Add Category Form Component\nfunction AddCategoryForm({ onSuccess }: { onSuccess: () => void }) {\n  const { toast } = useToast();\n  const form = useForm<CategoryFormData>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const addCategoryMutation = useMutation({\n    mutationFn: async (data: CategoryFormData) => {\n      const response = await fetch('/api/categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to add category');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Berhasil\", description: \"Kategori berhasil ditambahkan!\" });\n      form.reset();\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Gagal menambah kategori\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: CategoryFormData) => {\n    console.log(\"🔥 Category handleSubmit called with data:\", data);\n    console.log(\"🔥 Category Form errors:\", form.formState.errors);\n    console.log(\"🔥 Category Form is valid:\", form.formState.isValid);\n    addCategoryMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nama Kategori *</FormLabel>\n              <FormControl>\n                <Input {...field} placeholder=\"Masukkan nama kategori\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Deskripsi</FormLabel>\n              <FormControl>\n                <Textarea {...field} value={field.value || \"\"} placeholder=\"Deskripsi kategori (opsional)\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"submit\" \n            disabled={addCategoryMutation.isPending}\n            data-testid=\"button-add-category-submit\"\n            onClick={(e) => {\n              console.log(\"🔥 Category Button clicked!\");\n              console.log(\"🔥 Category Form state:\", form.formState);\n              console.log(\"🔥 Category Form values:\", form.getValues());\n            }}\n          >\n            {addCategoryMutation.isPending ? \"Menambah...\" : \"Tambah Kategori\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\n// Add Product Form Component  \nfunction AddProductForm({ onSuccess }: { onSuccess: () => void }) {\n  const { toast } = useToast();\n  \n  // Get categories for dropdown - with auto-refresh\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n    refetchInterval: 10000, // Auto-refresh every 10 seconds\n  });\n  \n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      categoryId: \"\",\n      brand: \"\",\n      model: \"\",\n      unit: \"pcs\",\n      specifications: \"\",\n      sellingPrice: \"0\",\n      minStock: 5,\n      maxStock: 100,\n      // Add required stock fields\n      stock: 0,\n      totalStock: 0,\n      availableStock: 0,\n      reservedStock: 0,\n      // Add other potentially required fields\n      reorderPoint: 5,\n      reorderQuantity: 10,\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const addProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      const response = await fetch('/api/products', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to add product');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Berhasil\", description: \"Produk berhasil ditambahkan!\" });\n      form.reset();\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Gagal menambah produk\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    console.log(\"🔥 Product handleSubmit called with data:\", data);\n    console.log(\"🔥 Product Form errors:\", form.formState.errors);\n    console.log(\"🔥 Product Form is valid:\", form.formState.isValid);\n    addProductMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={(e) => {\n        console.log(\"🔥 Product Form submit event triggered!\");\n        console.log(\"🔥 Product Form valid before submit:\", form.formState.isValid);\n        console.log(\"🔥 Product Form errors before submit:\", form.formState.errors);\n        console.log(\"🔥 Current form data:\", form.getValues());\n        \n        form.handleSubmit(onSubmit)(e);\n      }} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nama Produk *</FormLabel>\n                <FormControl>\n                  <Input {...field} placeholder=\"Masukkan nama produk\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"categoryId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Kategori</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Pilih kategori\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {(categories as any[]).map((category: any) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Deskripsi</FormLabel>\n              <FormControl>\n                <Textarea {...field} value={field.value || \"\"} placeholder=\"Deskripsi produk\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"brand\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Brand</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} placeholder=\"Brand produk\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"model\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Model</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} placeholder=\"Model produk\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"unit\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Unit</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value || \"pcs\"}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"pcs\">Pcs</SelectItem>\n                    <SelectItem value=\"box\">Box</SelectItem>\n                    <SelectItem value=\"set\">Set</SelectItem>\n                    <SelectItem value=\"meter\">Meter</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"sellingPrice\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Harga Jual</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} type=\"number\" placeholder=\"0\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"minStock\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Min Stock</FormLabel>\n                <FormControl>\n                  <Input \n                    {...field} \n                    type=\"number\" \n                    placeholder=\"5\"\n                    value={field.value?.toString() || \"\"}\n                    onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 0)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"maxStock\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Max Stock</FormLabel>\n                <FormControl>\n                  <Input \n                    {...field} \n                    type=\"number\" \n                    placeholder=\"100\"\n                    value={field.value?.toString() || \"\"}\n                    onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"submit\" \n            disabled={addProductMutation.isPending}\n            data-testid=\"button-add-product-submit\"\n          >\n            {addProductMutation.isPending ? \"Menambah...\" : \"Tambah Produk\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nfunction PricingEditForm({ product, onSuccess }: { product: any; onSuccess: () => void }) {\n  const form = useForm<PricingFormData>({\n    resolver: zodResolver(pricingSchema),\n    defaultValues: {\n      sellingPrice: product.sellingPrice?.toString() || \"\",\n      marginPercent: \"\",\n    },\n  });\n\n  const updatePricingMutation = useMutation({\n    mutationFn: async (data: { sellingPrice: string }) => {\n      const response = await fetch(`/api/products/${product.id}/pricing`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ sellingPrice: data.sellingPrice }),\n      });\n      if (!response.ok) throw new Error('Failed to update pricing');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onSuccess();\n    },\n  });\n\n  const onSubmit = (data: PricingFormData) => {\n    updatePricingMutation.mutate({ sellingPrice: data.sellingPrice });\n  };\n\n  const hpp = Number(product.averageCost || 0);\n  const currentSellingPrice = form.watch(\"sellingPrice\");\n  const calculatedMargin = hpp > 0 && currentSellingPrice ? \n    ((Number(currentSellingPrice) - hpp) / hpp * 100).toFixed(1) : \"0\";\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n          <div>\n            <p className=\"text-sm font-medium\">HPP Saat Ini:</p>\n            <p className=\"text-lg font-bold text-blue-600\">Rp {hpp.toLocaleString('id-ID')}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium\">Margin Terhitung:</p>\n            <p className=\"text-lg font-bold text-green-600\">{calculatedMargin}%</p>\n          </div>\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"sellingPrice\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Harga Jual</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Masukkan harga jual\" \n                  type=\"number\"\n                  step=\"0.01\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"submit\" \n            disabled={updatePricingMutation.isPending}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {updatePricingMutation.isPending ? \"Menyimpan...\" : \"Update Harga\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default function Inventory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  \n  // Import/Export state\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [showImportResults, setShowImportResults] = useState(false);\n  const [importResults, setImportResults] = useState<ImportResult | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isDownloading, setIsDownloading] = useState(false);\n  \n  // Connect to WebSocket for real-time updates\n  const { isConnected } = useWebSocket();\n\n  // Import/Export handlers\n  const handleDownloadTemplate = async () => {\n    try {\n      setIsDownloading(true);\n      await downloadTemplate('/api/products/template', 'product-template.xlsx');\n      toast({ \n        title: \"Berhasil\", \n        description: \"Template downloaded successfully\" \n      });\n    } catch (error) {\n      console.error('Download template error:', error);\n      toast({ \n        title: \"Error\", \n        description: \"Failed to download template\", \n        variant: \"destructive\" \n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const validation = validateExcelFile(file);\n    if (!validation.isValid) {\n      toast({ \n        title: \"File Tidak Valid\", \n        description: validation.error, \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  const handleImportExcel = async () => {\n    if (!selectedFile) {\n      toast({ \n        title: \"No File Selected\", \n        description: \"Please select an Excel file to import\", \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    try {\n      setIsUploading(true);\n      const result = await uploadExcelFile(selectedFile, '/api/products/import');\n      setImportResults(result);\n      setShowImportResults(true);\n      setSelectedFile(null);\n      \n      // Clear the file input\n      const fileInput = document.getElementById('product-file-input') as HTMLInputElement;\n      if (fileInput) fileInput.value = '';\n\n      // Refresh products data\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      \n      if (result.successCount > 0) {\n        toast({ \n          title: \"Import Selesai\", \n          description: `Successfully imported ${result.successCount} products` \n        });\n      }\n    } catch (error) {\n      console.error('Import error:', error);\n      toast({ \n        title: \"Import Gagal\", \n        description: error instanceof Error ? error.message : \"Failed to import file\", \n        variant: \"destructive\" \n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Products with stock info - with auto-refresh every 5 seconds for real-time updates\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", searchQuery],\n    queryFn: async () => {\n      const url = searchQuery ? `/api/products?search=${encodeURIComponent(searchQuery)}` : '/api/products';\n      const response = await fetch(url, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    },\n    retry: false,\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n    refetchIntervalInBackground: true, // Continue refreshing in background\n  });\n\n  // Define interface for stock movements data\n  interface StockMovementsData {\n    movements?: any[];\n  }\n\n  // Stock movements for tracking - with auto-refresh\n  const { data: stockMovementsData } = useQuery<StockMovementsData>({\n    queryKey: [\"/api/reports/stock-movements\"],\n    retry: false,\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n  });\n  const stockMovements = stockMovementsData?.movements || [];\n\n  // Purchase orders untuk show incoming stock - with auto-refresh\n  const { data: purchaseOrders = [] } = useQuery({\n    queryKey: [\"/api/purchase-orders\"],\n    retry: false,\n    refetchInterval: 8000, // Auto-refresh every 8 seconds\n  });\n\n  const getStockStatus = (product: any) => {\n    const stock = product.stock || 0;\n    const minStock = product.minStock || 5;\n    \n    if (stock <= 0) {\n      return { text: \"Stok Habis\", variant: \"destructive\" as const, color: \"text-red-600\" };\n    }\n    if (stock <= minStock) {\n      return { text: \"Stok Rendah\", variant: \"secondary\" as const, color: \"text-orange-600\" };\n    }\n    return { text: \"Tersedia\", variant: \"default\" as const, color: \"text-green-600\" };\n  };\n\n  const filteredProducts = products.filter((product: any) =>\n    product.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.sku?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const lowStockProducts = products.filter((product: any) => {\n    const stock = product.stock || 0;\n    const minStock = product.minStock || 5;\n    return stock <= minStock;\n  });\n\n  const incomingStock = (purchaseOrders as any[]).filter((po: any) => \n    po.status === 'confirmed' || po.status === 'partial_received'\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Manajemen Inventaris\" \n          breadcrumb=\"Home / Inventory\"\n          action={\n            <div className=\"flex items-center space-x-2\">\n              {/* Import/Export Buttons */}\n              <Button \n                variant=\"outline\" \n                onClick={handleDownloadTemplate}\n                disabled={isDownloading}\n                data-testid=\"button-download-product-template\"\n              >\n                {isDownloading ? (\n                  <FileSpreadsheet className=\"w-4 h-4 mr-2 animate-pulse\" />\n                ) : (\n                  <Download className=\"w-4 h-4 mr-2\" />\n                )}\n                {isDownloading ? \"Downloading...\" : \"Download Template\"}\n              </Button>\n              \n              <div className=\"flex items-center space-x-2\">\n                <input\n                  id=\"product-file-input\"\n                  type=\"file\"\n                  accept=\".xlsx,.xls\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  data-testid=\"input-product-file\"\n                />\n                <Button \n                  variant=\"outline\"\n                  onClick={() => document.getElementById('product-file-input')?.click()}\n                  data-testid=\"button-select-product-file\"\n                >\n                  <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                  Select File\n                </Button>\n                \n                {selectedFile && (\n                  <Button \n                    onClick={handleImportExcel}\n                    disabled={isUploading}\n                    data-testid=\"button-import-products\"\n                  >\n                    {isUploading ? (\n                      <Upload className=\"w-4 h-4 mr-2 animate-pulse\" />\n                    ) : (\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                    )}\n                    {isUploading ? \"Importing...\" : \"Import Excel\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Selected File Indicator */}\n          {selectedFile && (\n            <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <FileSpreadsheet className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\" data-testid=\"selected-file-name\">\n                    Selected: {selectedFile.name}\n                  </span>\n                  <span className=\"text-xs text-blue-600 dark:text-blue-400\">\n                    ({(selectedFile.size / 1024).toFixed(1)} KB)\n                  </span>\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => {\n                    setSelectedFile(null);\n                    const fileInput = document.getElementById('product-file-input') as HTMLInputElement;\n                    if (fileInput) fileInput.value = '';\n                  }}\n                  data-testid=\"button-clear-selected-file\"\n                  className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200\"\n                >\n                  Remove\n                </Button>\n              </div>\n            </div>\n          )}\n          \n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-1\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\" className=\"text-xs md:text-sm\">Overview</TabsTrigger>\n              <TabsTrigger value=\"products\" data-testid=\"tab-products\" className=\"text-xs md:text-sm\">Products</TabsTrigger>\n              <TabsTrigger value=\"pricing\" data-testid=\"tab-pricing\" className=\"text-xs md:text-sm\">HPP & Pricing</TabsTrigger>\n              <TabsTrigger value=\"movements\" data-testid=\"tab-movements\" className=\"text-xs md:text-sm\">Stock Movements</TabsTrigger>\n              <TabsTrigger value=\"incoming\" data-testid=\"tab-incoming\" className=\"text-xs md:text-sm\">Incoming Stock</TabsTrigger>\n              <TabsTrigger value=\"damaged\" data-testid=\"tab-damaged\" className=\"text-xs md:text-sm\">Barang Rusak</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {/* Total Products */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                    <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{products.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Active products in inventory\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Low Stock Alerts */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Low Stock Alerts</CardTitle>\n                    <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">{lowStockProducts.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Products need restocking\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Incoming Stock */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Incoming Orders</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">{incomingStock.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      POs ready for receiving\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Low Stock Products */}\n              {lowStockProducts.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-red-600\">\n                      <AlertTriangle className=\"w-5 h-5 mr-2\" />\n                      Low Stock Products\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Product</TableHead>\n                          <TableHead className=\"text-right\">Current Stock</TableHead>\n                          <TableHead className=\"text-right\">Min Stock</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {lowStockProducts.map((product: any) => {\n                          const stockStatus = getStockStatus(product);\n                          return (\n                            <TableRow key={product.id}>\n                              <TableCell className=\"font-medium\">\n                                {product.name}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <span className={stockStatus.color}>\n                                  {product.stock || 0}\n                                </span>\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                {product.minStock || 5}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={stockStatus.variant}>\n                                  {stockStatus.text}\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Products Tab */}\n            <TabsContent value=\"products\" className=\"space-y-6\">\n              {/* Search Bar with Action Buttons */}\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex space-x-4\">\n                    <div className=\"flex-1 relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        placeholder=\"Search products by name or SKU...\"\n                        className=\"pl-10\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        data-testid=\"input-product-search\"\n                      />\n                    </div>\n                    \n                    {/* Action Buttons */}\n                    <div className=\"flex space-x-2\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" data-testid=\"button-add-category\">\n                            <Tag className=\"w-4 h-4 mr-2\" />\n                            Add Category\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[425px]\">\n                          <DialogHeader>\n                            <DialogTitle>Tambah Kategori Baru</DialogTitle>\n                          </DialogHeader>\n                          <AddCategoryForm onSuccess={() => {\n                            // Dialog akan tertutup otomatis karena form reset\n                          }} />\n                        </DialogContent>\n                      </Dialog>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button data-testid=\"button-add-product\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Product\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Tambah Produk Baru</DialogTitle>\n                          </DialogHeader>\n                          <AddProductForm onSuccess={() => {\n                            // Dialog akan tertutup otomatis karena form reset\n                          }} />\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Products Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Products Inventory ({filteredProducts.length})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {productsLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded animate-pulse\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Product Name</TableHead>\n                          <TableHead>SKU</TableHead>\n                          <TableHead className=\"text-right\">Current Stock</TableHead>\n                          <TableHead className=\"text-right\">Min Stock</TableHead>\n                          <TableHead className=\"text-right\">HPP (Harga Pokok)</TableHead>\n                          <TableHead className=\"text-right\">Harga Jual</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredProducts.map((product: any) => {\n                          const stockStatus = getStockStatus(product);\n                          \n                          return (\n                            <TableRow key={product.id}>\n                              <TableCell>\n                                <div>\n                                  <p className=\"font-medium\" data-testid={`product-name-${product.id}`}>\n                                    {product.name}\n                                  </p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {product.description}\n                                  </p>\n                                </div>\n                              </TableCell>\n                              <TableCell data-testid={`product-sku-${product.id}`}>\n                                {product.sku || \"-\"}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <span \n                                  className={`font-bold text-lg ${stockStatus.color}`}\n                                  data-testid={`product-stock-${product.id}`}\n                                >\n                                  {product.stock || 0}\n                                </span>\n                              </TableCell>\n                              <TableCell className=\"text-right text-muted-foreground\">\n                                {product.minStock || 5}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <div className=\"space-y-1\">\n                                  <div className=\"font-medium\">Rp {Number(product.averageCost || 0).toLocaleString('id-ID')}</div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    Last: Rp {Number(product.lastPurchasePrice || 0).toLocaleString('id-ID')}\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                Rp {Number(product.sellingPrice || 0).toLocaleString('id-ID')}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={stockStatus.variant}>\n                                  {stockStatus.text}\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* HPP & Pricing Management Tab */}\n            <TabsContent value=\"pricing\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <DollarSign className=\"w-5 h-5 mr-2\" />\n                    HPP & Pricing Management\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Manage Harga Pokok Penjualan (Cost of Goods Sold) and selling prices\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Product</TableHead>\n                        <TableHead className=\"text-right\">Stock</TableHead>\n                        <TableHead className=\"text-right\">Last Purchase Price</TableHead>\n                        <TableHead className=\"text-right\">HPP (Harga Pokok)</TableHead>\n                        <TableHead className=\"text-right\">Harga Jual</TableHead>\n                        <TableHead className=\"text-right\">Margin %</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredProducts.map((product: any) => {\n                        const hpp = Number(product.averageCost || 0);\n                        const sellingPrice = Number(product.sellingPrice || 0);\n                        const marginPercent = hpp > 0 ? ((sellingPrice - hpp) / hpp * 100).toFixed(1) : 0;\n                        \n                        return (\n                          <TableRow key={product.id}>\n                            <TableCell>\n                              <div>\n                                <p className=\"font-medium\">{product.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">{product.sku}</p>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Badge variant=\"outline\">{product.stock || 0}</Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"text-sm\">\n                                Rp {Number(product.lastPurchasePrice || 0).toLocaleString('id-ID')}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"font-medium text-blue-600\">\n                                Rp {hpp.toLocaleString('id-ID')}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"font-medium text-green-600\">\n                                Rp {sellingPrice.toLocaleString('id-ID')}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Badge variant={Number(marginPercent) > 20 ? \"default\" : \"secondary\"}>\n                                {marginPercent}%\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    data-testid={`edit-pricing-${product.id}`}\n                                  >\n                                    Edit\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"sm:max-w-[425px]\">\n                                  <DialogHeader>\n                                    <DialogTitle>Edit Pricing - {product.name}</DialogTitle>\n                                  </DialogHeader>\n                                  <PricingEditForm \n                                    product={product} \n                                    onSuccess={() => {\n                                      toast({ title: \"Pricing berhasil diupdate!\" });\n                                    }} \n                                  />\n                                </DialogContent>\n                              </Dialog>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n              \n              {/* HPP Calculation Info */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Info Perhitungan HPP</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">HPP (Harga Pokok Penjualan)</h4>\n                      <p className=\"text-blue-600 dark:text-blue-400\">\n                        Dihitung dari rata-rata tertimbang harga pembelian dari waktu ke waktu\n                      </p>\n                    </div>\n                    <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-green-700 dark:text-green-300\">Harga Jual</h4>\n                      <p className=\"text-green-600 dark:text-green-400\">\n                        Ditentukan oleh admin berdasarkan riset pasar dan target margin\n                      </p>\n                    </div>\n                    <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-amber-700 dark:text-amber-300\">Margin %</h4>\n                      <p className=\"text-amber-600 dark:text-amber-400\">\n                        Rumus: (Harga Jual - HPP) / HPP × 100%\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Stock Movements Tab */}\n            <TabsContent value=\"movements\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <History className=\"w-5 h-5 mr-2\" />\n                    Riwayat Pergerakan Stok\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Tanggal</TableHead>\n                        <TableHead>Produk</TableHead>\n                        <TableHead>Jenis</TableHead>\n                        <TableHead className=\"text-right\">Jumlah</TableHead>\n                        <TableHead>Referensi</TableHead>\n                        <TableHead>Catatan</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {stockMovements.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                            No stock movements recorded yet\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        stockMovements.slice(0, 20).map((movement: any) => (\n                          <TableRow key={movement.id}>\n                            <TableCell className=\"text-sm\">\n                              {formatDateShort(movement.createdAt)}\n                            </TableCell>\n                            <TableCell className=\"font-medium\">\n                              {movement.productName || movement.productId}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={movement.movementType === 'in' ? 'default' : 'secondary'}>\n                                {movement.movementType === 'in' ? 'IN' : 'OUT'}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right font-medium\">\n                              {movement.movementType === 'in' ? '+' : '-'}{movement.quantity}\n                            </TableCell>\n                            <TableCell className=\"text-sm\">\n                              {movement.referenceType === 'purchase' ? 'Purchase Order' : movement.referenceType}\n                            </TableCell>\n                            <TableCell className=\"text-sm text-muted-foreground\">\n                              {movement.notes}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Incoming Stock Tab */}\n            <TabsContent value=\"incoming\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2 text-blue-600\" />\n                    Incoming Stock from Purchase Orders\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>PO Number</TableHead>\n                        <TableHead>Supplier</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead className=\"text-right\">Items</TableHead>\n                        <TableHead className=\"text-right\">Total Value</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {incomingStock.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                            No incoming stock from purchase orders\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        incomingStock.map((po: any) => (\n                          <TableRow key={po.id}>\n                            <TableCell className=\"font-medium\">\n                              {po.poNumber}\n                            </TableCell>\n                            <TableCell>\n                              {po.supplierName || po.supplierId}\n                            </TableCell>\n                            <TableCell className=\"text-sm\">\n                              {formatDateShort(po.orderDate)}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={\n                                po.status === 'confirmed' ? 'default' : \n                                po.status === 'partial_received' ? 'secondary' : 'outline'\n                              }>\n                                {po.status === 'confirmed' ? 'Ready to Receive' :\n                                 po.status === 'partial_received' ? 'Partially Received' : po.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <div className=\"space-y-1\">\n                                <div className=\"font-medium\">{po.itemCount || 0} items</div>\n                                {po.outstandingCount > 0 && (\n                                  <div className=\"text-xs text-orange-600\">\n                                    {po.outstandingCount} outstanding\n                                  </div>\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              Rp {Number(po.totalAmount || 0).toLocaleString('id-ID')}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Damaged Goods Tab */}\n            <TabsContent value=\"damaged\" className=\"space-y-6\">\n              <DamagedGoodsView />\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n      \n      {/* Import Results Dialog */}\n      <ImportResultsDialog\n        open={showImportResults}\n        onOpenChange={setShowImportResults}\n        result={importResults}\n        title=\"Product Import Results\"\n      />\n    </div>\n  );\n}\n\n// Damaged Goods Component\nfunction DamagedGoodsView() {\n  const { toast } = useToast();\n  \n  const { data: damagedGoodsData, isLoading: isDamagedLoading, error: damagedError } = useQuery({\n    queryKey: [\"/api/reports/damaged-goods\"],\n    queryFn: async () => {\n      const response = await fetch('/api/reports/damaged-goods', {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch damaged goods: ${response.status}`);\n      }\n      return response.json();\n    },\n    retry: 1,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (isDamagedLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n            <span>Memuat data barang rusak...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (damagedError) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            <AlertTriangle className=\"h-8 w-8 mx-auto mb-2\" />\n            <p>Gagal memuat data barang rusak</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const damagedGoods = (damagedGoodsData as any)?.damagedGoods || [];\n  const totalDamagedValue = (damagedGoodsData as any)?.totalDamagedValue || 0;\n  const totalItems = (damagedGoodsData as any)?.totalItems || 0;\n\n  return (\n    <>\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Barang Rusak</CardTitle>\n            <Package className=\"h-4 w-4 text-destructive\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalItems}</div>\n            <p className=\"text-xs text-muted-foreground\">Item yang rusak</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Nilai Kerugian</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-destructive\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\">\n              Rp {Number(totalDamagedValue).toLocaleString('id-ID')}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Nilai total barang rusak</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rata-rata Nilai per Item</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              Rp {Number(totalItems > 0 ? totalDamagedValue / totalItems : 0).toLocaleString('id-ID')}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Kerugian per item</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Damaged Goods Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n            Daftar Barang Rusak dari Warranty Return\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Barang yang dikembalikan customer dalam kondisi rusak melalui warranty claim\n          </p>\n        </CardHeader>\n        <CardContent>\n          {damagedGoods.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">Tidak ada barang rusak</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Barang rusak dari warranty return akan tampil di sini\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Produk</TableHead>\n                    <TableHead>SKU</TableHead>\n                    <TableHead className=\"text-right\">Qty</TableHead>\n                    <TableHead className=\"text-right\">Harga Satuan</TableHead>\n                    <TableHead className=\"text-right\">Total Nilai</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Transaksi Asli</TableHead>\n                    <TableHead>Tanggal Rusak</TableHead>\n                    <TableHead>Catatan</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {damagedGoods.map((item: any) => (\n                    <TableRow key={item.id}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\" data-testid={`damaged-product-${item.id}`}>\n                            {item.productName || 'Produk Tidak Diketahui'}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {item.productSku || '-'}\n                      </TableCell>\n                      <TableCell className=\"text-right font-medium\">\n                        {item.quantity}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        Rp {Number(item.unitPrice || 0).toLocaleString('id-ID')}\n                      </TableCell>\n                      <TableCell className=\"text-right font-medium text-destructive\">\n                        Rp {Number(item.totalValue || 0).toLocaleString('id-ID')}\n                      </TableCell>\n                      <TableCell>\n                        {item.customerName || 'Customer Tidak Diketahui'}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {item.originalTransactionNumber}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {formatDateShort(item.damagedDate)}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <p className=\"text-sm text-muted-foreground truncate\">\n                          {item.notes || '-'}\n                        </p>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n}","size_bytes":57676},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Laptop, Wrench, BarChart3, Package } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Landing() {\n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-landing'], // Unique key\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n  \n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center\">\n              <Laptop className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">{(storeConfig as any)?.name || 'LaptopPOS'}</h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Sistem POS Lengkap untuk Penjualan & Servis Laptop\n          </p>\n          <Button \n            onClick={handleLogin} \n            size=\"lg\" \n            className=\"px-8 py-3 text-lg\"\n            data-testid=\"button-login\"\n          >\n            Masuk untuk Melanjutkan\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <CardTitle className=\"text-lg\">Manajemen Penjualan</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Sistem POS lengkap dengan pelacakan transaksi dan pelaporan\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Wrench className=\"w-6 h-6 text-accent\" />\n              </div>\n              <CardTitle className=\"text-lg\">Tiket Servis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Lacak perbaikan laptop dan permintaan servis secara efisien\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-6 h-6 text-secondary\" />\n              </div>\n              <CardTitle className=\"text-lg\">Kontrol Inventori</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Kelola tingkat stok dan dapatkan peringatan stok rendah\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-destructive\" />\n              </div>\n              <CardTitle className=\"text-lg\">Laporan Keuangan</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Lacak keuntungan, pengeluaran dan buat laporan detail\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className=\"max-w-4xl mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Fitur Utama</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Untuk Administrator</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Kontrol akses berbasis peran</li>\n                  <li>• Konfigurasi sistem lengkap</li>\n                  <li>• Manajemen pengguna</li>\n                  <li>• Pengawasan keuangan</li>\n                </ul>\n              </div>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Untuk Staf</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Antarmuka POS yang mudah digunakan</li>\n                  <li>• Manajemen tiket servis</li>\n                  <li>• Database pelanggan</li>\n                  <li>• Pembaruan inventori real-time</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5521},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Halaman Tidak Ditemukan</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Apakah Anda lupa menambahkan halaman ke router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":722},"client/src/pages/pos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport TransactionModal from \"@/components/pos/transaction-modal\";\nimport ReceiptModal from \"@/components/pos/receipt-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Eye } from \"lucide-react\";\n// Format currency helper function\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('id-ID', {\n    style: 'currency',\n    currency: 'IDR',\n    minimumFractionDigits: 0,\n  }).format(amount);\n};\n\nexport default function POS() {\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [showReceiptModal, setShowReceiptModal] = useState(false);\n  const [currentTransaction, setCurrentTransaction] = useState(null);\n  const queryClient = useQueryClient();\n\n  // Fetch recent transactions (limit to 10)\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/transactions\", { limit: 10 }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/transactions?limit=10\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch transactions\");\n      return response.json();\n    },\n  });\n\n  // Fetch dashboard stats for today's data\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  }) as { data: { todaySales?: string; todayRevenue?: string; activeServices?: number } | undefined };\n\n  const handleNewTransaction = () => {\n    setShowTransactionModal(true);\n  };\n\n  const handleTransactionComplete = async (transaction: any) => {\n    console.log('Transaction completed:', transaction);\n    \n    // Close transaction modal first\n    setShowTransactionModal(false);\n    \n    try {\n      // Fetch the complete transaction data with all related information\n      const response = await fetch(`/api/transactions/${transaction.id}`, {\n        credentials: \"include\",\n      });\n      \n      if (response.ok) {\n        const completeTransaction = await response.json();\n        console.log('Complete transaction data:', completeTransaction);\n        setCurrentTransaction(completeTransaction);\n      } else {\n        // Fallback to the original data if fetch fails\n        console.log('Using original transaction data as fallback');\n        setCurrentTransaction(transaction);\n      }\n    } catch (error) {\n      console.error('Error fetching complete transaction:', error);\n      // Fallback to the original data\n      setCurrentTransaction(transaction);\n    }\n    \n    // Show receipt modal after setting transaction data\n    setShowReceiptModal(true);\n    \n    // Refresh data after transaction\n    queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n  };\n\n  const handleViewTransaction = (transaction: any) => {\n    setCurrentTransaction(transaction);\n    setShowReceiptModal(true);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Kasir\" \n          breadcrumb=\"Beranda / Kasir\"\n          action={\n            <Button \n              onClick={handleNewTransaction}\n              data-testid=\"button-new-transaction\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Transaksi Baru\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle>Transaksi Terbaru</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {transactionsLoading ? (\n                  <p className=\"text-muted-foreground\">Loading transactions...</p>\n                ) : transactions.length === 0 ? (\n                  <p className=\"text-muted-foreground\">\n                    No transactions yet. Click \"New Transaction\" to start processing sales.\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {transactions.map((transaction: any) => (\n                      <div\n                        key={transaction.id}\n                        className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50\"\n                        data-testid={`transaction-${transaction.id}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium\">{transaction.transactionNumber}</span>\n                            <Badge variant={transaction.type === 'sale' ? 'default' : 'secondary'}>\n                              {transaction.type}\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {transaction.customer?.name || 'Walk-in Customer'} • {' '}\n                            {new Date(transaction.createdAt).toLocaleString('id-ID')}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">{formatCurrency(parseFloat(transaction.total))}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {transaction.paymentMethod || 'cash'}\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleViewTransaction(transaction)}\n                            data-testid={`button-view-transaction-${transaction.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Product Sales</span>\n                    <span className=\"font-medium\">\n                      {stats?.todaySales ? formatCurrency(parseFloat(stats.todaySales)) : 'Rp 0'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Total Revenue</span>\n                    <span className=\"font-medium\">\n                      {stats?.todayRevenue ? formatCurrency(parseFloat(stats.todayRevenue)) : 'Rp 0'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Transactions</span>\n                    <span className=\"font-medium\">{transactions.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Active Services</span>\n                    <span className=\"font-medium\">{stats?.activeServices || 0}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n\n      <TransactionModal\n        open={showTransactionModal}\n        onClose={() => setShowTransactionModal(false)}\n        onComplete={handleTransactionComplete}\n      />\n\n      <ReceiptModal\n        open={showReceiptModal}\n        onClose={() => setShowReceiptModal(false)}\n        transaction={currentTransaction}\n      />\n    </div>\n  );\n}\n","size_bytes":8419},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar, DollarSign, TrendingUp, TrendingDown, BarChart3, Package, FileText, Download } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRef } from \"react\";\n\nexport default function Reports() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"this-month\");\n  const [startDate, setStartDate] = useState(\n    new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0]\n  );\n  const [endDate, setEndDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  \n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-reports'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  // API queries untuk data reports\n  const { data: salesReport, isLoading: salesLoading } = useQuery({\n    queryKey: [`/api/reports/sales/${startDate}/${endDate}`],\n    retry: false,\n  });\n\n  const { data: serviceReport, isLoading: serviceLoading } = useQuery({\n    queryKey: [`/api/reports/services/${startDate}/${endDate}`],\n    retry: false,\n  });\n\n  const { data: financialReport, isLoading: financialLoading } = useQuery({\n    queryKey: [`/api/reports/financial/${startDate}/${endDate}`],\n    retry: false,\n  });\n\n  const { data: inventoryReport, isLoading: inventoryLoading } = useQuery({\n    queryKey: [\"/api/reports/inventory\"],\n    retry: false,\n  });\n\n  const { toast } = useToast();\n\n  // PDF Export mutation - client-side generation\n  const exportPdfMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        // Import jsPDF dynamically to avoid SSR issues\n        const { jsPDF } = await import('jspdf');\n        \n        const doc = new jsPDF('portrait', 'mm', 'a4');\n        \n        // Add header\n        doc.setFontSize(20);\n        doc.setTextColor(79, 70, 229);\n        doc.text(`${(storeConfig as any)?.name || 'LaptopPOS'} - Laporan Bisnis`, 20, 30);\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Periode: ${new Date(startDate).toLocaleDateString('id-ID')} - ${new Date(endDate).toLocaleDateString('id-ID')}`, 20, 40);\n        \n        let yPos = 60;\n        \n        // Ringkasan Keuangan\n        doc.setFontSize(16);\n        doc.setTextColor(79, 70, 229);\n        doc.text('Ringkasan Keuangan', 20, yPos);\n        yPos += 15;\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Total Penjualan: Rp ${Number(salesReport?.totalSales || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Omset Servis: Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Total Pemasukan: Rp ${Number(financialReport?.totalIncome || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Total Pengeluaran: Rp ${Number(financialReport?.totalExpense || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Laba Bersih: Rp ${Number(financialReport?.profit || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 20;\n        \n        // Laporan Servis\n        doc.setFontSize(16);\n        doc.setTextColor(79, 70, 229);\n        doc.text('Laporan Servis', 20, yPos);\n        yPos += 15;\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Total Servis: ${serviceReport?.totalServices || 0} tiket`, 20, yPos);\n        yPos += 8;\n        doc.text(`Revenue Labor: Rp ${Number(serviceReport?.revenueBreakdown?.laborRevenue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Revenue Parts: Rp ${Number(serviceReport?.revenueBreakdown?.partsRevenue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Modal Parts: Rp ${Number(serviceReport?.totalCost || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Laba Servis: Rp ${Number(serviceReport?.totalProfit || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 20;\n        \n        // Laporan Inventory\n        doc.setFontSize(16);\n        doc.setTextColor(79, 70, 229);\n        doc.text('Laporan Inventory', 20, yPos);\n        yPos += 15;\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Total Produk: ${inventoryReport?.totalProducts || 0}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Stok Rendah: ${inventoryReport?.lowStockCount || 0}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Total Stok: ${inventoryReport?.totalStockQuantity || 0}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Nilai Aset: Rp ${Number(inventoryReport?.totalAssetValue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        \n        // Footer\n        doc.setFontSize(10);\n        doc.setTextColor(107, 114, 128);\n        doc.text(`Generated on ${new Date().toLocaleString('id-ID')}`, 20, 280);\n        doc.text(`© 2025 ${(storeConfig as any)?.name || 'LaptopPOS'} - Sistem Manajemen Bisnis Laptop`, 20, 290);\n        \n        // Save PDF\n        doc.save(`laporan-bisnis-${startDate}-${endDate}.pdf`);\n        \n        return doc;\n      } catch (error) {\n        console.error('PDF Export error:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export PDF Berhasil\",\n        description: \"Laporan PDF berhasil didownload\",\n      });\n    },\n    onError: (error) => {\n      console.error('Export PDF error:', error);\n      toast({\n        title: \"Export PDF Gagal\",\n        description: \"Terjadi kesalahan saat mengexport laporan PDF\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // XLSX Export mutation\n  const exportXlsxMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        const response = await fetch('/api/reports/export-xlsx', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            startDate,\n            endDate\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // Handle XLSX download\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `laporan-bisnis-${startDate}-${endDate}.xlsx`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n\n        return blob;\n      } catch (error) {\n        console.error('Export XLSX error:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export XLSX Berhasil\",\n        description: \"Laporan Excel berhasil didownload\",\n      });\n    },\n    onError: (error) => {\n      console.error('Export XLSX error:', error);\n      toast({\n        title: \"Export XLSX Gagal\",\n        description: \"Terjadi kesalahan saat mengexport laporan Excel\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExportPDF = () => {\n    // Server will fetch fresh data directly from database, no need to check cached data\n    exportPdfMutation.mutate();\n  };\n\n  const handleExportXLSX = () => {\n    // Server will fetch fresh data directly from database, no need to check cached data\n    exportXlsxMutation.mutate();\n  };\n\n  const handlePeriodChange = (period: string) => {\n    setSelectedPeriod(period);\n    const today = new Date();\n    \n    switch (period) {\n      case \"today\":\n        setStartDate(today.toISOString().split('T')[0]);\n        setEndDate(today.toISOString().split('T')[0]);\n        break;\n      case \"this-week\":\n        const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));\n        setStartDate(weekStart.toISOString().split('T')[0]);\n        setEndDate(new Date().toISOString().split('T')[0]);\n        break;\n      case \"this-month\":\n        setStartDate(new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0]);\n        setEndDate(new Date().toISOString().split('T')[0]);\n        break;\n      case \"last-month\":\n        const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        const lastMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);\n        setStartDate(lastMonth.toISOString().split('T')[0]);\n        setEndDate(lastMonthEnd.toISOString().split('T')[0]);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Laporan Bisnis\" breadcrumb=\"Beranda / Laporan\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          \n          {/* Filter Controls */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Filter Periode\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Select value={selectedPeriod} onValueChange={handlePeriodChange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Pilih periode\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Hari Ini</SelectItem>\n                    <SelectItem value=\"this-week\">Minggu Ini</SelectItem>\n                    <SelectItem value=\"this-month\">Bulan Ini</SelectItem>\n                    <SelectItem value=\"last-month\">Bulan Lalu</SelectItem>\n                    <SelectItem value=\"custom\">Custom</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  disabled={selectedPeriod !== \"custom\"}\n                />\n                \n                <Input\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  disabled={selectedPeriod !== \"custom\"}\n                />\n                \n                <div className=\"flex gap-2\">\n                  <Button \n                    className=\"flex items-center gap-2\"\n                    onClick={handleExportPDF}\n                    disabled={exportPdfMutation.isPending}\n                    data-testid=\"button-export-pdf\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    {exportPdfMutation.isPending ? \"Mengexport...\" : \"Export PDF\"}\n                  </Button>\n                  \n                  <Button \n                    variant=\"outline\"\n                    className=\"flex items-center gap-2\"\n                    onClick={handleExportXLSX}\n                    disabled={exportXlsxMutation.isPending}\n                    data-testid=\"button-export-xlsx\"\n                  >\n                    <FileText className=\"w-4 h-4\" />\n                    {exportXlsxMutation.isPending ? \"Mengexport...\" : \"Export Excel\"}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"sales\">Penjualan</TabsTrigger>\n              <TabsTrigger value=\"services\">Servis</TabsTrigger>\n              <TabsTrigger value=\"financial\">Keuangan</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Total Penjualan</p>\n                        <p className=\"text-2xl font-bold\">\n                          {salesLoading ? \"Loading...\" : `Rp ${Number(salesReport?.totalSales || 0).toLocaleString('id-ID')}`}\n                        </p>\n                      </div>\n                      <DollarSign className=\"w-8 h-8 text-green-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Omset Servis</p>\n                        <p className=\"text-2xl font-bold\">\n                          {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}`}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {serviceReport?.totalServices || 0} servis\n                        </p>\n                      </div>\n                      <BarChart3 className=\"w-8 h-8 text-blue-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Profit</p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {financialLoading ? \"Loading...\" : `Rp ${Number(financialReport?.profit || 0).toLocaleString('id-ID')}`}\n                        </p>\n                      </div>\n                      <TrendingUp className=\"w-8 h-8 text-green-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Nilai Aset Inventory</p>\n                        <p className=\"text-2xl font-bold text-orange-600\">\n                          {inventoryLoading ? \"Loading...\" : `Rp ${Number(inventoryReport?.totalAssetValue || 0).toLocaleString('id-ID')}`}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {inventoryReport?.totalStockQuantity || 0} stok • {inventoryReport?.lowStockCount || 0} rendah\n                        </p>\n                      </div>\n                      <Package className=\"w-8 h-8 text-orange-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Sales Tab */}\n            <TabsContent value=\"sales\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Laporan Penjualan</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {salesLoading ? (\n                    <div className=\"text-center py-8\">Loading...</div>\n                  ) : !salesReport?.transactions || salesReport.transactions.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Tidak ada data penjualan untuk periode ini\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>No. Transaksi</TableHead>\n                          <TableHead>Tanggal</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Total</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {salesReport.transactions.map((transaction: any) => (\n                          <TableRow key={transaction.id}>\n                            <TableCell>{transaction.transactionNumber}</TableCell>\n                            <TableCell>{new Date(transaction.createdAt).toLocaleDateString('id-ID')}</TableCell>\n                            <TableCell>{transaction.customer?.name || \"Walk-in\"}</TableCell>\n                            <TableCell>Rp {Number(transaction.total).toLocaleString('id-ID')}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"secondary\">Completed</Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Services Tab */}\n            <TabsContent value=\"services\" className=\"space-y-6\">\n              {/* Service Financial Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-green-600\">Total Omset</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}`}\n                    </p>\n                    <div className=\"text-sm text-muted-foreground mt-2\">\n                      <div>Labor: Rp {Number(serviceReport?.revenueBreakdown?.laborRevenue || 0).toLocaleString('id-ID')}</div>\n                      <div>Parts: Rp {Number(serviceReport?.revenueBreakdown?.partsRevenue || 0).toLocaleString('id-ID')}</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-red-600\">Total Modal Parts</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalCost || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-blue-600\">Laba Bersih</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalProfit || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Detail Tiket Servis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {serviceLoading ? (\n                    <div className=\"text-center py-8\">Loading...</div>\n                  ) : !serviceReport?.tickets || serviceReport.tickets.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Tidak ada data servis untuk periode ini\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>No. Tiket</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Device</TableHead>\n                          <TableHead>Problem</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Biaya</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {serviceReport.tickets.map((ticket: any) => (\n                          <TableRow key={ticket.id}>\n                            <TableCell>{ticket.ticketNumber}</TableCell>\n                            <TableCell>{ticket.customer?.name}</TableCell>\n                            <TableCell>{ticket.deviceType} {ticket.deviceBrand}</TableCell>\n                            <TableCell>{ticket.problem}</TableCell>\n                            <TableCell>\n                              <Badge variant={ticket.status === 'completed' ? 'default' : 'secondary'}>\n                                {ticket.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex flex-col\">\n                                <div className=\"text-sm\">\n                                  {ticket.laborCost ? `Labor: Rp ${Number(ticket.laborCost).toLocaleString('id-ID')}` : 'Labor: -'}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {ticket.partsCost ? `Parts: Rp ${Number(ticket.partsCost).toLocaleString('id-ID')}` : 'Parts: -'}\n                                </div>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Financial Tab */}\n            <TabsContent value=\"financial\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-green-600\">Pemasukan</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {financialLoading ? \"Loading...\" : `Rp ${Number(financialReport?.totalIncome || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-red-600\">Pengeluaran</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {financialLoading ? \"Loading...\" : `Rp ${Number(financialReport?.totalExpense || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Catatan:</strong> Data keuangan mencakup penjualan produk, biaya modal parts service, \n                  penjualan parts service, dan ongkos kerja. Sistem otomatis mencatat 3 transaksi saat service diselesaikan.\n                </p>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Detail Transaksi Keuangan</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {financialLoading ? (\n                    <div className=\"text-center py-8\">Loading...</div>\n                  ) : !financialReport?.records || financialReport.records.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Tidak ada data keuangan untuk periode ini\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Tanggal</TableHead>\n                          <TableHead>Tipe</TableHead>\n                          <TableHead>Kategori</TableHead>\n                          <TableHead>Deskripsi</TableHead>\n                          <TableHead>Jumlah</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {financialReport.records.map((record: any) => (\n                          <TableRow key={record.id}>\n                            <TableCell>{new Date(record.createdAt).toLocaleDateString('id-ID')}</TableCell>\n                            <TableCell>\n                              <Badge variant={record.type === 'income' ? 'default' : 'destructive'}>\n                                {record.type === 'income' ? 'Pemasukan' : 'Pengeluaran'}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{record.category}</TableCell>\n                            <TableCell>{record.description}</TableCell>\n                            <TableCell className={record.type === 'income' ? 'text-green-600' : 'text-red-600'}>\n                              {record.type === 'income' ? '+' : '-'}Rp {Number(record.amount).toLocaleString('id-ID')}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26789},"client/src/pages/roles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertRoleSchema } from \"@shared/schema\";\nimport { Trash2, Edit, Plus, UserCheck, Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Role } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nconst roleFormSchema = insertRoleSchema.extend({\n  permissions: z.array(z.string()).optional(),\n});\n\n// Permission definitions for all system features\nconst availablePermissions = [\n  // Core system access\n  \"dashboard:view\",              // View dashboard statistics and metrics\n  \n  // Point of Sale system\n  \"pos:use\",                    // Access POS system for sales transactions\n  \"pos:print\",                  // Print thermal receipts for purchases\n  \n  // Service ticket management  \n  \"service:create\",             // Create new service tickets\n  \"service:manage\",             // View, edit, update service tickets\n  \"service:print\",              // Print thermal service receipts\n  \"service:whatsapp\",           // Send WhatsApp notifications to customers\n  \n  // Inventory & Stock management\n  \"inventory:view\",             // View product inventory levels\n  \"inventory:manage\",           // Add, edit, delete products\n  \"inventory:adjust\",           // Adjust stock quantities manually\n  \"stock:movements\",            // View stock movement history\n  \n  // Financial management\n  \"financial:view\",             // View financial data and transactions\n  \"financial:manage\",           // Manage financial records and calculations\n  \"financial:reports\",          // Generate financial reports and analytics\n  \n  // Customer relationship\n  \"customers:view\",             // View customer information\n  \"customers:manage\",           // Add, edit, delete customers\n  \n  // Supplier management\n  \"suppliers:view\",             // View supplier information\n  \"suppliers:manage\",           // Add, edit, delete suppliers\n  \n  // Reporting system\n  \"reports:view\",               // View business reports\n  \"reports:export\",             // Export reports to Excel/PDF\n  \n  // System configuration\n  \"settings:view\",              // View system settings\n  \"settings:manage\",            // Change system configuration\n  \"settings:whatsapp\",          // Configure WhatsApp integration\n  \n  // User & Role management\n  \"users:view\",                 // View user accounts\n  \"users:manage\",               // Create, edit, delete users\n  \"roles:view\",                 // View roles and permissions\n  \"roles:manage\",               // Create, edit, delete roles\n  \n  // Transaction management\n  \"transactions:view\",          // View transaction history\n  \"transactions:create\",        // Process new transactions\n  \n  // Product catalog\n  \"products:view\",              // View product catalog\n  \"products:manage\",            // Add, edit, delete products\n  \"categories:manage\"           // Manage product categories\n];\n\n// Helper functions for permission display\nconst getPermissionDescription = (permission: string): string => {\n  const descriptions: { [key: string]: string } = {\n    \"dashboard:view\": \"Lihat statistik dan metrik dashboard\",\n    \"pos:use\": \"Akses sistem POS untuk transaksi penjualan\", \n    \"pos:print\": \"Cetak nota thermal untuk pembelian\",\n    \"service:create\": \"Buat tiket service baru\",\n    \"service:manage\": \"Kelola dan update tiket service\",\n    \"service:print\": \"Cetak nota service thermal\",\n    \"service:whatsapp\": \"Kirim notifikasi WhatsApp ke pelanggan\",\n    \"inventory:view\": \"Lihat level stok inventory\",\n    \"inventory:manage\": \"Tambah, edit, hapus produk\",\n    \"inventory:adjust\": \"Sesuaikan jumlah stok manual\",\n    \"stock:movements\": \"Lihat riwayat pergerakan stok\",\n    \"financial:view\": \"Lihat data keuangan dan transaksi\",\n    \"financial:manage\": \"Kelola catatan keuangan\",\n    \"financial:reports\": \"Generate laporan keuangan\",\n    \"customers:view\": \"Lihat informasi pelanggan\",\n    \"customers:manage\": \"Kelola data pelanggan\",\n    \"suppliers:view\": \"Lihat informasi supplier\",\n    \"suppliers:manage\": \"Kelola data supplier\",\n    \"reports:view\": \"Lihat laporan bisnis\",\n    \"reports:export\": \"Export laporan ke Excel/PDF\",\n    \"settings:view\": \"Lihat pengaturan sistem\",\n    \"settings:manage\": \"Ubah konfigurasi sistem\",\n    \"settings:whatsapp\": \"Konfigurasi integrasi WhatsApp\",\n    \"users:view\": \"Lihat akun pengguna\",\n    \"users:manage\": \"Kelola akun pengguna\",\n    \"roles:view\": \"Lihat peran dan izin\",\n    \"roles:manage\": \"Kelola peran dan izin\",\n    \"transactions:view\": \"Lihat riwayat transaksi\",\n    \"transactions:create\": \"Proses transaksi baru\",\n    \"products:view\": \"Lihat katalog produk\",\n    \"products:manage\": \"Kelola produk\",\n    \"categories:manage\": \"Kelola kategori produk\"\n  };\n  return descriptions[permission] || permission;\n};\n\nconst formatPermissionLabel = (permission: string): string => {\n  const labels: { [key: string]: string } = {\n    \"dashboard:view\": \"Dashboard\",\n    \"pos:use\": \"POS System\", \n    \"pos:print\": \"Print POS\",\n    \"service:create\": \"Buat Service\",\n    \"service:manage\": \"Kelola Service\",\n    \"service:print\": \"Print Service\",\n    \"service:whatsapp\": \"WhatsApp Service\",\n    \"inventory:view\": \"Lihat Inventory\",\n    \"inventory:manage\": \"Kelola Inventory\",\n    \"inventory:adjust\": \"Adjust Stok\",\n    \"stock:movements\": \"Pergerakan Stok\",\n    \"financial:view\": \"Lihat Keuangan\",\n    \"financial:manage\": \"Kelola Keuangan\",\n    \"financial:reports\": \"Laporan Keuangan\",\n    \"customers:view\": \"Lihat Customer\",\n    \"customers:manage\": \"Kelola Customer\",\n    \"suppliers:view\": \"Lihat Supplier\",\n    \"suppliers:manage\": \"Kelola Supplier\",\n    \"reports:view\": \"Lihat Laporan\",\n    \"reports:export\": \"Export Laporan\",\n    \"settings:view\": \"Lihat Settings\",\n    \"settings:manage\": \"Kelola Settings\",\n    \"settings:whatsapp\": \"WhatsApp Config\",\n    \"users:view\": \"Lihat Users\",\n    \"users:manage\": \"Kelola Users\",\n    \"roles:view\": \"Lihat Roles\",\n    \"roles:manage\": \"Kelola Roles\",\n    \"transactions:view\": \"Lihat Transaksi\",\n    \"transactions:create\": \"Buat Transaksi\",\n    \"products:view\": \"Lihat Produk\",\n    \"products:manage\": \"Kelola Produk\",\n    \"categories:manage\": \"Kelola Kategori\"\n  };\n  return labels[permission] || permission.replace(\":\", \": \");\n};\n\n// Default role configurations for easy setup\nconst defaultRoleConfigs = {\n  admin: {\n    displayName: \"Administrator\",\n    description: \"Akses penuh ke seluruh sistem\",\n    permissions: availablePermissions\n  },\n  owner: {\n    displayName: \"Pemilik\",\n    description: \"Akses penuh untuk owner bisnis\",\n    permissions: availablePermissions\n  },\n  kasir: {\n    displayName: \"Kasir\",\n    description: \"Operator POS dan customer service\",\n    permissions: [\n      \"dashboard:view\", \"pos:use\", \"pos:print\", \"customers:view\", \n      \"customers:manage\", \"transactions:view\", \"transactions:create\",\n      \"products:view\", \"inventory:view\"\n    ]\n  },\n  teknisi: {\n    displayName: \"Teknisi\",\n    description: \"Pengelola service dan perbaikan\",\n    permissions: [\n      \"dashboard:view\", \"service:create\", \"service:manage\", \"service:print\",\n      \"service:whatsapp\", \"customers:view\", \"inventory:view\", \"products:view\"\n    ]\n  },\n  purchasing: {\n    displayName: \"Purchasing\",\n    description: \"Pengelola inventory dan supplier\",\n    permissions: [\n      \"dashboard:view\", \"inventory:view\", \"inventory:manage\", \"inventory:adjust\",\n      \"stock:movements\", \"suppliers:view\", \"suppliers:manage\", \"products:view\",\n      \"products:manage\", \"categories:manage\"\n    ]\n  },\n  finance: {\n    displayName: \"Finance\",\n    description: \"Pengelola keuangan dan laporan\",\n    permissions: [\n      \"dashboard:view\", \"financial:view\", \"financial:manage\", \"financial:reports\",\n      \"reports:view\", \"reports:export\", \"transactions:view\"\n    ]\n  }\n};\n\nexport default function RolesPage() {\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingRole, setEditingRole] = useState<Role | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch roles\n  const { data: roles = [], isLoading } = useQuery({\n    queryKey: ['/api/roles'],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(roleFormSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n      permissions: [] as string[],\n      isActive: true,\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        permissions: data.permissions || [],\n      };\n      return apiRequest('POST', '/api/roles', payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setShowDialog(false);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"Role berhasil dibuat\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal membuat role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        permissions: data.permissions || [],\n      };\n      return apiRequest('PUT', `/api/roles/${editingRole?.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setShowDialog(false);\n      setEditingRole(null);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"Role berhasil diupdate\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal mengupdate role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/roles/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Role berhasil dihapus\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menghapus role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    if (editingRole) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (role: Role) => {\n    setEditingRole(role);\n    form.reset({\n      name: role.name,\n      displayName: role.displayName,\n      description: role.description || \"\",\n      permissions: role.permissions || [],\n      isActive: role.isActive !== null ? role.isActive : true,\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus role ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return <div data-testid=\"loading\">Memuat data role...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Manajemen Peran\" breadcrumb=\"Beranda / Peran\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">Manajemen Peran</h1>\n                <p className=\"text-muted-foreground\">\n                  Kelola peran dan izin pengguna untuk sistem POS dengan fitur lengkap: \n                  POS, Service, Inventory, Finance, WhatsApp, dan Thermal Printing\n                </p>\n              </div>\n\n        <Dialog open={showDialog} onOpenChange={setShowDialog}>\n          <DialogTrigger asChild>\n            <Button \n              onClick={() => {\n                setEditingRole(null);\n                form.reset({\n                  name: \"\",\n                  displayName: \"\",\n                  description: \"\",\n                  permissions: [],\n                  isActive: true,\n                });\n              }}\n              data-testid=\"button-add-role\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Role\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"dialog-title\">\n                {editingRole ? \"Edit Role\" : \"Tambah Role Baru\"}\n              </DialogTitle>\n            </DialogHeader>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nama Role</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"admin, kasir, teknisi\"\n                            data-testid=\"input-role-name\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"displayName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nama Tampilan</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Administrator, Kasir, Teknisi\"\n                            data-testid=\"input-display-name\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Deskripsi</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Deskripsi peran dan tanggung jawab...\"\n                          data-testid=\"input-description\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"permissions\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Izin Akses</FormLabel>\n                      <div className=\"grid grid-cols-2 gap-2 max-h-48 overflow-y-auto border rounded p-3\">\n                        {availablePermissions.map((permission) => (\n                          <div key={permission} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id={`permission-${permission}`}\n                              checked={(field.value || []).includes(permission)}\n                              onChange={(e) => {\n                                const current = field.value || [];\n                                if (e.target.checked) {\n                                  field.onChange([...current, permission]);\n                                } else {\n                                  field.onChange(current.filter((p) => p !== permission));\n                                }\n                              }}\n                              data-testid={`checkbox-permission-${permission}`}\n                            />\n                            <label \n                              htmlFor={`permission-${permission}`}\n                              className=\"text-sm cursor-pointer\"\n                              title={getPermissionDescription(permission)}\n                            >\n                              {formatPermissionLabel(permission)}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Status Aktif</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Role dapat digunakan dan diterapkan ke pengguna\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-is-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setShowDialog(false);\n                      setEditingRole(null);\n                      form.reset();\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Batal\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {editingRole ? \"Update\" : \"Simpan\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <UserCheck className=\"w-5 h-5 mr-2\" />\n            Daftar Role\n          </CardTitle>\n          <CardDescription>\n            Total {(roles as any[]).length} role tersedia\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {(roles as any[]).length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-state\">\n              Belum ada role yang dibuat. Mulai dengan membuat role baru.\n            </div>\n          ) : (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nama Role</TableHead>\n                    <TableHead>Nama Tampilan</TableHead>\n                    <TableHead>Deskripsi</TableHead>\n                    <TableHead>Izin</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {(roles as Role[]).map((role: Role) => (\n                    <TableRow key={role.id} data-testid={`role-row-${role.id}`}>\n                      <TableCell>\n                        <span className=\"font-mono text-sm bg-muted px-2 py-1 rounded\">\n                          {role.name}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span data-testid={`role-display-name-${role.id}`}>\n                          {role.displayName}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span \n                          className=\"text-sm text-muted-foreground\" \n                          data-testid={`role-description-${role.id}`}\n                        >\n                          {role.description || \"-\"}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {(role.permissions || []).slice(0, 3).map((permission, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {permission.split(\":\")[0]}\n                            </Badge>\n                          ))}\n                          {(role.permissions || []).length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{(role.permissions || []).length - 3} lainnya\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={role.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`role-status-${role.id}`}\n                        >\n                          {role.isActive ? \"Aktif\" : \"Nonaktif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(role)}\n                            data-testid={`button-edit-${role.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(role.id)}\n                            data-testid={`button-delete-${role.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":23748},"client/src/pages/service-tickets.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Laptop, Edit, Trash2, Clock, AlertCircle, CheckCircle, Calendar, User, Package, Settings, Wrench, Receipt, TestTube, FileText, CreditCard, XCircle } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { serviceTickets, type ServiceTicket, type Customer } from \"@shared/schema\";\nimport { formatDateShort, formatDateLong, formatDateForDatabase, getCurrentJakartaTime, createDatabaseTimestamp } from '@shared/utils/timezone';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ServicePartsSelector } from \"@/components/service-parts-selector\";\nimport ServiceReceipt from \"@/components/ServiceReceipt\";\nimport ServiceReceiptNew from \"@/components/ServiceReceiptNew\";\nimport ServicePaymentReceipt from \"@/components/ServicePaymentReceipt\";\nimport ServiceStatusTracker from \"@/components/ServiceStatusTracker\";\nimport CustomerCreateModal from \"@/components/customers/customer-create-modal\";\nimport ServiceCancellationModal from \"@/components/ServiceCancellationModal\";\n\nconst serviceTicketFormSchema = createInsertSchema(serviceTickets).omit({\n  id: true,\n  ticketNumber: true,\n  createdAt: true,\n  updatedAt: true,\n  estimatedCost: true,\n  actualCost: true,\n  partsCost: true,\n  completedAt: true,\n  estimatedCompletion: true,\n  warrantyStartDate: true,\n  warrantyEndDate: true,\n}).extend({\n  estimatedCost: z.string().optional(),\n  laborCost: z.string().optional(),\n  warrantyDuration: z.union([z.string(), z.number()]).optional().transform((val) => {\n    if (val === \"\" || val === undefined || val === null) return undefined;\n    return typeof val === \"string\" ? (val === \"\" ? undefined : parseInt(val) || 0) : val;\n  }),\n}).refine((data) => {\n  return data.customerId && data.customerId.trim() !== \"\";\n}, {\n  message: \"Customer harus dipilih\",\n  path: [\"customerId\"]\n}).refine((data) => {\n  return data.deviceType && data.deviceType.trim() !== \"\";\n}, {\n  message: \"Jenis perangkat harus diisi\",\n  path: [\"deviceType\"]\n}).refine((data) => {\n  return data.problem && data.problem.trim() !== \"\";\n}, {\n  message: \"Deskripsi masalah harus diisi\",\n  path: [\"problem\"]\n});\n\ninterface ServicePart {\n  productId: string;\n  productName: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  stock: number;\n}\n\ntype ServiceTicketStatus = \"pending\" | \"checking\" | \"in-progress\" | \"waiting-technician\" | \"testing\" | \"waiting-confirmation\" | \"waiting-parts\" | \"completed\" | \"delivered\" | \"cancelled\";\n\nconst statusColors = {\n  pending: { bg: \"bg-yellow-100\", text: \"text-yellow-800\", icon: Clock },\n  checking: { bg: \"bg-sky-100\", text: \"text-sky-800\", icon: AlertCircle },\n  \"in-progress\": { bg: \"bg-blue-100\", text: \"text-blue-800\", icon: Settings },\n  \"waiting-technician\": { bg: \"bg-gray-100\", text: \"text-gray-800\", icon: AlertCircle },\n  testing: { bg: \"bg-indigo-100\", text: \"text-indigo-800\", icon: TestTube },\n  \"waiting-confirmation\": { bg: \"bg-red-100\", text: \"text-red-800\", icon: FileText },\n  \"waiting-parts\": { bg: \"bg-orange-100\", text: \"text-orange-800\", icon: Package },\n  completed: { bg: \"bg-green-100\", text: \"text-green-800\", icon: CheckCircle },\n  delivered: { bg: \"bg-purple-100\", text: \"text-purple-800\", icon: CheckCircle },\n  cancelled: { bg: \"bg-red-100\", text: \"text-red-800\", icon: AlertCircle },\n  warranty_claim: { bg: \"bg-teal-100\", text: \"text-teal-800\", icon: FileText },\n};\n\nconst statusLabels = {\n  pending: \"Belum Cek\",\n  checking: \"Sedang Cek\", \n  \"in-progress\": \"Sedang Dikerjakan\",\n  \"waiting-technician\": \"Ditunggu MITRA Teknik\",\n  testing: \"Sedang Tes\",\n  \"waiting-confirmation\": \"Menunggu Konfirmasi\",\n  \"waiting-parts\": \"Menunggu Sparepart\",\n  completed: \"Selesai\",\n  delivered: \"Sudah Diambil\",\n  cancelled: \"Dibatalkan\",\n  warranty_claim: \"Klaim Garansi\",\n};\n\n\nexport default function ServiceTickets() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<ServiceTicketStatus | \"all\">(\"all\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingTicket, setEditingTicket] = useState<ServiceTicket | null>(null);\n  const [selectedParts, setSelectedParts] = useState<ServicePart[]>([]);\n  const [showReceipt, setShowReceipt] = useState(false);\n  const [receiptData, setReceiptData] = useState<ServiceTicket | null>(null);\n  const [receiptCustomerData, setReceiptCustomerData] = useState<Customer | null>(null);\n  const [showPaymentReceipt, setShowPaymentReceipt] = useState(false);\n  const [paymentReceiptData, setPaymentReceiptData] = useState<ServiceTicket | null>(null);\n  const [showStatusTracker, setShowStatusTracker] = useState(false);\n  const [statusTrackerData, setStatusTrackerData] = useState<ServiceTicket | null>(null);\n  const [showCustomerCreateModal, setShowCustomerCreateModal] = useState(false);\n  const [showCancellationModal, setShowCancellationModal] = useState(false);\n  const [cancellationTicketData, setCancellationTicketData] = useState<ServiceTicket | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: tickets = [], isLoading } = useQuery({\n    queryKey: [\"/api/service-tickets\"],\n    retry: false,\n  });\n\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers\"],\n    retry: false,\n  });\n\n  const { data: storeConfig = {} } = useQuery({\n    queryKey: ['/api/store-config'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 menit\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(serviceTicketFormSchema),\n    defaultValues: {\n      customerId: \"\",\n      deviceType: \"\",\n      deviceBrand: \"\",\n      deviceModel: \"\",\n      serialNumber: \"\",\n      completeness: \"\",\n      problem: \"\",\n      diagnosis: \"\",\n      solution: \"\",\n      status: \"pending\",\n      estimatedCost: \"\",\n      laborCost: \"\",\n      warrantyDuration: \"\",\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const ticketData = {\n        ...data,\n        estimatedCost: data.estimatedCost ? parseFloat(data.estimatedCost) : null,\n      };\n      return apiRequest('POST', '/api/service-tickets', ticketData);\n    },\n    onSuccess: (createdTicket, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      setShowDialog(false);\n      setEditingTicket(null);\n      setSelectedParts([]);\n      \n      // Ambil data customer dari form saat ini\n      const selectedCustomerId = variables.customerId;\n      const selectedCustomer = (customers as Customer[])?.find(c => c.id === selectedCustomerId);\n      \n      form.reset({\n        customerId: \"\",\n        deviceType: \"\",\n        deviceBrand: \"\",\n        deviceModel: \"\",\n        serialNumber: \"\",\n        completeness: \"\",\n        problem: \"\",\n        diagnosis: \"\",\n        solution: \"\",\n        status: \"pending\",\n        estimatedCost: \"\",\n        laborCost: \"\",\n      });\n      \n      // Show success toast\n      toast({ title: \"Sukses\", description: \"Tiket servis berhasil dibuat\" });\n      \n      // Auto-open print receipt popup dengan data lengkap dari form yang baru disubmit\n      if (createdTicket && selectedCustomer) {\n        // Gunakan data asli dari form yang baru disubmit (variables berisi data yang persis dikirim ke API)\n        const completeTicketData = {\n          ...(createdTicket as any),\n          // Override dengan data dari variables (form input) untuk memastikan data terbaru\n          deviceType: variables.deviceType,\n          deviceBrand: variables.deviceBrand,\n          deviceModel: variables.deviceModel,\n          serialNumber: variables.serialNumber,\n          completeness: variables.completeness,\n          problem: variables.problem,\n          diagnosis: variables.diagnosis,\n          solution: variables.solution\n        };\n        \n        console.log('Complete ticket data for receipt:', completeTicketData);\n        \n        // Set data lengkap langsung tanpa menunggu query update\n        setReceiptData(completeTicketData as any);\n        setReceiptCustomerData(selectedCustomer);\n        setShowReceipt(true);\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal membuat tiket servis\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      console.log(\"Raw update body:\", JSON.stringify(data, null, 2));\n      \n      const { parts, ...ticketData } = data;\n      console.log(\"Processed update data:\", JSON.stringify(ticketData, null, 2));\n      \n      return apiRequest('PUT', `/api/service-tickets/${id}`, { ...ticketData, parts });\n    },\n    onSuccess: (updatedTicket, variables) => {\n      // Update specific item in cache immediately\n      queryClient.setQueryData([\"/api/service-tickets\"], (oldData: any) => {\n        if (!oldData) return oldData;\n        return oldData.map((ticket: any) => \n          ticket.id === variables.id ? { ...ticket, ...updatedTicket } : ticket\n        );\n      });\n      \n      // Then invalidate to refresh from server\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/summary\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      setShowDialog(false);\n      setEditingTicket(null);\n      setSelectedParts([]);\n      form.reset({\n        customerId: \"\",\n        deviceType: \"\",\n        deviceBrand: \"\",\n        deviceModel: \"\",\n        serialNumber: \"\",\n        completeness: \"\",\n        problem: \"\",\n        diagnosis: \"\",\n        solution: \"\",\n        status: \"pending\",\n        estimatedCost: \"\",\n        laborCost: \"\",\n      });\n      toast({ title: \"Sukses\", description: \"Tiket servis berhasil diperbarui\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal memperbarui tiket servis\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/service-tickets/${id}`);\n    },\n    onSuccess: (_, deletedId) => {\n      // Remove item from cache immediately (optimistic update)\n      queryClient.setQueryData([\"/api/service-tickets\"], (oldData: any) => {\n        if (!oldData) return oldData;\n        return oldData.filter((ticket: any) => ticket.id !== deletedId);\n      });\n      \n      // Then invalidate to refresh from server\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/summary\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      // Close modal if it was open\n      setEditingTicket(null);\n      setShowDialog(false);\n      \n      toast({ title: \"Sukses\", description: \"Tiket servis berhasil dihapus\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal menghapus tiket servis\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCustomerCreated = (newCustomer: any) => {\n    // Select the newly created customer\n    form.setValue(\"customerId\", newCustomer.id);\n  };\n\n  const handleCancelService = (ticket: ServiceTicket) => {\n    setCancellationTicketData(ticket);\n    setShowCancellationModal(true);\n  };\n\n  const handleCancellationSuccess = () => {\n    setCancellationTicketData(null);\n    setShowCancellationModal(false);\n  };\n\n  const canCancelTicket = (ticket: ServiceTicket): boolean => {\n    console.log('Checking cancellation eligibility for ticket:', ticket.id, 'status:', ticket.status);\n    \n    // Cannot cancel already cancelled tickets\n    if (ticket.status === 'cancelled') {\n      console.log('Cannot cancel - already cancelled');\n      return false;\n    }\n    \n    // Can cancel tickets in these statuses\n    const cancellableStatuses = [\n      'pending',\n      'checking', \n      'in-progress',\n      'waiting-technician',\n      'testing',\n      'waiting-confirmation',\n      'waiting-parts',\n      'completed',\n      'delivered'\n    ];\n    \n    const canCancel = cancellableStatuses.includes(ticket.status || 'pending');\n    console.log('Can cancel ticket:', canCancel, 'Status in cancellable list:', cancellableStatuses.includes(ticket.status || 'pending'));\n    \n    return canCancel;\n  };\n\n  const handleSubmit = (data: any) => {\n    // Validate required fields\n    if (!data.customerId || data.customerId.trim() === \"\") {\n      toast({\n        title: \"Error\",\n        description: \"Customer harus dipilih\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!data.deviceType || data.deviceType.trim() === \"\") {\n      toast({\n        title: \"Error\", \n        description: \"Jenis perangkat harus diisi\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!data.problem || data.problem.trim() === \"\") {\n      toast({\n        title: \"Error\",\n        description: \"Deskripsi masalah harus diisi\", \n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Calculate warranty dates if status is delivered and warranty duration is provided\n    let warrantyData = {};\n    if (data.status === \"delivered\" && data.warrantyDuration) {\n      const warrantyDurationNum = parseInt(data.warrantyDuration);\n      if (warrantyDurationNum > 0) {\n        const startDate = getCurrentJakartaTime();\n        const endDate = warrantyDurationNum >= 9999 \n          ? null // Unlimited warranty\n          : new Date(startDate.getTime() + warrantyDurationNum * 24 * 60 * 60 * 1000);\n        \n        warrantyData = {\n          warrantyDuration: warrantyDurationNum,\n          warrantyStartDate: startDate.toISOString(),\n          warrantyEndDate: endDate ? endDate.toISOString() : undefined\n        };\n      }\n    }\n\n    const submitData = {\n      ...data,\n      ...warrantyData,\n      parts: selectedParts.map(part => ({\n        productId: part.productId,\n        quantity: part.quantity,\n        unitPrice: part.unitPrice\n      }))\n    };\n    \n    if (editingTicket) {\n      updateMutation.mutate({ id: editingTicket.id, data: submitData });\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (ticket: ServiceTicket) => {\n    setEditingTicket(ticket);\n    \n    // Load existing parts for this ticket\n    if (ticket.id) {\n      fetch(`/api/service-tickets/${ticket.id}/parts`)\n        .then(res => res.json())\n        .then(parts => {\n          const partsData = parts.map((part: any) => ({\n            productId: part.productId,\n            productName: part.productName,\n            quantity: part.quantity,\n            unitPrice: part.unitPrice,\n            totalPrice: part.totalPrice,\n            stock: 999 // Will be updated when component loads\n          }));\n          setSelectedParts(partsData);\n        })\n        .catch(console.error);\n    }\n    \n    form.reset({\n      customerId: ticket.customerId,\n      deviceType: ticket.deviceType,\n      deviceBrand: ticket.deviceBrand || \"\",\n      deviceModel: ticket.deviceModel || \"\",\n      serialNumber: ticket.serialNumber || \"\",\n      completeness: ticket.completeness || \"\",\n      problem: ticket.problem,\n      diagnosis: ticket.diagnosis || \"\",\n      solution: ticket.solution || \"\",\n      status: ticket.status || \"pending\",\n      estimatedCost: ticket.estimatedCost ? ticket.estimatedCost.toString() : \"\",\n      laborCost: ticket.laborCost ? ticket.laborCost.toString() : \"\",\n    });\n    \n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus tiket servis ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handlePrintReceipt = (ticket: ServiceTicket) => {\n    // Cari data customer untuk tiket ini\n    const customerForTicket = (customers as Customer[])?.find(c => c.id === ticket.customerId);\n    \n    setReceiptData(ticket);\n    setReceiptCustomerData(customerForTicket || null);\n    setShowReceipt(true);\n  };\n\n  const handlePrintPaymentReceipt = (ticket: ServiceTicket) => {\n    setPaymentReceiptData(ticket);\n    setShowPaymentReceipt(true);\n  };\n\n  const handleNew = () => {\n    setEditingTicket(null);\n    form.reset({\n      customerId: \"\",\n      deviceType: \"\",\n      deviceBrand: \"\",\n      deviceModel: \"\",\n      serialNumber: \"\",\n      completeness: \"\",\n      problem: \"\",\n      diagnosis: \"\",\n      solution: \"\",\n      status: \"pending\",\n      estimatedCost: \"\",\n      laborCost: \"\",\n    });\n    setSelectedParts([]);\n    setShowDialog(true);\n  };\n\n  const filteredTickets = (tickets as ServiceTicket[])\n    .filter((ticket) => {\n      const matchesSearch = \n        ticket.ticketNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        ticket.deviceType.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        ticket.problem.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (ticket.deviceBrand && ticket.deviceBrand.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (ticket.deviceModel && ticket.deviceModel.toLowerCase().includes(searchQuery.toLowerCase()));\n      const matchesStatus = statusFilter === \"all\" || ticket.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    });\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tiket Service\" \n          breadcrumb=\"Beranda / Service\"\n          action={\n            <Button onClick={handleNew} data-testid=\"button-add-ticket\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tiket Baru\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search and Filter Bar */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Cari berdasarkan nomor servis, perangkat, atau masalah...\"\n                    className=\"pl-10\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-ticket-search\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={(value: ServiceTicketStatus | \"all\") => setStatusFilter(value)}>\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Semua Status</SelectItem>\n                    <SelectItem value=\"pending\">Belum Cek</SelectItem>\n                    <SelectItem value=\"checking\">Sedang Cek</SelectItem>\n                    <SelectItem value=\"in-progress\">Sedang Dikerjakan</SelectItem>\n                    <SelectItem value=\"waiting-technician\">Ditunggu MITRA Teknik</SelectItem>\n                    <SelectItem value=\"testing\">Sedang Tes</SelectItem>\n                    <SelectItem value=\"waiting-confirmation\">Menunggu Konfirmasi</SelectItem>\n                    <SelectItem value=\"waiting-parts\">Menunggu Sparepart</SelectItem>\n                    <SelectItem value=\"completed\">Selesai</SelectItem>\n                    <SelectItem value=\"delivered\">Sudah Diambil</SelectItem>\n                    <SelectItem value=\"cancelled\">Dibatalkan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Service Tickets Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Tiket Servis ({filteredTickets.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : filteredTickets.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Laptop className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery || statusFilter !== \"all\" ? \"Tidak ada tiket yang cocok dengan pencarian\" : \"Belum ada tiket servis\"}\n                  </p>\n                  <Button className=\"mt-4\" onClick={handleNew}>\n                    Buat Tiket Pertama\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Ticket ID</TableHead>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Perangkat</TableHead>\n                      <TableHead>Masalah</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Estimasi Biaya</TableHead>\n                      <TableHead>Tanggal</TableHead>\n                      <TableHead className=\"text-right\">Aksi</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredTickets.map((ticket: ServiceTicket) => {\n                      const customer = (customers as Customer[]).find(c => c.id === ticket.customerId);\n                      const statusConfig = statusColors[ticket.status || 'pending'];\n                      const StatusIcon = statusConfig.icon;\n\n                      return (\n                        <TableRow key={ticket.id}>\n                          <TableCell>\n                            <span className=\"font-mono text-sm\" data-testid={`ticket-id-${ticket.id}`}>\n                              #{ticket.id.slice(-8)}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span data-testid={`ticket-customer-${ticket.id}`}>\n                                {customer ? customer.name : \"Unknown\"}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <span className=\"font-medium\" data-testid={`ticket-device-${ticket.id}`}>\n                                {ticket.deviceType}\n                              </span>\n                              {ticket.deviceBrand && (\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {ticket.deviceBrand} {ticket.deviceModel}\n                                </p>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm truncate max-w-xs\" data-testid={`ticket-problem-${ticket.id}`}>\n                              {ticket.problem}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className={`flex items-center space-x-2 px-2 py-1 rounded-full ${statusConfig.bg} w-fit`}>\n                              <StatusIcon className={`w-3 h-3 ${statusConfig.text}`} />\n                              <span className={`text-xs font-medium ${statusConfig.text}`} data-testid={`ticket-status-${ticket.id}`}>\n                                {statusLabels[ticket.status || 'pending']}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span data-testid={`ticket-cost-${ticket.id}`}>\n                              {ticket.estimatedCost \n                                ? `Rp ${parseFloat(ticket.estimatedCost.toString()).toLocaleString(\"id-ID\")}` \n                                : \"-\"\n                              }\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center text-sm\">\n                              <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span data-testid={`ticket-date-${ticket.id}`}>\n                                {ticket.createdAt ? formatDateShort(ticket.createdAt) : '-'}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setStatusTrackerData(ticket);\n                                  setShowStatusTracker(true);\n                                }}\n                                data-testid={`button-status-${ticket.id}`}\n                                title=\"Detail Status\"\n                              >\n                                <Settings className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handlePrintReceipt(ticket)}\n                                data-testid={`button-receipt-ticket-${ticket.id}`}\n                                title=\"Cetak Nota Service\"\n                              >\n                                <Receipt className=\"w-4 h-4\" />\n                              </Button>\n                              {/* Payment Receipt Button - Only show for completed/delivered */}\n                              {(ticket.status === 'completed' || ticket.status === 'delivered') && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handlePrintPaymentReceipt(ticket)}\n                                  data-testid={`button-payment-receipt-${ticket.id}`}\n                                  title=\"Nota Pembayaran\"\n                                >\n                                  <CreditCard className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleEdit(ticket)}\n                                data-testid={`button-edit-ticket-${ticket.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              {/* Cancel Button - Only show for cancellable tickets */}\n                              {canCancelTicket(ticket) && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleCancelService(ticket)}\n                                  data-testid={`button-cancel-ticket-${ticket.id}`}\n                                  title=\"Batalkan Service\"\n                                  className=\"text-destructive hover:text-destructive\"\n                                >\n                                  <XCircle className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDelete(ticket.id)}\n                                data-testid={`button-delete-ticket-${ticket.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Service Ticket Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingTicket ? \"Edit Tiket Servis\" : \"Buat Tiket Servis Baru\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <Tabs defaultValue=\"ticket-info\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"ticket-info\" className=\"flex items-center gap-2\">\n                    <Settings className=\"w-4 h-4\" />\n                    Informasi Servis\n                  </TabsTrigger>\n                  <TabsTrigger value=\"spare-parts\" className=\"flex items-center gap-2\">\n                    <Package className=\"w-4 h-4\" />\n                    Spare Parts\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"ticket-info\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"customerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-customer\">\n                            <SelectValue placeholder=\"Pilih customer\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {(customers as Customer[]).map((customer: Customer) => (\n                            <SelectItem key={customer.id} value={customer.id}>\n                              {customer.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"col-span-2\">\n                  <div className=\"flex justify-end\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowCustomerCreateModal(true)}\n                      data-testid=\"button-create-customer\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Tambah Customer Baru\n                    </Button>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"deviceType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Jenis Perangkat *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Misal: Laptop, Tablet, HP\" {...field} data-testid=\"input-device-type\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"deviceBrand\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Misal: Dell, HP, Asus\" {...field} data-testid=\"input-device-brand\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"deviceModel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Model</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Misal: Latitude 7520\" {...field} data-testid=\"input-device-model\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"serialNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Serial Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Masukkan serial number perangkat\" {...field} data-testid=\"input-serial-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"completeness\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Kelengkapan</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Misal: Charger, Tas laptop, Mouse, dll...\" \n                        {...field} \n                        data-testid=\"textarea-completeness\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"problem\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Masalah *</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Deskripsikan masalah perangkat...\" \n                        {...field} \n                        data-testid=\"textarea-problem\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"diagnosis\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Diagnosis</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Hasil diagnosis teknisi...\" \n                        {...field} \n                        data-testid=\"textarea-diagnosis\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"solution\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Solusi</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Tindakan yang dilakukan...\" \n                        {...field} \n                        data-testid=\"textarea-solution\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">Belum Cek</SelectItem>\n                          <SelectItem value=\"checking\">Sedang Cek</SelectItem>\n                          <SelectItem value=\"in-progress\">Sedang Dikerjakan</SelectItem>\n                          <SelectItem value=\"waiting-technician\">Ditunggu MITRA Teknik</SelectItem>\n                          <SelectItem value=\"testing\">Sedang Tes</SelectItem>\n                          <SelectItem value=\"waiting-confirmation\">Menunggu Konfirmasi</SelectItem>\n                          <SelectItem value=\"waiting-parts\">Menunggu Sparepart</SelectItem>\n                          <SelectItem value=\"completed\">Selesai</SelectItem>\n                          <SelectItem value=\"delivered\">Sudah Diambil</SelectItem>\n                          <SelectItem value=\"cancelled\">Dibatalkan</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"laborCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Biaya Tenaga Kerja</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"0\" \n                          {...field} \n                          data-testid=\"input-labor-cost\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"estimatedCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estimasi Biaya</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"0\" \n                          {...field} \n                          data-testid=\"input-estimated-cost\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Warranty Section - Only show when status is delivered */}\n              {form.watch(\"status\") === \"delivered\" && (\n                <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-orange-800\">Informasi Garansi</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"warrantyDuration\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Lama Garansi (Hari) *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"Masukkan lama garansi dalam hari\" \n                              {...field}\n                              onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : \"\")}\n                              data-testid=\"input-warranty-duration\" \n                            />\n                          </FormControl>\n                          <FormMessage />\n                          <p className=\"text-sm text-muted-foreground\">\n                            Contoh: 30 = 30 hari, 365 = 1 tahun, 9999 = tanpa batas\n                          </p>\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Info Garansi</label>\n                      <div className=\"p-3 bg-white border rounded text-sm\">\n                        {form.watch(\"warrantyDuration\") ? (\n                          <div>\n                            <p><strong>Durasi:</strong> {(() => {\n                              const duration = parseInt(form.watch(\"warrantyDuration\")) || 0;\n                              if (duration >= 9999) return \"Tanpa batas waktu\";\n                              if (duration === 1) return \"1 hari\";\n                              if (duration < 30) return `${duration} hari`;\n                              if (duration < 365) return `${Math.floor(duration / 30)} bulan ${duration % 30} hari`;\n                              return `${Math.floor(duration / 365)} tahun ${Math.floor((duration % 365) / 30)} bulan`;\n                            })()}</p>\n                            {parseInt(form.watch(\"warrantyDuration\")) < 9999 && (\n                              <p><strong>Berakhir:</strong> {\n                                formatDateLong(new Date(Date.now() + (parseInt(form.watch(\"warrantyDuration\")) || 0) * 24 * 60 * 60 * 1000))\n                              }</p>\n                            )}\n                          </div>\n                        ) : (\n                          <p className=\"text-muted-foreground\">Masukkan durasi garansi</p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n                </TabsContent>\n\n                <TabsContent value=\"spare-parts\" className=\"space-y-4\">\n                  <ServicePartsSelector\n                    parts={selectedParts}\n                    onPartsChange={setSelectedParts}\n                    laborCost={parseFloat(form.watch(\"laborCost\") || \"0\")}\n                  />\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowDialog(false)}\n                  data-testid=\"button-cancel-ticket\"\n                >\n                  Batal\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-ticket\"\n                >\n                  {editingTicket ? \"Perbarui Tiket\" : \"Buat Tiket\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Service Receipt Dialog */}\n      <Dialog open={showReceipt} onOpenChange={(open) => {\n        setShowReceipt(open);\n        if (!open) {\n          // Reset customer data ketika dialog ditutup\n          setReceiptCustomerData(null);\n        }\n      }}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Tanda Terima Service - {receiptData?.ticketNumber}\n            </DialogTitle>\n          </DialogHeader>\n          {receiptData && (\n            <ServiceReceiptNew\n              serviceTicket={{\n                ...receiptData,\n                deviceBrand: receiptData.deviceBrand || undefined,\n                deviceModel: receiptData.deviceModel || undefined,\n                serialNumber: receiptData.serialNumber || undefined,\n                completeness: receiptData.completeness || undefined,\n                diagnosis: receiptData.diagnosis || undefined,\n                solution: receiptData.solution || undefined,\n                estimatedCost: receiptData.estimatedCost || undefined,\n                status: receiptData.status || 'pending',\n                technicianId: receiptData.technicianId || undefined,\n                warrantyDuration: receiptData.warrantyDuration ?? undefined,\n                warrantyStartDate: receiptData.warrantyStartDate ? (receiptData.warrantyStartDate instanceof Date ? receiptData.warrantyStartDate.toISOString() : receiptData.warrantyStartDate) : undefined,\n                warrantyEndDate: receiptData.warrantyEndDate ? (receiptData.warrantyEndDate instanceof Date ? receiptData.warrantyEndDate.toISOString() : receiptData.warrantyEndDate) : undefined,\n                createdAt: receiptData.createdAt ? (typeof receiptData.createdAt === 'string' ? receiptData.createdAt : receiptData.createdAt.toISOString()) : createDatabaseTimestamp()\n              }}\n              customer={(() => {\n                // Gunakan data customer yang sudah disimpan saat membuat tiket\n                if (receiptCustomerData) {\n                  return {\n                    id: receiptCustomerData.id,\n                    name: receiptCustomerData.name,\n                    phone: receiptCustomerData.phone || undefined,\n                    email: receiptCustomerData.email || undefined,\n                    address: receiptCustomerData.address || undefined\n                  };\n                }\n                \n                // Fallback: cari dari query cache\n                const foundCustomer = (customers as Customer[])?.find((c: Customer) => c.id === receiptData.customerId);\n                if (foundCustomer) {\n                  return {\n                    id: foundCustomer.id,\n                    name: foundCustomer.name,\n                    phone: foundCustomer.phone || undefined,\n                    email: foundCustomer.email || undefined,\n                    address: foundCustomer.address || undefined\n                  };\n                }\n                \n                // Last fallback\n                return {\n                  id: receiptData.customerId,\n                  name: 'Customer Tidak Ditemukan',\n                  phone: undefined,\n                  email: undefined,\n                  address: undefined\n                };\n              })()}\n              storeConfig={storeConfig || {\n                name: 'LaptopPOS Service',\n                address: 'Alamat Toko',\n                phone: '0123456789',\n                email: 'info@laptoppos.com'\n              }}\n              technician={receiptData.technicianId ? (users as any[])?.find((u: any) => u.id === receiptData.technicianId) : null}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Service Payment Receipt Dialog */}\n      {paymentReceiptData && (\n        <ServicePaymentReceipt\n          open={showPaymentReceipt}\n          onClose={() => setShowPaymentReceipt(false)}\n          serviceTicket={{\n            ...paymentReceiptData,\n            deviceBrand: paymentReceiptData.deviceBrand || undefined,\n            deviceModel: paymentReceiptData.deviceModel || undefined,\n            serialNumber: paymentReceiptData.serialNumber || undefined,\n            diagnosis: paymentReceiptData.diagnosis || undefined,\n            solution: paymentReceiptData.solution || undefined,\n            actualCost: paymentReceiptData.actualCost || undefined,\n            partsCost: paymentReceiptData.partsCost || undefined,\n            laborCost: paymentReceiptData.laborCost || undefined,\n            status: paymentReceiptData.status || 'pending',\n            warrantyDuration: paymentReceiptData.warrantyDuration ?? undefined,\n            warrantyStartDate: paymentReceiptData.warrantyStartDate ? (paymentReceiptData.warrantyStartDate instanceof Date ? paymentReceiptData.warrantyStartDate.toISOString() : paymentReceiptData.warrantyStartDate) : undefined,\n            warrantyEndDate: paymentReceiptData.warrantyEndDate ? (paymentReceiptData.warrantyEndDate instanceof Date ? paymentReceiptData.warrantyEndDate.toISOString() : paymentReceiptData.warrantyEndDate) : undefined,\n            createdAt: paymentReceiptData.createdAt ? (typeof paymentReceiptData.createdAt === 'string' ? paymentReceiptData.createdAt : paymentReceiptData.createdAt.toISOString()) : createDatabaseTimestamp(),\n            completedAt: paymentReceiptData.completedAt ? (typeof paymentReceiptData.completedAt === 'string' ? paymentReceiptData.completedAt : paymentReceiptData.completedAt.toISOString()) : undefined\n          }}\n          customer={(() => {\n            const foundCustomer = (customers as Customer[])?.find((c: Customer) => c.id === paymentReceiptData.customerId);\n            return foundCustomer ? {\n              ...foundCustomer,\n              phone: foundCustomer.phone || undefined,\n              email: foundCustomer.email || undefined,\n              address: foundCustomer.address || undefined\n            } : {\n              id: paymentReceiptData.customerId,\n              name: 'Customer',\n              phone: undefined,\n              email: undefined,\n              address: undefined\n            };\n          })()}\n          storeConfig={storeConfig || {\n            name: 'LaptopPOS Service',\n            address: 'Alamat Toko',\n            phone: '0123456789',\n            email: 'info@laptoppos.com'\n          }}\n          technician={paymentReceiptData.technicianId ? (users as any[])?.find((u: any) => u.id === paymentReceiptData.technicianId) : null}\n        />\n      )}\n\n      {/* Service Status Tracker Dialog */}\n      {statusTrackerData && (\n        <ServiceStatusTracker\n          isOpen={showStatusTracker}\n          onClose={() => setShowStatusTracker(false)}\n          serviceNumber={statusTrackerData.ticketNumber}\n          currentStatus={statusTrackerData.status || 'pending'}\n        />\n      )}\n\n      <CustomerCreateModal\n        open={showCustomerCreateModal}\n        onClose={() => setShowCustomerCreateModal(false)}\n        onCustomerCreated={handleCustomerCreated}\n      />\n\n      {/* Service Cancellation Modal */}\n      {cancellationTicketData && (\n        <ServiceCancellationModal\n          open={showCancellationModal}\n          onOpenChange={setShowCancellationModal}\n          serviceTicket={cancellationTicketData}\n          onSuccess={handleCancellationSuccess}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":53798},"client/src/pages/service.tsx":{"content":"import Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Service() {\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Service Management\" \n          breadcrumb=\"Home / Service\"\n          action={\n            <Button data-testid=\"button-new-service\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Service\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Service Tickets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Service ticket management interface will be implemented here.\n              </p>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1187},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Store, Users, Shield, Database, MessageCircle, Settings as SettingsIcon } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { WhatsAppSettings as WhatsAppSettingsComponent } from \"@/components/WhatsAppSettings\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState(\"store\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch store config with better caching\n  const { data: storeConfig, isLoading: configLoading } = useQuery({\n    queryKey: ['store-config-settings'], // Unique key\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return null;\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    retry: false,\n  });\n\n  // Store settings mutation\n  const updateStoreMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/store-config', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update store config');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all store config queries across all components\n      queryClient.invalidateQueries({ queryKey: ['/api/store-config'] });\n      queryClient.invalidateQueries({ queryKey: ['store-config-transaction'] });\n      queryClient.invalidateQueries({ queryKey: ['store-config-landing'] });\n      queryClient.invalidateQueries({ queryKey: ['store-config-settings'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Pengaturan toko berhasil diupdate\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Store config update error:', error);\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Gagal mengupdate pengaturan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStoreSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get('storeName'),\n      address: formData.get('address'),\n      phone: formData.get('phone'),\n      email: formData.get('email'),\n      taxRate: formData.get('taxRate'),\n    };\n    console.log('Updating store config with:', data); // Debug log\n    updateStoreMutation.mutate(data);\n  };\n\n  if (configLoading) {\n    return <div>Memuat...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Pengaturan\" breadcrumb=\"Beranda / Pengaturan\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Pengaturan</h1>\n              <p className=\"text-muted-foreground\">\n                Kelola pengaturan toko dan sistem Anda\n              </p>\n            </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"store\" className=\"flex items-center space-x-2\">\n            <Store className=\"w-4 h-4\" />\n            <span>Toko</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\">\n            <Users className=\"w-4 h-4\" />\n            <span>Pengguna</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"whatsapp\" className=\"flex items-center space-x-2\">\n            <MessageCircle className=\"w-4 h-4\" />\n            <span>WhatsApp</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Keamanan</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"backup\" className=\"flex items-center space-x-2\">\n            <Database className=\"w-4 h-4\" />\n            <span>Backup</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Store Settings */}\n        <TabsContent value=\"store\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Informasi Toko</CardTitle>\n              <CardDescription>\n                Kelola informasi dasar tentang toko Anda\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleStoreSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"storeName\">Nama Toko</Label>\n                    <Input\n                      id=\"storeName\"\n                      name=\"storeName\"\n                      defaultValue={(storeConfig as any)?.name || \"\"}\n                      placeholder=\"Masukkan nama toko\"\n                      data-testid=\"input-store-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Telepon</Label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      defaultValue={(storeConfig as any)?.phone || \"\"}\n                      placeholder=\"Masukkan nomor telepon\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Alamat</Label>\n                  <Input\n                    id=\"address\"\n                    name=\"address\"\n                    defaultValue={(storeConfig as any)?.address || \"\"}\n                    placeholder=\"Masukkan alamat lengkap toko\"\n                    data-testid=\"input-address\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    defaultValue={(storeConfig as any)?.email || \"\"}\n                    placeholder=\"Masukkan email toko\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxRate\">PPN / Tax Rate (%)</Label>\n                    <Input\n                      id=\"taxRate\"\n                      name=\"taxRate\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max=\"100\"\n                      defaultValue={(storeConfig as any)?.taxRate || \"11.00\"}\n                      placeholder=\"11.00\"\n                      data-testid=\"input-tax-rate\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"defaultDiscount\">Diskon Default (%)</Label>\n                    <Input\n                      id=\"defaultDiscount\"\n                      name=\"defaultDiscount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max=\"100\"\n                      defaultValue={(storeConfig as any)?.defaultDiscount || \"0.00\"}\n                      placeholder=\"0.00\"\n                      data-testid=\"input-default-discount\"\n                    />\n                  </div>\n                </div>\n                <Button \n                  type=\"submit\" \n                  disabled={updateStoreMutation.isPending}\n                  data-testid=\"button-save-store\"\n                >\n                  {updateStoreMutation.isPending ? \"Menyimpan...\" : \"Simpan Perubahan\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* User Management */}\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Manajemen User</CardTitle>\n              <CardDescription>\n                Kelola user dan role dalam sistem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-muted-foreground\">\n                Fitur manajemen user akan tersedia segera\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* WhatsApp Integration */}\n        <TabsContent value=\"whatsapp\" className=\"space-y-6\">\n          <WhatsAppSettingsComponent storeConfig={storeConfig || {}} />\n        </TabsContent>\n\n        {/* Security Settings */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Pengaturan Keamanan</CardTitle>\n              <CardDescription>\n                Kelola pengaturan keamanan sistem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-muted-foreground\">\n                Fitur pengaturan keamanan akan tersedia segera\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Backup Settings */}\n        <TabsContent value=\"backup\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Database className=\"w-5 h-5 mr-2\" />\n                Backup & Restore\n              </CardTitle>\n              <CardDescription>\n                Kelola backup data dan pengaturan sistem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-muted-foreground\">\n                Fitur backup & restore akan tersedia segera\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":10863},"client/src/pages/suppliers.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Truck, Edit, Trash2, Phone, Mail, MapPin, User } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSupplierSchema, type Supplier } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst supplierFormSchema = insertSupplierSchema;\n\nexport default function Suppliers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: suppliers = [], isLoading } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n    retry: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(supplierFormSchema),\n    defaultValues: {\n      code: \"\",\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      contactPerson: \"\",\n      // Add other optional fields to match schema\n      companyName: \"\",\n      altPhone: \"\",\n      website: \"\",\n      city: \"\",\n      province: \"\",\n      postalCode: \"\",\n      country: \"Indonesia\",\n      paymentTerms: 30,\n      creditLimit: \"\",\n      rating: 5,\n      notes: \"\",\n      taxId: \"\",\n      businessType: \"\",\n      isActive: true,\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/suppliers', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      setShowDialog(false);\n      setEditingSupplier(null);\n      form.reset();\n      toast({ title: \"Success\", description: \"Supplier created successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to create supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest('PUT', `/api/suppliers/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      setShowDialog(false);\n      setEditingSupplier(null);\n      form.reset();\n      toast({ title: \"Success\", description: \"Supplier updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to update supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/suppliers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({ title: \"Success\", description: \"Supplier deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to delete supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    console.log(\"🔥 handleSubmit called with data:\", data);\n    console.log(\"🔥 Form errors:\", form.formState.errors);\n    console.log(\"🔥 Form is valid:\", form.formState.isValid);\n    console.log(\"🔥 Create mutation pending:\", createMutation.isPending);\n    console.log(\"🔥 Update mutation pending:\", updateMutation.isPending);\n    \n    if (editingSupplier) {\n      updateMutation.mutate({ id: editingSupplier.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (supplier: Supplier) => {\n    setEditingSupplier(supplier);\n    form.reset({\n      code: supplier.code || \"\",\n      name: supplier.name,\n      email: supplier.email || \"\",\n      phone: supplier.phone || \"\",\n      address: supplier.address || \"\",\n      contactPerson: supplier.contactPerson || \"\",\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this supplier?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleNew = () => {\n    setEditingSupplier(null);\n    form.reset();\n    setShowDialog(true);\n  };\n\n  const filteredSuppliers = (suppliers as Supplier[]).filter((supplier) =>\n    supplier.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (supplier.email && supplier.email.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    (supplier.contactPerson && supplier.contactPerson.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Manajemen Supplier\" \n          breadcrumb=\"Beranda / Supplier\"\n          action={\n            <Button onClick={handleNew} data-testid=\"button-add-supplier\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Supplier\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search Bar */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search suppliers by name, email, or contact person...\"\n                    className=\"pl-10\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-supplier-search\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Suppliers Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Suppliers ({filteredSuppliers.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : filteredSuppliers.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Truck className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery ? \"No suppliers match your search\" : \"No suppliers found\"}\n                  </p>\n                  <Button className=\"mt-4\" onClick={handleNew}>\n                    Add First Supplier\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Contact Information</TableHead>\n                      <TableHead>Contact Person</TableHead>\n                      <TableHead>Address</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredSuppliers.map((supplier: Supplier) => (\n                      <TableRow key={supplier.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-secondary/10 rounded-full flex items-center justify-center\">\n                              <Truck className=\"w-5 h-5 text-secondary\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`supplier-name-${supplier.id}`}>\n                                {supplier.name}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            {supplier.email && (\n                              <div className=\"flex items-center text-sm\">\n                                <Mail className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`supplier-email-${supplier.id}`}>\n                                  {supplier.email}\n                                </span>\n                              </div>\n                            )}\n                            {supplier.phone && (\n                              <div className=\"flex items-center text-sm\">\n                                <Phone className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`supplier-phone-${supplier.id}`}>\n                                  {supplier.phone}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {supplier.contactPerson && (\n                            <div className=\"flex items-center text-sm\">\n                              <User className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span data-testid={`supplier-contact-${supplier.id}`}>\n                                {supplier.contactPerson}\n                              </span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {supplier.address && (\n                            <div className=\"flex items-center text-sm\">\n                              <MapPin className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span className=\"text-muted-foreground truncate max-w-xs\" data-testid={`supplier-address-${supplier.id}`}>\n                                {supplier.address}\n                              </span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(supplier)}\n                              data-testid={`button-edit-supplier-${supplier.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(supplier.id)}\n                              data-testid={`button-delete-supplier-${supplier.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Supplier Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingSupplier ? \"Edit Supplier\" : \"Add New Supplier\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Code *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"SUP001\" {...field} data-testid=\"input-supplier-code\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter supplier name\" {...field} data-testid=\"input-supplier-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Person</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Contact person name\" {...field} data-testid=\"input-contact-person\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"supplier@example.com\" \n                          {...field} \n                          data-testid=\"input-supplier-email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"08123456789\" \n                          {...field} \n                          data-testid=\"input-supplier-phone\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Supplier address\" \n                        {...field} \n                        data-testid=\"textarea-supplier-address\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-3 pt-6\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowDialog(false)}\n                  data-testid=\"button-cancel-supplier\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-supplier\"\n                  onClick={(e) => {\n                    console.log(\"🔥 Button clicked!\");\n                    console.log(\"🔥 Form state:\", form.formState);\n                    console.log(\"🔥 Form values:\", form.getValues());\n                  }}\n                >\n                  {editingSupplier ? \"Update Supplier\" : \"Create Supplier\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18343},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Trash2, Edit, Users, Mail, UserCheck, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { User } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { formatDateShort } from '@shared/utils/timezone';\n\nconst userUpdateSchema = z.object({\n  firstName: z.string().min(1, \"Nama depan harus diisi\"),\n  lastName: z.string().optional(),\n  email: z.string().email(\"Format email tidak valid\"),\n  role: z.enum([\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"]),\n  isActive: z.boolean(),\n});\n\nconst userCreateSchema = z.object({\n  username: z.string().min(3, \"Username minimal 3 karakter\"),\n  firstName: z.string().min(1, \"Nama depan harus diisi\"),\n  lastName: z.string().optional(),\n  email: z.string().email(\"Format email tidak valid\"),\n  password: z.string().min(6, \"Password minimal 6 karakter\"),\n  role: z.enum([\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"]),\n});\n\nconst roleLabels = {\n  admin: \"Administrator\",\n  kasir: \"Kasir\",\n  teknisi: \"Teknisi\",\n  purchasing: \"Purchasing\",\n  finance: \"Finance\", \n  owner: \"Owner\"\n};\n\nconst roleColors = {\n  admin: \"destructive\",\n  kasir: \"default\",\n  teknisi: \"secondary\",\n  purchasing: \"outline\",\n  finance: \"default\",\n  owner: \"destructive\"\n} as const;\n\nexport default function UsersPage() {\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [isCreateMode, setIsCreateMode] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch users\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(isCreateMode ? userCreateSchema : userUpdateSchema),\n    defaultValues: {\n      username: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"kasir\" as const,\n      isActive: true,\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/users', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setShowDialog(false);\n      setIsCreateMode(false);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"User berhasil dibuat\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Gagal membuat user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('PUT', `/api/users/${editingUser?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setShowDialog(false);\n      setEditingUser(null);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"User berhasil diupdate\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Gagal mengupdate user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/users/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"User berhasil dihapus\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menghapus user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    if (isCreateMode) {\n      createMutation.mutate(data);\n    } else {\n      updateMutation.mutate(data);\n    }\n  };\n\n  const handleCreate = () => {\n    setIsCreateMode(true);\n    setEditingUser(null);\n    form.reset({\n      username: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"kasir\" as const,\n      isActive: true,\n    });\n    setShowDialog(true);\n  };\n\n  const handleEdit = (user: User) => {\n    setIsCreateMode(false);\n    setEditingUser(user);\n    form.reset({\n      username: user.username || \"\",\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      email: user.email || \"\",\n      password: \"\", // Don't prefill password for edit\n      role: (user.role as any) || \"kasir\",\n      isActive: user.isActive ?? true,\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus user ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getInitials = (user: User) => {\n    const first = user.firstName?.charAt(0) || \"\";\n    const last = user.lastName?.charAt(0) || \"\";\n    return (first + last).toUpperCase() || user.email?.charAt(0).toUpperCase() || \"?\";\n  };\n\n  if (isLoading) {\n    return <div data-testid=\"loading\">Memuat data user...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Manajemen Pengguna\" breadcrumb=\"Beranda / Pengguna\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">Manajemen Pengguna</h1>\n                <p className=\"text-muted-foreground\">Kelola akun pengguna dan peran mereka</p>\n              </div>\n              <Button onClick={handleCreate} data-testid=\"button-create-user\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Tambah User\n              </Button>\n            </div>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle data-testid=\"dialog-title\">\n              {isCreateMode ? \"Tambah User Baru\" : \"Edit User\"}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              {isCreateMode && (\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Username untuk login\"\n                          data-testid=\"input-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nama Depan</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Nama depan\"\n                          data-testid=\"input-first-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nama Belakang</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Nama belakang\"\n                          data-testid=\"input-last-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"user@example.com\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {isCreateMode && (\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"password\"\n                          placeholder=\"Password minimal 6 karakter\"\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Peran</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Pilih peran\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Administrator</SelectItem>\n                        <SelectItem value=\"kasir\">Kasir</SelectItem>\n                        <SelectItem value=\"teknisi\">Teknisi</SelectItem>\n                        <SelectItem value=\"purchasing\">Purchasing</SelectItem>\n                        <SelectItem value=\"finance\">Finance</SelectItem>\n                        <SelectItem value=\"owner\">Owner</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {!isCreateMode && (\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Status Aktif</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          User dapat login dan mengakses sistem\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-is-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowDialog(false);\n                    setEditingUser(null);\n                    setIsCreateMode(false);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel\"\n                >\n                  Batal\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={isCreateMode ? createMutation.isPending : updateMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {isCreateMode ? \"Buat User\" : \"Update\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"w-5 h-5 mr-2\" />\n            Daftar User\n          </CardTitle>\n          <CardDescription>\n            Total {(users as any[]).length} user terdaftar dalam sistem\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {(users as any[]).length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-state\">\n              Belum ada user yang terdaftar.\n            </div>\n          ) : (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Peran</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Bergabung</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {(users as User[]).map((user: User) => (\n                    <TableRow key={user.id} data-testid={`user-row-${user.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarImage src={user.profileImageUrl || \"\"} />\n                            <AvatarFallback className=\"text-sm\">\n                              {getInitials(user)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\" data-testid={`user-name-${user.id}`}>\n                              {`${user.firstName || \"\"} ${user.lastName || \"\"}`.trim() || \"User\"}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              ID: {user.id}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <Mail className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                          <span data-testid={`user-email-${user.id}`}>\n                            {user.email || \"-\"}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={roleColors[user.role as keyof typeof roleColors] || \"default\"}\n                          data-testid={`user-role-${user.id}`}\n                        >\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          {roleLabels[user.role as keyof typeof roleLabels] || user.role}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`user-status-${user.id}`}\n                        >\n                          <UserCheck className=\"w-3 h-3 mr-1\" />\n                          {user.isActive ? \"Aktif\" : \"Nonaktif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <span \n                          className=\"text-sm text-muted-foreground\"\n                          data-testid={`user-created-${user.id}`}\n                        >\n                          {user.createdAt \n                            ? formatDateShort(user.createdAt)\n                            : \"-\"\n                          }\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(user)}\n                            data-testid={`button-edit-${user.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(user.id)}\n                            data-testid={`button-delete-${user.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":18976},"client/src/components/dashboard/inventory-alerts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, Info } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function InventoryAlerts() {\n  const { data: lowStockProducts, isLoading } = useQuery({\n    queryKey: [\"/api/products/low-stock\"],\n    retry: false,\n  });\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle>Peringatan Inventori</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : !lowStockProducts || lowStockProducts.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            Semua produk stoknya mencukupi.\n          </p>\n        ) : (\n          <div className=\"space-y-4\">\n            {lowStockProducts.map((product: any) => {\n              const isVeryLow = product.stock <= 1;\n              \n              return (\n                <div \n                  key={product.id}\n                  className={`flex items-center justify-between p-3 rounded-md border ${\n                    isVeryLow \n                      ? 'border-destructive/20 bg-destructive/5' \n                      : 'border-secondary/20 bg-secondary/5'\n                  }`}\n                  data-testid={`inventory-alert-${product.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                      isVeryLow ? 'bg-destructive/10' : 'bg-secondary/10'\n                    }`}>\n                      {isVeryLow ? (\n                        <AlertTriangle className=\"w-5 h-5 text-destructive\" />\n                      ) : (\n                        <Info className=\"w-5 h-5 text-secondary\" />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {product.name}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Stok: <span data-testid={`stock-count-${product.id}`}>{product.stock} unit</span>\n                        {product.minStock && (\n                          <span className=\"ml-2\">Minimal: {product.minStock}</span>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                  <Button \n                    size=\"sm\"\n                    data-testid={`button-reorder-${product.id}`}\n                  >\n                    Pesan Ulang\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3030},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Plus, \n  Wrench, \n  Package, \n  UserPlus, \n  FileDown \n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function QuickActions() {\n  const [, setLocation] = useLocation();\n\n  const actions = [\n    {\n      title: \"Penjualan Baru\",\n      icon: Plus,\n      onClick: () => setLocation(\"/pos\"),\n      variant: \"default\" as const,\n      testId: \"button-quick-new-sale\"\n    },\n    {\n      title: \"Servis Baru\",\n      icon: Wrench,\n      onClick: () => setLocation(\"/service\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-new-service\"\n    },\n    {\n      title: \"Tambah Produk\",\n      icon: Package,\n      onClick: () => setLocation(\"/inventory\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-add-product\"\n    },\n    {\n      title: \"Tambah Pelanggan\",\n      icon: UserPlus,\n      onClick: () => setLocation(\"/customers\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-add-customer\"\n    },\n    {\n      title: \"Buat Laporan\",\n      icon: FileDown,\n      onClick: () => setLocation(\"/reports\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-generate-report\"\n    },\n  ];\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle>Aksi Cepat</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-3\">\n          {actions.map((action) => (\n            <Button\n              key={action.title}\n              variant={action.variant}\n              onClick={action.onClick}\n              className=\"w-full justify-start h-12\"\n              data-testid={action.testId}\n            >\n              <action.icon className=\"w-4 h-4 mr-3\" />\n              {action.title}\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1968},"client/src/components/dashboard/recent-transactions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, ShoppingCart, Wrench, CheckCircle, Clock } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function RecentTransactions() {\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n  });\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Transaksi Terbaru</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-transactions\">\n            Lihat Semua <ArrowRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : !transactions || transactions.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            Tidak ada transaksi. Mulai dengan membuat transaksi baru.\n          </p>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"text-xs text-muted-foreground uppercase border-b\">\n                <tr>\n                  <th className=\"text-left py-3\">ID</th>\n                  <th className=\"text-left py-3\">Pelanggan</th>\n                  <th className=\"text-left py-3\">Jenis</th>\n                  <th className=\"text-right py-3\">Jumlah</th>\n                  <th className=\"text-left py-3\">Status</th>\n                </tr>\n              </thead>\n              <tbody className=\"text-foreground\">\n                {transactions.slice(0, 5).map((transaction: any) => (\n                  <tr key={transaction.id} className=\"border-b hover:bg-muted/50 transition-colors\">\n                    <td className=\"py-3 font-medium\" data-testid={`transaction-id-${transaction.id}`}>\n                      {transaction.transactionNumber || transaction.id}\n                    </td>\n                    <td className=\"py-3\">\n                      {transaction.customer?.name || \"Pelanggan Walk-in\"}\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge variant=\"outline\" className=\"flex items-center w-fit\">\n                        {transaction.type === 'sale' ? (\n                          <ShoppingCart className=\"w-3 h-3 mr-1\" />\n                        ) : (\n                          <Wrench className=\"w-3 h-3 mr-1\" />\n                        )}\n                        {transaction.type === 'sale' ? 'Penjualan' : 'Servis'}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3 text-right font-medium\">\n                      Rp {Number(transaction.total).toLocaleString('id-ID')}\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge variant=\"secondary\" className=\"flex items-center w-fit\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Selesai\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3573},"client/src/components/dashboard/service-status.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Laptop, Clock, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { formatDateShort } from '@shared/utils/timezone';\n\nexport default function ServiceStatus() {\n  const { data: serviceTickets, isLoading } = useQuery({\n    queryKey: [\"/api/service-tickets\"],\n    queryFn: async () => {\n      const response = await fetch('/api/service-tickets?active=true');\n      if (!response.ok) throw new Error('Failed to fetch service tickets');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'secondary';\n      case 'in_progress':\n        return 'default';\n      case 'completed':\n        return 'secondary';\n      case 'delivered':\n        return 'secondary';\n      default:\n        return 'destructive';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return Clock;\n      case 'in_progress':\n        return Clock;\n      case 'completed':\n        return CheckCircle;\n      case 'delivered':\n        return CheckCircle;\n      default:\n        return AlertTriangle;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'Menunggu';\n      case 'in_progress':\n        return 'Dikerjakan';\n      case 'completed':\n        return 'Selesai';\n      case 'delivered':\n        return 'Terkirim';\n      default:\n        return 'Tertunda';\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle>Status Servis</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : !serviceTickets || serviceTickets.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            Tidak ada tiket servis aktif.\n          </p>\n        ) : (\n          <div className=\"space-y-4\">\n            {serviceTickets.slice(0, 5).map((ticket: any) => {\n              const StatusIcon = getStatusIcon(ticket.status);\n              \n              return (\n                <div \n                  key={ticket.id} \n                  className=\"flex items-center justify-between p-3 rounded-md border hover:bg-muted/50 transition-colors\"\n                  data-testid={`service-ticket-${ticket.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                      <Laptop className=\"w-5 h-5 text-secondary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {ticket.customer?.name || \"Unknown Customer\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {ticket.deviceBrand} {ticket.deviceModel} - {ticket.problem}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge \n                      variant={getStatusColor(ticket.status)}\n                      className=\"flex items-center\"\n                    >\n                      <StatusIcon className=\"w-3 h-3 mr-1\" />\n                      {getStatusText(ticket.status)}\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {ticket.estimatedCompletion \n                        ? `Est: ${formatDateShort(ticket.estimatedCompletion)}`\n                        : \"No estimate\"\n                      }\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4218},"client/src/components/dashboard/stat-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  DollarSign, \n  Wrench, \n  AlertTriangle, \n  TrendingUp,\n  Package\n} from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  change: string;\n  icon: string;\n  color: \"primary\" | \"accent\" | \"destructive\" | \"secondary\";\n  \"data-testid\"?: string;\n}\n\nconst iconMap = {\n  \"money-bill-wave\": DollarSign,\n  \"tools\": Wrench,\n  \"exclamation-triangle\": AlertTriangle,\n  \"chart-line\": TrendingUp,\n  \"package\": Package,\n};\n\nconst colorMap = {\n  primary: \"bg-primary/10 text-primary\",\n  accent: \"bg-accent/10 text-accent\",\n  destructive: \"bg-destructive/10 text-destructive\",\n  secondary: \"bg-secondary/10 text-secondary\",\n};\n\nexport default function StatCard({ title, value, change, icon, color, ...props }: StatCardProps) {\n  const IconComponent = iconMap[icon as keyof typeof iconMap] || DollarSign;\n  \n  return (\n    <Card className=\"shadow-sm\" {...props}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n            <p className=\"text-sm text-accent mt-1\">\n              {change}\n            </p>\n          </div>\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorMap[color]}`}>\n            <IconComponent className=\"w-6 h-6\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1646},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Plus, User, ChevronDown } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  breadcrumb: string;\n  action?: React.ReactNode;\n}\n\nexport default function Header({ title, breadcrumb, action }: HeaderProps) {\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4 flex justify-between items-center shadow-sm\">\n      <div className=\"flex items-center space-x-4\">\n        <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"header-title\">\n          {title}\n        </h2>\n        <nav className=\"text-sm text-muted-foreground\" data-testid=\"header-breadcrumb\">\n          {breadcrumb}\n        </nav>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        {action}\n        \n        <div className=\"flex items-center space-x-3\">\n          <div className=\"text-right\">\n            <p className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n              {user?.firstName || user?.email || \"User\"}\n            </p>\n            <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n              {user?.role || \"Staf\"}\n            </p>\n          </div>\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <User className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <ChevronDown className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1877},"client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  ChartLine, \n  ScanBarcode, \n  Wrench, \n  Package, \n  PieChart, \n  Users, \n  Truck, \n  FileText, \n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  Laptop,\n  Shield,\n  UserCog,\n  Layers,\n  LogOut,\n  User,\n  ShoppingCart,\n  Clock\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst navigation = [\n  { name: \"Dasbor\", href: \"/\", icon: ChartLine, roles: [\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"] },\n  { name: \"Kasir\", href: \"/pos\", icon: ScanBarcode, roles: [\"admin\", \"kasir\", \"owner\"] },\n  { name: \"Servis\", href: \"/service\", icon: Wrench, roles: [\"admin\", \"teknisi\", \"owner\"] },\n  { name: \"Inventori\", href: \"/inventory\", icon: Package, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Pembelian\", href: \"/purchasing\", icon: ShoppingCart, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Keuangan & Gaji\", href: \"/finance-new\", icon: PieChart, roles: [\"admin\", \"finance\", \"owner\"] },\n  { name: \"Pelanggan\", href: \"/customers\", icon: Users, roles: [\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"] },\n  { name: \"Supplier\", href: \"/suppliers\", icon: Truck, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Pengguna\", href: \"/users\", icon: UserCog, roles: [\"admin\", \"owner\"] },\n  { name: \"Peran\", href: \"/roles\", icon: Shield, roles: [\"admin\", \"owner\"] },\n  { name: \"Laporan\", href: \"/reports\", icon: FileText, roles: [\"admin\", \"finance\", \"owner\"] },\n  { name: \"Pergerakan Stok\", href: \"/stock-movements\", icon: Layers, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Management Garansi\", href: \"/warranty\", icon: Clock, roles: [\"admin\", \"kasir\", \"teknisi\", \"owner\"] },\n  { name: \"Pengaturan\", href: \"/settings\", icon: Settings, roles: [\"admin\", \"owner\"] },\n];\n\nexport default function Sidebar() {\n  // Use localStorage to persist sidebar state\n  const [isCollapsed, setIsCollapsed] = useState(() => {\n    const saved = localStorage.getItem('sidebarCollapsed');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config'], // Changed key format\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    retry: false,\n  });\n\n  const userRole = (user as any)?.role || \"kasir\";\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logout Berhasil\",\n        description: \"Anda telah berhasil logout.\",\n      });\n      // Reload to trigger authentication state update\n      window.location.href = \"/\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Logout\",\n        description: error.message || \"Gagal logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Save sidebar state to localStorage when it changes\n  const toggleCollapsed = () => {\n    const newCollapsed = !isCollapsed;\n    setIsCollapsed(newCollapsed);\n    localStorage.setItem('sidebarCollapsed', JSON.stringify(newCollapsed));\n  };\n\n  const filteredNavigation = navigation.filter(item => \n    item.roles.includes(userRole)\n  );\n\n  return (\n    <aside \n      className={cn(\n        \"transition-all duration-300 bg-card border-r border-border flex flex-col shadow-sm\",\n        isCollapsed ? \"w-16\" : \"w-64\"\n      )}\n      data-testid=\"sidebar\"\n    >\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Laptop className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          {!isCollapsed && (\n            <div className=\"transition-opacity duration-300\">\n              <h1 className=\"text-lg font-semibold text-foreground\">{(storeConfig as any)?.name || 'LaptopPOS'}</h1>\n              <p className=\"text-xs text-muted-foreground\">Servis & Penjualan</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n        {filteredNavigation.map((item) => {\n          const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors cursor-pointer\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`nav-item-${item.name.toLowerCase()}`}\n              >\n                <item.icon className=\"w-5 h-5 flex-shrink-0\" />\n                {!isCollapsed && (\n                  <span className=\"transition-opacity duration-300\">{item.name}</span>\n                )}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"p-4 border-t border-border space-y-2\">\n        {/* User Info */}\n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-3 px-3 py-2 rounded-md bg-muted/50\">\n            <User className=\"w-4 h-4 text-muted-foreground\" />\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\">\n                {(user as any)?.username || (user as any)?.firstName || \"User\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {userRole}\n              </p>\n            </div>\n          </div>\n        )}\n        \n        {/* Logout Button */}\n        <Button\n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={handleLogout}\n          disabled={logoutMutation.isPending}\n          className={cn(\n            \"w-full flex items-center text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950\",\n            isCollapsed ? \"justify-center\" : \"justify-start space-x-3 px-3\"\n          )}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          {!isCollapsed && (\n            <span className=\"transition-opacity duration-300\">\n              {logoutMutation.isPending ? \"Keluar...\" : \"Keluar\"}\n            </span>\n          )}\n        </Button>\n        \n        {/* Collapse Button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={toggleCollapsed}\n          className=\"w-full flex items-center justify-center\"\n          data-testid=\"button-collapse-sidebar\"\n        >\n          {isCollapsed ? (\n            <ChevronRight className=\"w-4 h-4\" />\n          ) : (\n            <ChevronLeft className=\"w-4 h-4\" />\n          )}\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":7597},"client/src/components/pos/receipt-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Printer, Download, X } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { formatDateWithTime, formatDateShort } from '@shared/utils/timezone';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { useState } from \"react\";\n\ninterface ReceiptModalProps {\n  open: boolean;\n  onClose: () => void;\n  transaction: any;\n}\n\nconst paperSizes = {\n  'a4': { name: 'A4 - Printer Biasa', width: 210, type: 'standard' },\n  '58': { name: '58mm - Thermal Kecil', width: 58, type: 'thermal' },\n  '80': { name: '80mm - Thermal Standar', width: 80, type: 'thermal' },\n  '100': { name: '100mm - Thermal Besar', width: 100, type: 'thermal' },\n} as const;\n\ntype PaperSize = keyof typeof paperSizes;\n\nexport default function ReceiptModal({ open, onClose, transaction }: ReceiptModalProps) {\n  const [paperSize, setPaperSize] = useState<PaperSize>('a4');\n  const [isGenerating, setIsGenerating] = useState(false);\n\n\n  // Get store config for receipt header - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-receipt'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS', address: '', phone: '' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  if (!transaction) return null;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      // Wait a bit to ensure content is fully loaded\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const element = document.getElementById('purchase-receipt-content');\n      if (!element) {\n        console.error('Receipt element not found');\n        alert('Error: Receipt element not found. Please try again.');\n        return;\n      }\n\n      // Make sure element is visible\n      element.style.display = 'block';\n      element.style.visibility = 'visible';\n      \n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: true,\n        width: element.scrollWidth,\n        height: element.scrollHeight,\n      });\n\n      // Check if canvas has content\n      if (canvas.width === 0 || canvas.height === 0) {\n        console.error('Canvas is empty');\n        alert('Error: Failed to capture receipt content. Please try again.');\n        return;\n      }\n\n      const imgData = canvas.toDataURL('image/png');\n      const pageWidth = paperSizes[paperSize].width;\n      const pageHeight = paperSize === 'a4' ? 297 : (canvas.height / canvas.width) * pageWidth;\n      \n      const pdf = new jsPDF('p', 'mm', paperSize === 'a4' ? [148, 210] : [pageWidth, pageHeight]);\n      if (paperSize === 'a4') {\n        // For A5 size (half page), fit to page with margins\n        const margin = 4;\n        const availableWidth = 148 - (2 * margin); // A5 width\n        const scaledHeight = (canvas.height / canvas.width) * availableWidth;\n        pdf.addImage(imgData, 'PNG', margin, margin, availableWidth, scaledHeight);\n      } else {\n        pdf.addImage(imgData, 'PNG', 0, 0, pageWidth, pageHeight);\n      }\n      pdf.save(`Nota-Pembayaran-POS-${transaction.transactionNumber || transaction.id}-${paperSize === 'a4' ? 'A5' : pageWidth + 'mm'}.pdf`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      alert('Error generating PDF. Please try again or contact support.');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handlePrint = () => {\n    try {\n      // Ukuran kertas sesuai pilihan\n      const pageWidth = paperSizes[paperSize].width;\n      const fontSize = paperSize === 'a4' ? '12px' : \n                      paperSize === '58' ? '7px' : \n                      paperSize === '80' ? '8px' : '10px';\n      \n      const printStyle = `\n        <style id=\"thermal-print-style\">\n          @media print {\n            * { \n              visibility: hidden; \n              margin: 0 !important; \n              padding: 0 !important;\n              box-sizing: border-box;\n            }\n            #purchase-receipt-content, \n            #purchase-receipt-content * { \n              visibility: visible; \n            }\n            #purchase-receipt-content {\n              position: absolute;\n              left: 0;\n              top: 0;\n              width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              max-width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              font-family: ${paperSize === 'a4' ? '\"Arial\", sans-serif' : '\"Courier New\", monospace'};\n              font-size: ${paperSize === 'a4' ? '11px' : fontSize};\n              line-height: ${paperSize === 'a4' ? '1.4' : '1.2'};\n              color: #000;\n              background: #fff;\n              page-break-inside: avoid;\n              page-break-after: avoid;\n              page-break-before: avoid;\n              height: auto;\n              max-height: ${paperSize === 'a4' ? '270mm' : '280mm'};\n              padding: ${paperSize === 'a4' ? '8mm' : '3mm'};\n            }\n            .no-print { \n              display: none !important; \n            }\n            @page {\n              size: ${paperSize === 'a4' ? '148mm 210mm' : `${pageWidth}mm 300mm`};\n              margin: ${paperSize === 'a4' ? '4mm' : '1mm'};\n            }\n            .text-center { text-align: center; }\n            .font-bold { font-weight: bold; }\n            .flex { display: flex; }\n            .flex-1 { flex: 1; }\n            .justify-between { justify-content: space-between; }\n            .items-center { align-items: center; }\n            .border-t { \n              border-top: 1px dashed #333; \n              margin: ${paperSize === 'a4' ? '4px' : '2px'} 0 !important; \n            }\n            .border-solid { border-style: solid; }\n            .border-gray-800 { border-color: #333; }\n            .text-gray-600 { color: #666; }\n            .space-y-1 > * + * { margin-top: ${paperSize === 'a4' ? '2px' : '1px'} !important; }\n            .py-2 { padding: ${paperSize === 'a4' ? '3px' : '1px'} 0 !important; }\n            .my-2 { margin: ${paperSize === 'a4' ? '4px' : '2px'} 0 !important; }\n            h3 { \n              font-size: ${paperSize === 'a4' ? '16px' : fontSize}; \n              margin: ${paperSize === 'a4' ? '8px' : '3px'} 0 !important; \n              text-align: center;\n              font-weight: bold;\n            }\n            .header-spacing { \n              margin-bottom: ${paperSize === 'a4' ? '12px' : '6px'} !important; \n            }\n            .section-spacing { \n              margin: ${paperSize === 'a4' ? '8px' : '4px'} 0 !important; \n            }\n            p { margin: 0 !important; padding: 0 !important; }\n          }\n          @media screen {\n            #thermal-print-style { display: none; }\n          }\n        </style>\n      `;\n      \n      // Hapus style print lama jika ada\n      const oldStyle = document.getElementById('thermal-print-style');\n      if (oldStyle) oldStyle.remove();\n      \n      // Tambahkan CSS print baru\n      document.head.insertAdjacentHTML('beforeend', printStyle);\n      \n      // Print\n      window.print();\n      \n      // Restore setelah delay\n      setTimeout(() => {\n        const printStyleElement = document.getElementById('thermal-print-style');\n        if (printStyleElement) {\n          printStyleElement.remove();\n        }\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Terjadi kesalahan saat mencetak. Silakan coba lagi.');\n    }\n  };\n\n  const getReceiptWidth = () => {\n    switch (paperSize) {\n      case 'a4': return 'max-w-[500px]';\n      case '58': return 'max-w-[58mm]';\n      case '80': return 'max-w-[80mm]';\n      case '100': return 'max-w-[100mm]';\n      default: return 'max-w-[500px]';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (paperSize) {\n      case 'a4': return 'text-sm';\n      case '58': return 'text-xs';\n      case '80': return 'text-sm';\n      case '100': return 'text-base';\n      default: return 'text-sm';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"no-print\">\n          <DialogTitle>Nota Pembayaran POS</DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4\"\n            data-testid=\"button-close-receipt\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Paper Size Selector */}\n          <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg no-print\">\n            <Label htmlFor=\"paper-size\" className=\"font-medium\">Ukuran Kertas:</Label>\n            <Select value={paperSize} onValueChange={(value: PaperSize) => setPaperSize(value)}>\n              <SelectTrigger className=\"w-48\" id=\"paper-size\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"a4\">{paperSizes['a4'].name}</SelectItem>\n                <SelectItem value=\"58\">{paperSizes['58'].name}</SelectItem>\n                <SelectItem value=\"80\">{paperSizes['80'].name}</SelectItem>\n                <SelectItem value=\"100\">{paperSizes['100'].name}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 no-print\">\n            <Button \n              onClick={handlePrint} \n              className=\"flex-1\"\n              data-testid=\"button-print-receipt\"\n            >\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={generatePDF}\n              disabled={isGenerating}\n              className=\"flex-1\"\n              data-testid=\"button-download-receipt\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {isGenerating ? 'Generating...' : 'Download PDF'}\n            </Button>\n          </div>\n\n          <Separator className=\"no-print\" />\n\n          {/* Preview Receipt */}\n          <div className=\"flex justify-center\">\n            <div className={`${getReceiptWidth()} mx-auto bg-white border rounded-lg overflow-hidden shadow-lg`}>\n              <div \n                className=\"p-4 font-mono\" \n                id=\"purchase-receipt-content\"\n                style={{\n                  minHeight: '300px',\n                  display: 'block',\n                  visibility: 'visible',\n                  position: 'relative'\n                }}\n              >\n                {/* Store Header */}\n                <div className={`text-center header-spacing`}>\n                  <h3 className=\"font-bold\" data-testid=\"text-store-name\" style={{ \n                    fontSize: paperSize === 'a4' ? '16px' : \n                              paperSize === '58' ? '10px' : '12px',\n                    marginBottom: paperSize === 'a4' ? '3px' : '2px',\n                    letterSpacing: paperSize !== 'a4' ? '0.5px' : '1px',\n                    textTransform: 'uppercase'\n                  }}>\n                    {(storeConfig as any)?.name || 'LAPTOPPOS SERVICE CENTER'}\n                  </h3>\n                  <div className={paperSize === 'a4' ? 'text-sm' : 'text-xs'} style={{ \n                    fontSize: paperSize === 'a4' ? '10px' : \n                              paperSize === '58' ? '7px' : '8px',\n                    lineHeight: '1.2'\n                  }}>\n                    {(storeConfig as any)?.address && (\n                      <div data-testid=\"text-store-address\" style={{ marginBottom: '1px' }}>\n                        {paperSize === '58' && (storeConfig as any).address.length > 35 \n                          ? (storeConfig as any).address.substring(0, 35) + '...'\n                          : (storeConfig as any).address}\n                      </div>\n                    )}\n                    <div style={{ marginBottom: '2px' }}>\n                      {(storeConfig as any)?.phone && (\n                        <span data-testid=\"text-store-phone\">Tel: {(storeConfig as any).phone}</span>\n                      )}\n                      {paperSize === 'a4' && (storeConfig as any)?.email && (storeConfig as any)?.phone && <span> | </span>}\n                      {paperSize === 'a4' && (storeConfig as any)?.email && (\n                        <span data-testid=\"text-store-email\">Email: {(storeConfig as any).email}</span>\n                      )}\n                    </div>\n                  </div>\n                  <div style={{ \n                    marginTop: paperSize === 'a4' ? '6px' : '4px',\n                    fontSize: paperSize === 'a4' ? '11px' : \n                              paperSize === '58' ? '8px' : '9px',\n                    fontWeight: 'bold',\n                    borderTop: '1px dashed #333',\n                    borderBottom: '1px dashed #333',\n                    paddingTop: '2px',\n                    paddingBottom: '2px',\n                    marginBottom: '2px'\n                  }}>\n                    ═══ NOTA PENJUALAN ═══\n                  </div>\n                </div>\n\n                <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n                {/* Transaction Info */}\n                <div className={`${getTextSize()} space-y-1`}>\n                  <div className=\"flex justify-between\">\n                    <span>No. Transaksi:</span>\n                    <span data-testid=\"text-receipt-number\">\n                      {transaction.transactionNumber || transaction.id}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Tanggal:</span>\n                    <span data-testid=\"text-receipt-date\">\n                      {formatDateWithTime(transaction.createdAt || transaction.date || new Date())}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Kasir:</span>\n                    <span data-testid=\"text-cashier-name\">\n                      {transaction.user?.firstName || 'Admin'}\n                    </span>\n                  </div>\n                  {transaction.customer && (\n                    <div className=\"flex justify-between\">\n                      <span>Pelanggan:</span>\n                      <span data-testid=\"text-customer-name\">\n                        {transaction.customer.name || transaction.customer}\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n                {/* Items */}\n                <div className={`${getTextSize()} space-y-1`}>\n                  {(transaction.items && transaction.items.length > 0) ? (\n                    transaction.items.map((item: any, index: number) => {\n                      \n                      // Handle different data structures\n                      const itemName = item.product?.name || item.name || 'Unknown Product';\n                      const unitPrice = parseFloat(item.unitPrice || item.price || '0');\n                      const quantity = item.quantity || 1;\n                      const totalPrice = parseFloat(item.totalPrice || '0') || (unitPrice * quantity);\n                      \n                      return (\n                        <div key={item.id || index} className=\"space-y-1\">\n                          <div className=\"font-bold\" data-testid={`item-name-${index}`}>\n                            {itemName}\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>{quantity} x {formatCurrency(unitPrice)}</span>\n                            <span data-testid={`item-total-${index}`}>\n                              {formatCurrency(totalPrice)}\n                            </span>\n                          </div>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <div className=\"text-center py-2 text-muted-foreground\">\n                      Tidak ada item ditemukan\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"border-t border-solid border-gray-800 my-2\"></div>\n\n                {/* Totals */}\n                <div className={`${getTextSize()} space-y-1`}>\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span data-testid=\"receipt-subtotal\">\n                      {formatCurrency(Number(transaction.subtotal || 0))}\n                    </span>\n                  </div>\n                  {transaction.taxAmount && Number(transaction.taxAmount) > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span>Pajak:</span>\n                      <span data-testid=\"receipt-tax\">\n                        {formatCurrency(Number(transaction.taxAmount))}\n                      </span>\n                    </div>\n                  )}\n                  {transaction.discountAmount && Number(transaction.discountAmount) > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span>Diskon:</span>\n                      <span data-testid=\"receipt-discount\">\n                        -{formatCurrency(Number(transaction.discountAmount))}\n                      </span>\n                    </div>\n                  )}\n                  <div className={`flex justify-between font-bold ${getTextSize()}`}>\n                    <span>TOTAL:</span>\n                    <span data-testid=\"receipt-total\">\n                      {formatCurrency(Number(transaction.total || 0))}\n                    </span>\n                  </div>\n                  {transaction.paymentMethod && (\n                    <div className=\"flex justify-between\">\n                      <span>Pembayaran:</span>\n                      <span data-testid=\"receipt-payment\">\n                        {transaction.paymentMethod === 'cash' ? 'Tunai' : \n                         transaction.paymentMethod === 'card' ? 'Kartu' : \n                         transaction.paymentMethod === 'transfer' ? 'Transfer' : \n                         transaction.paymentMethod}\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Warranty Information */}\n                {transaction.warrantyDuration && (\n                  <>\n                    <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n                    <div className={`${getTextSize()} space-y-1`}>\n                      <div className=\"text-center font-bold\" style={{\n                        fontSize: paperSize === 'a4' ? '11px' : '8px',\n                        marginBottom: '2px'\n                      }}>\n                        === INFORMASI GARANSI ===\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Durasi Garansi:</span>\n                        <span data-testid=\"warranty-duration\">\n                          {transaction.warrantyDuration === 999999 ? 'Unlimited' : `${transaction.warrantyDuration} hari`}\n                        </span>\n                      </div>\n                      {transaction.warrantyStartDate && (\n                        <div className=\"flex justify-between\">\n                          <span>Mulai Garansi:</span>\n                          <span data-testid=\"warranty-start\">\n                            {formatDateShort(transaction.warrantyStartDate)}\n                          </span>\n                        </div>\n                      )}\n                      {transaction.warrantyEndDate && transaction.warrantyDuration !== 999999 && (\n                        <div className=\"flex justify-between\">\n                          <span>Berakhir:</span>\n                          <span data-testid=\"warranty-end\">\n                            {formatDateShort(transaction.warrantyEndDate)}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </>\n                )}\n\n                <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n                {/* Footer */}\n                <div className=\"text-center section-spacing border-t border-dashed border-gray-400 pt-2\" style={{\n                  fontSize: paperSize === 'a4' ? '9px' : \n                           paperSize === '58' ? '6px' : '7px',\n                  color: '#666',\n                  marginTop: paperSize === 'a4' ? '8px' : '4px'\n                }}>\n                  <div style={{ marginBottom: '2px', fontWeight: 'bold' }}>\n                    {paperSize === '58' ? '★ TERIMA KASIH ★' : '★ TERIMA KASIH ATAS PEMBELIAN ANDA ★'}\n                  </div>\n                  <div style={{ marginBottom: '1px' }}>\n                    {paperSize === '58' ? 'Barang dibeli tidak dapat dikembalikan' : 'Barang yang sudah dibeli tidak dapat dikembalikan'}\n                  </div>\n                  <div style={{ marginBottom: '1px' }}>\n                    Simpan nota ini sebagai bukti pembelian\n                  </div>\n                  {paperSize === 'a4' && (\n                    <div style={{ marginBottom: '1px' }}>\n                      Komplain maksimal 7 hari setelah pembelian\n                    </div>\n                  )}\n                  <div data-testid=\"text-print-date\" style={{ \n                    marginTop: '3px',\n                    fontSize: paperSize === 'a4' ? '8px' : \n                              paperSize === '58' ? '5px' : '6px',\n                    borderTop: '1px dashed #ccc',\n                    paddingTop: '2px'\n                  }}>\n                    Cetak: {formatDateWithTime(new Date())}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":22959},"client/src/components/pos/transaction-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plus, Minus, X, Search, Barcode, Percent, DollarSign } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CustomerCreateModal from \"@/components/customers/customer-create-modal\";\nimport { getCurrentJakartaTime, formatDateLong } from '@shared/utils/timezone';\n\ninterface TransactionModalProps {\n  open: boolean;\n  onClose: () => void;\n  onComplete: (transaction: any) => void;\n}\n\ninterface TransactionItem {\n  productId: string;\n  name: string;\n  sellingPrice: number;\n  quantity: number;\n  stock?: number;\n}\n\nexport default function TransactionModal({ open, onClose, onComplete }: TransactionModalProps) {\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n  const [customerSearch, setCustomerSearch] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"cash\");\n  const [items, setItems] = useState<TransactionItem[]>([]);\n  const [productSearch, setProductSearch] = useState(\"\");\n  const [selectedProducts, setSelectedProducts] = useState<any[]>([]);\n  const [showCustomerCreateModal, setShowCustomerCreateModal] = useState(false);\n  \n  // Discount states\n  const [discountType, setDiscountType] = useState<\"percentage\" | \"rupiah\">(\"percentage\");\n  const [discountValue, setDiscountValue] = useState<number>(0);\n  const [showDiscountSection, setShowDiscountSection] = useState(false);\n  \n  // Warranty states\n  const [warrantyDuration, setWarrantyDuration] = useState<number>(0);\n  const [showWarrantySection, setShowWarrantySection] = useState(false);\n  \n  const { toast } = useToast();\n\n  // Fetch products - with real-time refresh capability\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n    staleTime: 0, // Allow immediate refetch\n    refetchOnWindowFocus: true, // Refetch when window gains focus\n    refetchOnMount: true, // Refetch when component mounts\n  });\n\n  // Fetch store config for tax rate - WITH PROPER REFRESH\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-transaction'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { taxRate: 0 };\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes instead of Infinity\n    refetchOnWindowFocus: true,\n    retry: false,\n  });\n\n  // Fetch customers\n  const { data: customers = [], isLoading: customersLoading } = useQuery({\n    queryKey: [\"/api/customers\", customerSearch],\n    queryFn: async () => {\n      const url = customerSearch ? `/api/customers?search=${encodeURIComponent(customerSearch)}` : '/api/customers';\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch customers');\n      return response.json();\n    },\n  });\n\n  // Filter customers based on search\n  const filteredCustomers = customers.filter((customer: any) =>\n    customer.name.toLowerCase().includes(customerSearch.toLowerCase()) ||\n    customer.phone?.toLowerCase().includes(customerSearch.toLowerCase()) ||\n    customer.email?.toLowerCase().includes(customerSearch.toLowerCase())\n  );\n\n  // Filter products based on search\n  const filteredProducts = Array.isArray(products) ? products.filter((product: any) =>\n    product.name.toLowerCase().includes(productSearch.toLowerCase()) ||\n    product.barcode?.toLowerCase().includes(productSearch.toLowerCase())\n  ) : [];\n\n  // Create transaction mutation\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/transactions', data);\n    },\n    onSuccess: (data) => {\n      console.log('Transaction created successfully:', data);\n      toast({\n        title: \"Success\",\n        description: \"Transaction completed successfully\",\n      });\n      onComplete(data);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedCustomer(null);\n    setCustomerSearch(\"\");\n    setPaymentMethod(\"cash\");\n    setItems([]);\n    setProductSearch(\"\");\n    setSelectedProducts([]);\n    setShowCustomerCreateModal(false);\n    setDiscountType(\"percentage\");\n    setDiscountValue(0);\n    setShowDiscountSection(false);\n    setWarrantyDuration(0);\n    setShowWarrantySection(false);\n  };\n\n  const selectCustomer = (customer: any) => {\n    setSelectedCustomer(customer);\n    setCustomerSearch(\"\");\n  };\n\n  const handleCustomerCreated = (newCustomer: any) => {\n    console.log('handleCustomerCreated called with:', newCustomer);\n    \n    // Force close the create modal first\n    setShowCustomerCreateModal(false);\n    \n    // Then immediately select the new customer\n    setSelectedCustomer(newCustomer);\n    setCustomerSearch(\"\");\n    \n    console.log('Customer selected:', newCustomer);\n    \n    // Show confirmation toast\n    toast({\n      title: \"Success\",\n      description: `Customer ${newCustomer?.name || 'baru'} terpilih untuk transaksi`,\n    });\n  };\n\n  const updateQuantity = (productId: string, delta: number) => {\n    setItems(prev => prev.map(item => {\n      if (item.productId === productId) {\n        const newQuantity = Math.max(0, item.quantity + delta);\n        // Check stock limit\n        if (newQuantity > (item.stock || 0)) {\n          toast({\n            title: \"Stock Insufficient\",\n            description: `Only ${item.stock} units available`,\n            variant: \"destructive\",\n          });\n          return item;\n        }\n        return { ...item, quantity: newQuantity };\n      }\n      return item;\n    }).filter(item => item.quantity > 0));\n  };\n\n  const removeItem = (productId: string) => {\n    setItems(prev => prev.filter(item => item.productId !== productId));\n  };\n\n  const addProductToCart = (product: any) => {\n    if (product.stock <= 0) {\n      toast({\n        title: \"Out of Stock\",\n        description: `${product.name} is out of stock`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Adding product to cart\n    \n    const existingItem = items.find(item => item.productId === product.id);\n    if (existingItem) {\n      updateQuantity(product.id, 1);\n    } else {\n      const sellingPrice = typeof product.sellingPrice === 'string' \n        ? parseFloat(product.sellingPrice) \n        : (product.sellingPrice || 0);\n      \n      const newItem: TransactionItem = {\n        productId: product.id,\n        name: product.name,\n        sellingPrice: sellingPrice,\n        quantity: 1,\n        stock: product.stock,\n      };\n      // Item created successfully\n      setItems(prev => [...prev, newItem]);\n    }\n    setProductSearch(\"\");\n  };\n\n  const subtotal = items.reduce((sum, item) => sum + (item.sellingPrice * item.quantity), 0);\n  \n  // Calculate discount amount\n  let discountAmount = 0;\n  if (discountValue > 0) {\n    if (discountType === \"percentage\") {\n      discountAmount = subtotal * (discountValue / 100);\n    } else {\n      discountAmount = discountValue;\n    }\n    // Ensure discount doesn't exceed subtotal\n    discountAmount = Math.min(discountAmount, subtotal);\n  }\n  \n  const discountedSubtotal = subtotal - discountAmount;\n  const taxRate = Number(storeConfig?.taxRate || 11) / 100;\n  const tax = discountedSubtotal * taxRate;\n  const total = discountedSubtotal + tax;\n\n  const handleProcessTransaction = () => {\n    if (items.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one item to the transaction\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!paymentMethod) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a payment method\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate warranty data if warranty is provided\n    let warrantyData = {};\n    if (warrantyDuration > 0) {\n      const startDate = getCurrentJakartaTime();\n      const endDate = warrantyDuration >= 9999 \n        ? null // Unlimited warranty\n        : new Date(startDate.getTime() + warrantyDuration * 24 * 60 * 60 * 1000);\n      \n      warrantyData = {\n        warrantyDuration: warrantyDuration,\n        warrantyStartDate: startDate.toISOString(),\n        warrantyEndDate: endDate ? endDate.toISOString() : null\n      };\n    }\n\n    const transactionData = {\n      transaction: {\n        type: 'sale' as const,\n        customerId: selectedCustomer?.id || null,\n        paymentMethod: paymentMethod || 'cash',\n        subtotal: Math.round(subtotal).toString(),\n        taxAmount: Math.round(tax).toString(),\n        discountAmount: Math.round(discountAmount).toString(),\n        total: Math.round(total).toString(),\n        notes: `POS Sale - ${items.length} items${selectedCustomer ? ` for ${selectedCustomer.name}` : ''}${warrantyDuration > 0 ? ` dengan garansi ${warrantyDuration} hari` : ''}`,\n        ...warrantyData,\n      },\n      items: items.map(item => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        unitPrice: Math.round(item.sellingPrice).toString(),\n        totalPrice: Math.round(item.sellingPrice * item.quantity).toString(),\n      })),\n    };\n\n    createTransactionMutation.mutate(transactionData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Transaksi Baru</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 overflow-y-auto\">\n          {/* Customer and Payment */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"customer\">Pelanggan</Label>\n              <div className=\"space-y-2\">\n                {selectedCustomer ? (\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-md\">\n                    <div>\n                      <div className=\"font-medium\">{selectedCustomer.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedCustomer.phone} • {selectedCustomer.email}\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedCustomer(null)}\n                      data-testid=\"button-remove-customer\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"customer\"\n                        placeholder=\"Cari pelanggan berdasarkan nama, telepon, atau email...\"\n                        value={customerSearch}\n                        onChange={(e) => setCustomerSearch(e.target.value)}\n                        data-testid=\"input-customer-search\"\n                      />\n                      <Search className=\"absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    </div>\n                    \n                    {/* Customer Search Results */}\n                    {customerSearch && (\n                      <Card className=\"max-h-48 overflow-y-auto\">\n                        <CardContent className=\"p-2\">\n                          {customersLoading ? (\n                            <div className=\"text-center py-4\">Loading customers...</div>\n                          ) : filteredCustomers.length > 0 ? (\n                            <div className=\"space-y-1\">\n                              {filteredCustomers.slice(0, 8).map((customer: any) => (\n                                <Button\n                                  key={customer.id}\n                                  variant=\"ghost\"\n                                  className=\"w-full justify-start h-auto p-3\"\n                                  onClick={() => selectCustomer(customer)}\n                                  data-testid={`button-select-customer-${customer.id}`}\n                                >\n                                  <div className=\"text-left\">\n                                    <div className=\"font-medium\">{customer.name}</div>\n                                    <div className=\"text-sm text-muted-foreground\">\n                                      {customer.phone} • {customer.email}\n                                    </div>\n                                  </div>\n                                </Button>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className=\"text-center py-4 space-y-2\">\n                              <div className=\"text-muted-foreground\">Tidak ada customer ditemukan</div>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setShowCustomerCreateModal(true)}\n                                data-testid=\"button-add-new-customer\"\n                              >\n                                <Plus className=\"w-4 h-4 mr-2\" />\n                                Tambah Customer Baru\n                              </Button>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    )}\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-muted-foreground\">\n                        Optional: Leave empty for walk-in customer\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setShowCustomerCreateModal(true)}\n                        data-testid=\"button-add-customer\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Tambah Customer\n                      </Button>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"payment\">Metode Pembayaran</Label>\n              <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                <SelectTrigger data-testid=\"select-payment-method\">\n                  <SelectValue placeholder=\"Pilih metode pembayaran\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cash\">Tunai</SelectItem>\n                  <SelectItem value=\"transfer\">Transfer Bank</SelectItem>\n                  <SelectItem value=\"credit\">Kartu Kredit</SelectItem>\n                  <SelectItem value=\"debit\">Kartu Debit</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Product Selection */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"product\">Tambah Produk</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"product\"\n                  placeholder=\"Pindai barcode atau cari produk...\"\n                  value={productSearch}\n                  onChange={(e) => setProductSearch(e.target.value)}\n                  data-testid=\"input-product-search\"\n                />\n                <Search className=\"absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              </div>\n              \n              {/* Product Search Results */}\n              {productSearch && (\n                <Card className=\"max-h-64 overflow-y-auto\">\n                  <CardContent className=\"p-2\">\n                    {productsLoading ? (\n                      <div className=\"text-center py-4\">Loading products...</div>\n                    ) : filteredProducts.length > 0 ? (\n                      <div className=\"space-y-1\">\n                        {filteredProducts.slice(0, 10).map((product: any) => (\n                          <Button\n                            key={product.id}\n                            variant=\"ghost\"\n                            className=\"w-full justify-between h-auto p-3\"\n                            onClick={() => addProductToCart(product)}\n                            disabled={product.stock <= 0}\n                            data-testid={`button-add-product-${product.id}`}\n                          >\n                            <div className=\"text-left\">\n                              <div className=\"font-medium\">{product.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Stock: {product.stock} | Rp {product.sellingPrice?.toLocaleString('id-ID')}\n                              </div>\n                            </div>\n                            <Plus className=\"w-4 h-4\" />\n                          </Button>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        No products found\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Selected Items */}\n            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n              {items.map((item) => (\n                <Card key={item.productId} className=\"p-3\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{item.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Rp {(item.sellingPrice || 0).toLocaleString('id-ID')} × {item.quantity} = Rp {(item.sellingPrice * item.quantity).toLocaleString('id-ID')}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.productId, -1)}\n                        data-testid={`button-decrease-${item.productId}`}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span data-testid={`text-quantity-${item.productId}`} className=\"w-8 text-center\">\n                        {item.quantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.productId, 1)}\n                        data-testid={`button-increase-${item.productId}`}\n                        disabled={item.quantity >= (item.stock || 0)}\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.productId)}\n                        data-testid={`button-remove-${item.productId}`}\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n              \n              {items.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No items added yet. Search and add products above.\n                </div>\n              )}\n            </div>\n\n            {/* Discount Section */}\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label>Diskon</Label>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowDiscountSection(!showDiscountSection)}\n                    data-testid=\"button-toggle-discount\"\n                  >\n                    {showDiscountSection ? \"Tutup Diskon\" : \"Tambah Diskon\"}\n                  </Button>\n                </div>\n                \n                {showDiscountSection && (\n                  <div className=\"space-y-3 border-t pt-3\">\n                    {/* Discount Type Toggle */}\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant={discountType === \"percentage\" ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setDiscountType(\"percentage\")}\n                        data-testid=\"button-discount-percentage\"\n                      >\n                        <Percent className=\"w-3 h-3 mr-1\" />\n                        Persen (%)\n                      </Button>\n                      <Button\n                        variant={discountType === \"rupiah\" ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setDiscountType(\"rupiah\")}\n                        data-testid=\"button-discount-rupiah\"\n                      >\n                        <DollarSign className=\"w-3 h-3 mr-1\" />\n                        Rupiah (Rp)\n                      </Button>\n                    </div>\n                    \n                    {/* Discount Value Input */}\n                    <div className=\"space-y-1\">\n                      <Label htmlFor=\"discountValue\">\n                        Nilai Diskon {discountType === \"percentage\" ? \"(%)\" : \"(Rp)\"}\n                      </Label>\n                      <Input\n                        id=\"discountValue\"\n                        type=\"number\"\n                        min=\"0\"\n                        max={discountType === \"percentage\" ? \"100\" : subtotal.toString()}\n                        value={discountValue || \"\"}\n                        onChange={(e) => setDiscountValue(Number(e.target.value) || 0)}\n                        placeholder={discountType === \"percentage\" ? \"Masukkan persen (0-100)\" : \"Masukkan jumlah rupiah\"}\n                        data-testid=\"input-discount-value\"\n                      />\n                      {discountType === \"percentage\" && discountValue > 0 && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          = Rp {((subtotal * (discountValue / 100))).toLocaleString('id-ID')}\n                        </div>\n                      )}\n                      {discountAmount > 0 && (\n                        <div className=\"text-xs text-green-600\">\n                          Diskon aktif: Rp {discountAmount.toLocaleString('id-ID')}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n\n            {/* Warranty Section */}\n            <Card className=\"p-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label>Garansi Produk</Label>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowWarrantySection(!showWarrantySection)}\n                    data-testid=\"button-toggle-warranty\"\n                  >\n                    {showWarrantySection ? \"Tutup Garansi\" : \"Tambah Garansi\"}\n                  </Button>\n                </div>\n                \n                {showWarrantySection && (\n                  <div className=\"space-y-3 border-t pt-3\">\n                    <div className=\"space-y-1\">\n                      <Label htmlFor=\"warrantyDuration\">\n                        Lama Garansi (Hari)\n                      </Label>\n                      <Input\n                        id=\"warrantyDuration\"\n                        type=\"number\"\n                        min=\"0\"\n                        value={warrantyDuration || \"\"}\n                        onChange={(e) => setWarrantyDuration(Number(e.target.value) || 0)}\n                        placeholder=\"Masukkan lama garansi dalam hari\"\n                        data-testid=\"input-warranty-duration\"\n                      />\n                      <div className=\"text-xs text-muted-foreground space-y-1\">\n                        <p>Contoh: 30 = 30 hari, 365 = 1 tahun, 9999 = tanpa batas</p>\n                        {warrantyDuration > 0 && (\n                          <div className=\"text-orange-600\">\n                            <p><strong>Durasi:</strong> {\n                              warrantyDuration >= 9999 \n                                ? \"Tanpa batas waktu\" \n                                : warrantyDuration === 1 \n                                ? \"1 hari\" \n                                : warrantyDuration < 30 \n                                ? `${warrantyDuration} hari`\n                                : warrantyDuration < 365\n                                ? `${Math.floor(warrantyDuration / 30)} bulan ${warrantyDuration % 30} hari`\n                                : `${Math.floor(warrantyDuration / 365)} tahun ${Math.floor((warrantyDuration % 365) / 30)} bulan`\n                            }</p>\n                            {warrantyDuration < 9999 && (\n                              <p><strong>Berakhir:</strong> {\n                                formatDateLong(new Date(Date.now() + warrantyDuration * 24 * 60 * 60 * 1000))\n                              }</p>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n\n            {/* Transaction Summary */}\n            <Card className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Subtotal:</span>\n                  <span data-testid=\"text-subtotal\">Rp {subtotal.toLocaleString('id-ID')}</span>\n                </div>\n                {discountAmount > 0 && (\n                  <div className=\"flex justify-between text-sm text-green-600\">\n                    <span>Diskon ({discountType === \"percentage\" ? `${discountValue}%` : \"Rupiah\"}):</span>\n                    <span data-testid=\"text-discount\">-Rp {discountAmount.toLocaleString('id-ID')}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between text-sm\">\n                  <span>Tax ({((storeConfig as any)?.taxRate || 11)}%):</span>\n                  <span data-testid=\"text-tax\">Rp {tax.toLocaleString('id-ID')}</span>\n                </div>\n                <div className=\"flex justify-between font-semibold border-t pt-2\">\n                  <span>Total:</span>\n                  <span data-testid=\"text-total\">Rp {total.toLocaleString('id-ID')}</span>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose} \n            disabled={createTransactionMutation.isPending}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleProcessTransaction}\n            disabled={createTransactionMutation.isPending || items.length === 0}\n            data-testid=\"button-process-transaction\"\n          >\n            {createTransactionMutation.isPending ? \"Processing...\" : \"Process Transaction\"}\n          </Button>\n        </div>\n      </DialogContent>\n\n      <CustomerCreateModal\n        open={showCustomerCreateModal}\n        onClose={() => setShowCustomerCreateModal(false)}\n        onCustomerCreated={handleCustomerCreated}\n      />\n    </Dialog>\n  );\n}\n","size_bytes":28734},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/finance-new.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, TrendingUp, TrendingDown, DollarSign, Users, Calendar, Eye } from \"lucide-react\";\nimport { formatDateShort, createDatabaseTimestamp } from '@shared/utils/timezone';\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\ninterface FinancialTransaction {\n  id: string;\n  type: 'income' | 'expense' | 'transfer';\n  category: string;\n  subcategory?: string;\n  amount: string;\n  description: string;\n  referenceType?: string;\n  reference?: string;\n  paymentMethod?: string;\n  tags?: string[];\n  status: string;\n  userId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface FinancialSummary {\n  totalIncome: string;\n  totalExpense: string;\n  totalRefunds: string; // Track refunds separately from income\n  netProfit: string;\n  transactionCount: number;\n  inventoryValue: string;\n  inventoryCount: number;\n  breakdown: {\n    categories: { [key: string]: { income: number; expense: number; count: number } };\n    paymentMethods: { [key: string]: number };\n    sources: { [key: string]: { amount: number; count: number } };\n    subcategories: { [key: string]: { amount: number; type: string; count: number } };\n    inventory: { [key: string]: { value: number; stock: number; avgCost: number } };\n  };\n}\n\ninterface Employee {\n  id: string;\n  employeeNumber: string;\n  name: string;\n  position: string;\n  department?: string;\n  salary: string;\n  salaryType: string;\n  status: string;\n  joinDate: string;\n  phone?: string;\n  createdAt: string;\n}\n\ninterface PayrollRecord {\n  id: string;\n  employeeId: string;\n  payrollNumber: string;\n  periodStart: string;\n  periodEnd: string;\n  baseSalary: string;\n  overtime: string;\n  bonus: string;\n  allowances: string;\n  grossPay: string;\n  taxDeduction: string;\n  socialSecurity: string;\n  healthInsurance: string;\n  otherDeductions: string;\n  netPay: string;\n  status: 'draft' | 'approved' | 'paid';\n  paidDate?: string;\n  notes?: string;\n  createdAt: string;\n}\n\nconst TRANSACTION_CATEGORIES = {\n  income: [\n    'Sales Revenue',\n    'Service Revenue', \n    'Rental Income',\n    'Investment Income',\n    'Other Income'\n  ],\n  expense: [\n    'Operational Expense',\n    'Daily Operations',\n    'Payroll',\n    'Rent & Utilities',\n    'Marketing',\n    'Travel & Transport',\n    'Office Supplies',\n    'Technology',\n    'Professional Services',\n    'Insurance',\n    'Taxes',\n    'Other Expense'\n  ],\n  transfer: [\n    'Account Transfer',\n    'Internal Transfer',\n    'Cash Movement',\n    'Bank Transfer'\n  ]\n};\n\nconst DAILY_OPERATIONS_SUBCATEGORIES = [\n  'Listrik & Air',\n  'Bensin & Transportasi',\n  'Makan & Minum',\n  'Salam Tempel (Gratifikasi)',\n  'Titipan Dibawah Meja',\n  'Perlengkapan Kantor',\n  'Komunikasi & Internet',\n  'Lain-lain'\n];\n\nconst PAYMENT_METHODS = [\n  'cash',\n  'bank_transfer',\n  'credit_card',\n  'debit_card',\n  'e_wallet',\n  'check'\n];\n\nexport default function FinanceNew() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Transaction Form State\n  const [transactionForm, setTransactionForm] = useState({\n    type: 'income' as 'income' | 'expense' | 'transfer',\n    category: '',\n    subcategory: '',\n    amount: '',\n    description: '',\n    paymentMethod: 'cash',\n    tags: [] as string[]\n  });\n\n  // Employee Form State\n  const [employeeForm, setEmployeeForm] = useState({\n    name: '',\n    position: '',\n    department: '',\n    salary: '',\n    salaryType: 'monthly' as 'monthly' | 'weekly' | 'daily' | 'hourly',\n    joinDate: createDatabaseTimestamp().split('T')[0],\n    phone: '',\n    bankAccount: '',\n    address: ''\n  });\n\n  // Payroll Form State\n  const [payrollForm, setPayrollForm] = useState({\n    employeeId: '',\n    periodStart: '',\n    periodEnd: '',\n    baseSalary: '',\n    overtime: '0',\n    bonus: '0',\n    allowances: '0',\n    taxDeduction: '0',\n    socialSecurity: '0',\n    healthInsurance: '0',\n    otherDeductions: '0'\n  });\n\n  // Date filters\n  const [dateFilter, setDateFilter] = useState({\n    startDate: '',\n    endDate: ''\n  });\n\n  // Dialog states\n  const [showTransactionDialog, setShowTransactionDialog] = useState(false);\n  const [showEmployeeDialog, setShowEmployeeDialog] = useState(false);\n  const [showPayrollDialog, setShowPayrollDialog] = useState(false);\n\n  // Fetch financial summary\n  const { data: summary } = useQuery<FinancialSummary>({\n    queryKey: ['/api/finance/summary', dateFilter.startDate, dateFilter.endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (dateFilter.startDate) params.append('startDate', dateFilter.startDate);\n      if (dateFilter.endDate) params.append('endDate', dateFilter.endDate);\n      return fetch(`/api/finance/summary?${params}`).then(res => res.json());\n    }\n  });\n\n  // Fetch transactions\n  const { data: transactions } = useQuery<FinancialTransaction[]>({\n    queryKey: ['/api/finance/transactions', dateFilter.startDate, dateFilter.endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (dateFilter.startDate) params.append('startDate', dateFilter.startDate);\n      if (dateFilter.endDate) params.append('endDate', dateFilter.endDate);\n      return fetch(`/api/finance/transactions?${params}`).then(res => res.json());\n    }\n  });\n\n  // Fetch employees\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: ['/api/employees'],\n    queryFn: () => fetch('/api/employees').then(res => res.json())\n  });\n\n  // Fetch payroll records\n  const { data: payrolls } = useQuery<PayrollRecord[]>({\n    queryKey: ['/api/payroll'],\n    queryFn: () => fetch('/api/payroll').then(res => res.json())\n  });\n\n  // Create transaction mutation\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: typeof transactionForm) => {\n      return apiRequest('POST', '/api/finance/transactions', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Transaksi berhasil dibuat\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/summary'] });\n      setShowTransactionDialog(false);\n      setTransactionForm({\n        type: 'income',\n        category: '',\n        subcategory: '',\n        amount: '',\n        description: '',\n        paymentMethod: 'cash',\n        tags: []\n      });\n    },\n    onError: () => {\n      toast({ title: \"Gagal membuat transaksi\", variant: \"destructive\" });\n    }\n  });\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: typeof employeeForm) => {\n      return apiRequest('POST', '/api/employees', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Karyawan berhasil ditambahkan\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      setShowEmployeeDialog(false);\n      setEmployeeForm({\n        name: '',\n        position: '',\n        department: '',\n        salary: '',\n        salaryType: 'monthly',\n        joinDate: createDatabaseTimestamp().split('T')[0],\n        phone: '',\n        bankAccount: '',\n        address: ''\n      });\n    },\n    onError: () => {\n      toast({ title: \"Gagal menambahkan karyawan\", variant: \"destructive\" });\n    }\n  });\n\n  // Create payroll mutation\n  const createPayrollMutation = useMutation({\n    mutationFn: async (data: typeof payrollForm) => {\n      return apiRequest('POST', '/api/payroll', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Payroll berhasil dibuat\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      setShowPayrollDialog(false);\n      setPayrollForm({\n        employeeId: '',\n        periodStart: '',\n        periodEnd: '',\n        baseSalary: '',\n        overtime: '0',\n        bonus: '0',\n        allowances: '0',\n        taxDeduction: '0',\n        socialSecurity: '0',\n        healthInsurance: '0',\n        otherDeductions: '0'\n      });\n    },\n    onError: () => {\n      toast({ title: \"Gagal membuat payroll\", variant: \"destructive\" });\n    }\n  });\n\n  // Update payroll status mutation\n  const updatePayrollStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest('PUT', `/api/payroll/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({ title: \"Status payroll berhasil diupdate\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/summary'] });\n      // Invalidate all reports queries so payroll expenses appear immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/reports'] });\n    },\n    onError: () => {\n      toast({ title: \"Gagal mengupdate status payroll\", variant: \"destructive\" });\n    }\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0\n    }).format(num);\n  };\n\n  const getStatusBadge = (status: string, type?: string) => {\n    const statusConfig = {\n      'confirmed': { variant: 'default' as const, text: 'Dikonfirmasi' },\n      'pending': { variant: 'secondary' as const, text: 'Menunggu' },\n      'cancelled': { variant: 'destructive' as const, text: 'Dibatalkan' },\n      'draft': { variant: 'secondary' as const, text: 'Konsep' },\n      'approved': { variant: 'default' as const, text: 'Disetujui' },\n      'paid': { variant: 'default' as const, text: 'Dibayar' },\n      'active': { variant: 'default' as const, text: 'Aktif' },\n      'inactive': { variant: 'secondary' as const, text: 'Tidak Aktif' }\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || \n                  { variant: 'outline' as const, text: status };\n\n    return <Badge variant={config.variant}>{config.text}</Badge>;\n  };\n\n  // Helper function untuk menampilkan transaksi dengan benar (aset = positif, expense = negatif)\n  const getTransactionDisplay = (transaction: FinancialTransaction) => {\n    // Handle refunds separately - they should NOT be shown as income\n    if (transaction.category === 'Returns and Allowances' || \n        transaction.category?.includes('Refund') ||\n        transaction.description?.toLowerCase().includes('refund')) {\n      return {\n        sign: '-',\n        color: 'text-orange-600',\n        badge: 'secondary',\n        label: 'Refund/Retur'\n      };\n    }\n    \n    if (transaction.type === 'income') {\n      return {\n        sign: '+',\n        color: 'text-green-600',\n        badge: 'default',\n        label: 'Pemasukan'\n      };\n    } else {\n      // Cek apakah ini transaksi aset atau expense berdasarkan kategori dan deskripsi\n      const isAsset = \n        // Deteksi langsung berdasarkan kategori exact match\n        transaction.category === 'Cost of Goods Sold' ||\n        transaction.category === 'Inventory Purchase' ||\n        transaction.subcategory === 'Cost of Goods Sold' ||\n        transaction.subcategory === 'Inventory Purchase' ||\n        // Deteksi berdasarkan kata kunci dalam kategori/deskripsi\n        [\n          'cost of goods sold', 'inventory', 'persediaan', 'stock', 'barang',\n          'peralatan', 'equipment', 'kendaraan', 'vehicle', 'furniture', \n          'aset', 'assets', 'fixed asset', 'kas', 'cash', 'bank', 'tunai',\n          'piutang', 'receivable', 'tagihan', 'purchase'\n        ].some(keyword => \n          transaction.category?.toLowerCase().includes(keyword) || \n          transaction.subcategory?.toLowerCase().includes(keyword) || \n          transaction.description?.toLowerCase().includes(keyword)\n        );\n      \n      if (isAsset) {\n        return {\n          sign: '+',\n          color: 'text-blue-600',\n          badge: 'secondary',\n          label: 'Aset'\n        };\n      } else {\n        return {\n          sign: '-',\n          color: 'text-red-600', \n          badge: 'destructive',\n          label: 'Pengeluaran'\n        };\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Keuangan & Payroll\" breadcrumb=\"Beranda / Keuangan & Payroll\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n        <div className=\"flex gap-2\">\n          <Input\n            type=\"date\"\n            value={dateFilter.startDate}\n            onChange={(e) => setDateFilter(prev => ({ ...prev, startDate: e.target.value }))}\n            placeholder=\"Tanggal Mulai\"\n            className=\"w-40\"\n          />\n          <Input\n            type=\"date\"\n            value={dateFilter.endDate}\n            onChange={(e) => setDateFilter(prev => ({ ...prev, endDate: e.target.value }))}\n            placeholder=\"Tanggal Akhir\"\n            className=\"w-40\"\n          />\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pendapatan</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {formatCurrency(summary?.totalIncome || '0')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pengeluaran</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {formatCurrency(summary?.totalExpense || '0')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Laba Bersih</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {formatCurrency(summary?.netProfit || '0')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Nilai Aset Inventory</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {formatCurrency(summary?.inventoryValue || '0')}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {summary?.inventoryCount || 0} item stok\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Transaksi</CardTitle>\n            <Calendar className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {summary?.transactionCount || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {summary?.breakdown?.categories ? (() => {\n                const incomeCount = Object.values(summary.breakdown.categories)\n                  .filter(cat => cat.income > 0)\n                  .reduce((sum, cat) => sum + cat.count, 0);\n                const expenseCount = Object.values(summary.breakdown.categories)\n                  .filter(cat => cat.expense > 0)\n                  .reduce((sum, cat) => sum + cat.count, 0);\n                return `Income: ${incomeCount} | Expense: ${expenseCount}`;\n              })() : 'Income: 0 | Expense: 0'}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Finance Calculation Explanation */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Penjelasan Perhitungan Keuangan</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-green-600\">Sumber Pemasukan:</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Ongkos tenaga kerja service</li>\n                <li>• Penjualan spare parts (harga jual)</li>\n                <li>• Transaksi penjualan langsung</li>\n                <li>• Pendapatan lain-lain</li>\n              </ul>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-red-600\">Sumber Pengeluaran:</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Biaya modal spare parts (harga beli)</li>\n                <li>• Gaji karyawan (payroll)</li>\n                <li>• Biaya operasional</li>\n                <li>• Pengeluaran lain-lain</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"mt-4 space-y-3\">\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Catatan:</strong> Saat service ticket diselesaikan, sistem otomatis mencatat 3 transaksi: \n                biaya modal parts sebagai pengeluaran, penjualan parts sebagai pemasukan, dan ongkos kerja sebagai pemasukan.\n              </p>\n            </div>\n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <p className=\"text-sm text-green-800\">\n                <strong>Data Terkini:</strong> Total Pendapatan mencakup semua pemasukan dari penjualan produk (POS) dan layanan service. \n                Saat ini ada {summary?.breakdown?.sources ? \n                  Object.values(summary.breakdown.sources).reduce((sum, source) => sum + source.count, 0) : 0} transaksi pemasukan \n                dengan total {formatCurrency(summary?.totalIncome || '0')}.\n              </p>\n            </div>\n            <div className=\"p-3 bg-orange-50 rounded-lg\">\n              <p className=\"text-sm text-orange-800\">\n                <strong>Nilai Aset Inventory:</strong> Dihitung berdasarkan jumlah stok × harga beli untuk setiap produk aktif. \n                Total ini menunjukkan berapa nilai modal yang tertanam dalam persediaan barang.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Breakdown Detail */}\n      {summary?.breakdown && (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {/* Categories Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Breakdown per Kategori</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(summary.breakdown.categories).map(([category, data]) => (\n                  <div key={category} className=\"flex flex-col space-y-1\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">{category}</span>\n                      <span className=\"text-xs text-muted-foreground\">({data.count} transaksi)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"text-xs text-green-600\">\n                        +{formatCurrency(data.income.toString())}\n                      </div>\n                      <div className=\"text-xs text-red-600\">\n                        -{formatCurrency(data.expense.toString())}\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Bersih: {formatCurrency((data.income - data.expense).toString())}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Sources Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Breakdown per Sumber</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(summary.breakdown.sources).map(([source, data]) => (\n                  <div key={source} className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium\">\n                        {source === 'service' ? 'Service/Perbaikan' :\n                         source === 'service_labor' ? 'Ongkos Kerja' :\n                         source === 'service_parts_cost' ? 'Biaya Parts' :\n                         source === 'service_parts_revenue' ? 'Penjualan Parts' :\n                         source === 'payroll' ? 'Gaji Karyawan' : source}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.count} transaksi\n                      </span>\n                    </div>\n                    <div className=\"text-sm font-medium\">\n                      {formatCurrency(data.amount.toString())}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Subcategories Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Breakdown per Subkategori</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(summary.breakdown.subcategories).map(([subcategory, data]) => (\n                  <div key={subcategory} className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium\">{subcategory}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.count} transaksi\n                      </span>\n                    </div>\n                    <div className=\"flex flex-col items-end\">\n                      <div className={`text-sm font-medium ${\n                        // Refund should NOT be treated as income\n                        data.type === 'income' && subcategory !== 'Returns and Allowances' && !subcategory.includes('Refund') \n                          ? 'text-green-600' \n                          : 'text-red-600'\n                      }`}>\n                        {data.type === 'income' && subcategory !== 'Returns and Allowances' && !subcategory.includes('Refund') \n                          ? '+' : '-'}{formatCurrency(data.amount.toString())}\n                      </div>\n                      <Badge variant={\n                        data.type === 'income' && subcategory !== 'Returns and Allowances' && !subcategory.includes('Refund') \n                          ? 'default' \n                          : 'destructive'\n                      } className=\"text-xs\">\n                        {data.type === 'income' && subcategory !== 'Returns and Allowances' && !subcategory.includes('Refund') \n                          ? 'Pemasukan' \n                          : subcategory === 'Returns and Allowances' || subcategory.includes('Refund') \n                            ? 'Refund/Retur' \n                            : 'Pengeluaran'}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Inventory Assets Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Aset Inventory Detail</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {Object.entries(summary.breakdown.inventory).map(([productName, data]) => (\n                  <div key={productName} className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium truncate max-w-32\" title={productName}>\n                        {productName}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.stock} stok • {formatCurrency(data.avgCost.toString())} avg\n                      </span>\n                    </div>\n                    <div className=\"text-sm font-medium text-orange-600\">\n                      {formatCurrency(data.value.toString())}\n                    </div>\n                  </div>\n                ))}\n                {Object.keys(summary.breakdown.inventory).length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    Tidak ada inventory dengan stok\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"transactions\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"transactions\">Transaksi Keuangan</TabsTrigger>\n          <TabsTrigger value=\"employees\">Karyawan</TabsTrigger>\n          <TabsTrigger value=\"payroll\">Payroll</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"transactions\" className=\"space-y-4\">\n          {/* Quick Daily Expense Entry */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Pengeluaran Harian Cepat</CardTitle>\n              <CardDescription>\n                Tambah pengeluaran operasional sehari-hari dengan cepat\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                {DAILY_OPERATIONS_SUBCATEGORIES.map((subcat) => (\n                  <Button\n                    key={subcat}\n                    variant=\"outline\"\n                    className=\"h-20 flex flex-col items-center justify-center text-xs\"\n                    onClick={() => {\n                      setTransactionForm({\n                        type: 'expense',\n                        category: 'Daily Operations',\n                        subcategory: subcat,\n                        amount: '',\n                        description: subcat,\n                        paymentMethod: 'cash',\n                        tags: []\n                      });\n                      setShowTransactionDialog(true);\n                    }}\n                    data-testid={`quick-expense-${subcat.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                  >\n                    <span className=\"font-medium text-center\">{subcat}</span>\n                  </Button>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Transaksi Keuangan</h2>\n            <Dialog open={showTransactionDialog} onOpenChange={setShowTransactionDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-transaction\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Tambah Transaksi\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Tambah Transaksi Keuangan</DialogTitle>\n                  <DialogDescription>\n                    Buat transaksi pemasukan atau pengeluaran baru\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"type\">Tipe Transaksi</Label>\n                    <Select\n                      value={transactionForm.type}\n                      onValueChange={(value: 'income' | 'expense' | 'transfer') => \n                        setTransactionForm(prev => ({ ...prev, type: value, category: '' }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"income\">Pemasukan</SelectItem>\n                        <SelectItem value=\"expense\">Pengeluaran</SelectItem>\n                        <SelectItem value=\"transfer\">Transfer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"category\">Kategori</Label>\n                    <Select\n                      value={transactionForm.category}\n                      onValueChange={(value) => \n                        setTransactionForm(prev => ({ ...prev, category: value, subcategory: '' }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Pilih kategori\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {TRANSACTION_CATEGORIES[transactionForm.type]?.map((cat: string) => (\n                          <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {transactionForm.category === 'Daily Operations' && (\n                    <div>\n                      <Label htmlFor=\"subcategory\">Sub-Kategori</Label>\n                      <Select\n                        value={transactionForm.subcategory}\n                        onValueChange={(value) => \n                          setTransactionForm(prev => ({ ...prev, subcategory: value }))\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Pilih sub-kategori\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {DAILY_OPERATIONS_SUBCATEGORIES.map((subcat) => (\n                            <SelectItem key={subcat} value={subcat}>{subcat}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  <div>\n                    <Label htmlFor=\"amount\">Jumlah</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      value={transactionForm.amount}\n                      onChange={(e) => \n                        setTransactionForm(prev => ({ ...prev, amount: e.target.value }))\n                      }\n                      placeholder=\"0\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Deskripsi</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={transactionForm.description}\n                      onChange={(e) => \n                        setTransactionForm(prev => ({ ...prev, description: e.target.value }))\n                      }\n                      placeholder=\"Deskripsi transaksi\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"paymentMethod\">Metode Pembayaran</Label>\n                    <Select\n                      value={transactionForm.paymentMethod}\n                      onValueChange={(value) => \n                        setTransactionForm(prev => ({ ...prev, paymentMethod: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {PAYMENT_METHODS.map((method) => (\n                          <SelectItem key={method} value={method}>\n                            {method.replace('_', ' ').toUpperCase()}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowTransactionDialog(false)}\n                      className=\"flex-1\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      onClick={() => createTransactionMutation.mutate(transactionForm)}\n                      disabled={createTransactionMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {createTransactionMutation.isPending ? 'Menyimpan...' : 'Simpan'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Tanggal</TableHead>\n                    <TableHead>Tipe</TableHead>\n                    <TableHead>Kategori</TableHead>\n                    <TableHead>Deskripsi</TableHead>\n                    <TableHead>Jumlah</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {Array.isArray(transactions) ? transactions.map((transaction) => (\n                    <TableRow key={transaction.id}>\n                      <TableCell>\n                        {formatDateShort(transaction.createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        {(() => {\n                          const display = getTransactionDisplay(transaction);\n                          return (\n                            <Badge variant={display.badge as any}>\n                              {display.label}\n                            </Badge>\n                          );\n                        })()}\n                        {transaction.paymentMethod && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            {transaction.paymentMethod === 'cash' ? 'Tunai' :\n                             transaction.paymentMethod === 'transfer' ? 'Transfer' :\n                             transaction.paymentMethod === 'bank_transfer' ? 'Transfer Bank' :\n                             transaction.paymentMethod === 'inventory' ? 'Stok/Persediaan' : transaction.paymentMethod}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">{transaction.category}</div>\n                        {transaction.subcategory && (\n                          <div className=\"text-sm text-muted-foreground\">{transaction.subcategory}</div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"truncate font-medium\">{transaction.description}</div>\n                        {transaction.referenceType && (\n                          <div className=\"text-xs text-blue-600 mt-1\">\n                            Dari: {transaction.referenceType === 'service' ? 'Service Ticket' :\n                                  transaction.referenceType === 'service_labor' ? 'Ongkos Kerja Service' :\n                                  transaction.referenceType === 'service_parts_cost' ? 'Biaya Parts Service' :\n                                  transaction.referenceType === 'service_parts_revenue' ? 'Penjualan Parts Service' :\n                                  transaction.referenceType === 'payroll' ? 'Payroll' : transaction.referenceType}\n                            {transaction.reference && ` (${transaction.reference.slice(0, 8)}...)`}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className={getTransactionDisplay(transaction).color}>\n                        {getTransactionDisplay(transaction).sign}{formatCurrency(transaction.amount)}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(transaction.status)}\n                      </TableCell>\n                    </TableRow>\n                  )) : (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        Tidak ada transaksi\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"employees\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Data Karyawan</h2>\n            <Dialog open={showEmployeeDialog} onOpenChange={setShowEmployeeDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Tambah Karyawan\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Tambah Karyawan Baru</DialogTitle>\n                  <DialogDescription>\n                    Tambahkan karyawan baru ke sistem payroll\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Nama Lengkap</Label>\n                    <Input\n                      id=\"name\"\n                      value={employeeForm.name}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, name: e.target.value }))\n                      }\n                      placeholder=\"Nama lengkap karyawan\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"position\">Posisi</Label>\n                    <Input\n                      id=\"position\"\n                      value={employeeForm.position}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, position: e.target.value }))\n                      }\n                      placeholder=\"Posisi/jabatan\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"department\">Departemen</Label>\n                    <Input\n                      id=\"department\"\n                      value={employeeForm.department}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, department: e.target.value }))\n                      }\n                      placeholder=\"Departemen\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"salary\">Gaji</Label>\n                    <Input\n                      id=\"salary\"\n                      type=\"number\"\n                      value={employeeForm.salary}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, salary: e.target.value }))\n                      }\n                      placeholder=\"Gaji pokok\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"salaryType\">Tipe Gaji</Label>\n                    <Select\n                      value={employeeForm.salaryType}\n                      onValueChange={(value: 'monthly' | 'weekly' | 'daily' | 'hourly') => \n                        setEmployeeForm(prev => ({ ...prev, salaryType: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"monthly\">Bulanan</SelectItem>\n                        <SelectItem value=\"weekly\">Mingguan</SelectItem>\n                        <SelectItem value=\"daily\">Harian</SelectItem>\n                        <SelectItem value=\"hourly\">Per Jam</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"joinDate\">Tanggal Bergabung</Label>\n                    <Input\n                      id=\"joinDate\"\n                      type=\"date\"\n                      value={employeeForm.joinDate}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, joinDate: e.target.value }))\n                      }\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phone\">Nomor Telepon</Label>\n                    <Input\n                      id=\"phone\"\n                      value={employeeForm.phone}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, phone: e.target.value }))\n                      }\n                      placeholder=\"Nomor telepon\"\n                    />\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowEmployeeDialog(false)}\n                      className=\"flex-1\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      onClick={() => createEmployeeMutation.mutate(employeeForm)}\n                      disabled={createEmployeeMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {createEmployeeMutation.isPending ? 'Menyimpan...' : 'Simpan'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nomor Karyawan</TableHead>\n                    <TableHead>Nama</TableHead>\n                    <TableHead>Posisi</TableHead>\n                    <TableHead>Departemen</TableHead>\n                    <TableHead>Gaji</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Bergabung</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {employees?.map((employee) => (\n                    <TableRow key={employee.id}>\n                      <TableCell className=\"font-mono\">{employee.employeeNumber}</TableCell>\n                      <TableCell className=\"font-medium\">{employee.name}</TableCell>\n                      <TableCell>{employee.position}</TableCell>\n                      <TableCell>{employee.department || '-'}</TableCell>\n                      <TableCell>{formatCurrency(employee.salary)}</TableCell>\n                      <TableCell>{getStatusBadge(employee.status)}</TableCell>\n                      <TableCell>\n                        {formatDateShort(employee.joinDate)}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payroll\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Manajemen Gaji</h2>\n            <Dialog open={showPayrollDialog} onOpenChange={setShowPayrollDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Buat Payroll\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Buat Payroll Baru</DialogTitle>\n                  <DialogDescription>\n                    Buat payroll untuk periode tertentu\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"employeeId\">Karyawan</Label>\n                    <Select\n                      value={payrollForm.employeeId}\n                      onValueChange={(value) => \n                        setPayrollForm(prev => ({ ...prev, employeeId: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Pilih karyawan\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {employees?.map((employee) => (\n                          <SelectItem key={employee.id} value={employee.id}>\n                            {employee.name} - {employee.position}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"periodStart\">Periode Mulai</Label>\n                      <Input\n                        id=\"periodStart\"\n                        type=\"date\"\n                        value={payrollForm.periodStart}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, periodStart: e.target.value }))\n                        }\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"periodEnd\">Periode Akhir</Label>\n                      <Input\n                        id=\"periodEnd\"\n                        type=\"date\"\n                        value={payrollForm.periodEnd}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, periodEnd: e.target.value }))\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"baseSalary\">Gaji Pokok</Label>\n                    <Input\n                      id=\"baseSalary\"\n                      type=\"number\"\n                      value={payrollForm.baseSalary}\n                      onChange={(e) => \n                        setPayrollForm(prev => ({ ...prev, baseSalary: e.target.value }))\n                      }\n                      placeholder=\"0\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"overtime\">Lembur</Label>\n                      <Input\n                        id=\"overtime\"\n                        type=\"number\"\n                        value={payrollForm.overtime}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, overtime: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"bonus\">Bonus</Label>\n                      <Input\n                        id=\"bonus\"\n                        type=\"number\"\n                        value={payrollForm.bonus}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, bonus: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"allowances\">Tunjangan</Label>\n                    <Input\n                      id=\"allowances\"\n                      type=\"number\"\n                      value={payrollForm.allowances}\n                      onChange={(e) => \n                        setPayrollForm(prev => ({ ...prev, allowances: e.target.value }))\n                      }\n                      placeholder=\"0\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"taxDeduction\">Potongan Pajak</Label>\n                      <Input\n                        id=\"taxDeduction\"\n                        type=\"number\"\n                        value={payrollForm.taxDeduction}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, taxDeduction: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"socialSecurity\">BPJS</Label>\n                      <Input\n                        id=\"socialSecurity\"\n                        type=\"number\"\n                        value={payrollForm.socialSecurity}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, socialSecurity: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowPayrollDialog(false)}\n                      className=\"flex-1\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      onClick={() => createPayrollMutation.mutate(payrollForm)}\n                      disabled={createPayrollMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {createPayrollMutation.isPending ? 'Menyimpan...' : 'Simpan'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nomor Payroll</TableHead>\n                    <TableHead>Karyawan</TableHead>\n                    <TableHead>Periode</TableHead>\n                    <TableHead>Gaji Kotor</TableHead>\n                    <TableHead>Potongan</TableHead>\n                    <TableHead>Gaji Bersih</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {payrolls?.map((payroll) => (\n                    <TableRow key={payroll.id}>\n                      <TableCell className=\"font-mono\">{payroll.payrollNumber}</TableCell>\n                      <TableCell>\n                        {employees?.find(e => e.id === payroll.employeeId)?.name || 'Tidak Diketahui'}\n                      </TableCell>\n                      <TableCell>\n                        {formatDateShort(payroll.periodStart)} - {formatDateShort(payroll.periodEnd)}\n                      </TableCell>\n                      <TableCell>{formatCurrency(payroll.grossPay)}</TableCell>\n                      <TableCell>\n                        {formatCurrency(\n                          (Number(payroll.taxDeduction || 0) + \n                           Number(payroll.socialSecurity || 0) + \n                           Number(payroll.healthInsurance || 0) + \n                           Number(payroll.otherDeductions || 0)).toString()\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-semibold\">\n                        {formatCurrency(payroll.netPay)}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(payroll.status)}</TableCell>\n                      <TableCell>\n                        {payroll.status === 'draft' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updatePayrollStatusMutation.mutate({\n                              id: payroll.id,\n                              status: 'approved'\n                            })}\n                          >\n                            Setujui\n                          </Button>\n                        )}\n                        {payroll.status === 'approved' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => updatePayrollStatusMutation.mutate({\n                              id: payroll.id,\n                              status: 'paid'\n                            })}\n                          >\n                            Bayar\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":55093},"server/financeManager.ts":{"content":"import { db } from \"./db\";\nimport { \n  financialRecords, \n  employees, \n  payrollRecords, \n  attendanceRecords,\n  products,\n  accounts,\n  journalEntries,\n  journalEntryLines,\n  transactions,\n  transactionItems,\n  serviceTickets,\n  type InsertFinancialRecord,\n  type FinancialRecord,\n  type InsertEmployee,\n  type Employee,\n  type InsertPayrollRecord,\n  type PayrollRecord,\n  type InsertAttendanceRecord,\n  type AttendanceRecord,\n  type JournalEntry,\n  type InsertJournalEntry,\n  type JournalEntryLine,\n  type InsertJournalEntryLine,\n  type Account\n} from \"@shared/schema\";\nimport { eq, and, gte, lte, desc, sum, count, sql } from \"drizzle-orm\";\n\n// Default Chart of Accounts codes - Enhanced with Indonesian accounting terminology\nconst ACCOUNT_CODES = {\n  // Assets (Aset)\n  CASH: '1111', // Kas\n  BANK: '1112', // Bank\n  ACCOUNTS_RECEIVABLE: '1120', // Piutang Dagang\n  INVENTORY: '1130', // Persediaan Barang\n  DAMAGED_GOODS_INVENTORY: '1135', // Persediaan Barang Rusak\n  \n  // Liabilities (Kewajiban)\n  ACCOUNTS_PAYABLE: '2110', // Hutang Dagang\n  CUSTOMER_DEPOSITS: '2120', // Uang Muka Pelanggan\n  \n  // Revenue (Pendapatan)\n  SALES_REVENUE: '4110', // Pendapatan Penjualan\n  SERVICE_REVENUE: '4210', // Pendapatan Jasa Service\n  \n  // Expenses (Beban)\n  COST_OF_GOODS_SOLD: '5110', // Harga Pokok Penjualan\n  WARRANTY_EXPENSE: '5120', // Beban Garansi\n  DAMAGED_GOODS_LOSS: '5130', // Kerugian Barang Rusak\n  PAYROLL_EXPENSE: '5210', // Beban Gaji\n  OTHER_EXPENSE: '5290', // Beban Lain-lain\n};\n\nexport class FinanceManager {\n  // Helper method to get account by code\n  private async getAccountByCode(code: string): Promise<Account | null> {\n    const [account] = await db.select().from(accounts).where(eq(accounts.code, code)).limit(1);\n    return account || null;\n  }\n\n  // Initialize default chart of accounts\n  async initializeDefaultAccounts(): Promise<{ success: boolean; message: string; accountsCreated: number }> {\n    try {\n      const { defaultAccounts } = await import('./defaultAccounts');\n      \n      let accountsCreated = 0;\n      \n      for (const account of defaultAccounts) {\n        try {\n          // Check if account already exists\n          const existing = await this.getAccountByCode(account.code);\n          \n          if (!existing) {\n            // Insert new account\n            await db.insert(accounts).values({\n              code: account.code,\n              name: account.name,\n              type: account.type,\n              subtype: account.subtype,\n              normalBalance: account.normalBalance,\n              parentCode: account.parentCode || null,\n              description: account.description,\n              balance: '0'\n            });\n            accountsCreated++;\n            console.log(`✅ Created account: ${account.code} - ${account.name}`);\n          }\n        } catch (error) {\n          console.error(`❌ Error creating account ${account.code}:`, error);\n          // Continue with other accounts\n        }\n      }\n      \n      return {\n        success: true,\n        message: `Successfully initialized chart of accounts. Created ${accountsCreated} new accounts.`,\n        accountsCreated\n      };\n    } catch (error) {\n      console.error('Error initializing default accounts:', error);\n      return {\n        success: false,\n        message: `Failed to initialize default accounts: ${(error as Error).message}`,\n        accountsCreated: 0\n      };\n    }\n  }\n  \n  // Create Journal Entry with double-entry bookkeeping\n  async createJournalEntry(\n    data: {\n      description: string;\n      reference?: string;\n      referenceType?: string;\n      lines: {\n        accountCode: string;\n        description: string;\n        debitAmount?: string;\n        creditAmount?: string;\n      }[];\n      userId: string;\n    },\n    tx?: any\n  ): Promise<{ success: boolean; journalEntry?: JournalEntry; error?: string }> {\n    const dbClient = tx || db;\n    try {\n      // Validate that debits equal credits\n      const totalDebits = data.lines.reduce((sum, line) => sum + Number(line.debitAmount || 0), 0);\n      const totalCredits = data.lines.reduce((sum, line) => sum + Number(line.creditAmount || 0), 0);\n      \n      if (Math.abs(totalDebits - totalCredits) > 0.01) {\n        return {\n          success: false,\n          error: `Debits (${totalDebits}) must equal Credits (${totalCredits})`\n        };\n      }\n      \n      const totalAmount = totalDebits;\n      const journalNumber = `JE-${Date.now()}`;\n      \n      // Create journal entry\n      const [journalEntry] = await dbClient.insert(journalEntries).values({\n        journalNumber,\n        date: new Date(),\n        description: data.description,\n        reference: data.reference,\n        referenceType: data.referenceType,\n        totalAmount: totalAmount.toString(),\n        status: 'posted',\n        userId: data.userId\n      }).returning();\n      \n      // Create journal entry lines and update account balances\n      for (const lineData of data.lines) {\n        const account = await this.getAccountByCode(lineData.accountCode);\n        if (!account) {\n          return {\n            success: false,\n            error: `Account with code ${lineData.accountCode} not found`\n          };\n        }\n        \n        // Create journal entry line\n        await dbClient.insert(journalEntryLines).values({\n          journalEntryId: journalEntry.id,\n          accountId: account.id,\n          description: lineData.description,\n          debitAmount: lineData.debitAmount || '0',\n          creditAmount: lineData.creditAmount || '0'\n        });\n        \n        // Update account balance based on normal balance\n        const debitAmount = Number(lineData.debitAmount || 0);\n        const creditAmount = Number(lineData.creditAmount || 0);\n        let balanceChange = 0;\n        \n        if (account.normalBalance === 'debit') {\n          balanceChange = debitAmount - creditAmount;\n        } else {\n          balanceChange = creditAmount - debitAmount;\n        }\n        \n        await dbClient.update(accounts)\n          .set({ \n            balance: sql`${accounts.balance} + ${balanceChange}`,\n            updatedAt: new Date()\n          })\n          .where(eq(accounts.id, account.id));\n      }\n      \n      return { success: true, journalEntry };\n      \n    } catch (error) {\n      console.error('Error creating journal entry:', error);\n      return {\n        success: false,\n        error: `Failed to create journal entry: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n  \n  // Enhanced transaction creation with automatic journal entries\n  async createTransactionWithJournal(\n    data: {\n      type: 'income' | 'expense' | 'transfer';\n      category: string;\n      subcategory?: string;\n      amount: string;\n      description: string;\n      referenceType?: string;\n      reference?: string;\n      paymentMethod?: string;\n      tags?: string[];\n      userId: string;\n    },\n    tx?: any\n  ): Promise<{ success: boolean; transaction?: FinancialRecord; error?: string }> {\n    const dbClient = tx || db;\n    try {\n      // Create the financial record\n      const [transaction] = await dbClient.insert(financialRecords).values({\n        type: data.type,\n        category: data.category,\n        subcategory: data.subcategory,\n        amount: data.amount,\n        description: data.description,\n        reference: data.reference,\n        referenceType: data.referenceType,\n        paymentMethod: data.paymentMethod,\n        tags: data.tags,\n        status: 'confirmed',\n        userId: data.userId\n      }).returning();\n      \n      // Create corresponding journal entries\n      const amount = Number(data.amount);\n      let journalLines: Array<{\n        accountCode: string;\n        description: string;\n        debitAmount?: string;\n        creditAmount?: string;\n      }> = [];\n      \n      // Map categories to accounts and create journal entries\n      if (data.type === 'income') {\n        // Income: Debit Cash/Bank, Credit Revenue\n        const cashAccount = data.paymentMethod === 'cash' ? ACCOUNT_CODES.CASH : ACCOUNT_CODES.BANK;\n        const revenueAccount = data.category === 'Service Revenue' ? ACCOUNT_CODES.SERVICE_REVENUE : ACCOUNT_CODES.SALES_REVENUE;\n        \n        journalLines = [\n          {\n            accountCode: cashAccount,\n            description: `Receive payment - ${data.description}`,\n            debitAmount: amount.toString()\n          },\n          {\n            accountCode: revenueAccount,\n            description: data.description,\n            creditAmount: amount.toString()\n          }\n        ];\n      } else if (data.type === 'expense') {\n        // Expense: Debit Expense, Credit Cash/Bank\n        const cashAccount = data.paymentMethod === 'cash' ? ACCOUNT_CODES.CASH : ACCOUNT_CODES.BANK;\n        const expenseAccount = data.category === 'Payroll' ? ACCOUNT_CODES.PAYROLL_EXPENSE : ACCOUNT_CODES.OTHER_EXPENSE;\n        \n        journalLines = [\n          {\n            accountCode: expenseAccount,\n            description: data.description,\n            debitAmount: amount.toString()\n          },\n          {\n            accountCode: cashAccount,\n            description: `Payment - ${data.description}`,\n            creditAmount: amount.toString()\n          }\n        ];\n      }\n      \n      // Create journal entry if we have lines\n      if (journalLines.length > 0) {\n        const journalResult = await this.createJournalEntry({\n          description: `${data.type.toUpperCase()}: ${data.description}`,\n          reference: transaction.id,\n          referenceType: 'financial_transaction',\n          lines: journalLines,\n          userId: data.userId\n        }, tx);\n        \n        if (!journalResult.success) {\n          console.warn('Failed to create journal entry:', journalResult.error);\n        } else {\n          // Link the journal entry to the financial record\n          await dbClient.update(financialRecords)\n            .set({ journalEntryId: journalResult.journalEntry?.id })\n            .where(eq(financialRecords.id, transaction.id));\n        }\n      }\n      \n      return { success: true, transaction };\n      \n    } catch (error) {\n      console.error('Error creating transaction with journal:', error);\n      return {\n        success: false,\n        error: `Failed to create transaction: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n  // Standard Accounting Reports\n  async getBalanceSheet(asOfDate?: Date): Promise<{\n    assets: { [category: string]: { accounts: Array<{ name: string; balance: number; code: string }>, total: number } },\n    liabilities: { [category: string]: { accounts: Array<{ name: string; balance: number; code: string }>, total: number } },\n    equity: { [category: string]: { accounts: Array<{ name: string; balance: number; code: string }>, total: number } },\n    totalAssets: number,\n    totalLiabilities: number,\n    totalEquity: number,\n    balanceCheck: boolean\n  }> {\n    const asOf = asOfDate || new Date();\n    \n    // Get all accounts with their current balances\n    const allAccounts = await db.select({\n      id: accounts.id,\n      code: accounts.code,\n      name: accounts.name,\n      type: accounts.type,\n      subtype: accounts.subtype,\n      balance: accounts.balance,\n      normalBalance: accounts.normalBalance\n    })\n    .from(accounts)\n    .where(and(\n      eq(accounts.isActive, true),\n      sql`${accounts.type} IN ('asset', 'liability', 'equity')`\n    ))\n    .orderBy(accounts.code);\n    \n    const assets: any = {};\n    const liabilities: any = {};\n    const equity: any = {};\n    \n    let totalAssets = 0;\n    let totalLiabilities = 0;\n    let totalEquity = 0;\n    \n    allAccounts.forEach(account => {\n      const balance = Number(account.balance);\n      const accountInfo = {\n        name: account.name,\n        balance: balance,\n        code: account.code\n      };\n      \n      if (account.type === 'asset') {\n        const category = account.subtype || 'Other Assets';\n        if (!assets[category]) {\n          assets[category] = { accounts: [], total: 0 };\n        }\n        assets[category].accounts.push(accountInfo);\n        assets[category].total += balance;\n        totalAssets += balance;\n      } else if (account.type === 'liability') {\n        const category = account.subtype || 'Other Liabilities';\n        if (!liabilities[category]) {\n          liabilities[category] = { accounts: [], total: 0 };\n        }\n        liabilities[category].accounts.push(accountInfo);\n        liabilities[category].total += balance;\n        totalLiabilities += balance;\n      } else if (account.type === 'equity') {\n        const category = account.subtype || 'Owner Equity';\n        if (!equity[category]) {\n          equity[category] = { accounts: [], total: 0 };\n        }\n        equity[category].accounts.push(accountInfo);\n        equity[category].total += balance;\n        totalEquity += balance;\n      }\n    });\n    \n    const balanceCheck = Math.abs(totalAssets - (totalLiabilities + totalEquity)) < 0.01;\n    \n    return {\n      assets,\n      liabilities,\n      equity,\n      totalAssets,\n      totalLiabilities,\n      totalEquity,\n      balanceCheck\n    };\n  }\n  \n  async getIncomeStatement(startDate?: Date, endDate?: Date): Promise<{\n    revenue: { [category: string]: { accounts: Array<{ name: string; amount: number; code: string }>, total: number } },\n    expenses: { [category: string]: { accounts: Array<{ name: string; amount: number; code: string }>, total: number } },\n    totalRevenue: number,\n    totalExpenses: number,\n    grossProfit: number,\n    netIncome: number\n  }> {\n    const start = startDate || new Date(new Date().getFullYear(), 0, 1); // Beginning of year\n    const end = endDate || new Date();\n    \n    // Get revenue and expense accounts with their activity in the period\n    const revenueAndExpenseAccounts = await db.select({\n      id: accounts.id,\n      code: accounts.code,\n      name: accounts.name,\n      type: accounts.type,\n      subtype: accounts.subtype,\n      normalBalance: accounts.normalBalance\n    })\n    .from(accounts)\n    .where(and(\n      eq(accounts.isActive, true),\n      sql`${accounts.type} IN ('revenue', 'expense')`\n    ))\n    .orderBy(accounts.code);\n    \n    const revenue: any = {};\n    const expenses: any = {};\n    let totalRevenue = 0;\n    let totalExpenses = 0;\n    \n    // Calculate account activity for the period\n    for (const account of revenueAndExpenseAccounts) {\n      // Get journal entry lines for this account in the period\n      const activityQuery = await db.select({\n        debitAmount: journalEntryLines.debitAmount,\n        creditAmount: journalEntryLines.creditAmount\n      })\n      .from(journalEntryLines)\n      .innerJoin(journalEntries, eq(journalEntryLines.journalEntryId, journalEntries.id))\n      .where(and(\n        eq(journalEntryLines.accountId, account.id),\n        gte(journalEntries.date, start),\n        lte(journalEntries.date, end),\n        eq(journalEntries.status, 'posted')\n      ));\n      \n      let periodActivity = 0;\n      activityQuery.forEach(line => {\n        const debit = Number(line.debitAmount);\n        const credit = Number(line.creditAmount);\n        \n        // For revenue accounts (normal credit balance), credit increases, debit decreases\n        // For expense accounts (normal debit balance), debit increases, credit decreases\n        if (account.normalBalance === 'credit') {\n          periodActivity += credit - debit;\n        } else {\n          periodActivity += debit - credit;\n        }\n      });\n      \n      // Only include accounts with activity\n      if (Math.abs(periodActivity) > 0.01) {\n        const accountInfo = {\n          name: account.name,\n          amount: periodActivity,\n          code: account.code\n        };\n        \n        if (account.type === 'revenue') {\n          const category = account.subtype || 'Other Revenue';\n          if (!revenue[category]) {\n            revenue[category] = { accounts: [], total: 0 };\n          }\n          revenue[category].accounts.push(accountInfo);\n          revenue[category].total += periodActivity;\n          totalRevenue += periodActivity;\n        } else if (account.type === 'expense') {\n          const category = account.subtype || 'Other Expenses';\n          if (!expenses[category]) {\n            expenses[category] = { accounts: [], total: 0 };\n          }\n          expenses[category].accounts.push(accountInfo);\n          expenses[category].total += periodActivity;\n          totalExpenses += periodActivity;\n        }\n      }\n    }\n    \n    // Calculate gross profit (Revenue - COGS)\n    const cogs = expenses['cost_of_goods_sold']?.total || 0;\n    const grossProfit = totalRevenue - cogs;\n    const netIncome = totalRevenue - totalExpenses;\n    \n    return {\n      revenue,\n      expenses,\n      totalRevenue,\n      totalExpenses,\n      grossProfit,\n      netIncome\n    };\n  }\n  \n  // Get Chart of Accounts\n  async getChartOfAccounts(): Promise<Account[]> {\n    return await db.select().from(accounts)\n      .where(eq(accounts.isActive, true))\n      .orderBy(accounts.code);\n  }\n  \n  // Financial Transactions (Enhanced)\n  async createTransaction(\n    data: {\n      type: 'income' | 'expense' | 'transfer';\n      category: string;\n      subcategory?: string;\n      amount: string;\n      description: string;\n      referenceType?: string;\n      reference?: string;\n      paymentMethod?: string;\n      tags?: string[];\n      userId: string;\n    },\n    tx?: any\n  ): Promise<FinancialRecord> {\n    // Use the enhanced method that creates journal entries\n    const result = await this.createTransactionWithJournal(data, tx);\n    \n    if (!result.success || !result.transaction) {\n      throw new Error(result.error || 'Failed to create transaction');\n    }\n    \n    return result.transaction;\n  }\n\n  async getTransactions(filters?: {\n    type?: string;\n    category?: string;\n    startDate?: Date;\n    endDate?: Date;\n    referenceType?: string;\n  }): Promise<FinancialRecord[]> {\n    const conditions = [];\n    if (filters?.type) conditions.push(eq(financialRecords.type, filters.type));\n    if (filters?.category) conditions.push(eq(financialRecords.category, filters.category));\n    if (filters?.referenceType) conditions.push(eq(financialRecords.referenceType, filters.referenceType));\n    if (filters?.startDate) conditions.push(gte(financialRecords.createdAt, filters.startDate));\n    if (filters?.endDate) conditions.push(lte(financialRecords.createdAt, filters.endDate));\n    \n    if (conditions.length > 0) {\n      return await db\n        .select()\n        .from(financialRecords)\n        .where(and(...conditions))\n        .orderBy(desc(financialRecords.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(financialRecords)\n      .orderBy(desc(financialRecords.createdAt));\n  }\n\n  async getSummary(startDate?: Date, endDate?: Date): Promise<{\n    totalIncome: string;\n    totalExpense: string;\n    netProfit: string;\n    transactionCount: number;\n    inventoryValue: string;\n    inventoryCount: number;\n    breakdown: {\n      categories: { [key: string]: { income: number; expense: number; count: number } };\n      paymentMethods: { [key: string]: number };\n      sources: { [key: string]: { amount: number; count: number } };\n      subcategories: { [key: string]: { amount: number; type: string; count: number } };\n      inventory: { [key: string]: { value: number; stock: number; avgCost: number } };\n    };\n  }> {\n    const conditions = [];\n    if (startDate) conditions.push(gte(financialRecords.createdAt, startDate));\n    if (endDate) conditions.push(lte(financialRecords.createdAt, endDate));\n    \n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    // Total income - EXCLUDE refunds from revenue calculation for accounting accuracy\n    const [incomeResult] = await db\n      .select({ total: sum(financialRecords.amount) })\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.type, 'income'),\n        // Exclude ALL types of refunds from income calculation\n        sql`${financialRecords.category} NOT LIKE '%Refund%'`,\n        sql`${financialRecords.category} != 'Returns and Allowances'`,\n        sql`${financialRecords.description} NOT LIKE '%Refund%'`,\n        whereClause\n      ));\n    \n    // Total expense - calculate properly excluding asset purchases\n    const allExpenses = await db\n      .select({\n        category: financialRecords.category,\n        amount: financialRecords.amount\n      })\n      .from(financialRecords)\n      .where(and(eq(financialRecords.type, 'expense'), whereClause));\n    \n    // Exclude inventory purchases from expense calculation for profit\n    const actualExpenses = allExpenses.filter(expense => \n      expense.category !== 'Inventory Purchase' &&\n      !expense.category?.toLowerCase().includes('purchase') &&\n      !expense.category?.toLowerCase().includes('asset')\n    );\n    \n    const totalExpenseAmount = actualExpenses.reduce((sum, expense) => sum + Number(expense.amount), 0);\n    const expenseResult = { total: totalExpenseAmount };\n    \n    // Count\n    const [countResult] = await db\n      .select({ count: count() })\n      .from(financialRecords)\n      .where(whereClause);\n\n    // Breakdown by category\n    const categoryBreakdown = await db\n      .select({\n        category: financialRecords.category,\n        type: financialRecords.type,\n        total: sum(financialRecords.amount),\n        count: count()\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.category, financialRecords.type);\n\n    // Breakdown by subcategory\n    const subcategoryBreakdown = await db\n      .select({\n        subcategory: financialRecords.subcategory,\n        type: financialRecords.type,\n        total: sum(financialRecords.amount),\n        count: count()\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.subcategory, financialRecords.type);\n\n    // Breakdown by payment method\n    const paymentBreakdown = await db\n      .select({\n        paymentMethod: financialRecords.paymentMethod,\n        total: sum(financialRecords.amount)\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.paymentMethod);\n\n    // Breakdown by source/reference type\n    const sourceBreakdown = await db\n      .select({\n        referenceType: financialRecords.referenceType,\n        total: sum(financialRecords.amount),\n        count: count()\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.referenceType);\n\n    // Inventory value calculation\n    const inventoryBreakdown = await db\n      .select({\n        name: products.name,\n        stock: products.stock,\n        averageCost: products.averageCost,\n        sellingPrice: products.sellingPrice,\n        totalValue: sql<number>`${products.stock} * COALESCE(${products.averageCost}, 0)`,\n      })\n      .from(products)\n      .where(and(eq(products.isActive, true), gte(products.stock, 0)));\n\n    const totalInventoryValue = inventoryBreakdown.reduce((total, item) => total + Number(item.totalValue), 0);\n    const totalInventoryCount = inventoryBreakdown.reduce((total, item) => total + (item.stock || 0), 0);\n    \n    // Get total refunds separately for proper accounting\n    const [refundResult] = await db\n      .select({ total: sum(financialRecords.amount) })\n      .from(financialRecords)\n      .where(and(\n        sql`${financialRecords.type} = 'refund_recovery' OR ${financialRecords.category} = 'Returns and Allowances'`,\n        whereClause\n      ));\n    \n    const totalIncome = Number(incomeResult.total || 0);\n    const totalExpense = totalExpenseAmount;\n    const totalRefunds = Number(refundResult.total || 0);\n\n    // Process category breakdown\n    const categories: { [key: string]: { income: number; expense: number; count: number } } = {};\n    categoryBreakdown.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = { income: 0, expense: 0, count: 0 };\n      }\n      if (item.type === 'income') {\n        categories[item.category].income = Number(item.total);\n      } else {\n        categories[item.category].expense = Number(item.total);\n      }\n      categories[item.category].count += item.count;\n    });\n\n    // Process subcategory breakdown\n    const subcategories: { [key: string]: { amount: number; type: string; count: number } } = {};\n    subcategoryBreakdown.forEach(item => {\n      if (item.subcategory) {\n        subcategories[item.subcategory] = {\n          amount: Number(item.total),\n          type: item.type,\n          count: item.count\n        };\n      }\n    });\n\n    // Process payment method breakdown\n    const paymentMethods: { [key: string]: number } = {};\n    paymentBreakdown.forEach(item => {\n      if (item.paymentMethod) {\n        paymentMethods[item.paymentMethod] = Number(item.total);\n      }\n    });\n\n    // Process source breakdown\n    const sources: { [key: string]: { amount: number; count: number } } = {};\n    sourceBreakdown.forEach(item => {\n      if (item.referenceType) {\n        sources[item.referenceType] = {\n          amount: Number(item.total),\n          count: item.count\n        };\n      }\n    });\n\n    // Process inventory breakdown\n    const inventory: { [key: string]: { value: number; stock: number; avgCost: number } } = {};\n    inventoryBreakdown.forEach(item => {\n      if (item.name) {\n        inventory[item.name] = {\n          value: Number(item.totalValue),\n          stock: item.stock || 0,\n          avgCost: Number(item.averageCost || 0)\n        };\n      }\n    });\n    \n    return {\n      totalIncome: totalIncome.toString(),\n      totalExpense: totalExpense.toString(),\n      netProfit: (totalIncome - totalExpense).toString(), // Profit excludes refunds\n      transactionCount: countResult.count,\n      inventoryValue: totalInventoryValue.toString(),\n      inventoryCount: totalInventoryCount,\n      breakdown: {\n        categories,\n        paymentMethods,\n        sources,\n        subcategories,\n        inventory\n      }\n    };\n  }\n\n  // Employee Management\n  async createEmployee(data: InsertEmployee): Promise<Employee> {\n    const employeeNumber = `EMP${Date.now().toString().slice(-6)}`;\n    \n    // Convert string date to Date object if needed\n    const processedData = {\n      ...data,\n      employeeNumber,\n      joinDate: typeof data.joinDate === 'string' ? new Date(data.joinDate) : data.joinDate,\n      endDate: data.endDate && typeof data.endDate === 'string' ? new Date(data.endDate) : data.endDate\n    };\n    \n    const [employee] = await db.insert(employees).values(processedData).returning();\n    return employee;\n  }\n\n  async getEmployees(includeInactive = false): Promise<Employee[]> {\n    if (!includeInactive) {\n      return await db\n        .select()\n        .from(employees)\n        .where(eq(employees.status, 'active'))\n        .orderBy(employees.name);\n    }\n    \n    return await db\n      .select()\n      .from(employees)\n      .orderBy(employees.name);\n  }\n\n  async getEmployeeById(id: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee;\n  }\n\n  async updateEmployee(id: string, data: Partial<InsertEmployee>): Promise<Employee> {\n    // Convert string dates to Date objects if needed\n    const processedData = {\n      ...data,\n      updatedAt: new Date(),\n      joinDate: data.joinDate && typeof data.joinDate === 'string' ? new Date(data.joinDate) : data.joinDate,\n      endDate: data.endDate && typeof data.endDate === 'string' ? new Date(data.endDate) : data.endDate\n    };\n    \n    const [employee] = await db\n      .update(employees)\n      .set(processedData)\n      .where(eq(employees.id, id))\n      .returning();\n    return employee;\n  }\n\n  // Payroll Management\n  async createPayroll(data: {\n    employeeId: string;\n    periodStart: Date | string;\n    periodEnd: Date | string;\n    baseSalary: string;\n    overtime?: string;\n    bonus?: string;\n    allowances?: string;\n    taxDeduction?: string;\n    socialSecurity?: string;\n    healthInsurance?: string;\n    otherDeductions?: string;\n    userId: string;\n  }): Promise<PayrollRecord> {\n    const payrollNumber = `PAY${Date.now().toString().slice(-8)}`;\n    \n    // Convert string dates to Date objects if needed\n    const periodStart = typeof data.periodStart === 'string' ? new Date(data.periodStart) : data.periodStart;\n    const periodEnd = typeof data.periodEnd === 'string' ? new Date(data.periodEnd) : data.periodEnd;\n    \n    const baseSalary = Number(data.baseSalary);\n    const overtime = Number(data.overtime || 0);\n    const bonus = Number(data.bonus || 0);\n    const allowances = Number(data.allowances || 0);\n    const grossPay = baseSalary + overtime + bonus + allowances;\n    \n    const taxDeduction = Number(data.taxDeduction || 0);\n    const socialSecurity = Number(data.socialSecurity || 0);\n    const healthInsurance = Number(data.healthInsurance || 0);\n    const otherDeductions = Number(data.otherDeductions || 0);\n    const totalDeductions = taxDeduction + socialSecurity + healthInsurance + otherDeductions;\n    \n    const netPay = grossPay - totalDeductions;\n    \n    const [payroll] = await db.insert(payrollRecords).values({\n      employeeId: data.employeeId,\n      payrollNumber,\n      periodStart,\n      periodEnd,\n      baseSalary: data.baseSalary,\n      overtime: data.overtime || \"0\",\n      bonus: data.bonus || \"0\",\n      allowances: data.allowances || \"0\",\n      grossPay: grossPay.toString(),\n      taxDeduction: data.taxDeduction || \"0\",\n      socialSecurity: data.socialSecurity || \"0\",\n      healthInsurance: data.healthInsurance || \"0\",\n      otherDeductions: data.otherDeductions || \"0\",\n      netPay: netPay.toString(),\n      status: 'draft',\n      userId: data.userId\n    }).returning();\n    \n    return payroll;\n  }\n\n  async getPayrollRecords(employeeId?: string): Promise<PayrollRecord[]> {\n    if (employeeId) {\n      return await db\n        .select()\n        .from(payrollRecords)\n        .where(eq(payrollRecords.employeeId, employeeId))\n        .orderBy(desc(payrollRecords.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(payrollRecords)\n      .orderBy(desc(payrollRecords.createdAt));\n  }\n\n  async updatePayrollStatus(id: string, status: 'draft' | 'approved' | 'paid'): Promise<PayrollRecord> {\n    const [payroll] = await db\n      .update(payrollRecords)\n      .set({ \n        status, \n        paidDate: status === 'paid' ? new Date() : null,\n        updatedAt: new Date() \n      })\n      .where(eq(payrollRecords.id, id))\n      .returning();\n    \n    // Create financial record when marked as paid\n    if (status === 'paid' && payroll) {\n      const existingRecord = await db\n        .select()\n        .from(financialRecords)\n        .where(and(\n          eq(financialRecords.referenceType, 'payroll'),\n          eq(financialRecords.reference, payroll.id)\n        ));\n      \n      if (existingRecord.length === 0) {\n        await this.createTransaction({\n          type: 'expense',\n          category: 'Payroll',\n          subcategory: 'Salary',\n          amount: payroll.netPay,\n          description: `Gaji ${payroll.payrollNumber}`,\n          referenceType: 'payroll',\n          reference: payroll.id,\n          paymentMethod: 'bank_transfer',\n          userId: payroll.userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n        });\n      }\n    }\n    \n    return payroll;\n  }\n\n  // Attendance Management\n  async createAttendance(data: InsertAttendanceRecord): Promise<AttendanceRecord> {\n    const [attendance] = await db.insert(attendanceRecords).values(data).returning();\n    return attendance;\n  }\n\n  async getAttendanceRecords(employeeId?: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]> {\n    const conditions = [];\n    if (employeeId) conditions.push(eq(attendanceRecords.employeeId, employeeId));\n    if (startDate) conditions.push(gte(attendanceRecords.date, startDate));\n    if (endDate) conditions.push(lte(attendanceRecords.date, endDate));\n    \n    if (conditions.length > 0) {\n      return await db\n        .select()\n        .from(attendanceRecords)\n        .where(and(...conditions))\n        .orderBy(desc(attendanceRecords.date));\n    }\n    \n    return await db\n      .select()\n      .from(attendanceRecords)\n      .orderBy(desc(attendanceRecords.date));\n  }\n\n  // Service Integration\n  async recordServiceIncome(serviceId: string, amount: string, description: string, userId: string): Promise<void> {\n    // Check if record already exists\n    const existingRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.type, 'income')\n      ));\n    \n    if (existingRecord.length === 0) {\n      await this.createTransaction({\n        type: 'income',\n        category: 'Service Revenue',\n        subcategory: 'Repair Service',\n        amount,\n        description,\n        referenceType: 'service',\n        reference: serviceId,\n        paymentMethod: 'cash',\n        userId\n      });\n    }\n  }\n\n  async recordPartsCost(serviceId: string, partName: string, quantity: number, modalPrice: string, sellingPrice: string, userId: string): Promise<void> {\n    // Record parts cost (modal/purchase price) as expense\n    const modalAmount = (Number(modalPrice) * quantity).toString();\n    const existingModalRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service_parts_cost'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.description, `Biaya modal ${partName} (${quantity}x)`)\n      ));\n\n    if (existingModalRecord.length === 0) {\n      await this.createTransaction({\n        type: 'expense',\n        category: 'Cost of Goods Sold',\n        subcategory: 'Parts Cost',\n        amount: modalAmount,\n        description: `Biaya modal ${partName} (${quantity}x)`,\n        referenceType: 'service_parts_cost',\n        reference: serviceId,\n        paymentMethod: 'inventory',\n        userId\n      });\n    }\n\n    // Record parts revenue (selling price) as income\n    const sellingAmount = (Number(sellingPrice) * quantity).toString();\n    const existingSellingRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service_parts_revenue'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.description, `Penjualan ${partName} (${quantity}x)`)\n      ));\n\n    if (existingSellingRecord.length === 0) {\n      await this.createTransaction({\n        type: 'income',\n        category: 'Service Revenue',\n        subcategory: 'Parts Sales',\n        amount: sellingAmount,\n        description: `Penjualan ${partName} (${quantity}x)`,\n        referenceType: 'service_parts_revenue',\n        reference: serviceId,\n        paymentMethod: 'cash',\n        userId\n      });\n    }\n  }\n\n  async recordLaborCost(serviceId: string, laborCost: string, description: string, userId: string): Promise<void> {\n    // Check if record already exists\n    const existingRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service_labor'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.type, 'income')\n      ));\n    \n    if (existingRecord.length === 0 && Number(laborCost) > 0) {\n      await this.createTransaction({\n        type: 'income',\n        category: 'Service Revenue',\n        subcategory: 'Labor Charge',\n        amount: laborCost,\n        description: `Ongkos tenaga kerja - ${description}`,\n        referenceType: 'service_labor',\n        reference: serviceId,\n        paymentMethod: 'cash',\n        userId\n      });\n    }\n  }\n\n  // Categories and Analytics\n  async getFinancialCategories(): Promise<{\n    incomeCategories: string[];\n    expenseCategories: string[];\n  }> {\n    const records = await db.select().from(financialRecords);\n    \n    const incomeSet = new Set<string>();\n    const expenseSet = new Set<string>();\n    \n    records.forEach(r => {\n      if (r.type === 'income') {\n        incomeSet.add(r.category);\n      } else if (r.type === 'expense') {\n        expenseSet.add(r.category);\n      }\n    });\n    \n    return { \n      incomeCategories: Array.from(incomeSet),\n      expenseCategories: Array.from(expenseSet)\n    };\n  }\n\n  // Service Cancellation Methods - Updated with proper journal entries and transaction support\n  async recordServiceCancellationBeforeCompleted(\n    serviceId: string, \n    cancellationFee: string, \n    reason: string, \n    userId: string,\n    tx?: any\n  ): Promise<{ success: boolean; error?: string }> {\n    const dbClient = tx || db;\n    try {\n      // Record cancellation fee using proper financial record + journal entries\n      if (Number(cancellationFee) > 0) {\n        // First create financial record (for finance page)\n        await dbClient.insert(financialRecords).values({\n          type: 'income',\n          category: 'Service Revenue',\n          amount: cancellationFee,\n          description: `Service cancellation fee - ${reason}`,\n          reference: serviceId,\n          referenceType: 'service_cancellation',\n          paymentMethod: 'cash',\n          status: 'confirmed',\n          userId: userId\n        });\n\n        // Then create journal entry (for accounting)\n        const journalResult = await this.createJournalEntry({\n          description: `Service Cancellation Fee - ${reason}`,\n          reference: serviceId,\n          referenceType: 'service_cancellation',\n          lines: [\n            {\n              accountCode: ACCOUNT_CODES.CASH,\n              description: `Cancellation fee received - ${reason}`,\n              debitAmount: cancellationFee\n            },\n            {\n              accountCode: ACCOUNT_CODES.SERVICE_REVENUE,\n              description: `Service cancellation fee - ${reason}`,\n              creditAmount: cancellationFee\n            }\n          ],\n          userId\n        }, tx);\n        \n        if (!journalResult.success) {\n          return { success: false, error: journalResult.error };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error recording cancellation before completed:', error);\n      return { success: false, error: 'Failed to record cancellation fee' };\n    }\n  }\n\n  async recordServiceCancellationAfterCompleted(\n    serviceId: string, \n    cancellationFee: string, \n    reason: string, \n    partsUsed: Array<{ name: string; quantity: number; sellingPrice: string; costPrice?: string }>,\n    userId: string,\n    tx?: any\n  ): Promise<{ success: boolean; error?: string }> {\n    const dbClient = tx || db;\n    try {\n      // 1. Create financial record for cancellation fee as income (ONLY income for this transaction)\n      if (Number(cancellationFee) > 0) {\n        await dbClient.insert(financialRecords).values({\n          type: 'income',\n          category: 'Service Revenue',\n          amount: cancellationFee,\n          description: `Service cancellation fee (after completion) - ${reason}`,\n          reference: serviceId,\n          referenceType: 'service_cancellation_after_completed',\n          paymentMethod: 'cash',\n          status: 'confirmed',\n          userId: userId\n        });\n      }\n\n      // 2. Get original service ticket to find service revenue that needs to be reversed\n      const [serviceTicket] = await dbClient\n        .select()\n        .from(serviceTickets)\n        .where(eq(serviceTickets.id, serviceId));\n      \n      if (serviceTicket) {\n        // Create financial record to REVERSE original service revenue (labor cost)\n        const originalServiceRevenue = serviceTicket.laborCost || '0';\n        if (Number(originalServiceRevenue) > 0) {\n          await dbClient.insert(financialRecords).values({\n            type: 'refund_recovery',\n            category: 'Returns and Allowances',\n            amount: originalServiceRevenue,\n            description: `Service revenue reversal (labor cost) - ${reason}`,\n            reference: serviceId,\n            referenceType: 'service_cancellation_service_reversal',\n            paymentMethod: 'cash',\n            status: 'confirmed',\n            userId: userId\n          });\n        }\n      }\n\n      // 3. Create financial records to REVERSE parts revenue (as refund/expense)\n      for (const part of partsUsed) {\n        const partRevenue = (Number(part.sellingPrice) * part.quantity).toString();\n        \n        // Create financial record to reverse parts revenue\n        await dbClient.insert(financialRecords).values({\n          type: 'refund_recovery',\n          category: 'Returns and Allowances',\n          amount: partRevenue,\n          description: `Parts revenue reversal - ${part.name} (${part.quantity}x) - ${reason}`,\n          reference: serviceId,\n          referenceType: 'service_cancellation_parts_reversal',\n          paymentMethod: 'cash',\n          status: 'confirmed',\n          userId: userId\n        });\n      }\n\n      const journalLines = [];\n      \n      // Record cancellation fee as income\n      if (Number(cancellationFee) > 0) {\n        journalLines.push(\n          {\n            accountCode: ACCOUNT_CODES.CASH,\n            description: `Cancellation fee received - ${reason}`,\n            debitAmount: cancellationFee\n          },\n          {\n            accountCode: ACCOUNT_CODES.SERVICE_REVENUE,\n            description: `Service cancellation fee - ${reason}`,\n            creditAmount: cancellationFee\n          }\n        );\n      }\n\n      // Reverse parts revenue using proper sales returns contra account\n      for (const part of partsUsed) {\n        const partRevenue = (Number(part.sellingPrice) * part.quantity).toString();\n        const costPrice = part.costPrice || '0';\n        const partCost = (Number(costPrice) * part.quantity).toString();\n        \n        // Reverse the sales revenue\n        journalLines.push(\n          {\n            accountCode: ACCOUNT_CODES.SALES_REVENUE, // Debit to reduce revenue\n            description: `Sales return reversal - ${part.name} (${part.quantity}x)`,\n            debitAmount: partRevenue\n          },\n          {\n            accountCode: ACCOUNT_CODES.CASH, // Credit cash refund\n            description: `Cash refund for returned parts - ${part.name}`,\n            creditAmount: partRevenue\n          }\n        );\n        \n        // Return inventory at cost\n        if (Number(partCost) > 0) {\n          journalLines.push(\n            {\n              accountCode: ACCOUNT_CODES.INVENTORY,\n              description: `Inventory returned - ${part.name} (${part.quantity}x)`,\n              debitAmount: partCost\n            },\n            {\n              accountCode: ACCOUNT_CODES.COST_OF_GOODS_SOLD,\n              description: `COGS reversal - ${part.name}`,\n              creditAmount: partCost\n            }\n          );\n        }\n      }\n\n      if (journalLines.length > 0) {\n        const journalResult = await this.createJournalEntry({\n          description: `Service Cancellation After Completion - ${reason}`,\n          reference: serviceId,\n          referenceType: 'service_cancellation_after_completed',\n          lines: journalLines,\n          userId\n        }, tx);\n        \n        if (!journalResult.success) {\n          return { success: false, error: journalResult.error };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error recording cancellation after completed:', error);\n      return { success: false, error: 'Failed to record cancellation with parts reversal' };\n    }\n  }\n\n  async recordServiceCancellationWarrantyRefund(\n    serviceId: string, \n    cancellationFee: string, \n    originalLaborCost: string,\n    originalPartsCost: string,\n    reason: string, \n    partsUsed: Array<{ name: string; quantity: number; sellingPrice: string; costPrice?: string }>,\n    userId: string,\n    tx?: any\n  ): Promise<{ success: boolean; error?: string }> {\n    const dbClient = tx || db;\n    try {\n      // First create financial record for cancellation fee (for finance page)\n      if (Number(cancellationFee) > 0) {\n        await dbClient.insert(financialRecords).values({\n          type: 'income',\n          category: 'Service Revenue',\n          amount: cancellationFee,\n          description: `Warranty cancellation fee - ${reason}`,\n          reference: serviceId,\n          referenceType: 'service_cancellation_warranty_refund',\n          paymentMethod: 'cash',\n          status: 'confirmed',\n          userId: userId\n        });\n      }\n\n      const journalLines = [];\n      \n      // Record cancellation fee as income (if any)\n      if (Number(cancellationFee) > 0) {\n        journalLines.push(\n          {\n            accountCode: ACCOUNT_CODES.CASH,\n            description: `Warranty cancellation fee - ${reason}`,\n            debitAmount: cancellationFee\n          },\n          {\n            accountCode: ACCOUNT_CODES.SERVICE_REVENUE,\n            description: `Warranty cancellation fee - ${reason}`,\n            creditAmount: cancellationFee\n          }\n        );\n      }\n\n      // Refund original labor cost\n      if (Number(originalLaborCost) > 0) {\n        journalLines.push(\n          {\n            accountCode: ACCOUNT_CODES.WARRANTY_EXPENSE,\n            description: `Warranty labor refund - ${reason}`,\n            debitAmount: originalLaborCost\n          },\n          {\n            accountCode: ACCOUNT_CODES.CASH,\n            description: `Cash refund for labor - ${reason}`,\n            creditAmount: originalLaborCost\n          }\n        );\n      }\n\n      // Handle parts refund and damaged goods\n      if (Number(originalPartsCost) > 0) {\n        // Refund parts cost to customer\n        journalLines.push(\n          {\n            accountCode: ACCOUNT_CODES.WARRANTY_EXPENSE,\n            description: `Warranty parts refund - ${reason}`,\n            debitAmount: originalPartsCost\n          },\n          {\n            accountCode: ACCOUNT_CODES.CASH,\n            description: `Cash refund for parts - ${reason}`,\n            creditAmount: originalPartsCost\n          }\n        );\n\n        // Record damaged goods loss for parts\n        for (const part of partsUsed) {\n          const costPrice = part.costPrice || part.sellingPrice; // Fallback to selling price if cost not available\n          const partCostValue = (Number(costPrice) * part.quantity).toString();\n          \n          journalLines.push(\n            {\n              accountCode: ACCOUNT_CODES.DAMAGED_GOODS_LOSS,\n              description: `Damaged goods loss - ${part.name} (${part.quantity}x)`,\n              debitAmount: partCostValue\n            },\n            {\n              accountCode: ACCOUNT_CODES.DAMAGED_GOODS_INVENTORY,\n              description: `Transfer to damaged goods inventory - ${part.name}`,\n              creditAmount: partCostValue\n            }\n          );\n        }\n      }\n\n      if (journalLines.length > 0) {\n        const journalResult = await this.createJournalEntry({\n          description: `Service Warranty Refund - ${reason}`,\n          reference: serviceId,\n          referenceType: 'warranty_refund',\n          lines: journalLines,\n          userId\n        }, tx);\n        \n        if (!journalResult.success) {\n          return { success: false, error: journalResult.error };\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error recording warranty cancellation refund:', error);\n      return { success: false, error: 'Failed to record warranty refund' };\n    }\n  }\n}\n\nexport const financeManager = new FinanceManager();","size_bytes":47810},"client/src/components/service-parts-selector.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Minus, Package, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ServicePart {\n  productId: string;\n  productName: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  stock: number;\n}\n\ninterface ServicePartsSelectorProps {\n  parts: ServicePart[];\n  onPartsChange: (parts: ServicePart[]) => void;\n  laborCost: number;\n}\n\nexport function ServicePartsSelector({ parts, onPartsChange, laborCost }: ServicePartsSelectorProps) {\n  const { toast } = useToast();\n  const [selectedProductId, setSelectedProductId] = useState<string>(\"\");\n  const [quantity, setQuantity] = useState<number>(1);\n\n  // Fetch products\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n    queryFn: () => fetch('/api/products').then(res => res.json())\n  });\n\n  // Filter products that have stock\n  const availableProducts = useMemo(() => {\n    return products.filter(product => product.stock > 0 && product.isActive);\n  }, [products]);\n\n  const selectedProduct = useMemo(() => {\n    return availableProducts.find(p => p.id === selectedProductId);\n  }, [availableProducts, selectedProductId]);\n\n  const totalPartsCost = useMemo(() => {\n    return parts.reduce((sum, part) => sum + parseFloat(part.totalPrice), 0);\n  }, [parts]);\n\n  const totalCost = useMemo(() => {\n    return laborCost + totalPartsCost;\n  }, [laborCost, totalPartsCost]);\n\n  const handleAddPart = () => {\n    if (!selectedProduct) {\n      toast({\n        title: \"Error\",\n        description: \"Pilih produk terlebih dahulu\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (quantity > selectedProduct.stock) {\n      toast({\n        title: \"Error\",\n        description: `Stock tidak cukup. Tersedia: ${selectedProduct.stock}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Check if product already added\n    const existingPartIndex = parts.findIndex(part => part.productId === selectedProduct.id);\n    \n    if (existingPartIndex >= 0) {\n      const existingPart = parts[existingPartIndex];\n      const newQuantity = existingPart.quantity + quantity;\n      \n      if (newQuantity > selectedProduct.stock) {\n        toast({\n          title: \"Error\",\n          description: `Total quantity melebihi stock. Tersedia: ${selectedProduct.stock}, Sudah dipilih: ${existingPart.quantity}`,\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const unitPrice = selectedProduct.sellingPrice || \"0\";\n      const newTotalPrice = (parseFloat(unitPrice) * newQuantity).toString();\n\n      const updatedParts = parts.map((part, index) => \n        index === existingPartIndex \n          ? { ...part, quantity: newQuantity, totalPrice: newTotalPrice }\n          : part\n      );\n      onPartsChange(updatedParts);\n    } else {\n      const unitPrice = selectedProduct.sellingPrice || \"0\";\n      const totalPrice = (parseFloat(unitPrice) * quantity).toString();\n\n      const newPart: ServicePart = {\n        productId: selectedProduct.id,\n        productName: selectedProduct.name,\n        quantity,\n        unitPrice,\n        totalPrice,\n        stock: selectedProduct.stock\n      };\n\n      onPartsChange([...parts, newPart]);\n    }\n\n    // Reset form\n    setSelectedProductId(\"\");\n    setQuantity(1);\n  };\n\n  const handleRemovePart = (productId: string) => {\n    onPartsChange(parts.filter(part => part.productId !== productId));\n  };\n\n  const handleQuantityChange = (productId: string, newQuantity: number) => {\n    const part = parts.find(p => p.productId === productId);\n    if (!part) return;\n\n    const product = availableProducts.find(p => p.id === productId);\n    if (!product) return;\n\n    if (newQuantity > product.stock) {\n      toast({\n        title: \"Error\",\n        description: `Quantity melebihi stock. Tersedia: ${product.stock}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (newQuantity <= 0) {\n      handleRemovePart(productId);\n      return;\n    }\n\n    const newTotalPrice = (parseFloat(part.unitPrice) * newQuantity).toString();\n    \n    const updatedParts = parts.map(p => \n      p.productId === productId \n        ? { ...p, quantity: newQuantity, totalPrice: newTotalPrice }\n        : p\n    );\n    onPartsChange(updatedParts);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Add Parts Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-4 h-4\" />\n            Tambah Spare Parts\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-12 gap-4 items-end\">\n            <div className=\"col-span-6\">\n              <Label htmlFor=\"product-select\">Pilih Produk</Label>\n              <Select value={selectedProductId} onValueChange={setSelectedProductId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Pilih spare part...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableProducts.map((product) => (\n                    <SelectItem key={product.id} value={product.id}>\n                      <div className=\"flex justify-between items-center w-full\">\n                        <span>{product.name}</span>\n                        <div className=\"flex items-center gap-2 ml-4\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Stock: {product.stock}\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Rp {parseFloat(product.sellingPrice || \"0\").toLocaleString(\"id-ID\")}\n                          </Badge>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"col-span-2\">\n              <Label htmlFor=\"quantity\">Quantity</Label>\n              <Input\n                id=\"quantity\"\n                type=\"number\"\n                min=\"1\"\n                max={selectedProduct?.stock || 1}\n                value={quantity}\n                onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}\n              />\n            </div>\n            <div className=\"col-span-2\">\n              <Label>Harga Satuan</Label>\n              <div className=\"p-2 bg-muted rounded text-sm\">\n                {selectedProduct \n                  ? `Rp ${parseFloat(selectedProduct.sellingPrice || \"0\").toLocaleString(\"id-ID\")}`\n                  : \"-\"\n                }\n              </div>\n            </div>\n            <div className=\"col-span-2\">\n              <Button \n                onClick={handleAddPart} \n                disabled={!selectedProduct}\n                className=\"w-full\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Tambah\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Parts List */}\n      {parts.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Parts yang Digunakan</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Produk</TableHead>\n                  <TableHead>Stock Tersedia</TableHead>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Harga Satuan</TableHead>\n                  <TableHead>Total</TableHead>\n                  <TableHead>Action</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {parts.map((part) => (\n                  <TableRow key={part.productId}>\n                    <TableCell>{part.productName}</TableCell>\n                    <TableCell>\n                      <Badge variant={part.stock <= 5 ? \"destructive\" : \"secondary\"}>\n                        {part.stock} unit\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleQuantityChange(part.productId, part.quantity - 1)}\n                        >\n                          <Minus className=\"w-3 h-3\" />\n                        </Button>\n                        <span className=\"min-w-[2rem] text-center\">{part.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleQuantityChange(part.productId, part.quantity + 1)}\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      Rp {parseFloat(part.unitPrice).toLocaleString(\"id-ID\")}\n                    </TableCell>\n                    <TableCell>\n                      Rp {parseFloat(part.totalPrice).toLocaleString(\"id-ID\")}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRemovePart(part.productId)}\n                      >\n                        <Minus className=\"w-4 h-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Cost Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Ringkasan Biaya</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span>Biaya Tenaga Kerja:</span>\n              <span>Rp {laborCost.toLocaleString(\"id-ID\")}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Biaya Parts:</span>\n              <span>Rp {totalPartsCost.toLocaleString(\"id-ID\")}</span>\n            </div>\n            <div className=\"border-t pt-2\">\n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Total Biaya:</span>\n                <span>Rp {totalCost.toLocaleString(\"id-ID\")}</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {availableProducts.length === 0 && (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-8\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">\n                Tidak ada produk dengan stock tersedia\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11750},"client/src/pages/stock-movements.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowUp, ArrowDown, Package, Filter, Search } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function StockMovements() {\n  const [startDate, setStartDate] = useState(\n    new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n  );\n  const [endDate, setEndDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [productFilter, setProductFilter] = useState(\"\");\n  const [referenceTypeFilter, setReferenceTypeFilter] = useState(\"\");\n\n  // Fetch stock movements with filters\n  const { data: stockData, isLoading, refetch } = useQuery({\n    queryKey: ['/api/reports/stock-movements', startDate, endDate, productFilter, referenceTypeFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (productFilter && productFilter !== 'all') params.append('productId', productFilter);\n      if (referenceTypeFilter && referenceTypeFilter !== 'all') params.append('referenceType', referenceTypeFilter);\n      \n      const response = await fetch(`/api/reports/stock-movements?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch stock movements');\n      return response.json();\n    },\n  });\n\n  // Fetch products for filter\n  const { data: products } = useQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('id-ID', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getReferenceTypeBadge = (type: string) => {\n    const variants = {\n      service: \"destructive\",\n      sale: \"default\",\n      purchase: \"secondary\", \n      adjustment: \"outline\",\n      return: \"secondary\"\n    } as const;\n    \n    const labels = {\n      service: \"Servis\",\n      sale: \"Penjualan\", \n      purchase: \"Pembelian\",\n      adjustment: \"Penyesuaian\",\n      return: \"Retur\"\n    };\n    \n    return (\n      <Badge variant={variants[type as keyof typeof variants] || \"outline\"}>\n        {labels[type as keyof typeof labels] || type}\n      </Badge>\n    );\n  };\n\n  const getMovementIcon = (type: string) => {\n    return type === 'out' ? \n      <ArrowDown className=\"h-4 w-4 text-red-500\" /> : \n      <ArrowUp className=\"h-4 w-4 text-green-500\" />;\n  };\n\n  const handleFilter = () => {\n    refetch();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Laporan Pergerakan Stok</h1>\n            <p className=\"text-gray-600\">Pantau semua pergerakan stok produk</p>\n          </div>\n        </div>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Pergerakan Stok\" breadcrumb=\"Beranda / Pergerakan Stok\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Laporan Pergerakan Stok</h1>\n                <p className=\"text-gray-600\">Pantau semua pergerakan stok produk</p>\n              </div>\n            </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pergerakan</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-movements\">\n              {stockData?.totalMovements || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        {Object.entries(stockData?.summary || {}).map(([refType, data]) => (\n          <Card key={refType}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {refType === 'service' ? 'Untuk Servis' :\n                 refType === 'sale' ? 'Untuk Penjualan' :\n                 refType === 'purchase' ? 'Dari Pembelian' :\n                 refType}\n              </CardTitle>\n              {refType === 'service' ? \n                <ArrowDown className=\"h-4 w-4 text-red-500\" /> :\n                <ArrowUp className=\"h-4 w-4 text-green-500\" />\n              }\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {(data as any).totalOut || (data as any).totalIn || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {(data as any).count} transaksi\n              </p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filter Laporan\n          </CardTitle>\n          <CardDescription>\n            Filter data berdasarkan periode, produk, atau jenis transaksi\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 items-end\">\n            <div>\n              <Label htmlFor=\"start-date\">Tanggal Mulai</Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"end-date\">Tanggal Akhir</Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                data-testid=\"input-end-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"product-filter\">Produk</Label>\n              <Select value={productFilter} onValueChange={setProductFilter}>\n                <SelectTrigger data-testid=\"select-product-filter\">\n                  <SelectValue placeholder=\"Semua produk\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Semua produk</SelectItem>\n                  {(products as any[])?.map((product: any) => (\n                    <SelectItem key={product.id} value={product.id}>\n                      {product.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"reference-filter\">Jenis Transaksi</Label>\n              <Select value={referenceTypeFilter} onValueChange={setReferenceTypeFilter}>\n                <SelectTrigger data-testid=\"select-reference-filter\">\n                  <SelectValue placeholder=\"Semua jenis\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Semua jenis</SelectItem>\n                  <SelectItem value=\"service\">Servis</SelectItem>\n                  <SelectItem value=\"sale\">Penjualan</SelectItem>\n                  <SelectItem value=\"purchase\">Pembelian</SelectItem>\n                  <SelectItem value=\"adjustment\">Penyesuaian</SelectItem>\n                  <SelectItem value=\"return\">Retur</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Button onClick={handleFilter} className=\"w-full\" data-testid=\"button-filter\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stock Movements Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Riwayat Pergerakan Stok</CardTitle>\n          <CardDescription>\n            Daftar lengkap semua pergerakan stok produk\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Tanggal</TableHead>\n                  <TableHead>Produk</TableHead>\n                  <TableHead>Jenis</TableHead>\n                  <TableHead>Tipe</TableHead>\n                  <TableHead>Qty</TableHead>\n                  <TableHead>Referensi</TableHead>\n                  <TableHead>Catatan</TableHead>\n                  <TableHead>User</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {stockData?.movements?.length ? (\n                  stockData.movements.map((movement: any) => (\n                    <TableRow key={movement.id} data-testid={`row-movement-${movement.id}`}>\n                      <TableCell className=\"font-mono text-sm\">\n                        {formatDate(movement.createdAt)}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {movement.productName || 'Produk tidak ditemukan'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getMovementIcon(movement.movementType)}\n                          <span className=\"capitalize\">{movement.movementType === 'out' ? 'Keluar' : 'Masuk'}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getReferenceTypeBadge(movement.referenceType)}\n                      </TableCell>\n                      <TableCell className=\"font-bold\">\n                        <span className={movement.movementType === 'out' ? 'text-red-600' : 'text-green-600'}>\n                          {movement.movementType === 'out' ? '-' : '+'}{movement.quantity}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {movement.reference}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {movement.notes}\n                      </TableCell>\n                      <TableCell>\n                        {movement.userName || 'Unknown'}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"h-24 text-center\">\n                      Tidak ada data pergerakan stok.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":12110},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { LogIn, Laptop } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username harus diisi\"),\n  password: z.string().min(1, \"Password harus diisi\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-login'], // Unique key\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest('POST', '/api/auth/login', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Berhasil\", \n        description: \"Selamat datang di LaptopPOS!\",\n      });\n      // Reload to trigger authentication state update\n      window.location.href = \"/\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Gagal\",\n        description: error.message || \"Username atau password salah\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: LoginFormData) => {\n    setIsLoading(true);\n    loginMutation.mutate(data);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 px-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-0\">\n        <CardHeader className=\"space-y-1 text-center pb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center\">\n              <Laptop className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">\n            {(storeConfig as any)?.name || 'LaptopPOS'}\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n            Sistem Manajemen Penjualan & Servis Laptop\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Username\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Masukkan username Anda\"\n                        {...field}\n                        data-testid=\"input-username\"\n                        className=\"h-11\"\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Password\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Masukkan password Anda\"\n                        {...field}\n                        data-testid=\"input-password\"\n                        className=\"h-11\"\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full h-11 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n                disabled={isLoading || loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {isLoading || loginMutation.isPending ? (\n                  <>\n                    <LogIn className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Masuk...\n                  </>\n                ) : (\n                  <>\n                    <LogIn className=\"w-4 h-4 mr-2\" />\n                    Masuk\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"text-center pt-4 border-t border-gray-200 dark:border-gray-700\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              Gunakan kredensial akun Anda untuk mengakses sistem\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5990},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport session from 'express-session';\nimport type { Express, RequestHandler } from 'express';\nimport connectPg from 'connect-pg-simple';\nimport { storage } from './storage';\nimport type { User, LoginUser } from '@shared/schema';\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true, // Auto-create table during fresh setup\n    ttl: sessionTtl,\n    tableName: 'sessions',\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-change-this',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: 'auto', // Auto-detect HTTPS for deployment compatibility\n      sameSite: 'lax', // Better compatibility with modern browsers\n      maxAge: sessionTtl,\n    },\n    name: 'laptoppos.session', // Custom session name\n    proxy: true, // Trust proxy for deployment\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set('trust proxy', 1);\n  app.use(getSession());\n  \n  // Create default admin user if it doesn't exist (for local deployment)\n  await createDefaultAdminUser();\n}\n\nasync function createDefaultAdminUser() {\n  try {\n    const adminUsername = process.env.DEFAULT_ADMIN_USERNAME || 'admin';\n    const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123';\n    const adminEmail = process.env.DEFAULT_ADMIN_EMAIL || 'admin@laptoppos.com';\n    \n    // Check if admin user exists\n    const existingUser = await storage.getUserByUsername(adminUsername);\n    \n    if (!existingUser) {\n      // Create default admin user\n      const hashedPassword = await hashPassword(adminPassword);\n      \n      await storage.createUser({\n        id: 'admin-' + Date.now(),\n        username: adminUsername,\n        email: adminEmail,\n        firstName: 'System',\n        lastName: 'Administrator',\n        password: hashedPassword,\n        role: 'admin',\n        isActive: true,\n        profileImageUrl: null\n      });\n      \n      console.log(`✅ Default admin user created: ${adminUsername}/${adminPassword}`);\n    } else {\n      // Ensure existing admin has correct password (for deployment consistency)\n      const isValidPassword = await verifyPassword(adminPassword, existingUser.password || '');\n      if (!isValidPassword) {\n        const hashedPassword = await hashPassword(adminPassword);\n        await storage.updateUser(existingUser.id, { password: hashedPassword });\n        console.log(`✅ Admin password reset to default: ${adminUsername}/${adminPassword}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error creating default admin user:', error);\n  }\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  console.log(\"Auth check:\", {\n    hasSession: !!req.session,\n    hasUser: !!req.session?.user,\n    userId: req.session?.user?.id,\n    sessionId: req.sessionID,\n    path: req.path,\n    method: req.method\n  });\n  \n  if (req.session && req.session.user) {\n    return next();\n  }\n  \n  console.error(\"Authentication failed:\", {\n    sessionExists: !!req.session,\n    userExists: !!req.session?.user,\n    path: req.path\n  });\n  return res.status(401).json({ message: 'Unauthorized' });\n};\n\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function authenticateUser(credentials: LoginUser): Promise<User | null> {\n  try {\n    const user = await storage.getUserByUsername(credentials.username);\n    if (!user || !user.password) {\n      return null;\n    }\n\n    const isValidPassword = await verifyPassword(credentials.password, user.password);\n    if (!isValidPassword) {\n      return null;\n    }\n\n    // Don't return password in user object\n    const { password, ...userWithoutPassword } = user;\n    return userWithoutPassword as User;\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return null;\n  }\n}\n\n// Extend session interface\ndeclare module 'express-session' {\n  interface SessionData {\n    user: User;\n  }\n}","size_bytes":4344},"server/whatsappService.ts":{"content":"import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys';\nimport { Boom } from '@hapi/boom';\nimport qrcode from 'qrcode-terminal';\nimport { storage } from './storage';\n\nexport class WhatsAppService {\n  private socket: any = null;\n  private isConnecting = false;\n  private qrCode: string | null = null;\n  private connectionState: string = 'close';\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n\n  async initialize() {\n    if (this.isConnecting) {\n      console.log('WhatsApp already connecting...');\n      return;\n    }\n\n    this.isConnecting = true;\n    console.log('🔌 Initializing WhatsApp connection...');\n    \n    try {\n      // Use file-based auth state\n      const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys');\n      \n      // Create proper logger with required methods\n      const logger = {\n        level: 'silent',\n        error: () => {},\n        warn: () => {},\n        info: () => {},\n        debug: () => {},\n        trace: () => {},\n        child: () => logger,\n      };\n\n      this.socket = makeWASocket({\n        auth: state,\n        printQRInTerminal: false,\n        logger: logger as any,\n      });\n\n      // Connection updates\n      this.socket.ev.on('connection.update', async (update: any) => {\n        const { connection, lastDisconnect, qr } = update;\n        \n        if (qr) {\n          this.qrCode = qr;\n          qrcode.generate(qr, { small: true });\n          console.log('QR Code updated');\n          await this.updateQRInDatabase();\n        }\n\n        if (connection === 'close') {\n          this.connectionState = 'close';\n          const shouldReconnect = (lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut;\n          console.log('Connection closed due to ', lastDisconnect?.error, ', reconnecting ', shouldReconnect);\n          \n          if (shouldReconnect) {\n            setTimeout(() => this.initialize(), 3000);\n          } else {\n            console.log('WhatsApp logged out');\n            this.qrCode = null;\n            await this.clearQRFromDatabase();\n          }\n          \n          this.isConnecting = false;\n          await this.updateConnectionStatus(false);\n        } else if (connection === 'open') {\n          this.connectionState = 'open';\n          this.isConnecting = false;\n          this.qrCode = null;\n          console.log('✅ WhatsApp connected successfully');\n          await this.updateConnectionStatus(true);\n          await this.clearQRFromDatabase();\n          \n          // Start connection health monitoring\n          this.startConnectionMonitoring();\n        }\n      });\n\n      // Save credentials when updated\n      this.socket.ev.on('creds.update', saveCreds);\n      \n    } catch (error) {\n      console.error('WhatsApp initialization error:', error);\n      this.isConnecting = false;\n      await this.updateConnectionStatus(false);\n    }\n  }\n\n\n  async sendMessage(phoneNumber: string, message: string): Promise<boolean> {\n    // Enhanced connection checking\n    console.log(`WhatsApp sendMessage attempt: socket=${!!this.socket}, connectionState=${this.connectionState}, isConnecting=${this.isConnecting}`);\n    \n    if (!this.socket || this.connectionState !== 'open') {\n      console.log(`WhatsApp not ready - Socket: ${!!this.socket}, State: ${this.connectionState}, Connecting: ${this.isConnecting}`);\n      \n      // Auto-reconnect if disconnected but not already connecting\n      if (!this.isConnecting && this.connectionState === 'close') {\n        console.log('Attempting WhatsApp auto-reconnect...');\n        await this.initialize(); // Wait for reconnection attempt\n        \n        // Check again after reconnection attempt\n        if (this.connectionState === 'open' && this.socket) {\n          console.log('WhatsApp reconnected successfully, retrying message send...');\n        } else {\n          console.log('WhatsApp reconnection failed, message cannot be sent');\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    try {\n      // Format phone number (add country code if not present)\n      let formattedNumber = phoneNumber.replace(/\\D/g, '');\n      if (!formattedNumber.startsWith('62')) {\n        if (formattedNumber.startsWith('0')) {\n          formattedNumber = '62' + formattedNumber.substring(1);\n        } else {\n          formattedNumber = '62' + formattedNumber;\n        }\n      }\n      \n      const jid = formattedNumber + '@s.whatsapp.net';\n      \n      console.log(`Sending WhatsApp to ${formattedNumber} (original: ${phoneNumber})`);\n      await this.socket.sendMessage(jid, { text: message });\n      console.log(`✅ WhatsApp message sent successfully to ${phoneNumber}`);\n      return true;\n    } catch (error) {\n      console.error('❌ Error sending WhatsApp message:', error);\n      \n      // Check if connection lost during send\n      if (this.connectionState !== 'open') {\n        console.log('Connection lost during send, marking as disconnected');\n        await this.updateConnectionStatus(false);\n      }\n      \n      return false;\n    }\n  }\n\n  getQRCode(): string | null {\n    return this.qrCode;\n  }\n\n  isConnected(): boolean {\n    return this.connectionState === 'open';\n  }\n\n  getConnectionState(): string {\n    return this.connectionState;\n  }\n\n  private async updateConnectionStatus(connected: boolean) {\n    try {\n      const config = await storage.getStoreConfig();\n      if (config) {\n        await storage.upsertStoreConfig({\n          ...config,\n          whatsappConnected: connected,\n        });\n      }\n    } catch (error) {\n      console.error('Error updating WhatsApp connection status:', error);\n    }\n  }\n\n  private async updateQRInDatabase() {\n    try {\n      const config = await storage.getStoreConfig();\n      if (config && this.qrCode) {\n        await storage.upsertStoreConfig({\n          ...config,\n          whatsappQR: this.qrCode,\n        });\n      }\n    } catch (error) {\n      console.error('Error updating QR code in database:', error);\n    }\n  }\n\n  private async clearQRFromDatabase() {\n    try {\n      const config = await storage.getStoreConfig();\n      if (config) {\n        await storage.upsertStoreConfig({\n          ...config,\n          whatsappQR: null,\n        });\n      }\n    } catch (error) {\n      console.error('Error clearing QR code from database:', error);\n    }\n  }\n\n  // Service notification templates\n  async sendServiceCreatedNotification(customerPhone: string, serviceTicket: any, customer: any, storeConfig: any): Promise<boolean> {\n    console.log(`📧 Attempting to send service creation notification to ${customerPhone} for ticket ${serviceTicket.ticketNumber}`);\n    // Dynamic domain detection for different deployment scenarios\n    const getBaseUrl = () => {\n      // Check for custom domain environment variable (untuk ngrok, cloudflare, dll)\n      if (process.env.PUBLIC_URL) {\n        return process.env.PUBLIC_URL;\n      }\n      \n      // Check for Replit domains\n      if (process.env.REPLIT_DOMAINS?.split(',')[0]) {\n        return 'https://' + process.env.REPLIT_DOMAINS.split(',')[0];\n      }\n      \n      // Check for custom app URL (untuk ngrok dll)\n      if (process.env.APP_URL) {\n        return process.env.APP_URL;\n      }\n      \n      // Check for ngrok URL pattern in environment\n      if (process.env.NGROK_URL) {\n        return process.env.NGROK_URL;\n      }\n      \n      // Production domain - profesionalservis.my.id\n      if (process.env.NODE_ENV === 'production' && process.env.DOMAIN_NAME) {\n        return `https://${process.env.DOMAIN_NAME}`;\n      }\n      \n      // Fallback to localhost with current port\n      const port = process.env.PORT || '3000';\n      return `http://localhost:${port}`;\n    };\n    \n    const statusUrl = `${getBaseUrl()}/service-status`;\n    \n    // Format estimated cost\n    const formatCurrency = (amount: string | number) => {\n      return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n      }).format(Number(amount));\n    };\n\n    // Format received date\n    const receivedDate = new Date(serviceTicket.createdAt).toLocaleDateString('id-ID', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    // Status label\n    const statusLabels = {\n      'pending': 'Menunggu Pemeriksaan',\n      'checking': 'Sedang Dicek',\n      'in-progress': 'Sedang Dikerjakan',\n      'waiting-parts': 'Menunggu Sparepart',\n      'waiting-payment': 'Menunggu Pembayaran',\n      'completed': 'Selesai',\n      'delivered': 'Sudah Diambil',\n      'cancelled': 'Dibatalkan'\n    };\n\n    // Build spare parts info if available\n    let sparepartsInfo = '';\n    if (serviceTicket.parts && serviceTicket.parts.length > 0) {\n      sparepartsInfo = `\\n\\n📦 **SPAREPART YANG DIPERLUKAN:**`;\n      serviceTicket.parts.forEach((part: any, index: number) => {\n        sparepartsInfo += `\\n${index + 1}. ${part.name}`;\n        sparepartsInfo += `\\n   • Jumlah: ${part.quantity} unit`;\n        sparepartsInfo += `\\n   • Harga: ${formatCurrency(part.unitPrice)}`;\n        if (part.description) {\n          sparepartsInfo += `\\n   • Keterangan: ${part.description}`;\n        }\n      });\n      \n      const totalParts = serviceTicket.parts.reduce((sum: number, part: any) => \n        sum + (Number(part.quantity) * Number(part.unitPrice)), 0\n      );\n      sparepartsInfo += `\\n\\n💰 **Total Sparepart:** ${formatCurrency(totalParts)}`;\n    }\n\n    const message = `🔧 **KONFIRMASI PENERIMAAN SERVICE**\n\nHalo ${customer.name},\n\nService laptop Anda telah kami terima dengan detail lengkap sebagai berikut:\n\n📋 **INFORMASI SERVICE:**\n📝 Nomor Service: *${serviceTicket.ticketNumber}*\n📅 Tanggal Diterima: ${receivedDate}\n⏰ Status Saat Ini: *${statusLabels[serviceTicket.status as keyof typeof statusLabels] || 'Menunggu'}*\n\n💻 **DETAIL PERANGKAT:**\n🏷️ Jenis: ${serviceTicket.deviceType}\n${serviceTicket.deviceBrand ? `🏭 Merk: ${serviceTicket.deviceBrand}` : ''}\n${serviceTicket.deviceModel ? `📱 Model: ${serviceTicket.deviceModel}` : ''}\n${serviceTicket.serialNumber ? `🔢 Serial Number: ${serviceTicket.serialNumber}` : ''}\n\n🔍 **KELUHAN & MASALAH:**\n${serviceTicket.problem}\n\n${serviceTicket.symptoms ? `🩺 **GEJALA YANG DIALAMI:**\\n${serviceTicket.symptoms}\\n\\n` : ''}\n${serviceTicket.notes ? `📌 **CATATAN TEKNISI:**\\n${serviceTicket.notes}\\n\\n` : ''}\n💰 **ESTIMASI BIAYA SERVICE:**\n${serviceTicket.estimatedCost ? formatCurrency(serviceTicket.estimatedCost) : 'Akan diberitahu setelah pemeriksaan'}\n${sparepartsInfo}\n\n📞 **INFORMASI KONTAK:**\n👤 Customer: ${customer.name}\n📱 Telepon: ${customer.phone}\n${customer.email ? `📧 Email: ${customer.email}` : ''}\n${customer.address ? `🏠 Alamat: ${customer.address}` : ''}\n\n🔍 **CEK STATUS SERVICE:**\nAnda dapat memantau perkembangan service kapan saja melalui:\n${statusUrl}?ticket=${serviceTicket.ticketNumber}\n*Klik link di atas untuk langsung melihat status service Anda*\n\n⚠️ **PENTING:**\n• Harap simpan nomor service untuk tracking\n• Kami akan menghubungi jika ada update penting\n• Estimasi waktu pengerjaan: ${serviceTicket.estimatedDays ? serviceTicket.estimatedDays + ' hari' : '3-7 hari kerja'}\n• Bawa tanda terima saat pengambilan\n\nTerima kasih telah mempercayakan perangkat Anda kepada kami. Kami akan memberikan pelayanan terbaik untuk memperbaiki laptop Anda.\n\n---\n🏪 **${storeConfig?.name || 'LaptopPOS Service Center'}**\n📍 ${storeConfig?.address || 'Alamat Toko'}\n📞 ${storeConfig?.phone || 'Telepon Toko'}\n${storeConfig?.email ? `📧 ${storeConfig.email}` : ''}`;\n\n    try {\n      const result = await this.sendMessage(customerPhone, message);\n      console.log(`📧 Service creation notification ${result ? 'sent successfully' : 'failed'} to ${customerPhone}`);\n      return result;\n    } catch (error) {\n      console.error(`❌ Service creation notification error for ${customerPhone}:`, error);\n      return false;\n    }\n  }\n\n  async sendServiceStatusNotification(customerPhone: string, serviceTicket: any, customer: any, storeConfig: any): Promise<boolean> {\n    console.log(`🔄 Attempting to send status update notification to ${customerPhone} for ticket ${serviceTicket.ticketNumber}, status: ${serviceTicket.status}`);\n    // Format currency\n    const formatCurrency = (amount: string | number) => {\n      return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n      }).format(Number(amount));\n    };\n\n    // Format update date\n    const updateDate = new Date().toLocaleDateString('id-ID', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    let statusText = '';\n    let emoji = '';\n    let nextSteps = '';\n    \n    switch (serviceTicket.status) {\n      case 'checking':\n        statusText = 'SEDANG DICEK';\n        emoji = '🔍';\n        nextSteps = 'Tim teknisi kami sedang memeriksa perangkat Anda untuk menentukan kerusakan dan solusi yang tepat.';\n        break;\n      case 'in-progress':\n        statusText = 'SEDANG DIKERJAKAN';\n        emoji = '🔧';\n        nextSteps = 'Perangkat Anda sedang dalam proses perbaikan. Tim teknisi kami bekerja untuk menyelesaikan masalah.';\n        break;\n      case 'completed':\n        statusText = 'SELESAI DIKERJAKAN';\n        emoji = '✅';\n        nextSteps = 'Perbaikan telah selesai! Perangkat siap diambil. Silakan datang ke toko dengan membawa tanda terima.';\n        break;\n      case 'cancelled':\n        statusText = 'DIBATALKAN';\n        emoji = '❌';\n        nextSteps = 'Service dibatalkan sesuai permintaan. Jika ada pertanyaan, silakan hubungi kami.';\n        break;\n      case 'waiting-parts':\n        statusText = 'MENUNGGU SPAREPART';\n        emoji = '📦';\n        nextSteps = 'Kami sedang memesan sparepart yang diperlukan. Akan ada update setelah sparepart tersedia.';\n        break;\n      case 'waiting-payment':\n        statusText = 'MENUNGGU PEMBAYARAN';\n        emoji = '💳';\n        nextSteps = 'Perbaikan selesai, silakan lakukan pembayaran untuk mengambil perangkat.';\n        break;\n      case 'waiting-confirmation':\n        statusText = 'MENUNGGU KONFIRMASI';\n        emoji = '❓';\n        nextSteps = 'Kami memerlukan konfirmasi dari Anda untuk melanjutkan perbaikan. Silakan hubungi kami.';\n        break;\n      case 'testing':\n        statusText = 'SEDANG TES';\n        emoji = '🧪';\n        nextSteps = 'Sedang dilakukan pengujian untuk memastikan perbaikan berfungsi dengan baik.';\n        break;\n      default:\n        statusText = 'DIUPDATE';\n        emoji = '🔄';\n        nextSteps = 'Status service Anda telah diperbarui. Silakan cek detail lengkap melalui link di bawah.';\n    }\n\n    // Dynamic domain detection for different deployment scenarios\n    const getBaseUrl = () => {\n      // Check for custom domain environment variable (untuk ngrok, cloudflare, dll)\n      if (process.env.PUBLIC_URL) {\n        return process.env.PUBLIC_URL;\n      }\n      \n      // Check for Replit domains\n      if (process.env.REPLIT_DOMAINS?.split(',')[0]) {\n        return 'https://' + process.env.REPLIT_DOMAINS.split(',')[0];\n      }\n      \n      // Check for custom app URL (untuk ngrok dll)\n      if (process.env.APP_URL) {\n        return process.env.APP_URL;\n      }\n      \n      // Check for ngrok URL pattern in environment\n      if (process.env.NGROK_URL) {\n        return process.env.NGROK_URL;\n      }\n      \n      // Production domain - profesionalservis.my.id\n      if (process.env.NODE_ENV === 'production' && process.env.DOMAIN_NAME) {\n        return `https://${process.env.DOMAIN_NAME}`;\n      }\n      \n      // Fallback to localhost with current port\n      const port = process.env.PORT || '3000';\n      return `http://localhost:${port}`;\n    };\n    \n    const statusUrl = `${getBaseUrl()}/service-status`;\n    \n    // Build diagnosis and solution info\n    let progressInfo = '';\n    if (serviceTicket.diagnosis) {\n      progressInfo += `\\n🔍 **HASIL DIAGNOSIS:**\\n${serviceTicket.diagnosis}`;\n    }\n    if (serviceTicket.solution) {\n      progressInfo += `\\n\\n🔧 **SOLUSI PERBAIKAN:**\\n${serviceTicket.solution}`;\n    }\n    if (serviceTicket.actualCost && serviceTicket.actualCost > 0) {\n      progressInfo += `\\n\\n💰 **BIAYA AKTUAL:**\\n${formatCurrency(serviceTicket.actualCost)}`;\n    }\n\n    // Completion info for completed status\n    let completionInfo = '';\n    if (serviceTicket.status === 'completed' && serviceTicket.completedAt) {\n      const completedDate = new Date(serviceTicket.completedAt).toLocaleDateString('id-ID', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      completionInfo = `\\n\\n✅ **WAKTU SELESAI:** ${completedDate}`;\n    }\n\n    const message = `${emoji} **UPDATE STATUS SERVICE**\\n\\nHalo ${customer.name},\\n\\nAda update untuk service laptop Anda:\\n\\n📋 **INFORMASI SERVICE:**\\n📝 Nomor Service: *${serviceTicket.ticketNumber}*\\n📅 Update Terakhir: ${updateDate}\\n⏰ Status: *${statusText}*\\n\\n💻 **PERANGKAT:**\\n${serviceTicket.deviceType}${serviceTicket.deviceBrand ? ` - ${serviceTicket.deviceBrand}` : ''}${serviceTicket.deviceModel ? ` ${serviceTicket.deviceModel}` : ''}\\n\\n🔍 **MASALAH:**\\n${serviceTicket.problem}${progressInfo}${completionInfo}\\n\\n💬 **LANGKAH SELANJUTNYA:**\\n${nextSteps}\\n\\n🔍 **CEK STATUS DETAIL:**\\nUntuk informasi lebih lengkap, kunjungi:\\n${statusUrl}?ticket=${serviceTicket.ticketNumber}\\n\\n${serviceTicket.status === 'completed' ? '⚠️ **PENTING:** Harap bawa tanda terima saat pengambilan!' : '📞 **INFO:** Kami akan update jika ada perkembangan baru.'}\\n\\n---\\n🏪 **${storeConfig?.name || 'LaptopPOS Service Center'}**\\n📞 ${storeConfig?.phone || 'Telepon Toko'}`;\n\n    try {\n      const result = await this.sendMessage(customerPhone, message);\n      console.log(`🔄 Status update notification ${result ? 'sent successfully' : 'failed'} to ${customerPhone}`);\n      return result;\n    } catch (error) {\n      console.error(`❌ Status update notification error for ${customerPhone}:`, error);\n      return false;\n    }\n  }\n\n  private startConnectionMonitoring() {\n    // Clear existing heartbeat if any\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n\n    // Check connection every 30 seconds\n    this.heartbeatInterval = setInterval(() => {\n      if (this.connectionState !== 'open' && !this.isConnecting) {\n        console.log('🩺 WhatsApp connection lost, attempting reconnection...');\n        this.initialize();\n      }\n    }, 30000);\n  }\n\n  async disconnect() {\n    // Clear heartbeat monitoring\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n\n    if (this.socket) {\n      await this.socket.logout();\n      this.socket = null;\n    }\n    await this.updateConnectionStatus(false);\n    await this.clearQRFromDatabase();\n  }\n}\n\nexport const whatsappService = new WhatsAppService();","size_bytes":19223},"client/src/components/WhatsAppSettings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { MessageCircle, QrCode, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WhatsAppSettingsProps {\n  storeConfig: any;\n}\n\nexport function WhatsAppSettings({ storeConfig }: WhatsAppSettingsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [testPhone, setTestPhone] = useState(\"\");\n  \n  const whatsappEnabled = storeConfig?.whatsappEnabled || false;\n\n  // Query WhatsApp status\n  const { data: whatsappStatus, isLoading: statusLoading } = useQuery({\n    queryKey: ['/api/whatsapp/status'],\n    enabled: whatsappEnabled,\n    refetchInterval: false, // Disable automatic polling to prevent infinite loop\n    staleTime: 30000, // Cache for 30 seconds\n    refetchOnWindowFocus: false,\n  });\n\n  // Enable/disable WhatsApp mutation\n  const toggleWhatsAppMutation = useMutation({\n    mutationFn: async (enabled: boolean) => {\n      const response = await fetch(`/api/whatsapp/${enabled ? 'enable' : 'disable'}`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to toggle WhatsApp');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate WhatsApp status and dashboard stats for real-time sync\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Pengaturan WhatsApp berhasil diubah\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Gagal mengubah pengaturan WhatsApp\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Connect WhatsApp mutation\n  const connectWhatsAppMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/whatsapp/connect', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to connect WhatsApp');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Proses koneksi WhatsApp dimulai. Scan QR code untuk menghubungkan.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Gagal menghubungkan WhatsApp\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Disconnect WhatsApp mutation\n  const disconnectWhatsAppMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/whatsapp/disconnect', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to disconnect WhatsApp');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"WhatsApp berhasil diputuskan\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Gagal memutuskan WhatsApp\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test message mutation\n  const testMessageMutation = useMutation({\n    mutationFn: async (phone: string) => {\n      const response = await fetch('/api/whatsapp/test-message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ phoneNumber: phone }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send test message');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Berhasil\",\n        description: \"Pesan test berhasil dikirim\",\n      });\n      setTestPhone(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Gagal mengirim pesan test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestMessage = () => {\n    if (!testPhone.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Masukkan nomor telepon terlebih dahulu\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    testMessageMutation.mutate(testPhone);\n  };\n\n  const whatsappConnected = (whatsappStatus as any)?.connected || false;\n  const connectionState = (whatsappStatus as any)?.state || 'close';\n  const qrCode = (whatsappStatus as any)?.qrCode;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <MessageCircle className=\"w-5 h-5 mr-2\" />\n          Integrasi WhatsApp\n        </CardTitle>\n        <CardDescription>\n          Hubungkan WhatsApp untuk mengirim notifikasi otomatis ke pelanggan\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Enable/Disable WhatsApp */}\n        <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n          <div>\n            <h4 className=\"font-medium\">Status WhatsApp</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              {whatsappEnabled ? \"WhatsApp integration aktif\" : \"WhatsApp integration nonaktif\"}\n            </p>\n          </div>\n          <Button\n            variant={whatsappEnabled ? \"destructive\" : \"default\"}\n            onClick={() => toggleWhatsAppMutation.mutate(!whatsappEnabled)}\n            disabled={toggleWhatsAppMutation.isPending}\n            data-testid={whatsappEnabled ? \"button-disable-whatsapp\" : \"button-enable-whatsapp\"}\n          >\n            {toggleWhatsAppMutation.isPending ? \"Loading...\" : whatsappEnabled ? \"Nonaktifkan\" : \"Aktifkan\"}\n          </Button>\n        </div>\n\n        {/* Connection Status & Actions */}\n        <div className=\"p-4 border rounded-lg\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h4 className=\"font-medium\">Status Koneksi</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                {whatsappConnected ? (\n                  <span className=\"text-green-600\">✅ Terhubung</span>\n                ) : (\n                  <span className=\"text-red-600\">❌ Tidak terhubung</span>\n                )}\n              </p>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                State: {connectionState}\n                {statusLoading && <RefreshCw className=\"w-3 h-3 ml-1 inline animate-spin\" />}\n              </p>\n            </div>\n            \n            <div className=\"space-x-2\">\n              {!whatsappConnected ? (\n                <Button\n                  onClick={() => connectWhatsAppMutation.mutate()}\n                  disabled={connectWhatsAppMutation.isPending}\n                  data-testid=\"button-connect-whatsapp\"\n                >\n                  {connectWhatsAppMutation.isPending ? (\n                    <>\n                      <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Connecting...\n                    </>\n                  ) : (\n                    <>\n                      <QrCode className=\"w-4 h-4 mr-2\" />\n                      Connect\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => disconnectWhatsAppMutation.mutate()}\n                  disabled={disconnectWhatsAppMutation.isPending}\n                  data-testid=\"button-disconnect-whatsapp\"\n                >\n                  {disconnectWhatsAppMutation.isPending ? \"Disconnecting...\" : \"Disconnect\"}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* QR Code Display */}\n          {qrCode && !whatsappConnected && (\n            <div className=\"mt-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\">\n              <h5 className=\"font-medium mb-2 flex items-center\">\n                <QrCode className=\"w-4 h-4 mr-2\" />\n                Scan QR Code\n              </h5>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Buka WhatsApp di ponsel → Settings → Linked Devices → Link a Device → Scan QR code di bawah\n              </p>\n              <div className=\"flex justify-center\">\n                <img \n                  src={qrCode} \n                  alt=\"WhatsApp QR Code\" \n                  className=\"w-64 h-64 border rounded-lg\"\n                  data-testid=\"img-qr-code\"\n                />\n              </div>\n              <p className=\"text-xs text-center text-muted-foreground mt-2\">\n                QR code akan diperbarui secara otomatis setiap beberapa detik\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Test Message - Only show when connected */}\n        {whatsappConnected && (\n          <div className=\"p-4 border rounded-lg\">\n            <h4 className=\"font-medium mb-4\">Test Pesan</h4>\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"testPhone\">Nomor Telepon (dengan kode negara)</Label>\n                <Input\n                  id=\"testPhone\"\n                  placeholder=\"contoh: 628123456789\"\n                  value={testPhone}\n                  onChange={(e) => setTestPhone(e.target.value)}\n                  data-testid=\"input-test-phone\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Format: 628xxxxxxxxx (tanpa tanda + atau spasi)\n                </p>\n              </div>\n              <Button\n                onClick={handleTestMessage}\n                disabled={testMessageMutation.isPending || !testPhone.trim()}\n                data-testid=\"button-send-test\"\n              >\n                {testMessageMutation.isPending ? \"Mengirim...\" : \"Kirim Test Pesan\"}\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Kirim pesan test untuk memastikan koneksi WhatsApp berfungsi dengan baik\n            </p>\n          </div>\n        )}\n\n        {/* Feature Information */}\n        <div className=\"space-y-4\">\n          <div className=\"border-t pt-4\">\n            <h4 className=\"font-medium mb-3\">Fitur Notifikasi Otomatis</h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                <span>Service baru diterima</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                <span>Status service berubah (sedang dikerjakan, selesai, dll)</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                <span>Service siap diambil</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11764},"client/src/components/ServiceReceipt.tsx":{"content":"import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { formatDateWithTime, formatDateShort } from '@shared/utils/timezone';\nimport { Printer, Download, FileText } from \"lucide-react\";\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ServiceReceiptProps {\n  serviceData: {\n    id: string;\n    serviceNumber: string;\n    device: string;\n    problem: string;\n    diagnosis?: string;\n    status: string;\n    totalCost: string;\n    estimatedCompletion?: string;\n    completedAt?: string;\n    createdAt: string;\n    // Warranty fields\n    warrantyDuration?: number;\n    warrantyStartDate?: string;\n    warrantyEndDate?: string;\n    customer?: {\n      name: string;\n      phone?: string;\n      email?: string;\n    };\n    parts?: Array<{\n      product: {\n        name: string;\n      };\n      quantity: number;\n      unitPrice: string;\n      totalPrice: string;\n    }>;\n  };\n  storeConfig?: {\n    name: string;\n    address?: string;\n    phone?: string;\n    email?: string;\n  };\n}\n\nconst statusConfig = {\n  pending: 'Menunggu',\n  'in-progress': 'Dikerjakan',\n  'waiting-parts': 'Menunggu Sparepart',\n  'waiting-payment': 'Menunggu Pembayaran',\n  completed: 'Selesai',\n  cancelled: 'Dibatalkan',\n};\n\nconst paperSizes = {\n  '58': { width: 58, name: '58mm (Mini)' },\n  '80': { width: 80, name: '80mm (Standard)' },\n  '100': { width: 100, name: '100mm (Large)' }\n};\n\nexport default function ServiceReceipt({ serviceData, storeConfig }: ServiceReceiptProps) {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [paperSize, setPaperSize] = useState<'58' | '80' | '100'>('80');\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      const element = document.getElementById('service-receipt-content');\n      if (!element) return;\n\n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n      });\n\n      const imgData = canvas.toDataURL('image/png');\n      const thermalWidth = paperSizes[paperSize].width;\n      const thermalHeight = (canvas.height / canvas.width) * thermalWidth;\n      \n      const pdf = new jsPDF('p', 'mm', [thermalWidth, thermalHeight]);\n      pdf.addImage(imgData, 'PNG', 0, 0, thermalWidth, thermalHeight);\n      pdf.save(`Nota-Service-${serviceData.serviceNumber}-${thermalWidth}mm.pdf`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handlePrint = () => {\n    try {\n      // Ukuran kertas sesuai thermal yang dipilih\n      const thermalWidth = paperSizes[paperSize].width;\n      const fontSize = paperSize === '58' ? '7px' : paperSize === '80' ? '8px' : '10px';\n      \n      const printStyle = `\n        <style id=\"thermal-print-style\">\n          @media print {\n            * { \n              visibility: hidden; \n              margin: 0 !important; \n              padding: 0 !important;\n              box-sizing: border-box;\n            }\n            #service-receipt-content, \n            #service-receipt-content * { \n              visibility: visible; \n            }\n            #service-receipt-content {\n              position: absolute;\n              left: 0;\n              top: 0;\n              width: ${thermalWidth}mm;\n              max-width: ${thermalWidth}mm;\n              font-family: 'Courier New', monospace;\n              font-size: ${fontSize};\n              line-height: 1.0;\n              color: #000;\n              background: #fff;\n              page-break-inside: avoid;\n              page-break-after: avoid;\n              page-break-before: avoid;\n              height: auto;\n              max-height: 250mm;\n            }\n            .no-print { \n              display: none !important; \n            }\n            @page {\n              size: ${thermalWidth}mm 300mm;\n              margin: 1mm;\n            }\n            .text-center { text-align: center; }\n            .font-bold { font-weight: bold; }\n            .flex { display: flex; }\n            .flex-1 { flex: 1; }\n            .justify-between { justify-content: space-between; }\n            .items-center { align-items: center; }\n            .border-t { \n              border-top: 1px dashed #333; \n              margin: 1px 0 !important; \n            }\n            .border-solid { border-style: solid; }\n            .border-gray-800 { border-color: #333; }\n            .text-gray-600 { color: #666; }\n            .space-y-1 > * + * { margin-top: 1px !important; }\n            .py-2 { padding: 1px 0 !important; }\n            .my-2 { margin: 1px 0 !important; }\n            .mb-2 { margin-bottom: 1px !important; }\n            .mt-6 { margin-top: 2px !important; }\n            h3 { font-size: ${fontSize}; margin: 1px 0 !important; }\n            div { margin: 0 !important; padding: 0 !important; }\n            p { margin: 0 !important; padding: 0 !important; }\n          }\n          @media screen {\n            #thermal-print-style { display: none; }\n          }\n        </style>\n      `;\n      \n      // Hapus style print lama jika ada\n      const oldStyle = document.getElementById('thermal-print-style');\n      if (oldStyle) oldStyle.remove();\n      \n      // Tambahkan CSS print baru\n      document.head.insertAdjacentHTML('beforeend', printStyle);\n      \n      // Print\n      window.print();\n      \n      // Restore setelah delay\n      setTimeout(() => {\n        const printStyleElement = document.getElementById('thermal-print-style');\n        if (printStyleElement) {\n          printStyleElement.remove();\n        }\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Terjadi kesalahan saat mencetak. Silakan coba lagi.');\n    }\n  };\n\n  const getReceiptWidth = () => {\n    switch (paperSize) {\n      case '58': return 'max-w-[58mm]';\n      case '80': return 'max-w-[80mm]';\n      case '100': return 'max-w-[100mm]';\n      default: return 'max-w-[80mm]';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (paperSize) {\n      case '58': return 'text-xs';\n      case '80': return 'text-sm';\n      case '100': return 'text-base';\n      default: return 'text-sm';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Paper Size Selector */}\n      <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg no-print\">\n        <Label htmlFor=\"paper-size\" className=\"font-medium\">Ukuran Kertas:</Label>\n        <Select value={paperSize} onValueChange={(value: '58' | '80' | '100') => setPaperSize(value)}>\n          <SelectTrigger className=\"w-48\" id=\"paper-size\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"58\">{paperSizes['58'].name}</SelectItem>\n            <SelectItem value=\"80\">{paperSizes['80'].name}</SelectItem>\n            <SelectItem value=\"100\">{paperSizes['100'].name}</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex gap-2 mb-4 no-print\">\n        <Button onClick={handlePrint} variant=\"outline\" data-testid=\"button-print\">\n          <Printer className=\"h-4 w-4 mr-2\" />\n          Print\n        </Button>\n        <Button \n          onClick={generatePDF} \n          variant=\"outline\"\n          disabled={isGenerating}\n          data-testid=\"button-download-pdf\"\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          {isGenerating ? 'Generating...' : 'Download PDF'}\n        </Button>\n      </div>\n\n      {/* Receipt Preview */}\n      <div className=\"flex justify-center\">\n        <Card className={`${getReceiptWidth()} mx-auto`}>\n          <CardContent className=\"p-4\">\n            <div id=\"service-receipt-content\" className={`space-y-2 ${getTextSize()}`} style={{ fontFamily: 'Courier New, monospace' }}>\n              {/* Header */}\n              <div className=\"text-center space-y-1\">\n                <h2 className={`${paperSize === '58' ? 'text-sm' : paperSize === '80' ? 'text-base' : 'text-lg'} font-bold`} data-testid=\"text-store-name\">\n                  {storeConfig?.name || 'LaptopPOS Service Center'}\n                </h2>\n                {storeConfig?.address && (\n                  <p className={`${getTextSize()} text-gray-600`} data-testid=\"text-store-address\">{storeConfig.address}</p>\n                )}\n                <div className={`flex flex-col ${getTextSize()} text-gray-600`}>\n                  {storeConfig?.phone && <span data-testid=\"text-store-phone\">Tel: {storeConfig.phone}</span>}\n                  {storeConfig?.email && <span data-testid=\"text-store-email\">{storeConfig.email}</span>}\n                </div>\n              </div>\n\n              <div className=\"text-center py-2\">\n                <h3 className={`${paperSize === '58' ? 'text-sm' : paperSize === '80' ? 'text-base' : 'text-lg'} font-bold`}>NOTA SERVICE</h3>\n                <p className={`${getTextSize()} font-semibold`} data-testid=\"text-service-number\">#{serviceData.serviceNumber}</p>\n              </div>\n\n              <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n              {/* Service Info - Thermal Layout */}\n              <div className={`space-y-1 ${getTextSize()}`}>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-bold\">Tanggal:</span>\n                  <span data-testid=\"text-service-date\">{formatDateWithTime(serviceData.createdAt)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-bold\">Customer:</span>\n                  <span data-testid=\"text-customer-name\">{serviceData.customer?.name || '-'}</span>\n                </div>\n                {serviceData.customer?.phone && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-bold\">Telepon:</span>\n                    <span data-testid=\"text-customer-phone\">{serviceData.customer.phone}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"font-bold\">Status:</span>\n                  <span data-testid=\"text-service-status\">{statusConfig[serviceData.status as keyof typeof statusConfig]}</span>\n                </div>\n              </div>\n\n              <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n              {/* Device & Problem */}\n              <div className={`space-y-1 ${getTextSize()}`}>\n                <div>\n                  <span className=\"font-bold\">Perangkat:</span> <span data-testid=\"text-device\">{serviceData.device}</span>\n                </div>\n                <div>\n                  <span className=\"font-bold\">Keluhan:</span> <span data-testid=\"text-problem\">{serviceData.problem}</span>\n                </div>\n                {serviceData.diagnosis && (\n                  <div>\n                    <span className=\"font-bold\">Diagnosis:</span> <span data-testid=\"text-diagnosis\">{serviceData.diagnosis}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Parts Used */}\n              {serviceData.parts && serviceData.parts.length > 0 && (\n                <>\n                  <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n                  <div>\n                    <div className={`font-bold mb-2 ${getTextSize()}`}>Sparepart:</div>\n                    {serviceData.parts.map((part, index) => (\n                      <div key={index} className={`flex justify-between ${getTextSize()}`}>\n                        <div className=\"flex-1\">\n                          <div data-testid={`text-part-name-${index}`}>{part.product.name}</div>\n                          <div className=\"text-gray-600\">{part.quantity} x {formatCurrency(part.unitPrice)}</div>\n                        </div>\n                        <div data-testid={`text-part-total-${index}`}>{formatCurrency(part.totalPrice)}</div>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n\n              <div className=\"border-t border-solid border-gray-800 my-2\"></div>\n\n              {/* Total */}\n              <div className={`flex justify-between items-center font-bold ${getTextSize()}`}>\n                <span>Total Service:</span>\n                <span data-testid=\"text-total-cost\">{formatCurrency(serviceData.totalCost)}</span>\n              </div>\n\n              {/* Warranty Information */}\n              {(serviceData as any).warrantyDuration && (\n                <>\n                  <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n                  <div className={`space-y-1 ${getTextSize()}`}>\n                    <div className=\"text-center font-bold\">\n                      === INFORMASI GARANSI ===\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-bold\">Durasi Garansi:</span>\n                      <span data-testid=\"warranty-duration\">\n                        {(serviceData as any).warrantyDuration === 999999 ? 'Unlimited' : `${(serviceData as any).warrantyDuration} hari`}\n                      </span>\n                    </div>\n                    {(serviceData as any).warrantyStartDate && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-bold\">Mulai Garansi:</span>\n                        <span data-testid=\"warranty-start\">\n                          {formatDateShort((serviceData as any).warrantyStartDate)}\n                        </span>\n                      </div>\n                    )}\n                    {(serviceData as any).warrantyEndDate && (serviceData as any).warrantyDuration !== 999999 && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-bold\">Berakhir:</span>\n                        <span data-testid=\"warranty-end\">\n                          {formatDateShort((serviceData as any).warrantyEndDate)}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n\n              <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n              {/* Footer */}\n              <div className={`text-center ${getTextSize()} text-gray-600 space-y-1 mt-6`}>\n                <div>Terima kasih atas kepercayaan Anda!</div>\n                {!(serviceData as any).warrantyDuration && (\n                  <div>Garansi service 30 hari</div>\n                )}\n                <div data-testid=\"text-print-date\">Cetak: {formatDateWithTime(new Date())}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15284},"client/src/pages/ServiceStatus.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Search, Clock, CheckCircle, AlertCircle, Package, Calendar, Receipt, Settings, TestTube, FileText } from \"lucide-react\";\nimport { formatDateLong } from '@shared/utils/timezone';\nimport ServiceStatusTracker from \"@/components/ServiceStatusTracker\";\n\nconst statusConfig = {\n  pending: { label: 'Belum Cek', color: 'bg-yellow-500', icon: Clock },\n  checking: { label: 'Sedang Cek', color: 'bg-sky-500', icon: AlertCircle },\n  'in-progress': { label: 'Sedang Dikerjakan', color: 'bg-blue-500', icon: Settings },\n  'waiting-technician': { label: 'Ditunggu MITRA Teknik', color: 'bg-gray-500', icon: AlertCircle },\n  testing: { label: 'Sedang Tes', color: 'bg-indigo-500', icon: TestTube },\n  'waiting-confirmation': { label: 'Menunggu Konfirmasi', color: 'bg-red-500', icon: FileText },\n  'waiting-parts': { label: 'Menunggu Sparepart', color: 'bg-orange-500', icon: Package },\n  'waiting-payment': { label: 'Menunggu Pembayaran', color: 'bg-purple-500', icon: Receipt },\n  completed: { label: 'Selesai', color: 'bg-green-500', icon: CheckCircle },\n  delivered: { label: 'Sudah Diambil', color: 'bg-emerald-500', icon: CheckCircle },\n  cancelled: { label: 'Dibatalkan', color: 'bg-red-500', icon: AlertCircle },\n};\n\nexport default function ServiceStatus() {\n  const [serviceNumber, setServiceNumber] = useState(\"\");\n  const [searchClicked, setSearchClicked] = useState(false);\n  const [showStatusTracker, setShowStatusTracker] = useState(false);\n  const [location] = useLocation();\n\n  // Auto-fill service number from URL parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const ticketParam = urlParams.get('ticket');\n    if (ticketParam) {\n      setServiceNumber(ticketParam);\n      setSearchClicked(true); // Automatically search when ticket is provided\n    }\n  }, [location]);\n\n  const { data: serviceData, isLoading, error } = useQuery({\n    queryKey: ['/api/public/service-status', serviceNumber],\n    enabled: searchClicked && serviceNumber.length > 0,\n    retry: false,\n  }) as {\n    data: {\n      ticketNumber: string;\n      customerName: string;\n      deviceType: string;\n      deviceBrand: string;\n      deviceModel: string;\n      problem: string;\n      diagnosis?: string;\n      status: string;\n      estimatedCost?: string;\n      estimatedCompletion?: string;\n      completedAt?: string;\n      createdAt: string;\n      parts?: Array<{\n        name: string;\n        quantity: number;\n        unitPrice: string;\n      }>;\n    } | undefined;\n    isLoading: boolean;\n    error: any;\n  };\n\n  const handleSearch = () => {\n    if (serviceNumber.trim()) {\n      setSearchClicked(true);\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const status = serviceData?.status ? statusConfig[serviceData.status as keyof typeof statusConfig] : null;\n  const StatusIcon = status?.icon || Clock;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container max-w-2xl mx-auto px-4\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Cek Status Service</h1>\n          <p className=\"text-gray-600\">Masukkan nomor service untuk melihat status perbaikan perangkat Anda</p>\n        </div>\n\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Masukkan nomor service (contoh: SRV-20240830-001)\"\n                value={serviceNumber}\n                onChange={(e) => setServiceNumber(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                className=\"flex-1\"\n                data-testid=\"input-service-number\"\n              />\n              <Button onClick={handleSearch} disabled={!serviceNumber.trim()} data-testid=\"button-search\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Cari\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {isLoading && (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Mencari data service...</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {error && (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Service Tidak Ditemukan</h3>\n              <p className=\"text-gray-600\">\n                Nomor service yang Anda masukkan tidak ditemukan. Pastikan nomor service benar.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {serviceData && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Receipt className=\"h-5 w-5\" />\n                  Detail Service\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Nomor Service</label>\n                    <p className=\"font-semibold\" data-testid=\"text-service-number\">{serviceData.ticketNumber}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Status</label>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={`${status?.color} text-white`}>\n                        <StatusIcon className=\"h-3 w-3 mr-1\" />\n                        {status?.label}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Nama Customer</label>\n                  <p className=\"font-semibold\" data-testid=\"text-customer-name\">{serviceData.customerName}</p>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Perangkat</label>\n                  <p className=\"font-semibold\" data-testid=\"text-device\">{serviceData.deviceType} {serviceData.deviceBrand} {serviceData.deviceModel}</p>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Keluhan</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-problem\">{serviceData.problem}</p>\n                </div>\n\n                {serviceData.diagnosis && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Diagnosis</label>\n                    <p className=\"text-gray-900\" data-testid=\"text-diagnosis\">{serviceData.diagnosis}</p>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Tanggal Masuk</label>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-gray-400\" />\n                      <span data-testid=\"text-created-date\">\n                        {formatDateLong(serviceData.createdAt)}\n                      </span>\n                    </div>\n                  </div>\n                  {serviceData.estimatedCompletion && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Estimasi Selesai</label>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-gray-400\" />\n                        <span data-testid=\"text-estimated-completion\">\n                          {formatDateLong(serviceData.estimatedCompletion)}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {serviceData.completedAt && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Tanggal Selesai</label>\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      <span data-testid=\"text-completed-date\">\n                        {formatDateLong(serviceData.completedAt)}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {serviceData.parts && serviceData.parts.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5\" />\n                    Sparepart yang Digunakan\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {serviceData.parts.map((part: any, index: number) => (\n                      <div key={index} className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-0\">\n                        <div>\n                          <p className=\"font-medium\" data-testid={`text-part-name-${index}`}>{part.name}</p>\n                          <p className=\"text-sm text-gray-500\">Qty: {part.quantity}</p>\n                        </div>\n                        <p className=\"font-semibold\" data-testid={`text-part-price-${index}`}>\n                          {formatCurrency(part.unitPrice)}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Estimasi Biaya Service</span>\n                  <span className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-cost\">\n                    {serviceData.estimatedCost ? formatCurrency(serviceData.estimatedCost) : 'Belum ditentukan'}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Button */}\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Button \n                  onClick={() => setShowStatusTracker(true)}\n                  className=\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 mx-auto\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                  Detail Status Proses Service\n                </Button>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Lihat tahapan detail proses perbaikan perangkat Anda\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Service Status Tracker Dialog */}\n        {serviceData && (\n          <ServiceStatusTracker\n            isOpen={showStatusTracker}\n            onClose={() => setShowStatusTracker(false)}\n            serviceNumber={serviceData.ticketNumber}\n            currentStatus={serviceData.status}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12088},"client/src/pages/purchasing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, ShoppingCart, Package, Truck, CheckCircle, Clock, AlertCircle, Eye, Edit, Trash2, MoreHorizontal } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { z } from \"zod\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useWebSocket } from \"@/lib/websocket\";\nimport { formatDateShort } from '@shared/utils/timezone';\n\n// Schema for forms\nconst purchaseOrderSchema = z.object({\n  supplierId: z.string().min(1, \"Supplier wajib dipilih\"),\n  expectedDeliveryDate: z.string().min(1, \"Tanggal pengiriman wajib diisi\"),\n  notes: z.string().optional(),\n});\n\nconst purchaseOrderItemSchema = z.object({\n  productId: z.string().min(1, \"Produk wajib dipilih\"),\n  quantity: z.number().min(1, \"Kuantitas minimal 1\"),\n  unitCost: z.string().min(1, \"Harga satuan wajib diisi\"),\n  notes: z.string().optional(),\n});\n\nexport default function PurchasingPage() {\n  const [selectedTab, setSelectedTab] = useState(\"orders\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedPO, setSelectedPO] = useState<any>(null);\n  const [isAddPOOpen, setIsAddPOOpen] = useState(false);\n  const [isAddItemOpen, setIsAddItemOpen] = useState(false);\n  const [poItems, setPOItems] = useState<any[]>([]);\n  const [receivingPOOpen, setReceivingPOOpen] = useState(false);\n  const [receivingItems, setReceivingItems] = useState<any[]>([]);\n  const [viewPOOpen, setViewPOOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n  \n  // WebSocket for real-time updates\n  const websocketHook = useWebSocket();\n  const { isConnected } = websocketHook;\n  \n  // Type guard for WebSocket with socket property\n  const websocket = (websocketHook as any).socket;\n\n  // Forms\n  const poForm = useForm({\n    resolver: zodResolver(purchaseOrderSchema),\n    defaultValues: {\n      supplierId: \"\",\n      expectedDeliveryDate: \"\",\n      notes: \"\",\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const itemForm = useForm({\n    resolver: zodResolver(purchaseOrderItemSchema),\n    defaultValues: {\n      productId: \"\",\n      quantity: 1,\n      unitCost: \"\",\n      notes: \"\",\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  // Queries with proper type guards and array defaults\n  const { data: purchaseOrders = [], isLoading: ordersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-orders\"],\n    enabled: selectedTab === \"orders\",\n  });\n\n  const { data: suppliers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: selectedPOItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-orders\", selectedPO?.id, \"items\"],\n    enabled: !!selectedPO?.id,\n  });\n\n  // Get ALL outstanding items from ALL purchase orders for reports\n  const { data: allOutstandingItemsData = [] } = useQuery<any[]>({\n    queryKey: [\"/api/purchase-orders/outstanding-items\"],\n    retry: false,\n  });\n  \n  // Data untuk outstanding items dari SEMUA PO (untuk laporan)\n  const allOutstandingItems = Array.isArray(allOutstandingItemsData) ? allOutstandingItemsData : [];\n  \n  // Data untuk outstanding items dari PO terpilih saja (untuk dialog detail PO)\n  const selectedPOOutstandingItems = Array.isArray(selectedPOItems) ? selectedPOItems.filter((item: any) => (item.outstandingQuantity || 0) > 0) : [];\n  \n  // Auto-refresh data saat page focus kembali - lebih agresif\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (!document.hidden) {\n        // Comprehensive refresh saat user kembali ke tab\n        queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n        \n        // Refresh selected PO items jika ada\n        if (selectedPO?.id) {\n          queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", selectedPO.id, \"items\"] });\n        }\n      }\n    };\n    \n    const handleFocus = () => {\n      // Refresh saat window mendapat focus\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('focus', handleFocus);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('focus', handleFocus);\n    };\n  }, [queryClient, selectedPO?.id]);\n  \n  // WebSocket event listeners untuk real-time updates - lebih responsif\n  useEffect(() => {\n    if (!websocket || !isConnected) return;\n\n    const handlePurchaseUpdate = (data: any) => {\n      console.log('Real-time update received:', data);\n      // Invalidate semua queries terkait untuk update instan\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      \n      // Refresh selected PO items jika ada\n      if (selectedPO?.id) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", selectedPO.id, \"items\"] });\n      }\n    };\n\n    const handleInventoryUpdate = (data: any) => {\n      console.log('Inventory update received:', data);\n      // Update inventory dan stock data\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n    };\n\n    // Listen untuk berbagai event real-time\n    websocket.on('data_update', handlePurchaseUpdate);\n    websocket.on('purchase_updated', handlePurchaseUpdate);\n    websocket.on('purchase_order_updated', handlePurchaseUpdate);\n    websocket.on('purchase_orders', handlePurchaseUpdate);\n    websocket.on('purchase_order_items', handlePurchaseUpdate);\n    websocket.on('stock_updated', handleInventoryUpdate);\n    websocket.on('inventory', handleInventoryUpdate);\n\n    return () => {\n      websocket.off('data_update', handlePurchaseUpdate);\n      websocket.off('purchase_updated', handlePurchaseUpdate);\n      websocket.off('purchase_order_updated', handlePurchaseUpdate);\n      websocket.off('purchase_orders', handlePurchaseUpdate);\n      websocket.off('purchase_order_items', handlePurchaseUpdate);\n      websocket.off('stock_updated', handleInventoryUpdate);\n      websocket.off('inventory', handleInventoryUpdate);\n    };\n  }, [websocket, isConnected, queryClient, selectedPO?.id]);\n  \n  // Auto-refresh setiap 5 detik untuk data terbaru yang instan\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!document.hidden) {\n        // Refresh data berdasarkan tab aktif\n        if (selectedTab === \"orders\") {\n          queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n          queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n        }\n        // Selalu refresh products untuk update stock\n        queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      }\n    }, 5000); // 5 detik untuk responsivitas yang lebih baik\n    \n    return () => clearInterval(interval);\n  }, [selectedTab, queryClient]);\n  \n  // Auto-refresh saat user berinteraksi (mouse move, click, keyboard)\n  useEffect(() => {\n    let lastActivity = Date.now();\n    const refreshOnActivity = () => {\n      const now = Date.now();\n      // Refresh jika tidak ada aktivitas dalam 2 detik terakhir (debouncing)\n      if (now - lastActivity > 2000) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n        lastActivity = now;\n      }\n    };\n    \n    const handleActivity = () => {\n      lastActivity = Date.now();\n      setTimeout(refreshOnActivity, 2000);\n    };\n    \n    window.addEventListener('click', handleActivity);\n    window.addEventListener('keydown', handleActivity);\n    \n    return () => {\n      window.removeEventListener('click', handleActivity);\n      window.removeEventListener('keydown', handleActivity);\n    };\n  }, [queryClient]);\n\n  // Mutations\n  const createPOMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/purchase-orders\", data),\n    onSuccess: () => {\n      // Comprehensive invalidation for new PO\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsAddPOOpen(false);\n      setPOItems([]);\n      poForm.reset();\n      toast({ title: \"Purchase order berhasil dibuat dengan items\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Gagal membuat purchase order\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const approvePOMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/purchase-orders/${id}/approve`),\n    onSuccess: () => {\n      // Invalidate all related queries when approving PO\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n      toast({ title: \"Purchase order berhasil disetujui\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Gagal menyetujui purchase order\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const addItemMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", `/api/purchase-orders/${selectedPO?.id}/items`, data),\n    onSuccess: () => {\n      // Invalidate all related queries for better sync\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", selectedPO?.id, \"items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsAddItemOpen(false);\n      itemForm.reset();\n      toast({ title: \"Item berhasil ditambahkan\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Gagal menambahkan item\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const receiveMutation = useMutation({\n    mutationFn: async (itemsToReceive: any[]) => {\n      return Promise.all(\n        itemsToReceive.map(item => \n          apiRequest('POST', `/api/purchase-orders/items/${item.itemId}/receive`, { receivedQuantity: item.quantity })\n        )\n      );\n    },\n    onSuccess: () => {\n      // Comprehensive invalidation for receiving items\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders/outstanding-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/stock-movements\"] });\n      setReceivingPOOpen(false);\n      setReceivingItems([]);\n      toast({ title: \"Items received successfully\" });\n    },\n    onError: (error) => {\n      console.error(\"Failed to receive items:\", error);\n      toast({ title: \"Failed to receive items\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const onSubmitPO = (data: any) => {\n    createPOMutation.mutate({\n      ...data,\n      items: poItems\n    });\n  };\n\n  const addItemToPO = (item: any) => {\n    setPOItems([...poItems, { ...item, id: Date.now() }]);\n  };\n\n  const removeItemFromPO = (itemId: any) => {\n    setPOItems(poItems.filter(item => item.id !== itemId));\n  };\n\n  // Mutation to delete item from existing purchase order\n  const deleteItemMutation = useMutation({\n    mutationFn: ({ poId, itemId }: { poId: string; itemId: string }) => \n      fetch(`/api/purchase-orders/${poId}/items/${itemId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(res => {\n        if (!res.ok) throw new Error('Failed to delete item');\n        return res.json();\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/purchase-orders'] });\n      if (selectedPO) {\n        queryClient.invalidateQueries({ queryKey: [`/api/purchase-orders/${selectedPO.id}/items`] });\n      }\n      toast({ title: \"Item berhasil dihapus\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Gagal menghapus item\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Function to remove item from existing purchase order\n  const removeItemFromExistingPO = (itemId: string) => {\n    if (!selectedPO) return;\n    deleteItemMutation.mutate({ poId: selectedPO.id, itemId });\n  };\n\n  // Update outstanding status for purchase order item\n  const updateOutstandingStatus = async (itemId: string, status: string, reason: string) => {\n    try {\n      const response = await apiRequest(\"POST\", `/api/purchase-orders/items/${itemId}/outstanding-status`, {\n        status,\n        reason\n      });\n      \n      if (response.ok) {\n        toast({ \n          title: \"Status berhasil diupdate\",\n          description: `Status item berubah menjadi ${status}`,\n        });\n        \n        // Refresh the data\n        queryClient.invalidateQueries({ queryKey: ['/api/purchase-orders'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/purchase-orders', selectedPO?.id, 'items'] });\n      }\n    } catch (error) {\n      toast({ \n        title: \"Gagal update status\", \n        description: \"Silakan coba lagi\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const onSubmitItem = (data: any) => {\n    addItemMutation.mutate({\n      ...data,\n      quantity: parseInt(data.quantity) || 1,\n      orderedQuantity: parseInt(data.quantity) || 1,\n      unitCost: parseFloat(data.unitCost) || 0,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return <Badge variant=\"secondary\" data-testid={`badge-status-draft`}>Draft</Badge>;\n      case \"pending\":\n        return <Badge variant=\"outline\" data-testid={`badge-status-pending`}>Pending</Badge>;\n      case \"confirmed\":\n        return <Badge variant=\"default\" data-testid={`badge-status-confirmed`}>Confirmed</Badge>;\n      case \"partial_received\":\n        return <Badge variant=\"default\" className=\"bg-orange-500\" data-testid={`badge-status-partial_received`}>Partial Received</Badge>;\n      case \"received\":\n        return <Badge variant=\"default\" className=\"bg-green-500\" data-testid={`badge-status-received`}>Received</Badge>;\n      case \"delivered\":\n        return <Badge variant=\"default\" className=\"bg-green-500\" data-testid={`badge-status-delivered`}>Delivered</Badge>;\n      case \"cancelled\":\n        return <Badge variant=\"destructive\" data-testid={`badge-status-cancelled`}>Cancelled</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const filteredOrders = Array.isArray(purchaseOrders) ? purchaseOrders.filter((order: any) =>\n    order.poNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.notes?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) : [];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Purchasing Management\" \n          breadcrumb=\"Beranda / Purchasing\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\" data-testid=\"purchasing-page\">\n            <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n              <div>\n                <p className=\"text-muted-foreground\">Kelola purchase order, supplier, dan penerimaan barang</p>\n              </div>\n              <div className=\"flex gap-2\">\n          <Dialog open={isAddPOOpen} onOpenChange={setIsAddPOOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-po\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Buat Purchase Order\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Buat Purchase Order Baru</DialogTitle>\n              </DialogHeader>\n              <Form {...poForm}>\n                <form onSubmit={poForm.handleSubmit(onSubmitPO)} className=\"space-y-4\">\n                  <FormField\n                    control={poForm.control}\n                    name=\"supplierId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-supplier\">\n                              <SelectValue placeholder=\"Pilih supplier\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {suppliers?.map((supplier: any) => (\n                              <SelectItem key={supplier.id} value={supplier.id}>\n                                {supplier.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={poForm.control}\n                    name=\"expectedDeliveryDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tanggal Pengiriman Diharapkan</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-delivery-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={poForm.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Catatan</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Catatan tambahan\" {...field} data-testid=\"input-po-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Items Section */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold\">Items</h3>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          const product = Array.isArray(products) && products.length > 0 ? products[0] : null;\n                          if (product) {\n                            addItemToPO({\n                              productId: product.id,\n                              productName: product.name,\n                              quantity: 1,\n                              unitCost: 0\n                            });\n                          }\n                        }}\n                        data-testid=\"button-add-item-to-po\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Tambah Item\n                      </Button>\n                    </div>\n                    \n                    {poItems.length > 0 ? (\n                      <div className=\"space-y-2\">\n                        {poItems.map((item, index) => (\n                          <div key={item.id} className=\"border p-3 rounded-md\">\n                            <div className=\"grid grid-cols-4 gap-3 items-center\">\n                              <div>\n                                <Label className=\"text-sm\">Produk</Label>\n                                <Select \n                                  value={item.productId} \n                                  onValueChange={(value) => {\n                                    const product = Array.isArray(products) ? products.find((p: any) => p.id === value) : null;\n                                    setPOItems(poItems.map((it, i) => \n                                      i === index ? { ...it, productId: value, productName: product?.name } : it\n                                    ));\n                                  }}\n                                >\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {Array.isArray(products) ? products.map((product: any) => (\n                                      <SelectItem key={product.id} value={product.id}>\n                                        {product.name}\n                                      </SelectItem>\n                                    )) : null}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Kuantitas</Label>\n                                <Input \n                                  type=\"number\" \n                                  value={item.quantity}\n                                  onChange={(e) => {\n                                    setPOItems(poItems.map((it, i) => \n                                      i === index ? { ...it, quantity: parseInt(e.target.value) || 1 } : it\n                                    ));\n                                  }}\n                                />\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Harga Satuan</Label>\n                                <Input \n                                  type=\"number\" \n                                  value={item.unitCost}\n                                  onChange={(e) => {\n                                    setPOItems(poItems.map((it, i) => \n                                      i === index ? { ...it, unitCost: parseFloat(e.target.value) || 0 } : it\n                                    ));\n                                  }}\n                                />\n                              </div>\n                              <div className=\"flex items-end\">\n                                <Button \n                                  type=\"button\" \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => removeItemFromPO(item.id)}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-muted-foreground text-sm\">Belum ada item. Klik \"Tambah Item\" untuk menambahkan.</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-4\">\n                    <Button type=\"submit\" disabled={createPOMutation.isPending || poItems.length === 0} data-testid=\"button-save-po\">\n                      {createPOMutation.isPending ? \"Menyimpan...\" : \"Buat Purchase Order\"}\n                    </Button>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => {\n                      setIsAddPOOpen(false);\n                      setPOItems([]);\n                    }}>\n                      Batal\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\" data-testid=\"tab-orders\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            Purchase Orders\n          </TabsTrigger>\n          <TabsTrigger value=\"receiving\" className=\"flex items-center gap-2\" data-testid=\"tab-receiving\">\n            <Truck className=\"h-4 w-4\" />\n            Receiving\n          </TabsTrigger>\n          <TabsTrigger value=\"suppliers\" className=\"flex items-center gap-2\" data-testid=\"tab-suppliers\">\n            <Package className=\"h-4 w-4\" />\n            Suppliers\n          </TabsTrigger>\n          <TabsTrigger value=\"reports\" className=\"flex items-center gap-2\" data-testid=\"tab-reports\">\n            <Eye className=\"h-4 w-4\" />\n            Reports\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <div className=\"flex flex-col gap-4 md:flex-row md:items-center\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Cari purchase order berdasarkan nomor PO atau catatan...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"max-w-lg\"\n                data-testid=\"input-search-po\"\n              />\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Orders</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>PO Number</TableHead>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Tanggal Order</TableHead>\n                      <TableHead>Expected Delivery</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Total</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredOrders?.map((order: any) => (\n                      <TableRow key={order.id} data-testid={`row-po-${order.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-po-number-${order.id}`}>\n                          {order.poNumber}\n                        </TableCell>\n                        <TableCell>{(order as any).supplierName || order.supplierId}</TableCell>\n                        <TableCell>{formatDateShort(order.orderDate)}</TableCell>\n                        <TableCell>{formatDateShort(order.expectedDeliveryDate)}</TableCell>\n                        <TableCell>{getStatusBadge(order.status)}</TableCell>\n                        <TableCell>Rp {Number(order.totalAmount || 0).toLocaleString()}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedPO(order);\n                                setViewPOOpen(true);\n                              }}\n                              data-testid={`button-view-po-${order.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            {order.status === \"pending\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => approvePOMutation.mutate(order.id)}\n                                data-testid={`button-approve-po-${order.id}`}\n                              >\n                                <CheckCircle className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                // For now, just open the view dialog as edit functionality\n                                setSelectedPO(order);\n                                setViewPOOpen(true);\n                              }}\n                              data-testid={`button-edit-po-${order.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"receiving\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">Goods Receiving</h2>\n              <p className=\"text-muted-foreground\">Terima barang dari purchase order yang sudah dikonfirmasi</p>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Orders Ready for Receiving</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>PO Number</TableHead>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Order Date</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Total Amount</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {Array.isArray(purchaseOrders) ? purchaseOrders.filter((order: any) => order.status === 'confirmed' || order.status === 'partial_received').map((order: any) => (\n                      <TableRow key={order.id}>\n                        <TableCell className=\"font-medium\">{order.poNumber}</TableCell>\n                        <TableCell>{(order as any).supplierName || order.supplierId}</TableCell>\n                        <TableCell>{formatDateShort(order.orderDate)}</TableCell>\n                        <TableCell>{getStatusBadge(order.status)}</TableCell>\n                        <TableCell>Rp {Number(order.totalAmount || 0).toLocaleString()}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedPO(order);\n                              setReceivingPOOpen(true);\n                              setReceivingItems([]);\n                            }}\n                            data-testid={`button-receive-po-${order.id}`}\n                          >\n                            <Truck className=\"h-4 w-4 mr-2\" />\n                            Receive Items\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )) : null}\n                    {!Array.isArray(purchaseOrders) || !purchaseOrders.some((order: any) => order.status === 'confirmed' || order.status === 'partial_received') ? (\n                      <TableRow>\n                        <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                          No purchase orders ready for receiving\n                        </TableCell>\n                      </TableRow>\n                    ) : null}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"suppliers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Supplier Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Supplier Management</h3>\n                <p className=\"text-muted-foreground\">Fitur manajemen supplier akan segera hadir</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          {/* Header untuk Reports */}\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">Laporan Purchasing</h2>\n              <p className=\"text-muted-foreground\">Overview dan analisis data pembelian</p>\n            </div>\n          </div>\n\n          {/* Main Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total PO</CardTitle>\n                <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-po\">{Array.isArray(purchaseOrders) ? purchaseOrders.length : 0}</div>\n                <p className=\"text-xs text-muted-foreground\">Purchase orders</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending PO</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-pending-po\">\n                  {Array.isArray(purchaseOrders) ? purchaseOrders.filter((po: any) => po.status === \"pending\").length : 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Menunggu persetujuan</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Sebagian Diterima</CardTitle>\n                <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-partial-received-po\">\n                  {Array.isArray(purchaseOrders) ? purchaseOrders.filter((po: any) => po.status === \"partial_received\").length : 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Masih ada barang belum diterima</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Selesai</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-received-po\">\n                  {Array.isArray(purchaseOrders) ? purchaseOrders.filter((po: any) => po.status === \"received\").length : 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Semua barang sudah diterima</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Financial Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Nilai PO</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-po-value\">\n                  Rp {purchaseOrders?.reduce((sum: number, po: any) => sum + Number(po.totalAmount || 0), 0).toLocaleString() || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Nilai total semua PO</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Belum Dikonfirmasi</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  Rp {purchaseOrders?.filter((po: any) => po.status === \"pending\")\n                    .reduce((sum: number, po: any) => sum + Number(po.totalAmount || 0), 0).toLocaleString() || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Nilai PO pending</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Outstanding Items</CardTitle>\n                <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {(allOutstandingItems || []).reduce((sum: number, item: any) => sum + (item.outstandingQuantity || 0), 0) || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total barang belum diterima</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Outstanding Items Detail */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Detail Barang Belum Diterima</CardTitle>\n              <CardDescription>Daftar item yang belum diterima lengkap dari supplier</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {(allOutstandingItems || []).length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>PO Number</TableHead>\n                        <TableHead>Produk</TableHead>\n                        <TableHead>Dipesan</TableHead>\n                        <TableHead>Diterima</TableHead>\n                        <TableHead>Outstanding</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Nilai</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {(allOutstandingItems || []).map((item: any) => {\n                        const outstandingQty = item.outstandingQuantity || 0;\n                        const unitCost = parseFloat(item.unitCost || item.unitPrice || '0');\n                        const outstandingValue = outstandingQty * unitCost;\n                        \n                        return (\n                          <TableRow key={item.id}>\n                            <TableCell className=\"font-medium\">{item.poNumber}</TableCell>\n                            <TableCell>{item.productName || item.productId}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>{item.receivedQuantity || 0}</TableCell>\n                            <TableCell className=\"font-medium text-orange-600\">{outstandingQty}</TableCell>\n                            <TableCell>\n                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                                item.outstandingStatus === 'pending' ? 'text-yellow-600 bg-yellow-100' :\n                                item.outstandingStatus === 'cancelled' ? 'text-red-600 bg-red-100' :\n                                item.outstandingStatus === 'refunded' ? 'text-blue-600 bg-blue-100' :\n                                item.outstandingStatus === 'backordered' ? 'text-orange-600 bg-orange-100' :\n                                'text-gray-600 bg-gray-100'\n                              }`}>\n                                {item.outstandingStatus === 'pending' ? 'Menunggu' : \n                                 item.outstandingStatus === 'cancelled' ? 'Dibatalkan' :\n                                 item.outstandingStatus === 'refunded' ? 'Dikembalikan' :\n                                 item.outstandingStatus === 'backordered' ? 'Backorder' : \n                                 item.outstandingStatus || 'Pending'}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"font-medium\">Rp {outstandingValue.toLocaleString()}</TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CheckCircle className=\"h-12 w-12 mx-auto text-green-500 mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2 text-green-600\">Semua Barang Sudah Diterima!</h3>\n                  <p>Tidak ada outstanding items yang perlu ditindaklanjuti.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* View PO Dialog */}\n      <Dialog open={viewPOOpen} onOpenChange={setViewPOOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Purchase Order Detail - {selectedPO?.poNumber}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Supplier</Label>\n                <p className=\"text-sm font-medium\">{(selectedPO as any)?.supplierName || selectedPO?.supplierId}</p>\n              </div>\n              <div>\n                <Label>Status</Label>\n                <div className=\"mt-1\">{selectedPO && getStatusBadge(selectedPO.status)}</div>\n              </div>\n              <div>\n                <Label>Tanggal Order</Label>\n                <p className=\"text-sm\">{selectedPO && formatDateShort(selectedPO.orderDate)}</p>\n              </div>\n              <div>\n                <Label>Expected Delivery</Label>\n                <p className=\"text-sm\">{selectedPO && formatDateShort(selectedPO.expectedDeliveryDate)}</p>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">Items</h3>\n                <Dialog open={isAddItemOpen} onOpenChange={setIsAddItemOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-item\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Tambah Item\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Tambah Item ke PO</DialogTitle>\n                    </DialogHeader>\n                    <Form {...itemForm}>\n                      <form onSubmit={itemForm.handleSubmit(onSubmitItem)} className=\"space-y-4\">\n                        <FormField\n                          control={itemForm.control}\n                          name=\"productId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Produk</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-product\">\n                                    <SelectValue placeholder=\"Pilih produk\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {products?.map((product: any) => (\n                                    <SelectItem key={product.id} value={product.id}>\n                                      {product.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={itemForm.control}\n                            name=\"quantity\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Kuantitas</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field} \n                                    onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                    data-testid=\"input-quantity\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={itemForm.control}\n                            name=\"unitCost\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Harga Satuan</FormLabel>\n                                <FormControl>\n                                  <Input type=\"number\" placeholder=\"0\" {...field} data-testid=\"input-unit-cost\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <FormField\n                          control={itemForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Catatan</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Catatan item\" {...field} data-testid=\"input-item-notes\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex gap-2 pt-4\">\n                          <Button type=\"submit\" disabled={addItemMutation.isPending} data-testid=\"button-save-item\">\n                            {addItemMutation.isPending ? \"Menyimpan...\" : \"Tambah Item\"}\n                          </Button>\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddItemOpen(false)}>\n                            Batal\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n              \n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Produk</TableHead>\n                    <TableHead>Kuantitas</TableHead>\n                    <TableHead>Harga Satuan</TableHead>\n                    <TableHead>Total</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {selectedPOItems?.map((item: any) => (\n                    <TableRow key={item.id}>\n                      <TableCell>{(item as any).productName || item.productId}</TableCell>\n                      <TableCell>{item.quantity}</TableCell>\n                      <TableCell>Rp {Number(item.unitCost).toLocaleString()}</TableCell>\n                      <TableCell>Rp {(item.quantity * Number(item.unitCost)).toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => removeItemFromExistingPO(item.id)}\n                          disabled={selectedPO?.status !== 'pending'}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Goods Receiving Dialog */}\n      <Dialog open={receivingPOOpen} onOpenChange={setReceivingPOOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Receive Items - {selectedPO?.poNumber}</DialogTitle>\n            <DialogDescription>\n              Terima barang dari supplier dan update stock inventory\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Supplier</Label>\n                <p className=\"text-sm font-medium\">{(selectedPO as any)?.supplierName || selectedPO?.supplierId}</p>\n              </div>\n              <div>\n                <Label>Total Amount</Label>\n                <p className=\"text-sm font-medium\">Rp {Number(selectedPO?.totalAmount || 0).toLocaleString()}</p>\n              </div>\n            </div>\n            \n            <div className=\"border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Ordered Qty</TableHead>\n                    <TableHead>Already Received</TableHead>\n                    <TableHead>Receive Now</TableHead>\n                    <TableHead>Outstanding</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {selectedPOItems?.map((item: any) => {\n                    const receivingQty = receivingItems.find(r => r.itemId === item.id)?.quantity || 0;\n                    const remaining = item.quantity - (item.receivedQuantity || 0) - receivingQty;\n                    const outstandingQty = item.outstandingQuantity || (item.quantity - (item.receivedQuantity || 0));\n                    const outstandingStatus = item.outstandingStatus || 'pending';\n                    \n                    const getStatusColor = (status: string) => {\n                      switch (status) {\n                        case 'pending': return 'text-yellow-600 bg-yellow-100';\n                        case 'cancelled': return 'text-red-600 bg-red-100';\n                        case 'refunded': return 'text-blue-600 bg-blue-100';\n                        case 'backordered': return 'text-orange-600 bg-orange-100';\n                        case 'completed': return 'text-green-600 bg-green-100';\n                        default: return 'text-gray-600 bg-gray-100';\n                      }\n                    };\n                    \n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell>{(item as any).productName || item.productId}</TableCell>\n                        <TableCell>{item.quantity}</TableCell>\n                        <TableCell>{item.receivedQuantity || 0}</TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max={remaining}\n                            value={receivingQty}\n                            onChange={(e) => {\n                              const qty = parseInt(e.target.value) || 0;\n                              setReceivingItems(prev => {\n                                const existing = prev.find(r => r.itemId === item.id);\n                                if (existing) {\n                                  return prev.map(r => \n                                    r.itemId === item.id ? { ...r, quantity: qty } : r\n                                  );\n                                } else {\n                                  return [...prev, { itemId: item.id, quantity: qty }];\n                                }\n                              });\n                            }}\n                            className=\"w-20\"\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {outstandingQty > 0 ? outstandingQty : '-'}\n                        </TableCell>\n                        <TableCell>\n                          {outstandingQty > 0 ? (\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(outstandingStatus)}`}>\n                              {outstandingStatus === 'pending' ? 'Menunggu' : \n                               outstandingStatus === 'cancelled' ? 'Dibatalkan' :\n                               outstandingStatus === 'refunded' ? 'Dikembalikan' :\n                               outstandingStatus === 'backordered' ? 'Backorder' :\n                               outstandingStatus === 'completed' ? 'Selesai' : outstandingStatus}\n                            </span>\n                          ) : (\n                            <span className=\"text-green-600 text-xs\">Lengkap</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {outstandingQty > 0 && outstandingStatus === 'pending' ? (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={() => updateOutstandingStatus(item.id, 'cancelled', 'Cancelled by user')}>\n                                  Batalkan\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => updateOutstandingStatus(item.id, 'refunded', 'Refunded by supplier')}>\n                                  Refund\n                                </DropdownMenuItem>\n                                <DropdownMenuItem onClick={() => updateOutstandingStatus(item.id, 'backordered', 'Backordered - delayed delivery')}>\n                                  Backorder\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          ) : '-'}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setReceivingPOOpen(false)}>\n                Cancel\n              </Button>\n              \n              {/* Special button for refunded items */}\n              {selectedPOItems?.some((item: any) => item.outstandingStatus === 'refunded' && (item.outstandingQuantity || 0) > 0) && (\n                <Button \n                  variant=\"secondary\"\n                  onClick={() => {\n                    // Process refunded items directly\n                    const refundedItems = selectedPOItems?.filter((item: any) => \n                      item.outstandingStatus === 'refunded' && (item.outstandingQuantity || 0) > 0\n                    ) || [];\n                    \n                    if (refundedItems.length > 0) {\n                      // Set refunded items to receivingItems with their outstanding quantity\n                      const refundedReceivingItems = refundedItems.map((item: any) => ({\n                        itemId: item.id,\n                        productName: item.productName,\n                        quantity: item.outstandingQuantity || 0,\n                        outstandingQuantity: item.outstandingQuantity || 0\n                      }));\n                      \n                      setReceivingItems(refundedReceivingItems);\n                      \n                      toast({\n                        title: \"Refunded Items Ready\",\n                        description: `${refundedItems.length} refunded items siap diproses. Klik 'Receive Items' untuk menyelesaikan.`,\n                        variant: \"default\"\n                      });\n                    }\n                  }}\n                  className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                >\n                  <Package className=\"h-4 w-4 mr-2\" />\n                  Process Refunded Items\n                </Button>\n              )}\n              \n              <Button \n                onClick={() => {\n                  const itemsToReceive = receivingItems.filter(item => item.quantity > 0);\n                  \n                  if (itemsToReceive.length > 0) {\n                    receiveMutation.mutate(itemsToReceive);\n                  } else {\n                    toast({ title: \"No items to receive\", description: \"Please enter quantities to receive\", variant: \"destructive\" });\n                  }\n                }}\n                disabled={receiveMutation.isPending || !receivingItems.some(item => item.quantity > 0)}\n              >\n                {receiveMutation.isPending ? \"Processing...\" : \"Receive Items\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":61860},"client/src/components/ServiceReceiptNew.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Printer, Download } from 'lucide-react';\nimport QRCode from 'qrcode';\nimport { formatDateLong, formatDateShort, formatDateForDisplay } from '@shared/utils/timezone';\n\ninterface ServiceReceiptProps {\n  serviceTicket: {\n    id: string;\n    ticketNumber: string;\n    customerId: string;\n    deviceType: string;\n    deviceBrand?: string;\n    deviceModel?: string;\n    serialNumber?: string;\n    completeness?: string;\n    problem: string;\n    diagnosis?: string;\n    solution?: string;\n    estimatedCost?: string;\n    status: string;\n    technicianId?: string;\n    createdAt: string;\n    // Warranty fields\n    warrantyDuration?: number;\n    warrantyStartDate?: string;\n    warrantyEndDate?: string;\n  };\n  customer: {\n    id: string;\n    name: string;\n    phone?: string;\n    email?: string;\n    address?: string;\n  };\n  storeConfig: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n  };\n  technician?: {\n    id: string;\n    name: string;\n  } | null;\n}\n\nexport default function ServiceReceiptNew({ serviceTicket, customer, storeConfig, technician }: ServiceReceiptProps) {\n  const receiptRef = useRef<HTMLDivElement>(null);\n  const [qrCodeDataURL, setQrCodeDataURL] = useState<string>('');\n  const [paperFormat, setPaperFormat] = useState<'a4' | 'thermal-58' | 'thermal-80'>('a4');\n\n  useEffect(() => {\n    // Generate QR Code untuk tracking\n    const generateQR = async () => {\n      try {\n        const trackingURL = `${window.location.origin}/service-status?ticket=${serviceTicket.ticketNumber}`;\n        const qrDataURL = await QRCode.toDataURL(trackingURL, {\n          width: 120,\n          margin: 1,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF',\n          },\n        });\n        setQrCodeDataURL(qrDataURL);\n      } catch (err) {\n        console.error('Error generating QR code:', err);\n      }\n    };\n    generateQR();\n  }, [serviceTicket.ticketNumber]);\n\n  const getFormatStyles = () => {\n    switch (paperFormat) {\n      case 'thermal-58':\n        return {\n          width: '58mm',\n          fontSize: '8px',\n          padding: '2mm',\n          lineHeight: '1.1',\n          headerFontSize: '10px',\n          titleFontSize: '9px'\n        };\n      case 'thermal-80':\n        return {\n          width: '80mm', \n          fontSize: '9px',\n          padding: '3mm',\n          lineHeight: '1.2',\n          headerFontSize: '12px',\n          titleFontSize: '10px'\n        };\n      default: // a4\n        return {\n          width: '210mm',\n          fontSize: '12px', \n          padding: '15mm',\n          lineHeight: '1.4',\n          headerFontSize: '22px',\n          titleFontSize: '16px'\n        };\n    }\n  };\n\n  const isThermal = paperFormat.startsWith('thermal');\n\n  const handlePrint = () => {\n    if (receiptRef.current) {\n      const printContent = receiptRef.current.innerHTML;\n      const formatStyles = getFormatStyles();\n      const printWindow = window.open('', '_blank');\n      if (printWindow) {\n        printWindow.document.write(`\n          <html>\n            <head>\n              <title>Tanda Terima Service - ${serviceTicket.ticketNumber}</title>\n              <style>\n                @page {\n                  size: ${paperFormat === 'a4' ? 'A4' : `${formatStyles.width} auto`};\n                  margin: ${isThermal ? '0' : '8mm'};\n                  page-break-inside: avoid;\n                }\n                body { \n                  font-family: ${isThermal ? '\"Courier New\", monospace' : '\"Arial\", sans-serif'}; \n                  margin: 0; \n                  padding: ${formatStyles.padding}; \n                  font-size: ${formatStyles.fontSize};\n                  line-height: ${formatStyles.lineHeight};\n                  ${isThermal ? 'width: ' + formatStyles.width + '; box-sizing: border-box;' : ''}\n                  page-break-inside: avoid;\n                  overflow: hidden;\n                  color: #000;\n                  background: #fff;\n                }\n                .receipt { \n                  ${isThermal ? 'width: 100%;' : 'max-width: 580px; margin: 0 auto;'}\n                  page-break-inside: avoid;\n                  overflow: hidden;\n                }\n                .header { \n                  text-align: center; \n                  margin-bottom: ${isThermal ? '8px' : '20px'}; \n                  padding-bottom: ${isThermal ? '4px' : '8px'};\n                  border-bottom: 1px dashed #333;\n                }\n                .header h1 { \n                  margin: 0; \n                  font-size: ${formatStyles.headerFontSize}; \n                  font-weight: bold;\n                  margin-bottom: ${isThermal ? '2px' : '6px'};\n                  text-transform: uppercase;\n                  letter-spacing: ${isThermal ? '0.5px' : '1px'};\n                }\n                .header h2 { \n                  margin: ${isThermal ? '4px 0 6px' : '8px 0 12px'}; \n                  font-size: ${formatStyles.titleFontSize}; \n                  font-weight: bold;\n                  text-align: center;\n                }\n                .header p { \n                  margin: ${isThermal ? '1px 0' : '2px 0'}; \n                  font-size: ${isThermal ? (paperFormat === 'thermal-58' ? '7px' : '8px') : '10px'}; \n                  line-height: 1.3;\n                }\n                .info-grid { \n                  ${isThermal \n                    ? 'display: block; margin: 8px 0;' \n                    : 'display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;'\n                  }\n                }\n                .field { margin-bottom: ${isThermal ? '3px' : '8px'}; }\n                .label { font-weight: bold; font-size: ${isThermal ? (paperFormat === 'thermal-58' ? '7px' : '8px') : '11px'}; color: #444; }\n                .value { margin-top: 1px; font-size: ${isThermal ? (paperFormat === 'thermal-58' ? '7px' : '8px') : '11px'}; }\n                .qr-section { text-align: center; margin: ${isThermal ? '8px 0' : '20px 0'}; }\n                .qr-section img { width: ${isThermal ? '60px' : '120px'}; height: ${isThermal ? '60px' : '120px'}; }\n                .conditions { \n                  margin-top: ${isThermal ? '6px' : '15px'}; \n                  font-size: ${isThermal ? (paperFormat === 'thermal-58' ? '6px' : '7px') : '10px'}; \n                  padding: ${isThermal ? '3px' : '6px'} 0;\n                  border-top: 1px dashed #333;\n                  line-height: 1.2;\n                }\n                .signature-area { \n                  margin-top: ${isThermal ? '10px' : '25px'}; \n                  ${isThermal ? 'display: block;' : 'display: flex; justify-content: space-between;'}\n                  border-top: 1px solid #333;\n                  padding-top: ${isThermal ? '6px' : '10px'};\n                }\n                .signature-box { \n                  text-align: center; \n                  ${isThermal ? 'margin-bottom: 12px;' : 'width: 150px;'}\n                }\n                .signature-box .label { \n                  margin-bottom: ${isThermal ? '15px' : '35px'}; \n                  font-size: ${isThermal ? (paperFormat === 'thermal-58' ? '7px' : '8px') : '11px'};\n                  font-weight: bold;\n                }\n                h3 { font-size: ${isThermal ? '11px' : '18px'}; margin: ${isThermal ? '8px 0 4px' : '20px 0 8px'}; }\n                .border-b { border-bottom: ${isThermal ? '1px dashed #000' : '2px solid #000'}; }\n                .border-t { border-top: 1px solid #000; }\n                @media print {\n                  body { \n                    print-color-adjust: exact; \n                    height: auto !important;\n                    overflow: visible !important;\n                  }\n                  .no-print { display: none; }\n                  .receipt {\n                    page-break-inside: avoid;\n                    height: auto !important;\n                  }\n                  * {\n                    page-break-inside: avoid;\n                  }\n                }\n              </style>\n            </head>\n            <body>\n              ${printContent}\n            </body>\n          </html>\n        `);\n        printWindow.document.close();\n        printWindow.print();\n      }\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return formatDateLong(dateString);\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto\">\n      <div className=\"mb-4 flex gap-4 items-end no-print\">\n        <div className=\"flex flex-col gap-2\">\n          <Label htmlFor=\"paper-format\">Format Cetak</Label>\n          <Select value={paperFormat} onValueChange={(value: 'a4' | 'thermal-58' | 'thermal-80') => setPaperFormat(value)}>\n            <SelectTrigger className=\"w-48\" id=\"paper-format\">\n              <SelectValue placeholder=\"Pilih format\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"a4\">A4 - Printer Standar</SelectItem>\n              <SelectItem value=\"thermal-80\">Thermal 80mm</SelectItem>\n              <SelectItem value=\"thermal-58\">Thermal 58mm</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <Button onClick={handlePrint} className=\"flex items-center gap-2\">\n          <Printer className=\"w-4 h-4\" />\n          Print Receipt\n        </Button>\n      </div>\n\n      <Card className=\"p-8\" ref={receiptRef}>\n        <div className=\"receipt\">\n          {/* Header */}\n          <div className=\"header\">\n            <h1>{storeConfig.name.toUpperCase()}</h1>\n            <div style={{ fontSize: isThermal ? '9px' : '12px', lineHeight: '1.3' }}>\n              <p>{storeConfig.address}</p>\n              <p>Tel: {storeConfig.phone} {storeConfig.email && `| Email: ${storeConfig.email}`}</p>\n            </div>\n            <h2>═══ TANDA TERIMA SERVIS ═══</h2>\n          </div>\n\n          {/* Service Number and Date */}\n          <div className={`${isThermal ? 'mb-4' : 'flex justify-between items-center mb-6'}`}>\n            <div className={isThermal ? 'mb-2' : ''}>\n              <div className=\"field\">\n                <span className=\"label\">No. Service:</span>\n                <span className=\"value ml-2 font-bold\">{serviceTicket.ticketNumber}</span>\n              </div>\n            </div>\n            <div className={isThermal ? '' : 'text-right'}>\n              <div className=\"field\">\n                <span className=\"label\">Tanggal:</span>\n                <span className=\"value ml-2\">{formatDate(serviceTicket.createdAt)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Customer and Device Info */}\n          <div className={`info-grid ${isThermal ? 'mb-4' : 'grid grid-cols-2 gap-8 mb-6'}`}>\n            {/* Customer Info */}\n            <div className={isThermal ? 'mb-4' : ''}>\n              <h3 className={`font-bold ${isThermal ? 'text-xs mb-2 border-b border-gray-300 pb-1' : 'text-lg mb-3'}`}>Data Pelanggan</h3>\n              <div className=\"field\">\n                <div className=\"label\">Nama:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{customer.name}</div>\n              </div>\n              {!isThermal && (\n                <div className=\"field\">\n                  <div className=\"label\">Alamat:</div>\n                  <div className=\"value border-b border-dotted border-gray-400 pb-1\">{customer.address || '-'}</div>\n                </div>\n              )}\n              <div className=\"field\">\n                <div className=\"label\">No. Telepon:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{customer.phone || '-'}</div>\n              </div>\n              {isThermal && customer.address && (\n                <div className=\"field\">\n                  <div className=\"label\">Alamat:</div>\n                  <div className=\"value border-b border-dotted border-gray-400 pb-1\" style={{ fontSize: paperFormat === 'thermal-58' ? '6px' : '7px', lineHeight: '1.1' }}>\n                    {customer.address.length > 40 ? customer.address.substring(0, 40) + '...' : customer.address}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Device Info */}\n            <div>\n              <h3 className={`font-bold ${isThermal ? 'text-xs mb-2 border-b border-gray-300 pb-1' : 'text-lg mb-3'}`}>Data Perangkat</h3>\n              <div className=\"field\">\n                <div className=\"label\">Jenis:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.deviceType}</div>\n              </div>\n              <div className=\"field\">\n                <div className=\"label\">Merk:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.deviceBrand || '-'}</div>\n              </div>\n              <div className=\"field\">\n                <div className=\"label\">Model:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.deviceModel || '-'}</div>\n              </div>\n              {!isThermal && serviceTicket.serialNumber && (\n                <div className=\"field\">\n                  <div className=\"label\">No. Seri:</div>\n                  <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.serialNumber}</div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Problem Description */}\n          <div className={isThermal ? 'mb-4' : 'mb-6'}>\n            <h3 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-lg mb-3'}`}>Keluhan/Masalah</h3>\n            <div className={`border border-gray-300 p-2 ${isThermal ? 'min-h-[40px] text-xs' : 'min-h-[80px] p-3'} bg-gray-50`}>\n              {serviceTicket.problem}\n            </div>\n          </div>\n\n          {/* Completeness */}\n          {serviceTicket.completeness && (\n            <div className={isThermal ? 'mb-4' : 'mb-6'}>\n              <h3 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-lg mb-3'}`}>Kelengkapan</h3>\n              <div className={`border border-gray-300 p-2 ${isThermal ? 'min-h-[30px] text-xs' : 'min-h-[60px] p-3'} bg-gray-50`}>\n                {serviceTicket.completeness}\n              </div>\n            </div>\n          )}\n\n          {/* QR Code and Estimated Cost */}\n          <div className={`${isThermal ? 'text-center mb-4' : 'flex justify-between items-center mb-6'}`}>\n            <div className=\"qr-section\">\n              {qrCodeDataURL && (\n                <div>\n                  <img src={qrCodeDataURL} alt=\"QR Code\" className={`mx-auto mb-2 ${isThermal ? 'w-16 h-16' : ''}`} />\n                  <p className={`${isThermal ? 'text-xs' : 'text-xs'}`}>Scan untuk cek status</p>\n                </div>\n              )}\n            </div>\n            {!isThermal && (\n              <div className=\"text-right\">\n                {serviceTicket.estimatedCost && (\n                  <div className=\"field\">\n                    <span className=\"label text-lg\">Estimasi Biaya:</span>\n                    <div className=\"value text-xl font-bold\">{formatCurrency(serviceTicket.estimatedCost)}</div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Estimated Cost for Thermal */}\n          {isThermal && serviceTicket.estimatedCost && (\n            <div className=\"text-center mb-4\">\n              <div className=\"field\">\n                <span className=\"label text-xs\">Estimasi Biaya:</span>\n                <div className=\"value text-sm font-bold\">{formatCurrency(serviceTicket.estimatedCost)}</div>\n              </div>\n            </div>\n          )}\n\n          {/* Warranty Information */}\n          {serviceTicket.warrantyDuration && serviceTicket.warrantyDuration > 0 && (\n            <div className={`warranty-section ${isThermal ? 'mb-4 p-2 border border-gray-400' : 'mb-6 p-4 border-2 border-blue-300 bg-blue-50'}`}>\n              <h4 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-sm mb-3'} text-blue-800`}>INFORMASI GARANSI</h4>\n              <div className=\"space-y-1\">\n                <div className=\"field\">\n                  <span className={`label ${isThermal ? 'text-xs' : 'text-sm'} text-blue-700`}>Durasi:</span>\n                  <span className={`value ml-2 ${isThermal ? 'text-xs' : 'text-sm'} font-bold text-blue-900`}>\n                    {serviceTicket.warrantyDuration >= 9999 ? 'Seumur Hidup' : `${serviceTicket.warrantyDuration} Hari`}\n                  </span>\n                </div>\n                {serviceTicket.warrantyStartDate && (\n                  <div className=\"field\">\n                    <span className={`label ${isThermal ? 'text-xs' : 'text-sm'} text-blue-700`}>Mulai:</span>\n                    <span className={`value ml-2 ${isThermal ? 'text-xs' : 'text-sm'} font-medium text-blue-900`}>\n                      {formatDateShort(serviceTicket.warrantyStartDate)}\n                    </span>\n                  </div>\n                )}\n                {serviceTicket.warrantyEndDate && serviceTicket.warrantyDuration < 9999 && (\n                  <div className=\"field\">\n                    <span className={`label ${isThermal ? 'text-xs' : 'text-sm'} text-blue-700`}>Berakhir:</span>\n                    <span className={`value ml-2 ${isThermal ? 'text-xs' : 'text-sm'} font-medium text-blue-900`}>\n                      {formatDateShort(serviceTicket.warrantyEndDate)}\n                    </span>\n                  </div>\n                )}\n                <div className={`text-center mt-2 p-1 ${isThermal ? 'text-xs bg-gray-200' : 'text-sm bg-blue-100'} rounded`}>\n                  <p className=\"font-medium text-blue-800\">⚠️ SIMPAN NOTA SEBAGAI BUKTI GARANSI</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Terms and Conditions */}\n          <div className={`conditions border-t pt-2 mb-4`}>\n            <h4 className={`font-bold mb-2 ${isThermal ? 'text-xs' : 'text-sm'}`}>SYARAT DAN KETENTUAN:</h4>\n            <ul className={`${isThermal ? 'space-y-0.5' : 'space-y-1'} list-none`}>\n              <li>• Barang tidak diambil 30 hari akan dikenakan biaya penyimpanan</li>\n              <li>• Harap bawa tanda terima saat mengambil barang</li>\n              <li>• Garansi service 30 hari untuk kerusakan yang sama</li>\n              <li>• Pembayaran dilakukan saat pengambilan barang</li>\n              {!isThermal && <li>• Kerusakan akibat force majeure bukan tanggung jawab service center</li>}\n              {!isThermal && <li>• Komplain maksimal 7 hari setelah pengambilan</li>}\n            </ul>\n          </div>\n\n          {/* Signature Area */}\n          <div className={`signature-area ${isThermal ? 'text-center' : 'flex justify-between'}`}>\n            <div className={`signature-box ${isThermal ? 'mb-6' : ''}`}>\n              <div className={`label ${isThermal ? 'mb-8 text-xs' : 'mb-12'}`}>Penerima</div>\n              <div className=\"border-t border-black\">\n                <div className={`mt-1 text-center ${isThermal ? 'text-xs' : ''}`}>({customer.name})</div>\n              </div>\n            </div>\n            <div className=\"signature-box\">\n              <div className={`label ${isThermal ? 'mb-8 text-xs' : 'mb-12'}`}>Teknisi</div>\n              <div className=\"border-t border-black\">\n                <div className={`mt-1 text-center ${isThermal ? 'text-xs' : ''}`}>({technician?.name || 'Teknisi'})</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":20078},"client/src/components/ServiceStatusTracker.tsx":{"content":"import React from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { CheckCircle, Clock, AlertCircle, Package, Settings, TestTube, FileText, X } from 'lucide-react';\n\ninterface ServiceStep {\n  id: string;\n  label: string;\n  status: 'completed' | 'current' | 'pending' | 'waiting';\n  icon: React.ComponentType<any>;\n  color: string;\n  bgColor: string;\n}\n\ninterface ServiceStatusTrackerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  serviceNumber: string;\n  currentStatus: string;\n}\n\nconst serviceSteps: ServiceStep[] = [\n  {\n    id: 'received',\n    label: 'Belum Cek',\n    status: 'pending',\n    icon: Clock,\n    color: 'text-blue-700',\n    bgColor: 'bg-blue-100'\n  },\n  {\n    id: 'checking',\n    label: 'Sedang Cek',\n    status: 'pending',\n    icon: AlertCircle,\n    color: 'text-sky-700',\n    bgColor: 'bg-sky-100'\n  },\n  {\n    id: 'in-progress',\n    label: 'Sedang Dikerjakan',\n    status: 'pending',\n    icon: Settings,\n    color: 'text-green-700',\n    bgColor: 'bg-green-100'\n  },\n  {\n    id: 'waiting-technician',\n    label: 'Ditunggu MITRA Teknik',\n    status: 'pending',\n    icon: AlertCircle,\n    color: 'text-gray-700',\n    bgColor: 'bg-gray-100'\n  },\n  {\n    id: 'testing',\n    label: 'Sedang Tes',\n    status: 'pending',\n    icon: TestTube,\n    color: 'text-gray-700',\n    bgColor: 'bg-gray-100'\n  },\n  {\n    id: 'waiting-confirmation',\n    label: 'Menunggu Konfirmasi',\n    status: 'pending',\n    icon: FileText,\n    color: 'text-red-700',\n    bgColor: 'bg-red-100'\n  },\n  {\n    id: 'waiting-parts',\n    label: 'Menunggu Sparepart',\n    status: 'pending',\n    icon: Package,\n    color: 'text-orange-700',\n    bgColor: 'bg-orange-100'\n  },\n  {\n    id: 'completed',\n    label: 'Selesai',\n    status: 'pending',\n    icon: CheckCircle,\n    color: 'text-emerald-700',\n    bgColor: 'bg-emerald-100'\n  }\n];\n\n// Map status dari database ke langkah-langkah service\nconst statusMapping: Record<string, number> = {\n  'pending': 0,           // Belum Cek\n  'checking': 1,          // Sedang Cek  \n  'in-progress': 2,       // Sedang Dikerjakan\n  'waiting-technician': 3, // Ditunggu MITRA Teknik\n  'testing': 4,           // Sedang Tes\n  'waiting-confirmation': 5, // Menunggu Konfirmasi\n  'waiting-parts': 6,     // Menunggu Sparepart\n  'completed': 7,         // Selesai\n  'delivered': 7,         // Selesai (sudah diambil)\n  'cancelled': -1         // Dibatalkan\n};\n\nexport default function ServiceStatusTracker({ \n  isOpen, \n  onClose, \n  serviceNumber, \n  currentStatus \n}: ServiceStatusTrackerProps) {\n  \n  const getCurrentStepIndex = () => {\n    return statusMapping[currentStatus] || 0;\n  };\n\n  const getStepStatus = (stepIndex: number): 'completed' | 'current' | 'pending' | 'waiting' => {\n    const currentIndex = getCurrentStepIndex();\n    \n    if (currentStatus === 'cancelled') {\n      return 'waiting';\n    }\n    \n    if (stepIndex < currentIndex) {\n      return 'completed';\n    } else if (stepIndex === currentIndex) {\n      return 'current';\n    } else {\n      return 'pending';\n    }\n  };\n\n  const getStepColors = (step: ServiceStep, actualStatus: string) => {\n    switch (actualStatus) {\n      case 'completed':\n        return {\n          color: 'text-green-700',\n          bgColor: 'bg-green-100',\n          borderColor: 'border-green-500'\n        };\n      case 'current':\n        return {\n          color: step.color,\n          bgColor: step.bgColor,\n          borderColor: 'border-blue-500 ring-2 ring-blue-200'\n        };\n      case 'waiting':\n        return {\n          color: 'text-gray-500',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-300'\n        };\n      default:\n        return {\n          color: 'text-gray-400',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-200'\n        };\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>📋 Perbaikan Detail Status Proses Servis</span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onClose}\n              className=\"h-6 w-6 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"text-center text-sm text-gray-600\">\n            Silahkan pilih Detail Status untuk No. Servis <span className=\"font-bold text-blue-600\">{serviceNumber}</span>\n          </div>\n\n          {/* Status Steps Grid */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            {serviceSteps.map((step, index) => {\n              const stepStatus = getStepStatus(index);\n              const colors = getStepColors(step, stepStatus);\n              const Icon = step.icon;\n\n              return (\n                <div\n                  key={step.id}\n                  className={`\n                    relative p-3 rounded-lg border-2 transition-all duration-200 cursor-pointer hover:shadow-md\n                    ${colors.bgColor} ${colors.borderColor}\n                  `}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`\n                      flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center\n                      ${stepStatus === 'completed' ? 'bg-green-500 text-white' : \n                        stepStatus === 'current' ? 'bg-blue-500 text-white' : \n                        'bg-gray-300 text-gray-500'}\n                    `}>\n                      {stepStatus === 'completed' ? (\n                        <CheckCircle className=\"w-5 h-5\" />\n                      ) : (\n                        <Icon className=\"w-5 h-5\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className={`font-medium text-sm ${colors.color}`}>\n                        {step.label}\n                      </div>\n                      {stepStatus === 'current' && (\n                        <div className=\"text-xs text-blue-600 mt-1\">\n                          ← Status Saat Ini\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Status indicator */}\n                  {stepStatus === 'current' && (\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Information Box */}\n          <Card className=\"mt-6\">\n            <CardContent className=\"pt-4\">\n              <div className=\"text-sm text-gray-600\">\n                <strong>Informasi:</strong> Detail Status Proses Servis ini juga akan muncul saat Pelanggan \n                melakukan Cek Status (Tracking).\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              onClick={onClose}\n              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n            >\n              ← Batal\n            </Button>\n            <Button \n              onClick={onClose}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white\"\n            >\n              ✓ Perbaikan Detail Status\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7844},"client/src/components/ServicePaymentReceipt.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Printer, Download, X } from 'lucide-react';\nimport QRCode from 'qrcode';\nimport { formatDateShort, formatDateWithTime, formatDateForDisplay } from '@shared/utils/timezone';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ServicePaymentReceiptProps {\n  open: boolean;\n  onClose: () => void;\n  serviceTicket: {\n    id: string;\n    ticketNumber: string;\n    customerId: string;\n    deviceType: string;\n    deviceBrand?: string;\n    deviceModel?: string;\n    serialNumber?: string;\n    problem: string;\n    diagnosis?: string;\n    solution?: string;\n    actualCost?: string;\n    partsCost?: string;\n    laborCost?: string;\n    status: string;\n    createdAt: string;\n    completedAt?: string;\n    // Warranty fields\n    warrantyDuration?: number;\n    warrantyStartDate?: string;\n    warrantyEndDate?: string;\n    parts?: Array<{\n      productId: string;\n      productName: string;\n      quantity: number;\n      unitPrice: string;\n      totalPrice: string;\n    }>;\n  };\n  customer: {\n    id: string;\n    name: string;\n    phone?: string;\n    email?: string;\n    address?: string;\n  };\n  storeConfig: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n  };\n  technician?: {\n    id: string;\n    name: string;\n    username: string;\n  } | null;\n}\n\nconst paperSizes = {\n  'a4': { name: 'A4 - Printer Biasa', width: 210, type: 'standard' },\n  '58': { name: '58mm - Thermal Kecil', width: 58, type: 'thermal' },\n  '80': { name: '80mm - Thermal Standar', width: 80, type: 'thermal' },\n  '100': { name: '100mm - Thermal Besar', width: 100, type: 'thermal' },\n} as const;\n\ntype PaperSize = keyof typeof paperSizes;\n\nexport default function ServicePaymentReceipt({ \n  open, \n  onClose, \n  serviceTicket, \n  customer, \n  storeConfig, \n  technician \n}: ServicePaymentReceiptProps) {\n  const receiptRef = useRef<HTMLDivElement>(null);\n  const [qrCodeDataURL, setQrCodeDataURL] = useState<string>('');\n  const [paperSize, setPaperSize] = useState<PaperSize>('a4');\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  useEffect(() => {\n    if (open) {\n      // Generate QR Code untuk tracking\n      const generateQR = async () => {\n        try {\n          const trackingURL = `${window.location.origin}/service-status?ticket=${serviceTicket.ticketNumber}`;\n          const qrDataURL = await QRCode.toDataURL(trackingURL, {\n            width: 120,\n            margin: 1,\n            color: {\n              dark: '#000000',\n              light: '#FFFFFF',\n            },\n          });\n          setQrCodeDataURL(qrDataURL);\n        } catch (err) {\n          console.error('Error generating QR code:', err);\n        }\n      };\n      generateQR();\n    }\n  }, [serviceTicket.ticketNumber, open]);\n\n  if (!open) return null;\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const getTotalCost = () => {\n    const actualCost = Number(serviceTicket.actualCost || 0);\n    const partsCost = Number(serviceTicket.partsCost || 0);\n    const laborCost = Number(serviceTicket.laborCost || 0);\n    return Math.max(actualCost, partsCost + laborCost);\n  };\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      // Wait a bit to ensure content is fully loaded\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const element = document.getElementById('service-payment-receipt-content');\n      if (!element) {\n        console.error('Receipt element not found');\n        alert('Error: Receipt element not found. Please try again.');\n        return;\n      }\n\n      // Make sure element is visible\n      element.style.display = 'block';\n      element.style.visibility = 'visible';\n      \n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: true,\n        width: element.scrollWidth,\n        height: element.scrollHeight,\n      });\n\n      // Check if canvas has content\n      if (canvas.width === 0 || canvas.height === 0) {\n        console.error('Canvas is empty');\n        alert('Error: Failed to capture receipt content. Please try again.');\n        return;\n      }\n\n      const imgData = canvas.toDataURL('image/png');\n      const pageWidth = paperSizes[paperSize].width;\n      const pageHeight = paperSize === 'a4' ? 297 : (canvas.height / canvas.width) * pageWidth;\n      \n      const pdf = new jsPDF('p', 'mm', paperSize === 'a4' ? [148, 210] : [pageWidth, pageHeight]);\n      if (paperSize === 'a4') {\n        // For A5 size (half page), fit to page with margins\n        const margin = 4;\n        const availableWidth = 148 - (2 * margin); // A5 width\n        const scaledHeight = (canvas.height / canvas.width) * availableWidth;\n        pdf.addImage(imgData, 'PNG', margin, margin, availableWidth, scaledHeight);\n      } else {\n        pdf.addImage(imgData, 'PNG', 0, 0, pageWidth, pageHeight);\n      }\n      pdf.save(`Nota-Pembayaran-Service-${serviceTicket.ticketNumber}-${paperSize === 'a4' ? 'A5' : pageWidth + 'mm'}.pdf`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      alert('Error generating PDF. Please try again or contact support.');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handlePrint = () => {\n    try {\n      const pageWidth = paperSizes[paperSize].width;\n      const fontSize = paperSize === 'a4' ? '12px' : \n                      paperSize === '58' ? '7px' : \n                      paperSize === '80' ? '8px' : '10px';\n      \n      const printStyle = `\n        <style id=\"service-payment-print-style\">\n          @media print {\n            * { \n              visibility: hidden; \n              margin: 0 !important; \n              padding: 0 !important;\n              box-sizing: border-box;\n            }\n            #service-payment-receipt-content, \n            #service-payment-receipt-content * { \n              visibility: visible; \n            }\n            #service-payment-receipt-content {\n              position: absolute;\n              left: 0;\n              top: 0;\n              width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              max-width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              font-family: ${paperSize === 'a4' ? '\"Arial\", sans-serif' : '\"Courier New\", monospace'};\n              font-size: ${paperSize === 'a4' ? '10px' : fontSize};\n              line-height: ${paperSize === 'a4' ? '1.3' : '1.1'};\n              color: #000;\n              background: #fff;\n              page-break-inside: avoid;\n              height: auto;\n              max-height: ${paperSize === 'a4' ? '270mm' : '300mm'};\n              padding: ${paperSize === 'a4' ? '6mm' : '2mm'};\n            }\n            .no-print { \n              display: none !important; \n            }\n            @page {\n              size: ${paperSize === 'a4' ? '148mm 210mm' : `${pageWidth}mm 350mm`};\n              margin: ${paperSize === 'a4' ? '4mm' : '1mm'};\n            }\n            .text-center { text-align: center; }\n            .font-bold { font-weight: bold; }\n            .flex { display: flex; }\n            .flex-1 { flex: 1; }\n            .justify-between { justify-content: space-between; }\n            .items-center { align-items: center; }\n            .border-t { \n              border-top: 1px dashed #333; \n              margin: 2px 0 !important; \n            }\n            .border-b { \n              border-bottom: 1px dashed #333; \n              margin: 2px 0 !important; \n            }\n            .space-y-1 > * + * { margin-top: 1px !important; }\n            .py-2 { padding: 2px 0 !important; }\n            .my-2 { margin: 2px 0 !important; }\n            .mb-2 { margin-bottom: 2px !important; }\n            .mt-4 { margin-top: 3px !important; }\n            h3 { font-size: ${paperSize === 'a4' ? '12px' : fontSize}; margin: ${paperSize === 'a4' ? '4px' : '2px'} 0 !important; font-weight: bold; }\n            img { max-width: ${paperSize === 'a4' ? '50mm' : '30mm'}; height: auto; }\n          }\n          @media screen {\n            #service-payment-print-style { display: none; }\n          }\n        </style>\n      `;\n      \n      const oldStyle = document.getElementById('service-payment-print-style');\n      if (oldStyle) oldStyle.remove();\n      \n      document.head.insertAdjacentHTML('beforeend', printStyle);\n      window.print();\n      \n      setTimeout(() => {\n        const printStyleElement = document.getElementById('service-payment-print-style');\n        if (printStyleElement) {\n          printStyleElement.remove();\n        }\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Terjadi kesalahan saat mencetak. Silakan coba lagi.');\n    }\n  };\n\n  const getReceiptWidth = () => {\n    switch (paperSize) {\n      case 'a4': return 'max-w-[500px]';\n      case '58': return 'max-w-[58mm]';\n      case '80': return 'max-w-[80mm]';\n      case '100': return 'max-w-[100mm]';\n      default: return 'max-w-[500px]';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (paperSize) {\n      case 'a4': return 'text-sm';\n      case '58': return 'text-xs';\n      case '80': return 'text-sm';\n      case '100': return 'text-base';\n      default: return 'text-sm';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"no-print\">\n          <DialogTitle>Nota Pembayaran Service</DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4\"\n            data-testid=\"button-close-payment-receipt\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Paper Size Selector */}\n          <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg no-print\">\n            <Label htmlFor=\"paper-size\" className=\"font-medium\">Ukuran Kertas:</Label>\n            <Select value={paperSize} onValueChange={(value: PaperSize) => setPaperSize(value)}>\n              <SelectTrigger className=\"w-48\" id=\"paper-size\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"a4\">{paperSizes['a4'].name}</SelectItem>\n                <SelectItem value=\"58\">{paperSizes['58'].name}</SelectItem>\n                <SelectItem value=\"80\">{paperSizes['80'].name}</SelectItem>\n                <SelectItem value=\"100\">{paperSizes['100'].name}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Print Actions */}\n          <div className=\"flex gap-2 no-print\">\n            <Button onClick={handlePrint} className=\"flex-1\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Cetak Nota\n            </Button>\n            <Button \n              onClick={generatePDF} \n              variant=\"outline\" \n              disabled={isGenerating}\n              className=\"flex-1\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {isGenerating ? 'Generating...' : 'Download PDF'}\n            </Button>\n          </div>\n\n          {/* Receipt Content */}\n          <Card className=\"p-0 shadow-none\">\n            <div \n              id=\"service-payment-receipt-content\"\n              className={`mx-auto bg-white p-4 ${getReceiptWidth()} ${getTextSize()}`}\n              ref={receiptRef}\n              style={{ \n                minHeight: '400px',\n                display: 'block',\n                visibility: 'visible',\n                position: 'relative'\n              }}\n            >\n              {/* Header */}\n              <div className={`text-center ${paperSize === 'a4' ? 'mb-6' : 'mb-4'}`}>\n                <h1 className={`font-bold tracking-wide ${\n                  paperSize === 'a4' ? 'text-2xl mb-3' : \n                  paperSize === '58' ? 'text-sm mb-2' : \n                  'text-lg mb-2'\n                }`}>{storeConfig.name}</h1>\n                <div className={`text-gray-700 space-y-1 ${\n                  paperSize === 'a4' ? 'text-sm' : \n                  paperSize === '58' ? 'text-xs' : \n                  'text-xs'\n                }`}>\n                  <p>{storeConfig.address}</p>\n                  <p>Telp: {storeConfig.phone} | Email: {storeConfig.email}</p>\n                </div>\n              </div>\n\n              <div className={`bg-gray-100 py-2 px-3 mb-4 rounded ${paperSize !== 'a4' ? 'text-center' : ''}`}>\n                <h2 className={`text-center font-bold ${\n                  paperSize === 'a4' ? 'text-lg' : \n                  paperSize === '58' ? 'text-xs' : \n                  'text-sm'\n                }`}>NOTA PEMBAYARAN SERVICE</h2>\n                <p className={`text-center mt-1 ${\n                  paperSize === 'a4' ? 'text-sm' : \n                  paperSize === '58' ? 'text-xs' : \n                  'text-xs'\n                }`}>No: {serviceTicket.ticketNumber}</p>\n              </div>\n\n              {/* Customer Info */}\n              <div className={`${paperSize === 'a4' ? 'grid grid-cols-2 gap-6 mb-6' : 'space-y-4 mb-4'}`}>\n                <div>\n                  <h3 className={`font-semibold border-b pb-1 mb-2 ${\n                    paperSize === 'a4' ? 'text-sm' : \n                    paperSize === '58' ? 'text-xs' : \n                    'text-xs'\n                  }`}>INFORMASI NOTA</h3>\n                  <div className={`space-y-1 ${\n                    paperSize === 'a4' ? 'text-sm' : \n                    paperSize === '58' ? 'text-xs' : \n                    'text-xs'\n                  }`}>\n                    <div><span className=\"text-gray-600\">Tanggal:</span> {formatDateWithTime(new Date())}</div>\n                    <div><span className=\"text-gray-600\">Status:</span> <span className=\"text-green-600 font-medium\">LUNAS</span></div>\n                  </div>\n                </div>\n                <div>\n                  <h3 className={`font-semibold border-b pb-1 mb-2 ${\n                    paperSize === 'a4' ? 'text-sm' : \n                    paperSize === '58' ? 'text-xs' : \n                    'text-xs'\n                  }`}>DATA PELANGGAN</h3>\n                  <div className={`space-y-1 ${\n                    paperSize === 'a4' ? 'text-sm' : \n                    paperSize === '58' ? 'text-xs' : \n                    'text-xs'\n                  }`}>\n                    <div><span className=\"text-gray-600\">Nama:</span> {customer.name}</div>\n                    {customer.phone && <div><span className=\"text-gray-600\">Telp:</span> {customer.phone}</div>}\n                    {customer.email && paperSize === 'a4' && <div><span className=\"text-gray-600\">Email:</span> {customer.email}</div>}\n                  </div>\n                </div>\n              </div>\n\n              {/* Device Info */}\n              <div className=\"bg-gray-50 p-4 rounded mb-4\">\n                <h3 className=\"font-semibold text-sm mb-3 border-b pb-1\">DETAIL PERANGKAT</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600 block\">Jenis Perangkat:</span>\n                    <span className=\"font-medium\">{serviceTicket.deviceType}</span>\n                  </div>\n                  {serviceTicket.deviceBrand && (\n                    <div>\n                      <span className=\"text-gray-600 block\">Merk:</span>\n                      <span className=\"font-medium\">{serviceTicket.deviceBrand}</span>\n                    </div>\n                  )}\n                  {serviceTicket.deviceModel && (\n                    <div>\n                      <span className=\"text-gray-600 block\">Model:</span>\n                      <span className=\"font-medium\">{serviceTicket.deviceModel}</span>\n                    </div>\n                  )}\n                  {serviceTicket.serialNumber && (\n                    <div>\n                      <span className=\"text-gray-600 block\">Serial Number:</span>\n                      <span className=\"font-medium\">{serviceTicket.serialNumber}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Service Details */}\n              <div className=\"mb-4\">\n                <h3 className=\"font-semibold text-sm mb-3 border-b pb-1\">RINCIAN PERBAIKAN</h3>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"bg-red-50 p-3 rounded\">\n                    <span className=\"text-red-700 font-medium block mb-1\">Keluhan/Masalah:</span>\n                    <p className=\"text-gray-800\">{serviceTicket.problem}</p>\n                  </div>\n                  {serviceTicket.diagnosis && (\n                    <div className=\"bg-blue-50 p-3 rounded\">\n                      <span className=\"text-blue-700 font-medium block mb-1\">Diagnosa:</span>\n                      <p className=\"text-gray-800\">{serviceTicket.diagnosis}</p>\n                    </div>\n                  )}\n                  {serviceTicket.solution && (\n                    <div className=\"bg-green-50 p-3 rounded\">\n                      <span className=\"text-green-700 font-medium block mb-1\">Solusi & Tindakan:</span>\n                      <p className=\"text-gray-800\">{serviceTicket.solution}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Parts Used */}\n              {serviceTicket.parts && serviceTicket.parts.length > 0 && (\n                <div className=\"mb-4\">\n                  <h3 className=\"font-semibold text-sm mb-3 border-b pb-1\">SPAREPART YANG DIGUNAKAN</h3>\n                  <div className=\"bg-yellow-50 p-4 rounded\">\n                    <table className=\"w-full text-sm\">\n                      <thead>\n                        <tr className=\"border-b border-yellow-200\">\n                          <th className=\"text-left py-1\">Item</th>\n                          <th className=\"text-center py-1\">Qty</th>\n                          <th className=\"text-right py-1\">Harga</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {serviceTicket.parts.map((part, index) => (\n                          <tr key={index} className=\"border-b border-yellow-100\">\n                            <td className=\"py-2\">{part.productName}</td>\n                            <td className=\"text-center py-2\">{part.quantity}</td>\n                            <td className=\"text-right py-2 font-medium\">{formatCurrency(part.totalPrice)}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {/* Cost Breakdown */}\n              <div className=\"bg-gray-100 p-4 rounded mb-4\">\n                <h3 className=\"font-semibold text-sm mb-3 border-b border-gray-300 pb-1\">RINCIAN BIAYA</h3>\n                <div className=\"space-y-2 text-sm\">\n                  {serviceTicket.laborCost && Number(serviceTicket.laborCost) > 0 && (\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"text-gray-700\">Biaya Jasa Service:</span>\n                      <span className=\"font-medium\">{formatCurrency(serviceTicket.laborCost)}</span>\n                    </div>\n                  )}\n                  {serviceTicket.partsCost && Number(serviceTicket.partsCost) > 0 && (\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"text-gray-700\">Biaya Sparepart:</span>\n                      <span className=\"font-medium\">{formatCurrency(serviceTicket.partsCost)}</span>\n                    </div>\n                  )}\n                  <div className=\"border-t-2 border-gray-400 pt-2 mt-3\">\n                    <div className=\"flex justify-between py-2 bg-green-100 px-3 rounded font-bold text-base\">\n                      <span>TOTAL PEMBAYARAN:</span>\n                      <span className=\"text-green-700\">{formatCurrency(getTotalCost())}</span>\n                    </div>\n                    <p className=\"text-center text-xs text-gray-600 mt-2\">** LUNAS **</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Warranty Information */}\n              {serviceTicket.warrantyDuration && serviceTicket.warrantyDuration > 0 && (\n                <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 rounded mb-4\">\n                  <h3 className=\"font-semibold text-sm mb-3 text-blue-800 border-b border-blue-200 pb-1\">INFORMASI GARANSI</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"text-blue-700\">Durasi Garansi:</span>\n                      <span className=\"font-medium text-blue-900\">\n                        {serviceTicket.warrantyDuration >= 9999 ? 'Garansi Seumur Hidup' : `${serviceTicket.warrantyDuration} Hari`}\n                      </span>\n                    </div>\n                    {serviceTicket.warrantyStartDate && (\n                      <div className=\"flex justify-between py-1\">\n                        <span className=\"text-blue-700\">Tanggal Mulai:</span>\n                        <span className=\"font-medium text-blue-900\">\n                          {formatDateShort(serviceTicket.warrantyStartDate)}\n                        </span>\n                      </div>\n                    )}\n                    {serviceTicket.warrantyEndDate && serviceTicket.warrantyDuration < 9999 && (\n                      <div className=\"flex justify-between py-1\">\n                        <span className=\"text-blue-700\">Berlaku Sampai:</span>\n                        <span className=\"font-medium text-blue-900\">\n                          {formatDateShort(serviceTicket.warrantyEndDate)}\n                        </span>\n                      </div>\n                    )}\n                    <div className=\"bg-blue-100 p-2 rounded mt-3\">\n                      <p className=\"text-xs text-blue-800 font-medium text-center\">\n                        ⚠️ SIMPAN NOTA INI SEBAGAI BUKTI GARANSI\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Status & Dates */}\n              <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n                <div>\n                  <h4 className=\"font-medium mb-2 text-gray-700\">Timeline Service:</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Tanggal Masuk:</span>\n                      <span>{formatDateShort(serviceTicket.createdAt)}</span>\n                    </div>\n                    {serviceTicket.completedAt && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Tanggal Selesai:</span>\n                        <span>{formatDateShort(serviceTicket.completedAt)}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2 text-gray-700\">Informasi Lainnya:</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Status:</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {serviceTicket.status === 'completed' ? 'SELESAI' : \n                         serviceTicket.status === 'delivered' ? 'DIAMBIL' : 'SELESAI'}\n                      </span>\n                    </div>\n                    {technician && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Teknisi:</span>\n                        <span>{technician.name}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* QR Code */}\n              {qrCodeDataURL && (\n                <div className=\"text-center py-4 bg-white border border-gray-200 rounded mb-4\">\n                  <p className=\"text-sm font-medium mb-2 text-gray-700\">QR Code - Tracking Service</p>\n                  <img \n                    src={qrCodeDataURL} \n                    alt=\"QR Code\" \n                    className=\"mx-auto border border-gray-100 p-2 rounded\"\n                    style={{ \n                      width: paperSize === 'a4' ? '60mm' : \n                             paperSize === '58' ? '30mm' : '40mm', \n                      height: 'auto' \n                    }}\n                  />\n                  <p className=\"text-xs mt-2 text-gray-600\">Scan untuk cek status service online</p>\n                </div>\n              )}\n\n              {/* Footer */}\n              <div className=\"bg-blue-50 p-4 rounded text-center\">\n                <div className=\"space-y-2\">\n                  <p className=\"font-bold text-lg text-blue-800\">TERIMA KASIH</p>\n                  <p className=\"text-sm text-gray-700\">Atas kepercayaan Anda menggunakan layanan service kami</p>\n                  <div className=\"bg-yellow-100 p-2 rounded mt-3\">\n                    <p className=\"text-sm font-medium text-yellow-800\">⚠️ GARANSI SERVICE 30 HARI</p>\n                    <p className=\"text-xs text-yellow-700\">Berlaku dari tanggal pengambilan barang</p>\n                  </div>\n                  <div className=\"border-t border-blue-200 pt-2 mt-3\">\n                    <p className=\"text-xs text-gray-500\">Nota ini adalah bukti pembayaran yang sah</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26572},"server/defaultAccounts.ts":{"content":"// Standard Chart of Accounts untuk Indonesia\nexport const defaultAccounts = [\n  // ASSETS (Aset) - Normal Balance: Debit\n  { code: '1000', name: 'Aset', type: 'asset', subtype: 'asset_root', normalBalance: 'debit', description: 'Aset utama perusahaan' },\n  \n  // Current Assets (Aset Lancar)\n  { code: '1100', name: 'Aset Lancar', type: 'asset', subtype: 'current_asset', normalBalance: 'debit', parentCode: '1000', description: 'Aset yang dapat dicairkan dalam 1 tahun' },\n  { code: '1110', name: 'Kas dan Setara Kas', type: 'asset', subtype: 'cash', normalBalance: 'debit', parentCode: '1100', description: 'Kas di tangan dan bank' },\n  { code: '1111', name: 'Kas', type: 'asset', subtype: 'cash', normalBalance: 'debit', parentCode: '1110', description: 'Uang tunai' },\n  { code: '1112', name: 'Bank', type: 'asset', subtype: 'cash', normalBalance: 'debit', parentCode: '1110', description: 'Rekening bank' },\n  { code: '1120', name: 'Piutang Usaha', type: 'asset', subtype: 'receivable', normalBalance: 'debit', parentCode: '1100', description: 'Tagihan kepada pelanggan' },\n  { code: '1130', name: 'Persediaan', type: 'asset', subtype: 'inventory', normalBalance: 'debit', parentCode: '1100', description: 'Stok barang dagangan' },\n  { code: '1140', name: 'Piutang Lainnya', type: 'asset', subtype: 'receivable', normalBalance: 'debit', parentCode: '1100', description: 'Piutang di luar usaha utama' },\n  { code: '1150', name: 'Biaya Dibayar Dimuka', type: 'asset', subtype: 'prepaid', normalBalance: 'debit', parentCode: '1100', description: 'Biaya yang sudah dibayar untuk periode mendatang' },\n\n  // Fixed Assets (Aset Tetap)\n  { code: '1200', name: 'Aset Tetap', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1000', description: 'Aset jangka panjang untuk operasional' },\n  { code: '1210', name: 'Peralatan', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1200', description: 'Peralatan kantor dan toko' },\n  { code: '1220', name: 'Kendaraan', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1200', description: 'Kendaraan operasional' },\n  { code: '1230', name: 'Furniture dan Fixtures', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1200', description: 'Mebel dan perlengkapan' },\n  { code: '1240', name: 'Akumulasi Penyusutan - Peralatan', type: 'asset', subtype: 'accumulated_depreciation', normalBalance: 'credit', parentCode: '1200', description: 'Akumulasi penyusutan peralatan' },\n\n  // LIABILITIES (Kewajiban) - Normal Balance: Credit\n  { code: '2000', name: 'Kewajiban', type: 'liability', subtype: 'liability_root', normalBalance: 'credit', description: 'Kewajiban perusahaan' },\n  \n  // Current Liabilities (Kewajiban Lancar)\n  { code: '2100', name: 'Kewajiban Lancar', type: 'liability', subtype: 'current_liability', normalBalance: 'credit', parentCode: '2000', description: 'Kewajiban jatuh tempo dalam 1 tahun' },\n  { code: '2110', name: 'Hutang Usaha', type: 'liability', subtype: 'payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang kepada supplier' },\n  { code: '2120', name: 'Hutang Pajak', type: 'liability', subtype: 'tax_payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang pajak yang belum dibayar' },\n  { code: '2130', name: 'Hutang Gaji', type: 'liability', subtype: 'payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang gaji karyawan' },\n  { code: '2140', name: 'Hutang Lainnya', type: 'liability', subtype: 'payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang di luar usaha utama' },\n\n  // Long-term Liabilities (Kewajiban Jangka Panjang)\n  { code: '2200', name: 'Kewajiban Jangka Panjang', type: 'liability', subtype: 'long_term_liability', normalBalance: 'credit', parentCode: '2000', description: 'Kewajiban jatuh tempo lebih dari 1 tahun' },\n  { code: '2210', name: 'Hutang Bank', type: 'liability', subtype: 'loan', normalBalance: 'credit', parentCode: '2200', description: 'Pinjaman bank jangka panjang' },\n\n  // EQUITY (Modal) - Normal Balance: Credit\n  { code: '3000', name: 'Modal', type: 'equity', subtype: 'equity_root', normalBalance: 'credit', description: 'Modal pemilik' },\n  { code: '3100', name: 'Modal Pemilik', type: 'equity', subtype: 'owner_equity', normalBalance: 'credit', parentCode: '3000', description: 'Modal yang disetorkan pemilik' },\n  { code: '3200', name: 'Laba Ditahan', type: 'equity', subtype: 'retained_earnings', normalBalance: 'credit', parentCode: '3000', description: 'Akumulasi laba/rugi periode sebelumnya' },\n  { code: '3300', name: 'Laba Rugi Tahun Berjalan', type: 'equity', subtype: 'current_earnings', normalBalance: 'credit', parentCode: '3000', description: 'Laba/rugi periode berjalan' },\n\n  // REVENUE (Pendapatan) - Normal Balance: Credit\n  { code: '4000', name: 'Pendapatan', type: 'revenue', subtype: 'revenue_root', normalBalance: 'credit', description: 'Pendapatan perusahaan' },\n  { code: '4100', name: 'Pendapatan Penjualan', type: 'revenue', subtype: 'sales_revenue', normalBalance: 'credit', parentCode: '4000', description: 'Pendapatan dari penjualan barang' },\n  { code: '4110', name: 'Penjualan Laptop', type: 'revenue', subtype: 'sales_revenue', normalBalance: 'credit', parentCode: '4100', description: 'Penjualan produk laptop' },\n  { code: '4120', name: 'Penjualan Aksesoris', type: 'revenue', subtype: 'sales_revenue', normalBalance: 'credit', parentCode: '4100', description: 'Penjualan aksesoris laptop' },\n  { code: '4200', name: 'Pendapatan Jasa', type: 'revenue', subtype: 'service_revenue', normalBalance: 'credit', parentCode: '4000', description: 'Pendapatan dari layanan service' },\n  { code: '4210', name: 'Jasa Service Laptop', type: 'revenue', subtype: 'service_revenue', normalBalance: 'credit', parentCode: '4200', description: 'Pendapatan service dan perbaikan laptop' },\n  { code: '4300', name: 'Pendapatan Lainnya', type: 'revenue', subtype: 'other_revenue', normalBalance: 'credit', parentCode: '4000', description: 'Pendapatan di luar usaha utama' },\n\n  // EXPENSES (Biaya) - Normal Balance: Debit\n  { code: '5000', name: 'Biaya', type: 'expense', subtype: 'expense_root', normalBalance: 'debit', description: 'Biaya operasional perusahaan' },\n  \n  // Cost of Goods Sold (HPP)\n  { code: '5100', name: 'Harga Pokok Penjualan', type: 'expense', subtype: 'cost_of_goods_sold', normalBalance: 'debit', parentCode: '5000', description: 'HPP barang yang dijual' },\n  { code: '5110', name: 'HPP Laptop', type: 'expense', subtype: 'cost_of_goods_sold', normalBalance: 'debit', parentCode: '5100', description: 'Harga pokok laptop yang dijual' },\n  { code: '5120', name: 'HPP Aksesoris', type: 'expense', subtype: 'cost_of_goods_sold', normalBalance: 'debit', parentCode: '5100', description: 'Harga pokok aksesoris yang dijual' },\n  \n  // Operating Expenses (Biaya Operasional)\n  { code: '5200', name: 'Biaya Operasional', type: 'expense', subtype: 'operating_expense', normalBalance: 'debit', parentCode: '5000', description: 'Biaya untuk menjalankan usaha' },\n  { code: '5210', name: 'Biaya Gaji', type: 'expense', subtype: 'payroll_expense', normalBalance: 'debit', parentCode: '5200', description: 'Gaji dan tunjangan karyawan' },\n  { code: '5220', name: 'Biaya Sewa', type: 'expense', subtype: 'rent_expense', normalBalance: 'debit', parentCode: '5200', description: 'Sewa tempat usaha' },\n  { code: '5230', name: 'Biaya Listrik', type: 'expense', subtype: 'utility_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya listrik dan air' },\n  { code: '5240', name: 'Biaya Telepon & Internet', type: 'expense', subtype: 'communication_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya komunikasi' },\n  { code: '5250', name: 'Biaya Pemasaran', type: 'expense', subtype: 'marketing_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya promosi dan iklan' },\n  { code: '5260', name: 'Biaya Transportasi', type: 'expense', subtype: 'transport_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya transport dan pengiriman' },\n  { code: '5270', name: 'Biaya Perlengkapan', type: 'expense', subtype: 'supplies_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya perlengkapan kantor' },\n  { code: '5280', name: 'Biaya Penyusutan', type: 'expense', subtype: 'depreciation_expense', normalBalance: 'debit', parentCode: '5200', description: 'Penyusutan aset tetap' },\n  { code: '5290', name: 'Biaya Lain-lain', type: 'expense', subtype: 'other_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya operasional lainnya' },\n  \n  // Non-Operating Expenses\n  { code: '5300', name: 'Biaya Non-Operasional', type: 'expense', subtype: 'non_operating_expense', normalBalance: 'debit', parentCode: '5000', description: 'Biaya di luar operasional utama' },\n  { code: '5310', name: 'Biaya Bunga', type: 'expense', subtype: 'interest_expense', normalBalance: 'debit', parentCode: '5300', description: 'Biaya bunga pinjaman' },\n  { code: '5320', name: 'Biaya Pajak', type: 'expense', subtype: 'tax_expense', normalBalance: 'debit', parentCode: '5300', description: 'Biaya pajak penghasilan' },\n];\n\n// Mapping untuk migrasi dari kategori lama ke akun baru\nexport const categoryToAccountMapping = {\n  // Revenue mapping\n  'Sales Revenue': '4110',\n  'Service Revenue': '4210',\n  'Rental Income': '4300',\n  'Investment Income': '4300',\n  'Other Income': '4300',\n\n  // Expense mapping\n  'Operational Expense': '5290',\n  'Payroll': '5210',\n  'Rent & Utilities': '5220',\n  'Marketing': '5250',\n  'Travel & Transport': '5260',\n  'Office Supplies': '5270',\n  'Technology': '5290',\n  'Professional Services': '5290',\n  'Insurance': '5290',\n  'Taxes': '5320',\n  'Other Expense': '5290',\n};\n\n// Default accounts untuk transaksi umum\nexport const commonAccountCodes = {\n  CASH: '1111',\n  BANK: '1112',\n  ACCOUNTS_RECEIVABLE: '1120',\n  INVENTORY: '1130',\n  ACCOUNTS_PAYABLE: '2110',\n  SALES_REVENUE: '4110',\n  SERVICE_REVENUE: '4210',\n  COST_OF_GOODS_SOLD: '5110',\n  PAYROLL_EXPENSE: '5210',\n  OTHER_EXPENSE: '5290',\n};","size_bytes":10139},"DEPLOYMENT.md":{"content":"# LaptopPOS Universal Deployment Guide\n\n✅ **Automated Installation Available!**\n\nThis guide covers complete deployment to any Linux or Windows server with automated scripts that handle everything including database setup, configuration, and service installation.\n\n## Sistem Persyaratan\n\n### Windows\n- Windows 10/11 atau Windows Server 2019/2022\n- Node.js 18+ (https://nodejs.org/)\n- PostgreSQL 13+ (https://www.postgresql.org/download/windows/)\n- Git (https://git-scm.com/download/win)\n- 4GB RAM minimum, 8GB recommended\n- 10GB free disk space\n\n### Linux (Ubuntu/Debian/CentOS/RHEL)\n- Ubuntu 20.04+ / Debian 11+ / CentOS 8+ / RHEL 8+\n- Node.js 18+ \n- PostgreSQL 13+\n- Git\n- 4GB RAM minimum, 8GB recommended\n- 10GB free disk space\n\n## File-file Deployment\n\n1. **laptoppos_database.sql** - Database PostgreSQL lengkap dengan data sample\n2. **.env.example** - Template konfigurasi environment variables\n3. **package-production.json** - Package.json untuk production\n4. **ecosystem.config.js** - Konfigurasi PM2 untuk production\n5. **install-windows.bat** - Script instalasi otomatis Windows\n6. **install-linux.sh** - Script instalasi otomatis Linux\n\n## ⚡ Instalasi Otomatis (Recommended)\n\n### Windows - Instalasi Otomatis\n```cmd\n# Download dan extract deployment package\n# Jalankan sebagai Administrator:\ninstall-windows.bat\n```\n**Selesai!** Script otomatis akan:\n- Install Node.js (jika belum ada)\n- Install PostgreSQL (jika belum ada) \n- Setup database dan user\n- Install dependencies\n- Build aplikasi\n- Setup environment variables\n- Start aplikasi\n\n### Linux - Instalasi Otomatis\n```bash\n# Download dan extract deployment package\nchmod +x install-linux.sh\n./install-linux.sh\n```\n**Selesai!** Script otomatis akan:\n- Install Node.js dan PostgreSQL\n- Setup database dengan credentials aman\n- Install dependencies\n- Build aplikasi\n- Setup systemd service\n- Configure firewall\n- Start aplikasi\n\n### ✨ Tidak Ada Manual Setup!\nScript otomatis menangani semua konfigurasi database, environment variables, dan service installation.\n\n## Konfigurasi Environment (.env)\n\n### Database (WAJIB)\n```env\nDATABASE_URL=postgresql://username:password@localhost:5432/laptoppos\nPGHOST=localhost\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=your_password\n```\n\n### Aplikasi\n```env\nNODE_ENV=production\nPORT=5000\nSESSION_SECRET=your-secure-session-secret\n```\n\n### Keamanan (PENTING)\n```env\nJWT_SECRET=your-jwt-secret\nENCRYPTION_KEY=your-32-char-encryption-key\n```\n\n### Optional Features\n```env\n# Email notifications\nSMTP_HOST=smtp.gmail.com\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\n\n# WhatsApp integration\nWHATSAPP_SESSION_PATH=./whatsapp_session\n\n# File uploads\nUPLOAD_PATH=./uploads\nMAX_FILE_SIZE=10485760\n```\n\n## Database Setup\n\n### 1. Install PostgreSQL\n**Windows:**\n- Download dari https://www.postgresql.org/download/windows/\n- Install dengan default settings\n- Catat password untuk user 'postgres'\n\n**Linux:**\n- Ubuntu/Debian: `sudo apt-get install postgresql postgresql-contrib`\n- CentOS/RHEL: `sudo yum install postgresql-server postgresql-contrib`\n- Start service: `sudo systemctl start postgresql`\n\n### 2. Buat Database\n```bash\n# Sebagai user postgres\nsudo -u postgres createdb laptoppos\n\n# Atau dengan psql\nsudo -u postgres psql\nCREATE DATABASE laptoppos;\n\\q\n```\n\n### 3. Import Database\n```bash\nsudo -u postgres psql -d laptoppos -f laptoppos_database.sql\n```\n\n### 4. Verifikasi Database\n```bash\nsudo -u postgres psql -d laptoppos -c \"\\dt\"\n```\n\n## Menjalankan Aplikasi\n\n### Development\n```bash\nnpm run dev\n```\n\n### Production\n```bash\n# Build aplikasi\nnpm run build\n\n# Jalankan\nnpm start\n\n# Atau dengan PM2 (recommended)\nnpm install -g pm2\nnpm run pm2:start\n```\n\n### Sebagai Service (Linux)\n```bash\n# Copy service file\nsudo cp laptoppos.service /etc/systemd/system/\n\n# Enable dan start service\nsudo systemctl daemon-reload\nsudo systemctl enable laptoppos\nsudo systemctl start laptoppos\n\n# Check status\nsudo systemctl status laptoppos\n```\n\n## 🔑 Default Login\n\nSetelah instalasi selesai, akses aplikasi di:\n- **URL:** http://localhost:5000 (atau http://server-ip:5000)\n- **Username:** admin\n- **Password:** admin123\n\n⚠️ **PENTING: Segera ganti password default setelah login pertama!**\n\n## 📦 Deployment Package Creator\n\nUntuk membuat deployment package dari system yang sudah running:\n```bash\nchmod +x deploy-auto.sh\n./deploy-auto.sh\n```\n\nScript ini akan membuat:\n- `laptoppos-deployment-YYYYMMDD-HHMMSS.tar.gz` (untuk Linux)\n- `laptoppos-deployment-YYYYMMDD-HHMMSS.zip` (untuk Windows)\n\nPackage berisi:\n- Semua source code\n- Scripts instalasi otomatis\n- Database schema terkini\n- Configuration templates\n- Service configuration files\n\n## Struktur Folder\n\n```\nlaptoppos/\n├── dist/                  # Built application\n├── logs/                  # Application logs\n├── uploads/               # File uploads\n├── temp/                  # Temporary files\n├── backups/               # Database backups\n├── whatsapp_session/      # WhatsApp session data\n├── .env                   # Environment variables\n├── laptoppos_database.sql # Database script\n└── package.json           # Dependencies\n```\n\n## Monitoring & Logs\n\n### PM2 Commands\n```bash\npm2 logs laptoppos         # View logs\npm2 restart laptoppos      # Restart app\npm2 stop laptoppos         # Stop app\npm2 status                 # Check status\n```\n\n### Log Files\n- Application logs: `logs/`\n- PostgreSQL logs: `/var/log/postgresql/` (Linux)\n- System logs: `journalctl -u laptoppos` (Linux)\n\n## Backup & Restore\n\n### Database Backup\n```bash\n# Backup\npg_dump -h localhost -U postgres laptoppos > backup_$(date +%Y%m%d).sql\n\n# Restore\npsql -h localhost -U postgres -d laptoppos < backup_20240101.sql\n```\n\n### File Backup\nBackup folder `uploads/` dan `whatsapp_session/` secara berkala.\n\n## Security Checklist\n\n- [ ] Ganti password default admin\n- [ ] Update SESSION_SECRET dengan key yang kuat\n- [ ] Update JWT_SECRET dengan key yang kuat  \n- [ ] Set firewall untuk port 5432 (PostgreSQL)\n- [ ] Enable SSL/HTTPS untuk production\n- [ ] Regular backup database dan files\n- [ ] Update dependencies secara berkala: `npm audit`\n\n## Troubleshooting\n\n### Error: Database connection failed\n1. Check PostgreSQL service status\n2. Verify DATABASE_URL in .env\n3. Check firewall settings\n4. Verify PostgreSQL user permissions\n\n### Error: Port already in use\n1. Check if another service uses port 5000\n2. Change PORT in .env file\n3. Kill existing process: `pkill -f node`\n\n### Error: Permission denied\n**Linux:**\n```bash\nsudo chown -R $USER:$USER /path/to/laptoppos\nchmod +x install-linux.sh\n```\n\n### Error: npm install fails\n```bash\n# Clear cache\nnpm cache clean --force\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## Production Optimization\n\n### 1. Enable Compression\nEdit `server/index.ts` untuk enable gzip compression.\n\n### 2. Use Process Manager\nPM2 recommended untuk production:\n```bash\nnpm install -g pm2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n### 3. Database Tuning\nEdit `/etc/postgresql/*/main/postgresql.conf`:\n```\nshared_buffers = 256MB\neffective_cache_size = 1GB\nwork_mem = 4MB\n```\n\n### 4. Reverse Proxy\nUse Nginx/Apache sebagai reverse proxy:\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n## Support\n\nJika mengalami masalah:\n1. Check logs di folder `logs/`\n2. Verify konfigurasi .env\n3. Test database connection\n4. Check system resources (RAM, disk space)","size_bytes":7703},"REQUIREMENTS.md":{"content":"# LaptopPOS System Requirements & Libraries\n\n## System Dependencies\n\n### Windows Requirements\n- **Operating System:** Windows 10/11 or Windows Server 2019/2022\n- **Node.js:** Version 18.0.0 or higher\n- **npm:** Version 8.0.0 or higher (comes with Node.js)\n- **PostgreSQL:** Version 13.0 or higher\n- **Git:** Latest version (for source code management)\n- **Memory:** 4GB RAM minimum, 8GB recommended\n- **Storage:** 10GB free disk space minimum\n\n### Linux Requirements  \n- **Operating System:** \n  - Ubuntu 20.04 LTS or higher\n  - Debian 11 or higher\n  - CentOS 8 or higher\n  - RHEL 8 or higher\n  - Fedora 35 or higher\n- **Node.js:** Version 18.0.0 or higher\n- **npm:** Version 8.0.0 or higher\n- **PostgreSQL:** Version 13.0 or higher\n- **Git:** Latest version\n- **Memory:** 4GB RAM minimum, 8GB recommended\n- **Storage:** 10GB free disk space minimum\n\n## Installation Commands\n\n### Windows\n```powershell\n# Download Node.js installer from https://nodejs.org\n# Download PostgreSQL installer from https://www.postgresql.org/download/windows/\n# Download Git from https://git-scm.com/download/win\n```\n\n### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Node.js 18.x\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install PostgreSQL\nsudo apt-get install -y postgresql postgresql-contrib\n\n# Install Git\nsudo apt-get install -y git\n\n# Install build essentials (for native modules)\nsudo apt-get install -y build-essential python3\n```\n\n### CentOS/RHEL/Fedora\n```bash\n# Install Node.js 18.x\ncurl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install PostgreSQL (CentOS/RHEL)\nsudo yum install -y postgresql-server postgresql-contrib\nsudo postgresql-setup initdb\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Install PostgreSQL (Fedora)\nsudo dnf install -y postgresql postgresql-server postgresql-contrib\nsudo postgresql-setup --initdb\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Install Git and build tools\nsudo yum install -y git gcc-c++ make python3\n```\n\n### Arch Linux\n```bash\n# Install Node.js\nsudo pacman -S nodejs npm\n\n# Install PostgreSQL\nsudo pacman -S postgresql\nsudo -u postgres initdb --locale=C.UTF-8 --encoding=UTF8 -D /var/lib/postgres/data\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Install Git and build tools\nsudo pacman -S git base-devel python\n```\n\n## NPM Dependencies\n\n### Production Dependencies (package-production.json)\n```json\n{\n  \"dependencies\": {\n    \"@google-cloud/storage\": \"^7.17.0\",\n    \"@hapi/boom\": \"^10.0.1\",\n    \"@hookform/resolvers\": \"^3.10.0\",\n    \"@jridgewell/trace-mapping\": \"^0.3.25\",\n    \"@neondatabase/serverless\": \"^0.10.4\",\n    \"@radix-ui/react-accordion\": \"^1.2.4\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-aspect-ratio\": \"^1.1.3\",\n    \"@radix-ui/react-avatar\": \"^1.1.4\",\n    \"@radix-ui/react-checkbox\": \"^1.1.5\",\n    \"@radix-ui/react-collapsible\": \"^1.1.4\",\n    \"@radix-ui/react-context-menu\": \"^2.2.7\",\n    \"@radix-ui/react-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.7\",\n    \"@radix-ui/react-hover-card\": \"^1.1.7\",\n    \"@radix-ui/react-label\": \"^2.1.3\",\n    \"@radix-ui/react-menubar\": \"^1.1.7\",\n    \"@radix-ui/react-navigation-menu\": \"^1.2.6\",\n    \"@radix-ui/react-popover\": \"^1.1.7\",\n    \"@radix-ui/react-progress\": \"^1.1.3\",\n    \"@radix-ui/react-radio-group\": \"^1.2.4\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.4\",\n    \"@radix-ui/react-select\": \"^2.1.7\",\n    \"@radix-ui/react-separator\": \"^1.1.3\",\n    \"@radix-ui/react-slider\": \"^1.2.4\",\n    \"@radix-ui/react-slot\": \"^1.2.0\",\n    \"@radix-ui/react-switch\": \"^1.1.4\",\n    \"@radix-ui/react-tabs\": \"^1.1.4\",\n    \"@radix-ui/react-toast\": \"^1.2.7\",\n    \"@radix-ui/react-toggle\": \"^1.1.3\",\n    \"@radix-ui/react-toggle-group\": \"^1.1.3\",\n    \"@radix-ui/react-tooltip\": \"^1.2.0\",\n    \"@tanstack/react-query\": \"^5.60.5\",\n    \"@types/bcryptjs\": \"^2.4.6\",\n    \"@types/connect-pg-simple\": \"^7.0.3\",\n    \"@types/express\": \"4.17.21\",\n    \"@types/express-session\": \"^1.18.0\",\n    \"@types/memoizee\": \"^0.4.12\",\n    \"@types/node\": \"20.16.11\",\n    \"@types/passport\": \"^1.0.16\",\n    \"@types/passport-local\": \"^1.0.38\",\n    \"@types/qrcode\": \"^1.5.5\",\n    \"@types/react\": \"^18.3.11\",\n    \"@types/react-dom\": \"^18.3.1\",\n    \"@types/ws\": \"^8.5.13\",\n    \"@uppy/aws-s3\": \"^5.0.0\",\n    \"@uppy/core\": \"^5.0.1\",\n    \"@uppy/dashboard\": \"^5.0.1\",\n    \"@uppy/react\": \"^5.0.2\",\n    \"@whiskeysockets/baileys\": \"^6.7.18\",\n    \"bcryptjs\": \"^3.0.2\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.1.1\",\n    \"connect-pg-simple\": \"^10.0.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"drizzle-kit\": \"^0.30.4\",\n    \"drizzle-orm\": \"^0.39.1\",\n    \"drizzle-zod\": \"^0.7.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"esbuild\": \"^0.25.0\",\n    \"express\": \"^4.21.2\",\n    \"express-session\": \"^1.18.1\",\n    \"framer-motion\": \"^11.13.1\",\n    \"html2canvas\": \"^1.4.1\",\n    \"input-otp\": \"^1.4.2\",\n    \"jspdf\": \"^3.0.2\",\n    \"lucide-react\": \"^0.453.0\",\n    \"memoizee\": \"^0.4.17\",\n    \"memorystore\": \"^1.6.7\",\n    \"next-themes\": \"^0.4.6\",\n    \"openid-client\": \"^6.7.1\",\n    \"passport\": \"^0.7.0\",\n    \"passport-local\": \"^1.0.0\",\n    \"pg\": \"^8.12.0\",\n    \"qrcode\": \"^1.5.4\",\n    \"qrcode-terminal\": \"^0.12.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.55.0\",\n    \"react-icons\": \"^5.4.0\",\n    \"react-resizable-panels\": \"^2.1.7\",\n    \"recharts\": \"^2.15.2\",\n    \"tailwind-merge\": \"^2.6.0\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"tsx\": \"^4.19.1\",\n    \"tw-animate-css\": \"^1.2.5\",\n    \"typescript\": \"5.6.3\",\n    \"vaul\": \"^1.1.2\",\n    \"wouter\": \"^3.3.5\",\n    \"ws\": \"^8.18.0\",\n    \"xlsx\": \"^0.18.5\",\n    \"zod\": \"^3.24.2\",\n    \"zod-validation-error\": \"^3.4.0\"\n  }\n}\n```\n\n## Optional Dependencies\n\n### Process Manager (Recommended for Production)\n```bash\nnpm install -g pm2\n```\n\n### SSL/TLS Support\n```bash\n# For HTTPS support\nnpm install https\nnpm install helmet\n```\n\n### Email Support\n```bash\n# For email notifications\nnpm install nodemailer\nnpm install @types/nodemailer\n```\n\n### Redis Cache (Optional)\n```bash\n# For caching\nnpm install redis\nnpm install @types/redis\n```\n\n### Backup Tools\n```bash\n# For automated backups\nnpm install node-cron\nnpm install archiver\n```\n\n## Development Dependencies (Optional)\n\n```bash\n# Testing\nnpm install --save-dev jest\nnpm install --save-dev @types/jest\nnpm install --save-dev supertest\nnpm install --save-dev @types/supertest\n\n# Linting\nnpm install --save-dev eslint\nnpm install --save-dev @typescript-eslint/parser\nnpm install --save-dev @typescript-eslint/eslint-plugin\n\n# Code formatting\nnpm install --save-dev prettier\nnpm install --save-dev eslint-config-prettier\n\n# Hot reload for development\nnpm install --save-dev nodemon\nnpm install --save-dev concurrently\n```\n\n## Verification Commands\n\n### Check System Requirements\n```bash\n# Check Node.js\nnode --version  # Should be 18+\n\n# Check npm\nnpm --version   # Should be 8+\n\n# Check PostgreSQL\npg_config --version  # Should be 13+\n\n# Check Git\ngit --version\n\n# Check system resources\nfree -h         # Linux - Check RAM\ndf -h           # Linux - Check disk space\n\n# Windows equivalents\nsysteminfo      # Windows - System info\n```\n\n### Test Database Connection\n```bash\n# Test PostgreSQL connection\npsql -h localhost -U postgres -d laptoppos -c \"SELECT version();\"\n```\n\n### Test Application\n```bash\n# Test build process\nnpm run build\n\n# Test application start\nnpm start\n\n# Check if application is responding\ncurl http://localhost:5000/api/health\n```\n\n## Troubleshooting Common Issues\n\n### Node.js Installation Issues\n```bash\n# Clear npm cache\nnpm cache clean --force\n\n# Reinstall Node.js if needed\n# Windows: Download new installer\n# Linux: Use package manager to remove and reinstall\n```\n\n### PostgreSQL Connection Issues\n```bash\n# Check if PostgreSQL is running\nsudo systemctl status postgresql  # Linux\n# Windows: Check Services panel\n\n# Reset PostgreSQL user password\nsudo -u postgres psql -c \"ALTER USER postgres PASSWORD 'newpassword';\"\n```\n\n### Permission Issues (Linux)\n```bash\n# Fix file permissions\nsudo chown -R $USER:$USER /path/to/laptoppos\nchmod +x install-linux.sh\n\n# Fix PostgreSQL permissions\nsudo -u postgres createuser --interactive\n```\n\n### Build Issues\n```bash\n# Install build essentials\nsudo apt-get install build-essential  # Ubuntu/Debian\nsudo yum groupinstall \"Development Tools\"  # CentOS/RHEL\n\n# Clear and reinstall dependencies\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## Performance Tuning\n\n### PostgreSQL Settings\nEdit `/etc/postgresql/*/main/postgresql.conf`:\n```\n# Memory settings\nshared_buffers = 256MB\neffective_cache_size = 1GB\nwork_mem = 4MB\nmaintenance_work_mem = 64MB\n\n# Connection settings\nmax_connections = 100\n\n# Checkpoint settings\ncheckpoint_completion_target = 0.7\nwal_buffers = 16MB\n```\n\n### Node.js Settings\n```bash\n# Set Node.js memory limit\nexport NODE_OPTIONS=\"--max-old-space-size=4096\"\n```\n\n### System Limits (Linux)\nEdit `/etc/security/limits.conf`:\n```\n* soft nofile 65536\n* hard nofile 65536\n```\n\n## Firewall Configuration\n\n### Windows Firewall\n```powershell\n# Allow Node.js through firewall\nnetsh advfirewall firewall add rule name=\"LaptopPOS\" dir=in action=allow protocol=TCP localport=5000\n```\n\n### Linux Firewall (UFW)\n```bash\n# Allow application port\nsudo ufw allow 5000/tcp\n\n# Allow PostgreSQL (if remote access needed)\nsudo ufw allow 5432/tcp\n\n# Enable firewall\nsudo ufw enable\n```\n\n### Linux Firewall (firewalld)\n```bash\n# Allow application port\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n```","size_bytes":9669},"ecosystem.config.js":{"content":"// PM2 Configuration for Production Deployment\nmodule.exports = {\n  apps: [{\n    name: 'laptoppos',\n    script: 'dist/index.js',\n    cwd: '/path/to/your/laptoppos',\n    instances: 'max',\n    exec_mode: 'cluster',\n    \n    // Environment variables\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    \n    // Restart conditions\n    max_memory_restart: '1G',\n    restart_delay: 4000,\n    max_restarts: 5,\n    min_uptime: '10s',\n    \n    // Logs\n    log_file: 'logs/combined.log',\n    out_file: 'logs/out.log',\n    error_file: 'logs/error.log',\n    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n    \n    // Auto restart\n    watch: false,\n    ignore_watch: ['node_modules', 'logs', 'uploads', 'temp'],\n    \n    // Advanced\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health monitoring\n    health_check_grace_period: 3000,\n  }]\n};","size_bytes":855},"install-linux.sh":{"content":"#!/bin/bash\n\n# LaptopPOS - Automated Linux Installation Script\n# This script completely automates the installation process\n\nset -e  # Exit on any error\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}=============================================${NC}\"\necho -e \"${GREEN}LaptopPOS - Automated Linux Installation${NC}\"\necho -e \"${GREEN}=============================================${NC}\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\n# Logging functions\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"\n}\n\nerror() {\n    echo -e \"${RED}[ERROR] $1${NC}\"\n    exit 1\n}\n\nwarning() {\n    echo -e \"${YELLOW}[WARNING] $1${NC}\"\n}\n\ninfo() {\n    echo -e \"${BLUE}[INFO] $1${NC}\"\n}\n\n# Check if running as root\nif [[ $EUID -eq 0 ]]; then\n    error \"This script should not be run as root. Please run as a regular user with sudo privileges.\"\nfi\n\n# Detect Linux distribution\nif [ -f /etc/os-release ]; then\n    . /etc/os-release\n    DISTRO=$ID\n    VERSION=$VERSION_ID\nelse\n    error \"Cannot detect Linux distribution\"\nfi\n\nlog \"Detected distribution: $DISTRO $VERSION\"\nlog \"Starting automated installation...\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    print_error \"Node.js is not installed!\"\n    print_status \"Installing Node.js...\"\n    \n    # Detect OS\n    if [[ -f /etc/ubuntu-release ]] || [[ -f /etc/debian_version ]]; then\n        # Ubuntu/Debian\n        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\n        sudo apt-get install -y nodejs\n    elif [[ -f /etc/redhat-release ]] || [[ -f /etc/centos-release ]]; then\n        # RHEL/CentOS/Fedora\n        curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -\n        sudo yum install -y nodejs\n    elif [[ -f /etc/arch-release ]]; then\n        # Arch Linux\n        sudo pacman -S nodejs npm\n    else\n        print_error \"Unsupported Linux distribution. Please install Node.js manually:\"\n        print_status \"Visit: https://nodejs.org/en/download/package-manager/\"\n        exit 1\n    fi\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version)\nprint_success \"Node.js version: $NODE_VERSION\"\n\n# Check if npm is installed\nif ! command -v npm &> /dev/null; then\n    print_error \"npm is not installed!\"\n    exit 1\nfi\n\nNPM_VERSION=$(npm --version)\nprint_success \"npm version: $NPM_VERSION\"\n\n# Check if PostgreSQL is installed\nif ! command -v pg_config &> /dev/null; then\n    print_warning \"PostgreSQL is not installed!\"\n    print_status \"Installing PostgreSQL...\"\n    \n    if [[ -f /etc/ubuntu-release ]] || [[ -f /etc/debian_version ]]; then\n        # Ubuntu/Debian\n        sudo apt-get update\n        sudo apt-get install -y postgresql postgresql-contrib\n        sudo systemctl start postgresql\n        sudo systemctl enable postgresql\n    elif [[ -f /etc/redhat-release ]] || [[ -f /etc/centos-release ]]; then\n        # RHEL/CentOS/Fedora\n        sudo yum install -y postgresql-server postgresql-contrib\n        sudo postgresql-setup initdb\n        sudo systemctl start postgresql\n        sudo systemctl enable postgresql\n    elif [[ -f /etc/arch-release ]]; then\n        # Arch Linux\n        sudo pacman -S postgresql\n        sudo -u postgres initdb --locale=C.UTF-8 --encoding=UTF8 -D /var/lib/postgres/data\n        sudo systemctl start postgresql\n        sudo systemctl enable postgresql\n    fi\nfi\n\nPG_VERSION=$(pg_config --version 2>/dev/null || echo \"Not available\")\nprint_success \"PostgreSQL: $PG_VERSION\"\n\nprint_status \"Installing dependencies...\"\nnpm install\n\nif [ $? -ne 0 ]; then\n    print_error \"Failed to install dependencies!\"\n    exit 1\nfi\n\nprint_status \"Creating necessary directories...\"\nmkdir -p logs uploads temp/reports backups whatsapp_session\n\nprint_status \"Setting up environment configuration...\"\nif [ ! -f \".env\" ]; then\n    cp .env.example .env\n    print_success \"Created .env file from template\"\n    print_warning \"IMPORTANT: Please edit .env file with your database credentials!\"\nelse\n    print_status \".env file already exists\"\nfi\n\nprint_status \"Building application...\"\nnpm run build\n\nif [ $? -ne 0 ]; then\n    print_error \"Failed to build application!\"\n    exit 1\nfi\n\nprint_status \"Setting up systemd service...\"\ncat > laptoppos.service << EOF\n[Unit]\nDescription=LaptopPOS Service Management System\nAfter=network.target postgresql.service\n\n[Service]\nType=simple\nUser=$USER\nWorkingDirectory=$(pwd)\nEnvironment=NODE_ENV=production\nExecStart=/usr/bin/node dist/index.js\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=laptoppos\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nprint_success \"Created laptoppos.service file\"\n\n# Setup database automatically\nsetup_database() {\n    log \"Setting up PostgreSQL database...\"\n    \n    # Generate secure random password\n    DB_PASSWORD=$(openssl rand -base64 32 | tr -d \"=+/\" | cut -c1-25)\n    \n    # Create database and user\n    sudo -u postgres psql <<EOF\nCREATE USER laptoppos WITH PASSWORD '$DB_PASSWORD';\nCREATE DATABASE laptoppos OWNER laptoppos;\nGRANT ALL PRIVILEGES ON DATABASE laptoppos TO laptoppos;\nALTER USER laptoppos CREATEDB;\n\\\\q\nEOF\n    \n    # Create environment file with actual credentials\n    cat > .env <<EOF\nNODE_ENV=production\nPORT=5000\nSESSION_SECRET=$(openssl rand -base64 32)\n\n# Database Configuration\nDATABASE_URL=postgresql://laptoppos:$DB_PASSWORD@localhost:5432/laptoppos\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=laptoppos\nPGUSER=laptoppos\nPGPASSWORD=$DB_PASSWORD\n\n# Security\nBCRYPT_ROUNDS=12\n\n# Default Admin\nDEFAULT_ADMIN_USERNAME=admin\nDEFAULT_ADMIN_PASSWORD=admin123\nDEFAULT_ADMIN_EMAIL=admin@laptoppos.com\nEOF\n    \n    info \"Database credentials saved to .env file\"\n    \n    # Run database migrations\n    log \"Running database migrations...\"\n    export $(cat .env | xargs)\n    npm run db:push --force || npm run db:push\n    \n    log \"Initializing SaaS multi-tenant system...\"\n    # SaaS tables will be created automatically by schema\n    \n    log \"Database setup completed successfully with SaaS support\"\n}\n\n# Create systemd service\ncreate_systemd_service() {\n    log \"Creating systemd service...\"\n    \n    CURRENT_DIR=$(pwd)\n    CURRENT_USER=$(whoami)\n    \n    sudo tee /etc/systemd/system/laptoppos.service > /dev/null <<EOF\n[Unit]\nDescription=LaptopPOS - Point of Sale System\nAfter=network.target postgresql.service\nWants=postgresql.service\n\n[Service]\nType=simple\nUser=$CURRENT_USER\nWorkingDirectory=$CURRENT_DIR\nEnvironment=NODE_ENV=production\nEnvironmentFile=$CURRENT_DIR/.env\nExecStart=/usr/bin/npm start\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=laptoppos\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    \n    sudo systemctl daemon-reload\n    sudo systemctl enable laptoppos\n    \n    log \"Systemd service created and enabled\"\n}\n\n# Start the application\nstart_application() {\n    log \"Starting LaptopPOS application...\"\n    \n    sudo systemctl start laptoppos\n    \n    # Wait for service to start\n    sleep 5\n    \n    if sudo systemctl is-active --quiet laptoppos; then\n        log \"LaptopPOS started successfully!\"\n    else\n        error \"Failed to start LaptopPOS. Check logs with: sudo journalctl -u laptoppos -f\"\n    fi\n}\n\n# Configure firewall\nsetup_firewall() {\n    if command -v ufw >/dev/null 2>&1; then\n        sudo ufw allow 5000/tcp\n        info \"Firewall configured to allow port 5000\"\n    elif command -v firewall-cmd >/dev/null 2>&1; then\n        sudo firewall-cmd --permanent --add-port=5000/tcp\n        sudo firewall-cmd --reload\n        info \"Firewall configured to allow port 5000\"\n    else\n        warning \"No firewall detected. Make sure port 5000 is accessible.\"\n    fi\n}\n\n# Call all setup functions\nsetup_database\ncreate_systemd_service\nsetup_firewall\nstart_application\n\necho\necho -e \"${GREEN}=============================================${NC}\"\necho -e \"${GREEN}     Installation Completed Successfully!${NC}\"\necho -e \"${GREEN}=============================================${NC}\"\necho\necho -e \"${BLUE}Application URL:${NC} http://$(hostname -I | awk '{print $1}'):5000\"\necho -e \"${BLUE}Default Login:${NC} admin / admin123\"\necho\necho -e \"${YELLOW}Service Management:${NC}\"\necho \"  Start:   sudo systemctl start laptoppos\"\necho \"  Stop:    sudo systemctl stop laptoppos\"\necho \"  Restart: sudo systemctl restart laptoppos\"\necho \"  Status:  sudo systemctl status laptoppos\"\necho \"  Logs:    sudo journalctl -u laptoppos -f\"\necho\necho -e \"${YELLOW}Configuration Files:${NC}\"\necho \"  Environment: $(pwd)/.env\"\necho \"  Service:     /etc/systemd/system/laptoppos.service\"\necho\necho -e \"${RED}IMPORTANT: Change the default password after first login!${NC}\"\necho -e \"${GREEN}=============================================${NC}\"","size_bytes":8844},"WINDOWS-DEPLOYMENT.md":{"content":"# LaptopPOS Windows Deployment Guide\n\n## Masalah Login dan Solusi\n\n### ❌ Masalah Umum\nSetelah deploy ke Windows, tidak bisa login karena aplikasi ini dikonfigurasi untuk Replit Authentication.\n\n### ✅ Solusi\n\n#### 1. Pastikan .env sudah benar\nBuka file `.env` dan pastikan tidak ada variabel Replit:\n```env\n# JANGAN ada variabel ini untuk local deployment:\n# REPLIT_DOMAINS=...\n# ISSUER_URL=...\n# REPL_ID=...\n\n# Database Configuration\nDATABASE_URL=postgresql://username:password@localhost:5432/laptoppos\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=laptoppos\nPGUSER=postgres\nPGPASSWORD=your_password_here\n\n# Application Configuration\nNODE_ENV=production\nPORT=5000\nSESSION_SECRET=your-very-secure-session-secret-key-change-this\n\n# Default Admin Credentials\nDEFAULT_ADMIN_USERNAME=admin\nDEFAULT_ADMIN_PASSWORD=admin123\nDEFAULT_ADMIN_EMAIL=admin@laptoppos.com\n```\n\n#### 2. Login Credentials untuk Windows\n```\nUsername: admin\nPassword: admin123\n```\n\n#### 3. Langkah Installation Ulang (jika masih bermasalah)\n1. Hapus folder `node_modules`\n2. Hapus file `package-lock.json`\n3. Jalankan: `npm install`\n4. Jalankan: `npm run build`\n5. Jalankan: `npm start`\n\n#### 4. Troubleshooting\nJika masih tidak bisa login:\n1. Buka browser di `http://localhost:5000`\n2. Pastikan database PostgreSQL sudah running\n3. Cek log di terminal untuk error\n4. Pastikan file `.env` sudah di-setup dengan benar\n\n### 📞 Bantuan Teknis\nJika masih mengalami masalah, screenshot error yang muncul di browser atau terminal.\n\n## Tips Windows Deployment\n- Gunakan Command Prompt as Administrator\n- Pastikan PostgreSQL service sudah running\n- Firewall Windows mungkin perlu dikonfigurasi untuk port 5000\n- Antivirus mungkin perlu whitelist folder aplikasi","size_bytes":1717},"QUICK-DEPLOYMENT.md":{"content":"# LaptopPOS - Quick Deployment Guide\n\n## 🚀 One-Command Installation\n\n### For Linux Servers\n```bash\ncurl -sSL https://your-server.com/install-linux.sh | bash\n```\n\n### For Windows Servers\n1. Download `install-windows.bat`\n2. Run as Administrator\n3. Done!\n\n## 📋 What Gets Installed Automatically\n\n### ✅ Linux Installation Includes:\n- Node.js 20.x (if not installed)\n- PostgreSQL 13+ (if not installed)\n- LaptopPOS application and dependencies\n- Secure database setup with random passwords\n- Systemd service configuration\n- Firewall configuration (UFW/firewalld)\n- Automatic service startup\n- Environment file with secure defaults\n\n### ✅ Windows Installation Includes:\n- Dependency checking (Node.js, PostgreSQL)\n- LaptopPOS application and dependencies\n- Database creation and setup\n- Environment configuration\n- Service management instructions\n\n## 🔧 Advanced Options\n\n### Create Deployment Package\nIf you have a working LaptopPOS instance and want to deploy to other servers:\n```bash\n./deploy-auto.sh\n```\n\nThis creates a complete deployment package with:\n- Current database schema\n- All application files\n- Installation scripts\n- Configuration templates\n\n### Manual Database Migration\nTo use the same database as your current server:\n```bash\n# Export current database\npg_dump $DATABASE_URL > current_database.sql\n\n# On target server (after installation)\npsql -d laptoppos -f current_database.sql\n```\n\n## 🌐 Post-Installation\n\n### Access Your Application\n- **URL:** http://server-ip:5000\n- **Username:** admin\n- **Password:** admin123\n\n### Service Management (Linux)\n```bash\nsudo systemctl start laptoppos     # Start\nsudo systemctl stop laptoppos      # Stop\nsudo systemctl restart laptoppos   # Restart\nsudo systemctl status laptoppos    # Check status\nsudo journalctl -u laptoppos -f    # View logs\n```\n\n### Service Management (Windows)\n```cmd\n# Using PM2 (install after initial setup)\nnpm install -g pm2\npm2 start ecosystem.config.js\npm2 list                          # Check status\npm2 logs                          # View logs\npm2 restart laptoppos            # Restart\n```\n\n## 🛡️ Security Checklist\n\nAfter installation:\n- [ ] Change default admin password\n- [ ] Update SESSION_SECRET in .env file\n- [ ] Configure SSL/HTTPS for production\n- [ ] Setup regular database backups\n- [ ] Configure proper firewall rules\n- [ ] Review and update default configurations\n\n## 📞 Support\n\nIf installation fails:\n1. Check logs for errors\n2. Verify system requirements\n3. Ensure proper network connectivity\n4. Check PostgreSQL service status\n\n**Linux:** `sudo journalctl -u laptoppos -f`\n**Windows:** Check command prompt output during installation\n\n---\n\n**Total Installation Time:** 3-5 minutes\n**Zero Manual Configuration Required**","size_bytes":2745},"client/src/components/customers/customer-create-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst customerFormSchema = insertCustomerSchema.extend({\n  email: z.string().email(\"Email tidak valid\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\ntype CustomerFormData = z.infer<typeof customerFormSchema>;\n\ninterface CustomerCreateModalProps {\n  open: boolean;\n  onClose: () => void;\n  onCustomerCreated?: (customer: any) => void;\n}\n\nexport default function CustomerCreateModal({ \n  open, \n  onClose, \n  onCustomerCreated \n}: CustomerCreateModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CustomerFormData>({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: CustomerFormData) => {\n      return await apiRequest('POST', '/api/customers', data);\n    },\n    onSuccess: (newCustomer) => {\n      console.log('Customer created successfully:', newCustomer);\n      \n      // Show creation toast first\n      toast({\n        title: \"Success\",\n        description: \"Customer berhasil ditambahkan\",\n      });\n      \n      // Reset form and close modal\n      form.reset();\n      onClose();\n      \n      // Call the callback immediately - no delay\n      if (onCustomerCreated) {\n        console.log('About to call onCustomerCreated');\n        onCustomerCreated(newCustomer);\n      }\n      \n      // Refresh customer cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Gagal menambahkan customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CustomerFormData) => {\n    // Clean up empty strings to null for optional fields\n    const cleanData = {\n      name: data.name,\n      email: data.email || null,\n      phone: data.phone || null,\n      address: data.address || null,\n    };\n    \n    createCustomerMutation.mutate(cleanData);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Tambah Customer Baru</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Nama *</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Masukkan nama customer\"\n              {...form.register(\"name\")}\n              data-testid=\"input-customer-name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.name.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\">Nomor Telepon</Label>\n            <Input\n              id=\"phone\"\n              placeholder=\"Contoh: 08123456789\"\n              {...form.register(\"phone\")}\n              data-testid=\"input-customer-phone\"\n            />\n            {form.formState.errors.phone && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.phone.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"contoh@email.com\"\n              {...form.register(\"email\")}\n              data-testid=\"input-customer-email\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Alamat</Label>\n            <Textarea\n              id=\"address\"\n              placeholder=\"Masukkan alamat lengkap\"\n              rows={3}\n              {...form.register(\"address\")}\n              data-testid=\"input-customer-address\"\n            />\n            {form.formState.errors.address && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.address.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={createCustomerMutation.isPending}\n              data-testid=\"button-cancel\"\n            >\n              Batal\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createCustomerMutation.isPending}\n              data-testid=\"button-save-customer\"\n            >\n              {createCustomerMutation.isPending ? \"Menyimpan...\" : \"Simpan\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5776},"deploy-auto.sh":{"content":"#!/bin/bash\n\n# LaptopPOS Universal Deployment Script\n# This script creates a complete deployment package for any Linux/Windows server\n\nset -e\n\necho \"=============================================\"\necho \"LaptopPOS - Universal Deployment Creator\"\necho \"=============================================\"\n\n# Create deployment directory\nDEPLOY_DIR=\"laptoppos-deployment-$(date +%Y%m%d-%H%M%S)\"\nmkdir -p $DEPLOY_DIR\n\necho \"Creating deployment package in: $DEPLOY_DIR\"\n\n# Copy essential files\necho \"Copying application files...\"\ncp -r client/ $DEPLOY_DIR/\ncp -r server/ $DEPLOY_DIR/\ncp -r shared/ $DEPLOY_DIR/\ncp package.json $DEPLOY_DIR/\ncp package-lock.json $DEPLOY_DIR/\ncp tsconfig.json $DEPLOY_DIR/\ncp vite.config.ts $DEPLOY_DIR/\ncp tailwind.config.ts $DEPLOY_DIR/\ncp postcss.config.js $DEPLOY_DIR/\ncp drizzle.config.ts $DEPLOY_DIR/\ncp components.json $DEPLOY_DIR/\n\n# Copy deployment scripts\necho \"Copying deployment scripts...\"\ncp install-linux.sh $DEPLOY_DIR/\ncp install-windows.bat $DEPLOY_DIR/\ncp .env.example $DEPLOY_DIR/\n\n# Create production package.json (without dev dependencies)\necho \"Creating production package.json...\"\nnode -e \"\nconst pkg = require('./package.json');\nconst prodPkg = {\n  ...pkg,\n  devDependencies: undefined,\n  scripts: {\n    start: 'NODE_ENV=production node dist/server/index.js',\n    build: 'tsc && vite build',\n    'db:push': pkg.scripts['db:push'],\n    'db:studio': pkg.scripts['db:studio'],\n    'pm2:start': 'pm2 start ecosystem.config.js',\n    'pm2:stop': 'pm2 stop laptoppos',\n    'pm2:restart': 'pm2 restart laptoppos'\n  }\n};\nrequire('fs').writeFileSync('$DEPLOY_DIR/package-production.json', JSON.stringify(prodPkg, null, 2));\n\"\n\n# Create PM2 ecosystem config\necho \"Creating PM2 configuration...\"\ncat > $DEPLOY_DIR/ecosystem.config.js << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'laptoppos',\n    script: 'dist/server/index.js',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true\n  }]\n};\nEOF\n\n# Export current database schema\necho \"Exporting database schema...\"\nif [ -n \"$DATABASE_URL\" ]; then\n    # Try to export current schema\n    pg_dump $DATABASE_URL --schema-only --no-owner --no-privileges > $DEPLOY_DIR/current_schema.sql 2>/dev/null || {\n        echo \"Warning: Could not export current schema, using existing file\"\n        cp laptoppos_database.sql $DEPLOY_DIR/ 2>/dev/null || echo \"No database schema file found\"\n    }\n    \n    # Export sample data (admin user and store config)\n    pg_dump $DATABASE_URL --data-only --inserts --column-inserts -t users -t store_config > $DEPLOY_DIR/sample_data.sql 2>/dev/null || {\n        echo \"Warning: Could not export sample data\"\n    }\nelse\n    echo \"Warning: DATABASE_URL not set, using existing schema file\"\n    cp laptoppos_database.sql $DEPLOY_DIR/ 2>/dev/null || echo \"No database schema file found\"\nfi\n\n# Create comprehensive README\necho \"Creating deployment README...\"\ncat > $DEPLOY_DIR/README.md << 'EOF'\n# LaptopPOS - Deployment Package\n\n## Quick Start\n\n### Linux (Ubuntu/Debian/CentOS/RHEL)\n```bash\nchmod +x install-linux.sh\n./install-linux.sh\n```\n\n### Windows\n```cmd\ninstall-windows.bat\n```\n\n## Manual Installation\n\n### 1. Prerequisites\n- Node.js 18+ \n- PostgreSQL 13+\n- 4GB RAM minimum\n\n### 2. Install Dependencies\n```bash\nnpm install\n```\n\n### 3. Setup Environment\n```bash\ncp .env.example .env\n# Edit .env with your database credentials\n```\n\n### 4. Setup Database\n```bash\n# Create database\ncreatedb laptoppos\n\n# Import schema\npsql -d laptoppos -f laptoppos_database.sql\n```\n\n### 5. Build & Run\n```bash\nnpm run build\nnpm start\n```\n\n## Default Login\n- Username: admin\n- Password: admin123\n\n⚠️ **Change default password after first login!**\n\n## Production Deployment\n\n### Using PM2 (Recommended)\n```bash\nnpm install -g pm2\nnpm run pm2:start\n```\n\n### Using systemd (Linux)\n```bash\nsudo cp laptoppos.service /etc/systemd/system/\nsudo systemctl enable laptoppos\nsudo systemctl start laptoppos\n```\n\n## Support\n- Application runs on port 5000\n- Check logs: `pm2 logs` or `sudo journalctl -u laptoppos`\n- Database: PostgreSQL with `laptoppos` database\nEOF\n\n# Create Windows service installer\necho \"Creating Windows service installer...\"\ncat > $DEPLOY_DIR/install-windows-service.bat << 'EOF'\n@echo off\necho Installing LaptopPOS as Windows Service...\n\nnpm install -g pm2\nnpm install -g pm2-windows-service\n\npm2-service-install\npm2 start ecosystem.config.js\npm2 save\n\necho Service installed successfully!\necho Use 'pm2 list' to check status\npause\nEOF\n\n# Make scripts executable\nchmod +x $DEPLOY_DIR/install-linux.sh\n\n# Create archive\necho \"Creating deployment archive...\"\ntar -czf ${DEPLOY_DIR}.tar.gz $DEPLOY_DIR/\nzip -r ${DEPLOY_DIR}.zip $DEPLOY_DIR/ >/dev/null 2>&1\n\necho \"=============================================\"\necho \"Deployment package created successfully!\"\necho \"=============================================\"\necho\necho \"Files created:\"\necho \"- ${DEPLOY_DIR}.tar.gz (Linux deployment)\"\necho \"- ${DEPLOY_DIR}.zip (Windows deployment)\"\necho\necho \"To deploy:\"\necho \"1. Extract archive on target server\"\necho \"2. Run install script for your platform\"\necho \"3. Access application at http://server-ip:5000\"\necho\necho \"Default login: admin / admin123\"\necho \"=============================================\"","size_bytes":5420},"laptoppos-deployment-20250903-113337/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport POS from \"@/pages/pos\";\nimport ServiceTickets from \"@/pages/service-tickets\";\nimport Inventory from \"@/pages/inventory\";\nimport Purchasing from \"@/pages/purchasing\";\nimport Customers from \"@/pages/customers\";\nimport Suppliers from \"@/pages/suppliers\";\nimport Financial from \"@/pages/financial\";\nimport FinanceNew from \"@/pages/finance-new\";\nimport Reports from \"@/pages/reports\";\nimport StockMovements from \"@/pages/stock-movements\";\nimport Settings from \"@/pages/settings\";\nimport RolesPage from \"@/pages/roles\";\nimport UsersPage from \"@/pages/users\";\nimport ServiceStatus from \"@/pages/ServiceStatus\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Login} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/pos\" component={POS} />\n          <Route path=\"/service\" component={ServiceTickets} />\n          <Route path=\"/inventory\" component={Inventory} />\n          <Route path=\"/purchasing\" component={Purchasing} />\n          <Route path=\"/customers\" component={Customers} />\n          <Route path=\"/suppliers\" component={Suppliers} />\n          <Route path=\"/financial\" component={Financial} />\n          <Route path=\"/finance-new\" component={FinanceNew} />\n          <Route path=\"/users\" component={UsersPage} />\n          <Route path=\"/roles\" component={RolesPage} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/stock-movements\" component={StockMovements} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route path=\"/service-status\" component={ServiceStatus} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2428},"laptoppos-deployment-20250903-113337/client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\n// CSS for uppy will be loaded automatically\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2826},"laptoppos-deployment-20250903-113337/client/src/components/ServicePaymentReceipt.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Printer, Download, X } from 'lucide-react';\nimport QRCode from 'qrcode';\nimport { format } from 'date-fns';\nimport { id } from 'date-fns/locale';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ServicePaymentReceiptProps {\n  open: boolean;\n  onClose: () => void;\n  serviceTicket: {\n    id: string;\n    ticketNumber: string;\n    customerId: string;\n    deviceType: string;\n    deviceBrand?: string;\n    deviceModel?: string;\n    serialNumber?: string;\n    problem: string;\n    diagnosis?: string;\n    solution?: string;\n    actualCost?: string;\n    partsCost?: string;\n    laborCost?: string;\n    status: string;\n    createdAt: string;\n    completedAt?: string;\n    parts?: Array<{\n      productId: string;\n      productName: string;\n      quantity: number;\n      unitPrice: string;\n      totalPrice: string;\n    }>;\n  };\n  customer: {\n    id: string;\n    name: string;\n    phone?: string;\n    email?: string;\n    address?: string;\n  };\n  storeConfig: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n  };\n  technician?: {\n    id: string;\n    name: string;\n    username: string;\n  } | null;\n}\n\nconst paperSizes = {\n  'a4': { name: 'A4 - Printer Biasa', width: 210, type: 'standard' },\n  '58': { name: '58mm - Thermal Kecil', width: 58, type: 'thermal' },\n  '80': { name: '80mm - Thermal Standar', width: 80, type: 'thermal' },\n  '100': { name: '100mm - Thermal Besar', width: 100, type: 'thermal' },\n} as const;\n\ntype PaperSize = keyof typeof paperSizes;\n\nexport default function ServicePaymentReceipt({ \n  open, \n  onClose, \n  serviceTicket, \n  customer, \n  storeConfig, \n  technician \n}: ServicePaymentReceiptProps) {\n  const receiptRef = useRef<HTMLDivElement>(null);\n  const [qrCodeDataURL, setQrCodeDataURL] = useState<string>('');\n  const [paperSize, setPaperSize] = useState<PaperSize>('a4');\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  useEffect(() => {\n    if (open) {\n      // Generate QR Code untuk tracking\n      const generateQR = async () => {\n        try {\n          const trackingURL = `${window.location.origin}/service-status?ticket=${serviceTicket.ticketNumber}`;\n          const qrDataURL = await QRCode.toDataURL(trackingURL, {\n            width: 120,\n            margin: 1,\n            color: {\n              dark: '#000000',\n              light: '#FFFFFF',\n            },\n          });\n          setQrCodeDataURL(qrDataURL);\n        } catch (err) {\n          console.error('Error generating QR code:', err);\n        }\n      };\n      generateQR();\n    }\n  }, [serviceTicket.ticketNumber, open]);\n\n  if (!open) return null;\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const getTotalCost = () => {\n    const actualCost = Number(serviceTicket.actualCost || 0);\n    const partsCost = Number(serviceTicket.partsCost || 0);\n    const laborCost = Number(serviceTicket.laborCost || 0);\n    return Math.max(actualCost, partsCost + laborCost);\n  };\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      // Wait a bit to ensure content is fully loaded\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const element = document.getElementById('service-payment-receipt-content');\n      if (!element) {\n        console.error('Receipt element not found');\n        alert('Error: Receipt element not found. Please try again.');\n        return;\n      }\n\n      // Make sure element is visible\n      element.style.display = 'block';\n      element.style.visibility = 'visible';\n      \n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: true,\n        width: element.scrollWidth,\n        height: element.scrollHeight,\n      });\n\n      // Check if canvas has content\n      if (canvas.width === 0 || canvas.height === 0) {\n        console.error('Canvas is empty');\n        alert('Error: Failed to capture receipt content. Please try again.');\n        return;\n      }\n\n      const imgData = canvas.toDataURL('image/png');\n      const pageWidth = paperSizes[paperSize].width;\n      const pageHeight = paperSize === 'a4' ? 297 : (canvas.height / canvas.width) * pageWidth;\n      \n      const pdf = new jsPDF('p', 'mm', paperSize === 'a4' ? [148, 210] : [pageWidth, pageHeight]);\n      if (paperSize === 'a4') {\n        // For A5 size (half page), fit to page with margins\n        const margin = 4;\n        const availableWidth = 148 - (2 * margin); // A5 width\n        const scaledHeight = (canvas.height / canvas.width) * availableWidth;\n        pdf.addImage(imgData, 'PNG', margin, margin, availableWidth, scaledHeight);\n      } else {\n        pdf.addImage(imgData, 'PNG', 0, 0, pageWidth, pageHeight);\n      }\n      pdf.save(`Nota-Pembayaran-Service-${serviceTicket.ticketNumber}-${paperSize === 'a4' ? 'A5' : pageWidth + 'mm'}.pdf`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      alert('Error generating PDF. Please try again or contact support.');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handlePrint = () => {\n    try {\n      const pageWidth = paperSizes[paperSize].width;\n      const fontSize = paperSize === 'a4' ? '12px' : \n                      paperSize === '58' ? '7px' : \n                      paperSize === '80' ? '8px' : '10px';\n      \n      const printStyle = `\n        <style id=\"service-payment-print-style\">\n          @media print {\n            * { \n              visibility: hidden; \n              margin: 0 !important; \n              padding: 0 !important;\n              box-sizing: border-box;\n            }\n            #service-payment-receipt-content, \n            #service-payment-receipt-content * { \n              visibility: visible; \n            }\n            #service-payment-receipt-content {\n              position: absolute;\n              left: 0;\n              top: 0;\n              width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              max-width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              font-family: ${paperSize === 'a4' ? 'Arial, sans-serif' : \"'Courier New', monospace\"};\n              font-size: ${paperSize === 'a4' ? '11px' : fontSize};\n              line-height: ${paperSize === 'a4' ? '1.4' : '1.0'};\n              color: #000;\n              background: #fff;\n              page-break-inside: avoid;\n              height: auto;\n              max-height: ${paperSize === 'a4' ? '270mm' : '300mm'};\n              padding: ${paperSize === 'a4' ? '10mm' : '2mm'};\n            }\n            .no-print { \n              display: none !important; \n            }\n            @page {\n              size: ${paperSize === 'a4' ? '148mm 210mm' : `${pageWidth}mm 350mm`};\n              margin: ${paperSize === 'a4' ? '4mm' : '1mm'};\n            }\n            .text-center { text-align: center; }\n            .font-bold { font-weight: bold; }\n            .flex { display: flex; }\n            .flex-1 { flex: 1; }\n            .justify-between { justify-content: space-between; }\n            .items-center { align-items: center; }\n            .border-t { \n              border-top: 1px dashed #333; \n              margin: 2px 0 !important; \n            }\n            .border-b { \n              border-bottom: 1px dashed #333; \n              margin: 2px 0 !important; \n            }\n            .space-y-1 > * + * { margin-top: 1px !important; }\n            .py-2 { padding: 2px 0 !important; }\n            .my-2 { margin: 2px 0 !important; }\n            .mb-2 { margin-bottom: 2px !important; }\n            .mt-4 { margin-top: 3px !important; }\n            h3 { font-size: ${fontSize}; margin: 2px 0 !important; }\n            img { max-width: 40mm; height: auto; }\n          }\n          @media screen {\n            #service-payment-print-style { display: none; }\n          }\n        </style>\n      `;\n      \n      const oldStyle = document.getElementById('service-payment-print-style');\n      if (oldStyle) oldStyle.remove();\n      \n      document.head.insertAdjacentHTML('beforeend', printStyle);\n      window.print();\n      \n      setTimeout(() => {\n        const printStyleElement = document.getElementById('service-payment-print-style');\n        if (printStyleElement) {\n          printStyleElement.remove();\n        }\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Terjadi kesalahan saat mencetak. Silakan coba lagi.');\n    }\n  };\n\n  const getReceiptWidth = () => {\n    switch (paperSize) {\n      case 'a4': return 'max-w-[500px]';\n      case '58': return 'max-w-[58mm]';\n      case '80': return 'max-w-[80mm]';\n      case '100': return 'max-w-[100mm]';\n      default: return 'max-w-[500px]';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (paperSize) {\n      case 'a4': return 'text-sm';\n      case '58': return 'text-xs';\n      case '80': return 'text-sm';\n      case '100': return 'text-base';\n      default: return 'text-sm';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"no-print\">\n          <DialogTitle>Nota Pembayaran Service</DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4\"\n            data-testid=\"button-close-payment-receipt\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Paper Size Selector */}\n          <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg no-print\">\n            <Label htmlFor=\"paper-size\" className=\"font-medium\">Ukuran Kertas:</Label>\n            <Select value={paperSize} onValueChange={(value: PaperSize) => setPaperSize(value)}>\n              <SelectTrigger className=\"w-48\" id=\"paper-size\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"a4\">{paperSizes['a4'].name}</SelectItem>\n                <SelectItem value=\"58\">{paperSizes['58'].name}</SelectItem>\n                <SelectItem value=\"80\">{paperSizes['80'].name}</SelectItem>\n                <SelectItem value=\"100\">{paperSizes['100'].name}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Print Actions */}\n          <div className=\"flex gap-2 no-print\">\n            <Button onClick={handlePrint} className=\"flex-1\">\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Cetak Nota\n            </Button>\n            <Button \n              onClick={generatePDF} \n              variant=\"outline\" \n              disabled={isGenerating}\n              className=\"flex-1\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {isGenerating ? 'Generating...' : 'Download PDF'}\n            </Button>\n          </div>\n\n          {/* Receipt Content */}\n          <Card className=\"p-0 shadow-none\">\n            <div \n              id=\"service-payment-receipt-content\"\n              className={`mx-auto bg-white p-4 ${getReceiptWidth()} ${getTextSize()}`}\n              ref={receiptRef}\n              style={{ \n                minHeight: '400px',\n                display: 'block',\n                visibility: 'visible',\n                position: 'relative'\n              }}\n            >\n              {/* Header */}\n              <div className=\"text-center mb-6\">\n                <h1 className=\"font-bold text-2xl mb-2 tracking-wide\">{storeConfig.name}</h1>\n                <div className=\"text-sm text-gray-700 space-y-1\">\n                  <p>{storeConfig.address}</p>\n                  <p>Telp: {storeConfig.phone} | Email: {storeConfig.email}</p>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-100 py-3 px-4 mb-4 rounded\">\n                <h2 className=\"text-center font-bold text-lg\">NOTA PEMBAYARAN SERVICE</h2>\n                <p className=\"text-center text-sm mt-1\">No: {serviceTicket.ticketNumber}</p>\n              </div>\n\n              {/* Customer Info */}\n              <div className=\"grid grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <h3 className=\"font-semibold text-sm mb-2 border-b pb-1\">INFORMASI NOTA</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <div><span className=\"text-gray-600\">Tanggal:</span> {format(new Date(), 'dd/MM/yyyy HH:mm', { locale: id })}</div>\n                    <div><span className=\"text-gray-600\">Status:</span> <span className=\"text-green-600 font-medium\">LUNAS</span></div>\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-sm mb-2 border-b pb-1\">DATA PELANGGAN</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <div><span className=\"text-gray-600\">Nama:</span> {customer.name}</div>\n                    {customer.phone && <div><span className=\"text-gray-600\">Telp:</span> {customer.phone}</div>}\n                    {customer.email && <div><span className=\"text-gray-600\">Email:</span> {customer.email}</div>}\n                  </div>\n                </div>\n              </div>\n\n              {/* Device Info */}\n              <div className=\"bg-gray-50 p-4 rounded mb-4\">\n                <h3 className=\"font-semibold text-sm mb-3 border-b pb-1\">DETAIL PERANGKAT</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600 block\">Jenis Perangkat:</span>\n                    <span className=\"font-medium\">{serviceTicket.deviceType}</span>\n                  </div>\n                  {serviceTicket.deviceBrand && (\n                    <div>\n                      <span className=\"text-gray-600 block\">Merk:</span>\n                      <span className=\"font-medium\">{serviceTicket.deviceBrand}</span>\n                    </div>\n                  )}\n                  {serviceTicket.deviceModel && (\n                    <div>\n                      <span className=\"text-gray-600 block\">Model:</span>\n                      <span className=\"font-medium\">{serviceTicket.deviceModel}</span>\n                    </div>\n                  )}\n                  {serviceTicket.serialNumber && (\n                    <div>\n                      <span className=\"text-gray-600 block\">Serial Number:</span>\n                      <span className=\"font-medium\">{serviceTicket.serialNumber}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Service Details */}\n              <div className=\"mb-4\">\n                <h3 className=\"font-semibold text-sm mb-3 border-b pb-1\">RINCIAN PERBAIKAN</h3>\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"bg-red-50 p-3 rounded\">\n                    <span className=\"text-red-700 font-medium block mb-1\">Keluhan/Masalah:</span>\n                    <p className=\"text-gray-800\">{serviceTicket.problem}</p>\n                  </div>\n                  {serviceTicket.diagnosis && (\n                    <div className=\"bg-blue-50 p-3 rounded\">\n                      <span className=\"text-blue-700 font-medium block mb-1\">Diagnosa:</span>\n                      <p className=\"text-gray-800\">{serviceTicket.diagnosis}</p>\n                    </div>\n                  )}\n                  {serviceTicket.solution && (\n                    <div className=\"bg-green-50 p-3 rounded\">\n                      <span className=\"text-green-700 font-medium block mb-1\">Solusi & Tindakan:</span>\n                      <p className=\"text-gray-800\">{serviceTicket.solution}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Parts Used */}\n              {serviceTicket.parts && serviceTicket.parts.length > 0 && (\n                <div className=\"mb-4\">\n                  <h3 className=\"font-semibold text-sm mb-3 border-b pb-1\">SPAREPART YANG DIGUNAKAN</h3>\n                  <div className=\"bg-yellow-50 p-4 rounded\">\n                    <table className=\"w-full text-sm\">\n                      <thead>\n                        <tr className=\"border-b border-yellow-200\">\n                          <th className=\"text-left py-1\">Item</th>\n                          <th className=\"text-center py-1\">Qty</th>\n                          <th className=\"text-right py-1\">Harga</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {serviceTicket.parts.map((part, index) => (\n                          <tr key={index} className=\"border-b border-yellow-100\">\n                            <td className=\"py-2\">{part.productName}</td>\n                            <td className=\"text-center py-2\">{part.quantity}</td>\n                            <td className=\"text-right py-2 font-medium\">{formatCurrency(part.totalPrice)}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {/* Cost Breakdown */}\n              <div className=\"bg-gray-100 p-4 rounded mb-4\">\n                <h3 className=\"font-semibold text-sm mb-3 border-b border-gray-300 pb-1\">RINCIAN BIAYA</h3>\n                <div className=\"space-y-2 text-sm\">\n                  {serviceTicket.laborCost && Number(serviceTicket.laborCost) > 0 && (\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"text-gray-700\">Biaya Jasa Service:</span>\n                      <span className=\"font-medium\">{formatCurrency(serviceTicket.laborCost)}</span>\n                    </div>\n                  )}\n                  {serviceTicket.partsCost && Number(serviceTicket.partsCost) > 0 && (\n                    <div className=\"flex justify-between py-1\">\n                      <span className=\"text-gray-700\">Biaya Sparepart:</span>\n                      <span className=\"font-medium\">{formatCurrency(serviceTicket.partsCost)}</span>\n                    </div>\n                  )}\n                  <div className=\"border-t-2 border-gray-400 pt-2 mt-3\">\n                    <div className=\"flex justify-between py-2 bg-green-100 px-3 rounded font-bold text-base\">\n                      <span>TOTAL PEMBAYARAN:</span>\n                      <span className=\"text-green-700\">{formatCurrency(getTotalCost())}</span>\n                    </div>\n                    <p className=\"text-center text-xs text-gray-600 mt-2\">** LUNAS **</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Status & Dates */}\n              <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n                <div>\n                  <h4 className=\"font-medium mb-2 text-gray-700\">Timeline Service:</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Tanggal Masuk:</span>\n                      <span>{format(new Date(serviceTicket.createdAt), 'dd/MM/yyyy', { locale: id })}</span>\n                    </div>\n                    {serviceTicket.completedAt && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Tanggal Selesai:</span>\n                        <span>{format(new Date(serviceTicket.completedAt), 'dd/MM/yyyy', { locale: id })}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2 text-gray-700\">Informasi Lainnya:</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Status:</span>\n                      <span className=\"font-semibold text-green-600\">\n                        {serviceTicket.status === 'completed' ? 'SELESAI' : \n                         serviceTicket.status === 'delivered' ? 'DIAMBIL' : 'SELESAI'}\n                      </span>\n                    </div>\n                    {technician && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Teknisi:</span>\n                        <span>{technician.name}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* QR Code */}\n              {qrCodeDataURL && (\n                <div className=\"text-center py-4 bg-white border border-gray-200 rounded mb-4\">\n                  <p className=\"text-sm font-medium mb-2 text-gray-700\">QR Code - Tracking Service</p>\n                  <img \n                    src={qrCodeDataURL} \n                    alt=\"QR Code\" \n                    className=\"mx-auto border border-gray-100 p-2 rounded\"\n                    style={{ \n                      width: paperSize === 'a4' ? '60mm' : \n                             paperSize === '58' ? '30mm' : '40mm', \n                      height: 'auto' \n                    }}\n                  />\n                  <p className=\"text-xs mt-2 text-gray-600\">Scan untuk cek status service online</p>\n                </div>\n              )}\n\n              {/* Footer */}\n              <div className=\"bg-blue-50 p-4 rounded text-center\">\n                <div className=\"space-y-2\">\n                  <p className=\"font-bold text-lg text-blue-800\">TERIMA KASIH</p>\n                  <p className=\"text-sm text-gray-700\">Atas kepercayaan Anda menggunakan layanan service kami</p>\n                  <div className=\"bg-yellow-100 p-2 rounded mt-3\">\n                    <p className=\"text-sm font-medium text-yellow-800\">⚠️ GARANSI SERVICE 30 HARI</p>\n                    <p className=\"text-xs text-yellow-700\">Berlaku dari tanggal pengambilan barang</p>\n                  </div>\n                  <div className=\"border-t border-blue-200 pt-2 mt-3\">\n                    <p className=\"text-xs text-gray-500\">Nota ini adalah bukti pembayaran yang sah</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":22984},"laptoppos-deployment-20250903-113337/client/src/components/ServiceReceipt.tsx":{"content":"import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { format } from \"date-fns\";\nimport { id as idLocale } from \"date-fns/locale\";\nimport { Printer, Download, FileText } from \"lucide-react\";\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\ninterface ServiceReceiptProps {\n  serviceData: {\n    id: string;\n    serviceNumber: string;\n    device: string;\n    problem: string;\n    diagnosis?: string;\n    status: string;\n    totalCost: string;\n    estimatedCompletion?: string;\n    completedAt?: string;\n    createdAt: string;\n    customer?: {\n      name: string;\n      phone?: string;\n      email?: string;\n    };\n    parts?: Array<{\n      product: {\n        name: string;\n      };\n      quantity: number;\n      unitPrice: string;\n      totalPrice: string;\n    }>;\n  };\n  storeConfig?: {\n    name: string;\n    address?: string;\n    phone?: string;\n    email?: string;\n  };\n}\n\nconst statusConfig = {\n  pending: 'Menunggu',\n  'in-progress': 'Dikerjakan',\n  'waiting-parts': 'Menunggu Sparepart',\n  'waiting-payment': 'Menunggu Pembayaran',\n  completed: 'Selesai',\n  cancelled: 'Dibatalkan',\n};\n\nconst paperSizes = {\n  '58': { width: 58, name: '58mm (Mini)' },\n  '80': { width: 80, name: '80mm (Standard)' },\n  '100': { width: 100, name: '100mm (Large)' }\n};\n\nexport default function ServiceReceipt({ serviceData, storeConfig }: ServiceReceiptProps) {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [paperSize, setPaperSize] = useState<'58' | '80' | '100'>('80');\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      const element = document.getElementById('service-receipt-content');\n      if (!element) return;\n\n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n      });\n\n      const imgData = canvas.toDataURL('image/png');\n      const thermalWidth = paperSizes[paperSize].width;\n      const thermalHeight = (canvas.height / canvas.width) * thermalWidth;\n      \n      const pdf = new jsPDF('p', 'mm', [thermalWidth, thermalHeight]);\n      pdf.addImage(imgData, 'PNG', 0, 0, thermalWidth, thermalHeight);\n      pdf.save(`Nota-Service-${serviceData.serviceNumber}-${thermalWidth}mm.pdf`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handlePrint = () => {\n    try {\n      // Ukuran kertas sesuai thermal yang dipilih\n      const thermalWidth = paperSizes[paperSize].width;\n      const fontSize = paperSize === '58' ? '7px' : paperSize === '80' ? '8px' : '10px';\n      \n      const printStyle = `\n        <style id=\"thermal-print-style\">\n          @media print {\n            * { \n              visibility: hidden; \n              margin: 0 !important; \n              padding: 0 !important;\n              box-sizing: border-box;\n            }\n            #service-receipt-content, \n            #service-receipt-content * { \n              visibility: visible; \n            }\n            #service-receipt-content {\n              position: absolute;\n              left: 0;\n              top: 0;\n              width: ${thermalWidth}mm;\n              max-width: ${thermalWidth}mm;\n              font-family: 'Courier New', monospace;\n              font-size: ${fontSize};\n              line-height: 1.0;\n              color: #000;\n              background: #fff;\n              page-break-inside: avoid;\n              page-break-after: avoid;\n              page-break-before: avoid;\n              height: auto;\n              max-height: 250mm;\n            }\n            .no-print { \n              display: none !important; \n            }\n            @page {\n              size: ${thermalWidth}mm 300mm;\n              margin: 1mm;\n            }\n            .text-center { text-align: center; }\n            .font-bold { font-weight: bold; }\n            .flex { display: flex; }\n            .flex-1 { flex: 1; }\n            .justify-between { justify-content: space-between; }\n            .items-center { align-items: center; }\n            .border-t { \n              border-top: 1px dashed #333; \n              margin: 1px 0 !important; \n            }\n            .border-solid { border-style: solid; }\n            .border-gray-800 { border-color: #333; }\n            .text-gray-600 { color: #666; }\n            .space-y-1 > * + * { margin-top: 1px !important; }\n            .py-2 { padding: 1px 0 !important; }\n            .my-2 { margin: 1px 0 !important; }\n            .mb-2 { margin-bottom: 1px !important; }\n            .mt-6 { margin-top: 2px !important; }\n            h3 { font-size: ${fontSize}; margin: 1px 0 !important; }\n            div { margin: 0 !important; padding: 0 !important; }\n            p { margin: 0 !important; padding: 0 !important; }\n          }\n          @media screen {\n            #thermal-print-style { display: none; }\n          }\n        </style>\n      `;\n      \n      // Hapus style print lama jika ada\n      const oldStyle = document.getElementById('thermal-print-style');\n      if (oldStyle) oldStyle.remove();\n      \n      // Tambahkan CSS print baru\n      document.head.insertAdjacentHTML('beforeend', printStyle);\n      \n      // Print\n      window.print();\n      \n      // Restore setelah delay\n      setTimeout(() => {\n        const printStyleElement = document.getElementById('thermal-print-style');\n        if (printStyleElement) {\n          printStyleElement.remove();\n        }\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Terjadi kesalahan saat mencetak. Silakan coba lagi.');\n    }\n  };\n\n  const getReceiptWidth = () => {\n    switch (paperSize) {\n      case '58': return 'max-w-[58mm]';\n      case '80': return 'max-w-[80mm]';\n      case '100': return 'max-w-[100mm]';\n      default: return 'max-w-[80mm]';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (paperSize) {\n      case '58': return 'text-xs';\n      case '80': return 'text-sm';\n      case '100': return 'text-base';\n      default: return 'text-sm';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Paper Size Selector */}\n      <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg no-print\">\n        <Label htmlFor=\"paper-size\" className=\"font-medium\">Ukuran Kertas:</Label>\n        <Select value={paperSize} onValueChange={(value: '58' | '80' | '100') => setPaperSize(value)}>\n          <SelectTrigger className=\"w-48\" id=\"paper-size\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"58\">{paperSizes['58'].name}</SelectItem>\n            <SelectItem value=\"80\">{paperSizes['80'].name}</SelectItem>\n            <SelectItem value=\"100\">{paperSizes['100'].name}</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex gap-2 mb-4 no-print\">\n        <Button onClick={handlePrint} variant=\"outline\" data-testid=\"button-print\">\n          <Printer className=\"h-4 w-4 mr-2\" />\n          Print\n        </Button>\n        <Button \n          onClick={generatePDF} \n          variant=\"outline\"\n          disabled={isGenerating}\n          data-testid=\"button-download-pdf\"\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          {isGenerating ? 'Generating...' : 'Download PDF'}\n        </Button>\n      </div>\n\n      {/* Receipt Preview */}\n      <div className=\"flex justify-center\">\n        <Card className={`${getReceiptWidth()} mx-auto`}>\n          <CardContent className=\"p-4\">\n            <div id=\"service-receipt-content\" className={`space-y-2 ${getTextSize()}`} style={{ fontFamily: 'Courier New, monospace' }}>\n              {/* Header */}\n              <div className=\"text-center space-y-1\">\n                <h2 className={`${paperSize === '58' ? 'text-sm' : paperSize === '80' ? 'text-base' : 'text-lg'} font-bold`} data-testid=\"text-store-name\">\n                  {storeConfig?.name || 'LaptopPOS Service Center'}\n                </h2>\n                {storeConfig?.address && (\n                  <p className={`${getTextSize()} text-gray-600`} data-testid=\"text-store-address\">{storeConfig.address}</p>\n                )}\n                <div className={`flex flex-col ${getTextSize()} text-gray-600`}>\n                  {storeConfig?.phone && <span data-testid=\"text-store-phone\">Tel: {storeConfig.phone}</span>}\n                  {storeConfig?.email && <span data-testid=\"text-store-email\">{storeConfig.email}</span>}\n                </div>\n              </div>\n\n              <div className=\"text-center py-2\">\n                <h3 className={`${paperSize === '58' ? 'text-sm' : paperSize === '80' ? 'text-base' : 'text-lg'} font-bold`}>NOTA SERVICE</h3>\n                <p className={`${getTextSize()} font-semibold`} data-testid=\"text-service-number\">#{serviceData.serviceNumber}</p>\n              </div>\n\n              <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n              {/* Service Info - Thermal Layout */}\n              <div className={`space-y-1 ${getTextSize()}`}>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-bold\">Tanggal:</span>\n                  <span data-testid=\"text-service-date\">{format(new Date(serviceData.createdAt), 'dd/MM/yy HH:mm', { locale: idLocale })}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"font-bold\">Customer:</span>\n                  <span data-testid=\"text-customer-name\">{serviceData.customer?.name || '-'}</span>\n                </div>\n                {serviceData.customer?.phone && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-bold\">Telepon:</span>\n                    <span data-testid=\"text-customer-phone\">{serviceData.customer.phone}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"font-bold\">Status:</span>\n                  <span data-testid=\"text-service-status\">{statusConfig[serviceData.status as keyof typeof statusConfig]}</span>\n                </div>\n              </div>\n\n              <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n              {/* Device & Problem */}\n              <div className={`space-y-1 ${getTextSize()}`}>\n                <div>\n                  <span className=\"font-bold\">Perangkat:</span> <span data-testid=\"text-device\">{serviceData.device}</span>\n                </div>\n                <div>\n                  <span className=\"font-bold\">Keluhan:</span> <span data-testid=\"text-problem\">{serviceData.problem}</span>\n                </div>\n                {serviceData.diagnosis && (\n                  <div>\n                    <span className=\"font-bold\">Diagnosis:</span> <span data-testid=\"text-diagnosis\">{serviceData.diagnosis}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Parts Used */}\n              {serviceData.parts && serviceData.parts.length > 0 && (\n                <>\n                  <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n                  <div>\n                    <div className={`font-bold mb-2 ${getTextSize()}`}>Sparepart:</div>\n                    {serviceData.parts.map((part, index) => (\n                      <div key={index} className={`flex justify-between ${getTextSize()}`}>\n                        <div className=\"flex-1\">\n                          <div data-testid={`text-part-name-${index}`}>{part.product.name}</div>\n                          <div className=\"text-gray-600\">{part.quantity} x {formatCurrency(part.unitPrice)}</div>\n                        </div>\n                        <div data-testid={`text-part-total-${index}`}>{formatCurrency(part.totalPrice)}</div>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n\n              <div className=\"border-t border-solid border-gray-800 my-2\"></div>\n\n              {/* Total */}\n              <div className={`flex justify-between items-center font-bold ${getTextSize()}`}>\n                <span>Total Service:</span>\n                <span data-testid=\"text-total-cost\">{formatCurrency(serviceData.totalCost)}</span>\n              </div>\n\n              <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n              {/* Footer */}\n              <div className={`text-center ${getTextSize()} text-gray-600 space-y-1 mt-6`}>\n                <div>Terima kasih atas kepercayaan Anda!</div>\n                <div>Garansi service 30 hari</div>\n                <div data-testid=\"text-print-date\">Cetak: {format(new Date(), 'dd/MM/yy HH:mm', { locale: idLocale })}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13404},"laptoppos-deployment-20250903-113337/client/src/components/ServiceReceiptNew.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Printer, Download } from 'lucide-react';\nimport QRCode from 'qrcode';\nimport { format } from 'date-fns';\nimport { id } from 'date-fns/locale';\n\ninterface ServiceReceiptProps {\n  serviceTicket: {\n    id: string;\n    ticketNumber: string;\n    customerId: string;\n    deviceType: string;\n    deviceBrand?: string;\n    deviceModel?: string;\n    serialNumber?: string;\n    completeness?: string;\n    problem: string;\n    diagnosis?: string;\n    solution?: string;\n    estimatedCost?: string;\n    status: string;\n    technicianId?: string;\n    createdAt: string;\n  };\n  customer: {\n    id: string;\n    name: string;\n    phone?: string;\n    email?: string;\n    address?: string;\n  };\n  storeConfig: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n  };\n  technician?: {\n    id: string;\n    name: string;\n  } | null;\n}\n\nexport default function ServiceReceiptNew({ serviceTicket, customer, storeConfig, technician }: ServiceReceiptProps) {\n  const receiptRef = useRef<HTMLDivElement>(null);\n  const [qrCodeDataURL, setQrCodeDataURL] = useState<string>('');\n  const [paperFormat, setPaperFormat] = useState<'a4' | 'thermal-58' | 'thermal-80'>('a4');\n\n  useEffect(() => {\n    // Generate QR Code untuk tracking\n    const generateQR = async () => {\n      try {\n        const trackingURL = `${window.location.origin}/service-status?ticket=${serviceTicket.ticketNumber}`;\n        const qrDataURL = await QRCode.toDataURL(trackingURL, {\n          width: 120,\n          margin: 1,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF',\n          },\n        });\n        setQrCodeDataURL(qrDataURL);\n      } catch (err) {\n        console.error('Error generating QR code:', err);\n      }\n    };\n    generateQR();\n  }, [serviceTicket.ticketNumber]);\n\n  const getFormatStyles = () => {\n    switch (paperFormat) {\n      case 'thermal-58':\n        return {\n          width: '58mm',\n          fontSize: '10px',\n          padding: '2mm',\n          lineHeight: '1.2'\n        };\n      case 'thermal-80':\n        return {\n          width: '80mm', \n          fontSize: '11px',\n          padding: '3mm',\n          lineHeight: '1.3'\n        };\n      default: // a4\n        return {\n          width: '210mm',\n          fontSize: '12px', \n          padding: '15mm',\n          lineHeight: '1.4'\n        };\n    }\n  };\n\n  const isThermal = paperFormat.startsWith('thermal');\n\n  const handlePrint = () => {\n    if (receiptRef.current) {\n      const printContent = receiptRef.current.innerHTML;\n      const formatStyles = getFormatStyles();\n      const printWindow = window.open('', '_blank');\n      if (printWindow) {\n        printWindow.document.write(`\n          <html>\n            <head>\n              <title>Tanda Terima Service - ${serviceTicket.ticketNumber}</title>\n              <style>\n                @page {\n                  size: ${paperFormat === 'a4' ? 'A4' : `${formatStyles.width} auto`};\n                  margin: ${isThermal ? '0' : '8mm'};\n                  page-break-inside: avoid;\n                }\n                body { \n                  font-family: ${isThermal ? 'monospace' : 'Arial, sans-serif'}; \n                  margin: 0; \n                  padding: ${formatStyles.padding}; \n                  font-size: ${formatStyles.fontSize};\n                  line-height: ${formatStyles.lineHeight};\n                  ${isThermal ? 'width: ' + formatStyles.width + '; box-sizing: border-box;' : ''}\n                  page-break-inside: avoid;\n                  overflow: hidden;\n                }\n                .receipt { \n                  ${isThermal ? 'width: 100%;' : 'max-width: 580px; margin: 0 auto;'}\n                  page-break-inside: avoid;\n                  overflow: hidden;\n                }\n                .header { text-align: center; margin-bottom: ${isThermal ? '8px' : '20px'}; }\n                .header h1 { margin: 0; font-size: ${isThermal ? '14px' : '24px'}; font-weight: bold; }\n                .header h2 { margin: ${isThermal ? '2px 0' : '5px 0'}; font-size: ${isThermal ? '12px' : '18px'}; }\n                .header p { margin: ${isThermal ? '1px 0' : '2px 0'}; font-size: ${isThermal ? '9px' : '12px'}; }\n                .info-grid { \n                  ${isThermal \n                    ? 'display: block; margin: 8px 0;' \n                    : 'display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;'\n                  }\n                }\n                .field { margin-bottom: ${isThermal ? '4px' : '10px'}; }\n                .label { font-weight: bold; font-size: ${isThermal ? '9px' : '12px'}; }\n                .value { margin-top: 2px; font-size: ${isThermal ? '9px' : '12px'}; }\n                .qr-section { text-align: center; margin: ${isThermal ? '8px 0' : '20px 0'}; }\n                .qr-section img { width: ${isThermal ? '60px' : '120px'}; height: ${isThermal ? '60px' : '120px'}; }\n                .conditions { margin-top: ${isThermal ? '8px' : '20px'}; font-size: ${isThermal ? '8px' : '12px'}; }\n                .signature-area { \n                  margin-top: ${isThermal ? '15px' : '30px'}; \n                  ${isThermal ? 'display: block;' : 'display: flex; justify-content: space-between;'}\n                }\n                .signature-box { \n                  text-align: center; \n                  ${isThermal ? 'margin-bottom: 15px;' : 'width: 150px;'}\n                }\n                .signature-box .label { margin-bottom: ${isThermal ? '20px' : '12px'}; }\n                h3 { font-size: ${isThermal ? '11px' : '18px'}; margin: ${isThermal ? '8px 0 4px' : '20px 0 8px'}; }\n                .border-b { border-bottom: ${isThermal ? '1px dashed #000' : '2px solid #000'}; }\n                .border-t { border-top: 1px solid #000; }\n                @media print {\n                  body { \n                    print-color-adjust: exact; \n                    height: auto !important;\n                    overflow: visible !important;\n                  }\n                  .no-print { display: none; }\n                  .receipt {\n                    page-break-inside: avoid;\n                    height: auto !important;\n                  }\n                  * {\n                    page-break-inside: avoid;\n                  }\n                }\n              </style>\n            </head>\n            <body>\n              ${printContent}\n            </body>\n          </html>\n        `);\n        printWindow.document.close();\n        printWindow.print();\n      }\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), 'dd MMMM yyyy', { locale: id });\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto\">\n      <div className=\"mb-4 flex gap-4 items-end no-print\">\n        <div className=\"flex flex-col gap-2\">\n          <Label htmlFor=\"paper-format\">Format Cetak</Label>\n          <Select value={paperFormat} onValueChange={(value: 'a4' | 'thermal-58' | 'thermal-80') => setPaperFormat(value)}>\n            <SelectTrigger className=\"w-48\" id=\"paper-format\">\n              <SelectValue placeholder=\"Pilih format\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"a4\">A4 - Printer Standar</SelectItem>\n              <SelectItem value=\"thermal-80\">Thermal 80mm</SelectItem>\n              <SelectItem value=\"thermal-58\">Thermal 58mm</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <Button onClick={handlePrint} className=\"flex items-center gap-2\">\n          <Printer className=\"w-4 h-4\" />\n          Print Receipt\n        </Button>\n      </div>\n\n      <Card className=\"p-8\" ref={receiptRef}>\n        <div className=\"receipt\">\n          {/* Header */}\n          <div className={`header text-center ${isThermal ? 'border-b border-dashed border-gray-800 pb-2 mb-4' : 'border-b-2 border-gray-800 pb-4 mb-6'}`}>\n            <h1 className={`${isThermal ? 'text-sm' : 'text-2xl'} font-bold uppercase`}>{storeConfig.name}</h1>\n            <h2 className={`${isThermal ? 'text-xs' : 'text-lg'} font-semibold mt-2`}>TANDA TERIMA SERVIS</h2>\n            <div className={`${isThermal ? 'text-xs' : 'text-sm'} mt-2`}>\n              <p>{storeConfig.address}</p>\n              <p>{isThermal ? `${storeConfig.phone}` : `Telp: ${storeConfig.phone} | Email: ${storeConfig.email}`}</p>\n              {!isThermal && <p>Email: {storeConfig.email}</p>}\n            </div>\n          </div>\n\n          {/* Service Number and Date */}\n          <div className={`${isThermal ? 'mb-4' : 'flex justify-between items-center mb-6'}`}>\n            <div className={isThermal ? 'mb-2' : ''}>\n              <div className=\"field\">\n                <span className=\"label\">No. Service:</span>\n                <span className=\"value ml-2 font-bold\">{serviceTicket.ticketNumber}</span>\n              </div>\n            </div>\n            <div className={isThermal ? '' : 'text-right'}>\n              <div className=\"field\">\n                <span className=\"label\">Tanggal:</span>\n                <span className=\"value ml-2\">{formatDate(serviceTicket.createdAt)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Customer and Device Info */}\n          <div className={`info-grid ${isThermal ? 'mb-4' : 'grid grid-cols-2 gap-8 mb-6'}`}>\n            {/* Customer Info */}\n            <div className={isThermal ? 'mb-4' : ''}>\n              <h3 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-lg mb-3'}`}>Data Pelanggan</h3>\n              <div className=\"field\">\n                <div className=\"label\">Nama:</div>\n                <div className={`value ${isThermal ? 'border-b border-dotted border-gray-400 pb-1' : 'border-b border-dotted border-gray-400 pb-1'}`}>{customer.name}</div>\n              </div>\n              {!isThermal && (\n                <>\n                  <div className=\"field\">\n                    <div className=\"label\">Alamat:</div>\n                    <div className=\"value border-b border-dotted border-gray-400 pb-1\">{customer.address || '-'}</div>\n                  </div>\n                </>\n              )}\n              <div className=\"field\">\n                <div className=\"label\">No. Telepon:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{customer.phone || '-'}</div>\n              </div>\n            </div>\n\n            {/* Device Info */}\n            <div>\n              <h3 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-lg mb-3'}`}>Data Perangkat</h3>\n              <div className=\"field\">\n                <div className=\"label\">Jenis:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.deviceType}</div>\n              </div>\n              <div className=\"field\">\n                <div className=\"label\">Merk:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.deviceBrand || '-'}</div>\n              </div>\n              <div className=\"field\">\n                <div className=\"label\">Model:</div>\n                <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.deviceModel || '-'}</div>\n              </div>\n              {!isThermal && (\n                <div className=\"field\">\n                  <div className=\"label\">No. Seri:</div>\n                  <div className=\"value border-b border-dotted border-gray-400 pb-1\">{serviceTicket.serialNumber || '-'}</div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Problem Description */}\n          <div className={isThermal ? 'mb-4' : 'mb-6'}>\n            <h3 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-lg mb-3'}`}>Keluhan/Masalah</h3>\n            <div className={`border border-gray-300 p-2 ${isThermal ? 'min-h-[40px] text-xs' : 'min-h-[80px] p-3'} bg-gray-50`}>\n              {serviceTicket.problem}\n            </div>\n          </div>\n\n          {/* Completeness */}\n          {serviceTicket.completeness && (\n            <div className={isThermal ? 'mb-4' : 'mb-6'}>\n              <h3 className={`font-bold ${isThermal ? 'text-xs mb-2' : 'text-lg mb-3'}`}>Kelengkapan</h3>\n              <div className={`border border-gray-300 p-2 ${isThermal ? 'min-h-[30px] text-xs' : 'min-h-[60px] p-3'} bg-gray-50`}>\n                {serviceTicket.completeness}\n              </div>\n            </div>\n          )}\n\n          {/* QR Code and Estimated Cost */}\n          <div className={`${isThermal ? 'text-center mb-4' : 'flex justify-between items-center mb-6'}`}>\n            <div className=\"qr-section\">\n              {qrCodeDataURL && (\n                <div>\n                  <img src={qrCodeDataURL} alt=\"QR Code\" className={`mx-auto mb-2 ${isThermal ? 'w-16 h-16' : ''}`} />\n                  <p className={`${isThermal ? 'text-xs' : 'text-xs'}`}>Scan untuk cek status</p>\n                </div>\n              )}\n            </div>\n            {!isThermal && (\n              <div className=\"text-right\">\n                {serviceTicket.estimatedCost && (\n                  <div className=\"field\">\n                    <span className=\"label text-lg\">Estimasi Biaya:</span>\n                    <div className=\"value text-xl font-bold\">{formatCurrency(serviceTicket.estimatedCost)}</div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Estimated Cost for Thermal */}\n          {isThermal && serviceTicket.estimatedCost && (\n            <div className=\"text-center mb-4\">\n              <div className=\"field\">\n                <span className=\"label text-xs\">Estimasi Biaya:</span>\n                <div className=\"value text-sm font-bold\">{formatCurrency(serviceTicket.estimatedCost)}</div>\n              </div>\n            </div>\n          )}\n\n          {/* Terms and Conditions */}\n          <div className={`conditions ${isThermal ? 'text-xs leading-tight border-t pt-2 mb-4' : 'text-xs leading-relaxed border-t pt-4 mb-6'}`}>\n            <h4 className=\"font-bold mb-2\">SYARAT DAN KETENTUAN:</h4>\n            <ul className={isThermal ? 'space-y-0.5' : 'space-y-1'}>\n              <li>• Barang diperbaiki tidak diambil 30 hari akan dikenakan biaya</li>\n              {!isThermal && <li>• Kerusakan akibat force majeure (bencana alam, dll) bukan tanggung jawab kami</li>}\n              <li>• Harap bawa tanda terima saat mengambil barang</li>\n              <li>• Garansi service 30 hari untuk kerusakan yang sama</li>\n              <li>• Pembayaran saat pengambilan barang</li>\n            </ul>\n          </div>\n\n          {/* Signature Area */}\n          <div className={`signature-area ${isThermal ? 'text-center' : 'flex justify-between'}`}>\n            <div className={`signature-box ${isThermal ? 'mb-6' : ''}`}>\n              <div className={`label ${isThermal ? 'mb-8 text-xs' : 'mb-12'}`}>Penerima</div>\n              <div className=\"border-t border-black\">\n                <div className={`mt-1 text-center ${isThermal ? 'text-xs' : ''}`}>({customer.name})</div>\n              </div>\n            </div>\n            <div className=\"signature-box\">\n              <div className={`label ${isThermal ? 'mb-8 text-xs' : 'mb-12'}`}>Teknisi</div>\n              <div className=\"border-t border-black\">\n                <div className={`mt-1 text-center ${isThermal ? 'text-xs' : ''}`}>({technician?.name || 'Teknisi'})</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":16017},"laptoppos-deployment-20250903-113337/client/src/components/ServiceStatusTracker.tsx":{"content":"import React from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { CheckCircle, Clock, AlertCircle, Package, Settings, TestTube, FileText, X } from 'lucide-react';\n\ninterface ServiceStep {\n  id: string;\n  label: string;\n  status: 'completed' | 'current' | 'pending' | 'waiting';\n  icon: React.ComponentType<any>;\n  color: string;\n  bgColor: string;\n}\n\ninterface ServiceStatusTrackerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  serviceNumber: string;\n  currentStatus: string;\n}\n\nconst serviceSteps: ServiceStep[] = [\n  {\n    id: 'received',\n    label: 'Belum Cek',\n    status: 'pending',\n    icon: Clock,\n    color: 'text-blue-700',\n    bgColor: 'bg-blue-100'\n  },\n  {\n    id: 'checking',\n    label: 'Sedang Cek',\n    status: 'pending',\n    icon: AlertCircle,\n    color: 'text-sky-700',\n    bgColor: 'bg-sky-100'\n  },\n  {\n    id: 'in-progress',\n    label: 'Sedang Dikerjakan',\n    status: 'pending',\n    icon: Settings,\n    color: 'text-green-700',\n    bgColor: 'bg-green-100'\n  },\n  {\n    id: 'waiting-technician',\n    label: 'Ditunggu MITRA Teknik',\n    status: 'pending',\n    icon: AlertCircle,\n    color: 'text-gray-700',\n    bgColor: 'bg-gray-100'\n  },\n  {\n    id: 'testing',\n    label: 'Sedang Tes',\n    status: 'pending',\n    icon: TestTube,\n    color: 'text-gray-700',\n    bgColor: 'bg-gray-100'\n  },\n  {\n    id: 'waiting-confirmation',\n    label: 'Menunggu Konfirmasi',\n    status: 'pending',\n    icon: FileText,\n    color: 'text-red-700',\n    bgColor: 'bg-red-100'\n  },\n  {\n    id: 'waiting-parts',\n    label: 'Menunggu Sparepart',\n    status: 'pending',\n    icon: Package,\n    color: 'text-orange-700',\n    bgColor: 'bg-orange-100'\n  },\n  {\n    id: 'completed',\n    label: 'Selesai',\n    status: 'pending',\n    icon: CheckCircle,\n    color: 'text-emerald-700',\n    bgColor: 'bg-emerald-100'\n  }\n];\n\n// Map status dari database ke langkah-langkah service\nconst statusMapping: Record<string, number> = {\n  'pending': 0,           // Belum Cek\n  'checking': 1,          // Sedang Cek  \n  'in-progress': 2,       // Sedang Dikerjakan\n  'waiting-technician': 3, // Ditunggu MITRA Teknik\n  'testing': 4,           // Sedang Tes\n  'waiting-confirmation': 5, // Menunggu Konfirmasi\n  'waiting-parts': 6,     // Menunggu Sparepart\n  'completed': 7,         // Selesai\n  'delivered': 7,         // Selesai (sudah diambil)\n  'cancelled': -1         // Dibatalkan\n};\n\nexport default function ServiceStatusTracker({ \n  isOpen, \n  onClose, \n  serviceNumber, \n  currentStatus \n}: ServiceStatusTrackerProps) {\n  \n  const getCurrentStepIndex = () => {\n    return statusMapping[currentStatus] || 0;\n  };\n\n  const getStepStatus = (stepIndex: number): 'completed' | 'current' | 'pending' | 'waiting' => {\n    const currentIndex = getCurrentStepIndex();\n    \n    if (currentStatus === 'cancelled') {\n      return 'waiting';\n    }\n    \n    if (stepIndex < currentIndex) {\n      return 'completed';\n    } else if (stepIndex === currentIndex) {\n      return 'current';\n    } else {\n      return 'pending';\n    }\n  };\n\n  const getStepColors = (step: ServiceStep, actualStatus: string) => {\n    switch (actualStatus) {\n      case 'completed':\n        return {\n          color: 'text-green-700',\n          bgColor: 'bg-green-100',\n          borderColor: 'border-green-500'\n        };\n      case 'current':\n        return {\n          color: step.color,\n          bgColor: step.bgColor,\n          borderColor: 'border-blue-500 ring-2 ring-blue-200'\n        };\n      case 'waiting':\n        return {\n          color: 'text-gray-500',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-300'\n        };\n      default:\n        return {\n          color: 'text-gray-400',\n          bgColor: 'bg-gray-50',\n          borderColor: 'border-gray-200'\n        };\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>📋 Perbaikan Detail Status Proses Servis</span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onClose}\n              className=\"h-6 w-6 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"text-center text-sm text-gray-600\">\n            Silahkan pilih Detail Status untuk No. Servis <span className=\"font-bold text-blue-600\">{serviceNumber}</span>\n          </div>\n\n          {/* Status Steps Grid */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            {serviceSteps.map((step, index) => {\n              const stepStatus = getStepStatus(index);\n              const colors = getStepColors(step, stepStatus);\n              const Icon = step.icon;\n\n              return (\n                <div\n                  key={step.id}\n                  className={`\n                    relative p-3 rounded-lg border-2 transition-all duration-200 cursor-pointer hover:shadow-md\n                    ${colors.bgColor} ${colors.borderColor}\n                  `}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`\n                      flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center\n                      ${stepStatus === 'completed' ? 'bg-green-500 text-white' : \n                        stepStatus === 'current' ? 'bg-blue-500 text-white' : \n                        'bg-gray-300 text-gray-500'}\n                    `}>\n                      {stepStatus === 'completed' ? (\n                        <CheckCircle className=\"w-5 h-5\" />\n                      ) : (\n                        <Icon className=\"w-5 h-5\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className={`font-medium text-sm ${colors.color}`}>\n                        {step.label}\n                      </div>\n                      {stepStatus === 'current' && (\n                        <div className=\"text-xs text-blue-600 mt-1\">\n                          ← Status Saat Ini\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Status indicator */}\n                  {stepStatus === 'current' && (\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Information Box */}\n          <Card className=\"mt-6\">\n            <CardContent className=\"pt-4\">\n              <div className=\"text-sm text-gray-600\">\n                <strong>Informasi:</strong> Detail Status Proses Servis ini juga akan muncul saat Pelanggan \n                melakukan Cek Status (Tracking).\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              onClick={onClose}\n              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n            >\n              ← Batal\n            </Button>\n            <Button \n              onClick={onClose}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white\"\n            >\n              ✓ Perbaikan Detail Status\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7844},"laptoppos-deployment-20250903-113337/client/src/components/WhatsAppSettings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { MessageCircle, QrCode, RefreshCw } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WhatsAppSettingsProps {\n  storeConfig: any;\n}\n\nexport function WhatsAppSettings({ storeConfig }: WhatsAppSettingsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [testPhone, setTestPhone] = useState(\"\");\n  \n  const whatsappEnabled = storeConfig?.whatsappEnabled || false;\n\n  // Query WhatsApp status\n  const { data: whatsappStatus, isLoading: statusLoading } = useQuery({\n    queryKey: ['/api/whatsapp/status'],\n    enabled: whatsappEnabled,\n    refetchInterval: false, // Disable automatic polling to prevent infinite loop\n    staleTime: 30000, // Cache for 30 seconds\n    refetchOnWindowFocus: false,\n  });\n\n  // Enable/disable WhatsApp mutation\n  const toggleWhatsAppMutation = useMutation({\n    mutationFn: async (enabled: boolean) => {\n      const response = await fetch(`/api/whatsapp/${enabled ? 'enable' : 'disable'}`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to toggle WhatsApp');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Only invalidate WhatsApp status, not store config to prevent loop\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Pengaturan WhatsApp berhasil diubah\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Gagal mengubah pengaturan WhatsApp\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Connect WhatsApp mutation\n  const connectWhatsAppMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/whatsapp/connect', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to connect WhatsApp');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Proses koneksi WhatsApp dimulai. Scan QR code untuk menghubungkan.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Gagal menghubungkan WhatsApp\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Disconnect WhatsApp mutation\n  const disconnectWhatsAppMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/whatsapp/disconnect', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to disconnect WhatsApp');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp/status'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"WhatsApp berhasil diputuskan\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Gagal memutuskan WhatsApp\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test message mutation\n  const testMessageMutation = useMutation({\n    mutationFn: async (phone: string) => {\n      const response = await fetch('/api/whatsapp/test-message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ phoneNumber: phone }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send test message');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Berhasil\",\n        description: \"Pesan test berhasil dikirim\",\n      });\n      setTestPhone(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Gagal mengirim pesan test\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestMessage = () => {\n    if (!testPhone.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Masukkan nomor telepon terlebih dahulu\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    testMessageMutation.mutate(testPhone);\n  };\n\n  const whatsappConnected = (whatsappStatus as any)?.connected || false;\n  const connectionState = (whatsappStatus as any)?.state || 'close';\n  const qrCode = (whatsappStatus as any)?.qrCode;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <MessageCircle className=\"w-5 h-5 mr-2\" />\n          Integrasi WhatsApp\n        </CardTitle>\n        <CardDescription>\n          Hubungkan WhatsApp untuk mengirim notifikasi otomatis ke pelanggan\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Enable/Disable WhatsApp */}\n        <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n          <div>\n            <h4 className=\"font-medium\">Status WhatsApp</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              {whatsappEnabled ? \"WhatsApp integration aktif\" : \"WhatsApp integration nonaktif\"}\n            </p>\n          </div>\n          <Button\n            variant={whatsappEnabled ? \"destructive\" : \"default\"}\n            onClick={() => toggleWhatsAppMutation.mutate(!whatsappEnabled)}\n            disabled={toggleWhatsAppMutation.isPending}\n            data-testid={whatsappEnabled ? \"button-disable-whatsapp\" : \"button-enable-whatsapp\"}\n          >\n            {toggleWhatsAppMutation.isPending ? \"Loading...\" : whatsappEnabled ? \"Nonaktifkan\" : \"Aktifkan\"}\n          </Button>\n        </div>\n\n        {/* Connection Status & Actions */}\n        <div className=\"p-4 border rounded-lg\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h4 className=\"font-medium\">Status Koneksi</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                {whatsappConnected ? (\n                  <span className=\"text-green-600\">✅ Terhubung</span>\n                ) : (\n                  <span className=\"text-red-600\">❌ Tidak terhubung</span>\n                )}\n              </p>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                State: {connectionState}\n                {statusLoading && <RefreshCw className=\"w-3 h-3 ml-1 inline animate-spin\" />}\n              </p>\n            </div>\n            \n            <div className=\"space-x-2\">\n              {!whatsappConnected ? (\n                <Button\n                  onClick={() => connectWhatsAppMutation.mutate()}\n                  disabled={connectWhatsAppMutation.isPending}\n                  data-testid=\"button-connect-whatsapp\"\n                >\n                  {connectWhatsAppMutation.isPending ? (\n                    <>\n                      <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Connecting...\n                    </>\n                  ) : (\n                    <>\n                      <QrCode className=\"w-4 h-4 mr-2\" />\n                      Connect\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => disconnectWhatsAppMutation.mutate()}\n                  disabled={disconnectWhatsAppMutation.isPending}\n                  data-testid=\"button-disconnect-whatsapp\"\n                >\n                  {disconnectWhatsAppMutation.isPending ? \"Disconnecting...\" : \"Disconnect\"}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* QR Code Display */}\n          {qrCode && !whatsappConnected && (\n            <div className=\"mt-4 p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\">\n              <h5 className=\"font-medium mb-2 flex items-center\">\n                <QrCode className=\"w-4 h-4 mr-2\" />\n                Scan QR Code\n              </h5>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Buka WhatsApp di ponsel → Settings → Linked Devices → Link a Device → Scan QR code di bawah\n              </p>\n              <div className=\"flex justify-center\">\n                <img \n                  src={qrCode} \n                  alt=\"WhatsApp QR Code\" \n                  className=\"w-64 h-64 border rounded-lg\"\n                  data-testid=\"img-qr-code\"\n                />\n              </div>\n              <p className=\"text-xs text-center text-muted-foreground mt-2\">\n                QR code akan diperbarui secara otomatis setiap beberapa detik\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Test Message - Only show when connected */}\n        {whatsappConnected && (\n          <div className=\"p-4 border rounded-lg\">\n            <h4 className=\"font-medium mb-4\">Test Pesan</h4>\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"testPhone\">Nomor Telepon (dengan kode negara)</Label>\n                <Input\n                  id=\"testPhone\"\n                  placeholder=\"contoh: 628123456789\"\n                  value={testPhone}\n                  onChange={(e) => setTestPhone(e.target.value)}\n                  data-testid=\"input-test-phone\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Format: 628xxxxxxxxx (tanpa tanda + atau spasi)\n                </p>\n              </div>\n              <Button\n                onClick={handleTestMessage}\n                disabled={testMessageMutation.isPending || !testPhone.trim()}\n                data-testid=\"button-send-test\"\n              >\n                {testMessageMutation.isPending ? \"Mengirim...\" : \"Kirim Test Pesan\"}\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Kirim pesan test untuk memastikan koneksi WhatsApp berfungsi dengan baik\n            </p>\n          </div>\n        )}\n\n        {/* Feature Information */}\n        <div className=\"space-y-4\">\n          <div className=\"border-t pt-4\">\n            <h4 className=\"font-medium mb-3\">Fitur Notifikasi Otomatis</h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                <span>Service baru diterima</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                <span>Status service berubah (sedang dikerjakan, selesai, dll)</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                <span>Service siap diambil</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11533},"laptoppos-deployment-20250903-113337/client/src/components/customers/customer-create-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst customerFormSchema = insertCustomerSchema.extend({\n  email: z.string().email(\"Email tidak valid\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\ntype CustomerFormData = z.infer<typeof customerFormSchema>;\n\ninterface CustomerCreateModalProps {\n  open: boolean;\n  onClose: () => void;\n  onCustomerCreated?: (customer: any) => void;\n}\n\nexport default function CustomerCreateModal({ \n  open, \n  onClose, \n  onCustomerCreated \n}: CustomerCreateModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CustomerFormData>({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: CustomerFormData) => {\n      return await apiRequest('POST', '/api/customers', data);\n    },\n    onSuccess: (newCustomer) => {\n      toast({\n        title: \"Success\",\n        description: \"Customer berhasil ditambahkan\",\n      });\n      \n      // Invalidate customers query to refresh the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      \n      // Reset form\n      form.reset();\n      \n      // Call the callback with new customer data\n      if (onCustomerCreated) {\n        onCustomerCreated(newCustomer);\n      }\n      \n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Gagal menambahkan customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CustomerFormData) => {\n    // Clean up empty strings to null for optional fields\n    const cleanData = {\n      name: data.name,\n      email: data.email || null,\n      phone: data.phone || null,\n      address: data.address || null,\n    };\n    \n    createCustomerMutation.mutate(cleanData);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Tambah Customer Baru</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Nama *</Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Masukkan nama customer\"\n              {...form.register(\"name\")}\n              data-testid=\"input-customer-name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.name.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\">Nomor Telepon</Label>\n            <Input\n              id=\"phone\"\n              placeholder=\"Contoh: 08123456789\"\n              {...form.register(\"phone\")}\n              data-testid=\"input-customer-phone\"\n            />\n            {form.formState.errors.phone && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.phone.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"contoh@email.com\"\n              {...form.register(\"email\")}\n              data-testid=\"input-customer-email\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.email.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Alamat</Label>\n            <Textarea\n              id=\"address\"\n              placeholder=\"Masukkan alamat lengkap\"\n              rows={3}\n              {...form.register(\"address\")}\n              data-testid=\"input-customer-address\"\n            />\n            {form.formState.errors.address && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.address.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={createCustomerMutation.isPending}\n              data-testid=\"button-cancel\"\n            >\n              Batal\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createCustomerMutation.isPending}\n              data-testid=\"button-save-customer\"\n            >\n              {createCustomerMutation.isPending ? \"Menyimpan...\" : \"Simpan\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5627},"laptoppos-deployment-20250903-113337/client/src/components/dashboard/inventory-alerts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, Info } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function InventoryAlerts() {\n  const { data: lowStockProducts, isLoading } = useQuery({\n    queryKey: [\"/api/products/low-stock\"],\n    retry: false,\n  });\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle>Peringatan Inventori</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : !lowStockProducts || lowStockProducts.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            Semua produk stoknya mencukupi.\n          </p>\n        ) : (\n          <div className=\"space-y-4\">\n            {lowStockProducts.map((product: any) => {\n              const isVeryLow = product.stock <= 1;\n              \n              return (\n                <div \n                  key={product.id}\n                  className={`flex items-center justify-between p-3 rounded-md border ${\n                    isVeryLow \n                      ? 'border-destructive/20 bg-destructive/5' \n                      : 'border-secondary/20 bg-secondary/5'\n                  }`}\n                  data-testid={`inventory-alert-${product.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                      isVeryLow ? 'bg-destructive/10' : 'bg-secondary/10'\n                    }`}>\n                      {isVeryLow ? (\n                        <AlertTriangle className=\"w-5 h-5 text-destructive\" />\n                      ) : (\n                        <Info className=\"w-5 h-5 text-secondary\" />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {product.name}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Stok: <span data-testid={`stock-count-${product.id}`}>{product.stock} unit</span>\n                        {product.minStock && (\n                          <span className=\"ml-2\">Minimal: {product.minStock}</span>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                  <Button \n                    size=\"sm\"\n                    data-testid={`button-reorder-${product.id}`}\n                  >\n                    Pesan Ulang\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3030},"laptoppos-deployment-20250903-113337/client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Plus, \n  Wrench, \n  Package, \n  UserPlus, \n  FileDown \n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function QuickActions() {\n  const [, setLocation] = useLocation();\n\n  const actions = [\n    {\n      title: \"Penjualan Baru\",\n      icon: Plus,\n      onClick: () => setLocation(\"/pos\"),\n      variant: \"default\" as const,\n      testId: \"button-quick-new-sale\"\n    },\n    {\n      title: \"Servis Baru\",\n      icon: Wrench,\n      onClick: () => setLocation(\"/service\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-new-service\"\n    },\n    {\n      title: \"Tambah Produk\",\n      icon: Package,\n      onClick: () => setLocation(\"/inventory\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-add-product\"\n    },\n    {\n      title: \"Tambah Pelanggan\",\n      icon: UserPlus,\n      onClick: () => setLocation(\"/customers\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-add-customer\"\n    },\n    {\n      title: \"Buat Laporan\",\n      icon: FileDown,\n      onClick: () => setLocation(\"/reports\"),\n      variant: \"outline\" as const,\n      testId: \"button-quick-generate-report\"\n    },\n  ];\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle>Aksi Cepat</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-3\">\n          {actions.map((action) => (\n            <Button\n              key={action.title}\n              variant={action.variant}\n              onClick={action.onClick}\n              className=\"w-full justify-start h-12\"\n              data-testid={action.testId}\n            >\n              <action.icon className=\"w-4 h-4 mr-3\" />\n              {action.title}\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1968},"laptoppos-deployment-20250903-113337/client/src/components/dashboard/recent-transactions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, ShoppingCart, Wrench, CheckCircle, Clock } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function RecentTransactions() {\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n  });\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Transaksi Terbaru</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-transactions\">\n            Lihat Semua <ArrowRight className=\"w-4 h-4 ml-1\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : !transactions || transactions.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            Tidak ada transaksi. Mulai dengan membuat transaksi baru.\n          </p>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"text-xs text-muted-foreground uppercase border-b\">\n                <tr>\n                  <th className=\"text-left py-3\">ID</th>\n                  <th className=\"text-left py-3\">Pelanggan</th>\n                  <th className=\"text-left py-3\">Jenis</th>\n                  <th className=\"text-right py-3\">Jumlah</th>\n                  <th className=\"text-left py-3\">Status</th>\n                </tr>\n              </thead>\n              <tbody className=\"text-foreground\">\n                {transactions.slice(0, 5).map((transaction: any) => (\n                  <tr key={transaction.id} className=\"border-b hover:bg-muted/50 transition-colors\">\n                    <td className=\"py-3 font-medium\" data-testid={`transaction-id-${transaction.id}`}>\n                      {transaction.transactionNumber || transaction.id}\n                    </td>\n                    <td className=\"py-3\">\n                      {transaction.customer?.name || \"Walk-in Customer\"}\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge variant=\"outline\" className=\"flex items-center w-fit\">\n                        {transaction.type === 'sale' ? (\n                          <ShoppingCart className=\"w-3 h-3 mr-1\" />\n                        ) : (\n                          <Wrench className=\"w-3 h-3 mr-1\" />\n                        )}\n                        {transaction.type === 'sale' ? 'Penjualan' : 'Servis'}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3 text-right font-medium\">\n                      Rp {Number(transaction.total).toLocaleString('id-ID')}\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge variant=\"secondary\" className=\"flex items-center w-fit\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Selesai\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3572},"laptoppos-deployment-20250903-113337/client/src/components/dashboard/service-status.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Laptop, Clock, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ServiceStatus() {\n  const { data: serviceTickets, isLoading } = useQuery({\n    queryKey: [\"/api/service-tickets\"],\n    queryFn: async () => {\n      const response = await fetch('/api/service-tickets?active=true');\n      if (!response.ok) throw new Error('Failed to fetch service tickets');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'secondary';\n      case 'in_progress':\n        return 'default';\n      case 'completed':\n        return 'secondary';\n      case 'delivered':\n        return 'secondary';\n      default:\n        return 'destructive';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return Clock;\n      case 'in_progress':\n        return Clock;\n      case 'completed':\n        return CheckCircle;\n      case 'delivered':\n        return CheckCircle;\n      default:\n        return AlertTriangle;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'Menunggu';\n      case 'in_progress':\n        return 'Dikerjakan';\n      case 'completed':\n        return 'Selesai';\n      case 'delivered':\n        return 'Terkirim';\n      default:\n        return 'Tertunda';\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle>Status Servis</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        ) : !serviceTickets || serviceTickets.length === 0 ? (\n          <p className=\"text-muted-foreground text-center py-8\">\n            Tidak ada tiket servis aktif.\n          </p>\n        ) : (\n          <div className=\"space-y-4\">\n            {serviceTickets.slice(0, 5).map((ticket: any) => {\n              const StatusIcon = getStatusIcon(ticket.status);\n              \n              return (\n                <div \n                  key={ticket.id} \n                  className=\"flex items-center justify-between p-3 rounded-md border hover:bg-muted/50 transition-colors\"\n                  data-testid={`service-ticket-${ticket.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                      <Laptop className=\"w-5 h-5 text-secondary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {ticket.customer?.name || \"Unknown Customer\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {ticket.deviceBrand} {ticket.deviceModel} - {ticket.problem}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge \n                      variant={getStatusColor(ticket.status)}\n                      className=\"flex items-center\"\n                    >\n                      <StatusIcon className=\"w-3 h-3 mr-1\" />\n                      {getStatusText(ticket.status)}\n                    </Badge>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {ticket.estimatedCompletion \n                        ? `Est: ${new Date(ticket.estimatedCompletion).toLocaleDateString()}`\n                        : \"No estimate\"\n                      }\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4174},"laptoppos-deployment-20250903-113337/client/src/components/dashboard/stat-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  DollarSign, \n  Wrench, \n  AlertTriangle, \n  TrendingUp,\n  Package\n} from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  change: string;\n  icon: string;\n  color: \"primary\" | \"accent\" | \"destructive\" | \"secondary\";\n  \"data-testid\"?: string;\n}\n\nconst iconMap = {\n  \"money-bill-wave\": DollarSign,\n  \"tools\": Wrench,\n  \"exclamation-triangle\": AlertTriangle,\n  \"chart-line\": TrendingUp,\n  \"package\": Package,\n};\n\nconst colorMap = {\n  primary: \"bg-primary/10 text-primary\",\n  accent: \"bg-accent/10 text-accent\",\n  destructive: \"bg-destructive/10 text-destructive\",\n  secondary: \"bg-secondary/10 text-secondary\",\n};\n\nexport default function StatCard({ title, value, change, icon, color, ...props }: StatCardProps) {\n  const IconComponent = iconMap[icon as keyof typeof iconMap] || DollarSign;\n  \n  return (\n    <Card className=\"shadow-sm\" {...props}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n            <p className=\"text-sm text-accent mt-1\">\n              {change}\n            </p>\n          </div>\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorMap[color]}`}>\n            <IconComponent className=\"w-6 h-6\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1646},"laptoppos-deployment-20250903-113337/client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Plus, User, ChevronDown } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  breadcrumb: string;\n  action?: React.ReactNode;\n}\n\nexport default function Header({ title, breadcrumb, action }: HeaderProps) {\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4 flex justify-between items-center shadow-sm\">\n      <div className=\"flex items-center space-x-4\">\n        <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"header-title\">\n          {title}\n        </h2>\n        <nav className=\"text-sm text-muted-foreground\" data-testid=\"header-breadcrumb\">\n          {breadcrumb}\n        </nav>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        {action}\n        \n        <div className=\"flex items-center space-x-3\">\n          <div className=\"text-right\">\n            <p className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n              {user?.firstName || user?.email || \"User\"}\n            </p>\n            <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n              {user?.role || \"Staf\"}\n            </p>\n          </div>\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <User className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <ChevronDown className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1877},"laptoppos-deployment-20250903-113337/client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  ChartLine, \n  ScanBarcode, \n  Wrench, \n  Package, \n  PieChart, \n  Users, \n  Truck, \n  FileText, \n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  Laptop,\n  Shield,\n  UserCog,\n  Layers,\n  LogOut,\n  User,\n  ShoppingCart\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst navigation = [\n  { name: \"Dasbor\", href: \"/\", icon: ChartLine, roles: [\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"] },\n  { name: \"Kasir\", href: \"/pos\", icon: ScanBarcode, roles: [\"admin\", \"kasir\", \"owner\"] },\n  { name: \"Servis\", href: \"/service\", icon: Wrench, roles: [\"admin\", \"teknisi\", \"owner\"] },\n  { name: \"Inventori\", href: \"/inventory\", icon: Package, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Pembelian\", href: \"/purchasing\", icon: ShoppingCart, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Keuangan & Gaji\", href: \"/finance-new\", icon: PieChart, roles: [\"admin\", \"finance\", \"owner\"] },\n  { name: \"Pelanggan\", href: \"/customers\", icon: Users, roles: [\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"] },\n  { name: \"Supplier\", href: \"/suppliers\", icon: Truck, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Pengguna\", href: \"/users\", icon: UserCog, roles: [\"admin\", \"owner\"] },\n  { name: \"Peran\", href: \"/roles\", icon: Shield, roles: [\"admin\", \"owner\"] },\n  { name: \"Laporan\", href: \"/reports\", icon: FileText, roles: [\"admin\", \"finance\", \"owner\"] },\n  { name: \"Pergerakan Stok\", href: \"/stock-movements\", icon: Layers, roles: [\"admin\", \"purchasing\", \"owner\"] },\n  { name: \"Pengaturan\", href: \"/settings\", icon: Settings, roles: [\"admin\", \"owner\"] },\n];\n\nexport default function Sidebar() {\n  // Use localStorage to persist sidebar state\n  const [isCollapsed, setIsCollapsed] = useState(() => {\n    const saved = localStorage.getItem('sidebarCollapsed');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config'], // Changed key format\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    retry: false,\n  });\n\n  const userRole = (user as any)?.role || \"kasir\";\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logout Berhasil\",\n        description: \"Anda telah berhasil logout.\",\n      });\n      // Reload to trigger authentication state update\n      window.location.href = \"/\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Logout\",\n        description: error.message || \"Gagal logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Save sidebar state to localStorage when it changes\n  const toggleCollapsed = () => {\n    const newCollapsed = !isCollapsed;\n    setIsCollapsed(newCollapsed);\n    localStorage.setItem('sidebarCollapsed', JSON.stringify(newCollapsed));\n  };\n\n  const filteredNavigation = navigation.filter(item => \n    item.roles.includes(userRole)\n  );\n\n  return (\n    <aside \n      className={cn(\n        \"transition-all duration-300 bg-card border-r border-border flex flex-col shadow-sm\",\n        isCollapsed ? \"w-16\" : \"w-64\"\n      )}\n      data-testid=\"sidebar\"\n    >\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Laptop className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          {!isCollapsed && (\n            <div className=\"transition-opacity duration-300\">\n              <h1 className=\"text-lg font-semibold text-foreground\">{(storeConfig as any)?.name || 'LaptopPOS'}</h1>\n              <p className=\"text-xs text-muted-foreground\">Servis & Penjualan</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n        {filteredNavigation.map((item) => {\n          const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors cursor-pointer\",\n                  isActive\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:bg-muted hover:text-foreground\"\n                )}\n                data-testid={`nav-item-${item.name.toLowerCase()}`}\n              >\n                <item.icon className=\"w-5 h-5 flex-shrink-0\" />\n                {!isCollapsed && (\n                  <span className=\"transition-opacity duration-300\">{item.name}</span>\n                )}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <div className=\"p-4 border-t border-border space-y-2\">\n        {/* User Info */}\n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-3 px-3 py-2 rounded-md bg-muted/50\">\n            <User className=\"w-4 h-4 text-muted-foreground\" />\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\">\n                {(user as any)?.username || (user as any)?.firstName || \"User\"}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {userRole}\n              </p>\n            </div>\n          </div>\n        )}\n        \n        {/* Logout Button */}\n        <Button\n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={handleLogout}\n          disabled={logoutMutation.isPending}\n          className={cn(\n            \"w-full flex items-center text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950\",\n            isCollapsed ? \"justify-center\" : \"justify-start space-x-3 px-3\"\n          )}\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          {!isCollapsed && (\n            <span className=\"transition-opacity duration-300\">\n              {logoutMutation.isPending ? \"Keluar...\" : \"Keluar\"}\n            </span>\n          )}\n        </Button>\n        \n        {/* Collapse Button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={toggleCollapsed}\n          className=\"w-full flex items-center justify-center\"\n          data-testid=\"button-collapse-sidebar\"\n        >\n          {isCollapsed ? (\n            <ChevronRight className=\"w-4 h-4\" />\n          ) : (\n            <ChevronLeft className=\"w-4 h-4\" />\n          )}\n        </Button>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":7475},"laptoppos-deployment-20250903-113337/client/src/components/pos/receipt-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Printer, Download, X } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { id as idLocale } from \"date-fns/locale\";\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { useState } from \"react\";\n\ninterface ReceiptModalProps {\n  open: boolean;\n  onClose: () => void;\n  transaction: any;\n}\n\nconst paperSizes = {\n  'a4': { name: 'A4 - Printer Biasa', width: 210, type: 'standard' },\n  '58': { name: '58mm - Thermal Kecil', width: 58, type: 'thermal' },\n  '80': { name: '80mm - Thermal Standar', width: 80, type: 'thermal' },\n  '100': { name: '100mm - Thermal Besar', width: 100, type: 'thermal' },\n} as const;\n\ntype PaperSize = keyof typeof paperSizes;\n\nexport default function ReceiptModal({ open, onClose, transaction }: ReceiptModalProps) {\n  const [paperSize, setPaperSize] = useState<PaperSize>('a4');\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  // Get store config for receipt header - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-receipt'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS', address: '', phone: '' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  if (!transaction) return null;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      // Wait a bit to ensure content is fully loaded\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const element = document.getElementById('purchase-receipt-content');\n      if (!element) {\n        console.error('Receipt element not found');\n        alert('Error: Receipt element not found. Please try again.');\n        return;\n      }\n\n      // Make sure element is visible\n      element.style.display = 'block';\n      element.style.visibility = 'visible';\n      \n      const canvas = await html2canvas(element, {\n        scale: 2,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: true,\n        width: element.scrollWidth,\n        height: element.scrollHeight,\n      });\n\n      // Check if canvas has content\n      if (canvas.width === 0 || canvas.height === 0) {\n        console.error('Canvas is empty');\n        alert('Error: Failed to capture receipt content. Please try again.');\n        return;\n      }\n\n      const imgData = canvas.toDataURL('image/png');\n      const pageWidth = paperSizes[paperSize].width;\n      const pageHeight = paperSize === 'a4' ? 297 : (canvas.height / canvas.width) * pageWidth;\n      \n      const pdf = new jsPDF('p', 'mm', paperSize === 'a4' ? [148, 210] : [pageWidth, pageHeight]);\n      if (paperSize === 'a4') {\n        // For A5 size (half page), fit to page with margins\n        const margin = 4;\n        const availableWidth = 148 - (2 * margin); // A5 width\n        const scaledHeight = (canvas.height / canvas.width) * availableWidth;\n        pdf.addImage(imgData, 'PNG', margin, margin, availableWidth, scaledHeight);\n      } else {\n        pdf.addImage(imgData, 'PNG', 0, 0, pageWidth, pageHeight);\n      }\n      pdf.save(`Nota-Pembayaran-POS-${transaction.transactionNumber || transaction.id}-${paperSize === 'a4' ? 'A5' : pageWidth + 'mm'}.pdf`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      alert('Error generating PDF. Please try again or contact support.');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handlePrint = () => {\n    try {\n      // Ukuran kertas sesuai pilihan\n      const pageWidth = paperSizes[paperSize].width;\n      const fontSize = paperSize === 'a4' ? '12px' : \n                      paperSize === '58' ? '7px' : \n                      paperSize === '80' ? '8px' : '10px';\n      \n      const printStyle = `\n        <style id=\"thermal-print-style\">\n          @media print {\n            * { \n              visibility: hidden; \n              margin: 0 !important; \n              padding: 0 !important;\n              box-sizing: border-box;\n            }\n            #purchase-receipt-content, \n            #purchase-receipt-content * { \n              visibility: visible; \n            }\n            #purchase-receipt-content {\n              position: absolute;\n              left: 0;\n              top: 0;\n              width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              max-width: ${paperSize === 'a4' ? '140mm' : `${pageWidth}mm`};\n              font-family: ${paperSize === 'a4' ? 'Arial, sans-serif' : \"'Courier New', monospace\"};\n              font-size: ${paperSize === 'a4' ? '11px' : fontSize};\n              line-height: ${paperSize === 'a4' ? '1.4' : '1.0'};\n              color: #000;\n              background: #fff;\n              page-break-inside: avoid;\n              page-break-after: avoid;\n              page-break-before: avoid;\n              height: auto;\n              max-height: ${paperSize === 'a4' ? '270mm' : '250mm'};\n              padding: ${paperSize === 'a4' ? '10mm' : '2mm'};\n            }\n            .no-print { \n              display: none !important; \n            }\n            @page {\n              size: ${paperSize === 'a4' ? '148mm 210mm' : `${pageWidth}mm 300mm`};\n              margin: ${paperSize === 'a4' ? '4mm' : '1mm'};\n            }\n            .text-center { text-align: center; }\n            .font-bold { font-weight: bold; }\n            .flex { display: flex; }\n            .flex-1 { flex: 1; }\n            .justify-between { justify-content: space-between; }\n            .items-center { align-items: center; }\n            .border-t { \n              border-top: 1px dashed #333; \n              margin: 1px 0 !important; \n            }\n            .border-solid { border-style: solid; }\n            .border-gray-800 { border-color: #333; }\n            .text-gray-600 { color: #666; }\n            .space-y-1 > * + * { margin-top: 1px !important; }\n            .py-2 { padding: 1px 0 !important; }\n            .my-2 { margin: 1px 0 !important; }\n            .mb-2 { margin-bottom: 1px !important; }\n            .mt-6 { margin-top: 2px !important; }\n            h3 { font-size: ${fontSize}; margin: 1px 0 !important; }\n            div { margin: 0 !important; padding: 0 !important; }\n            p { margin: 0 !important; padding: 0 !important; }\n          }\n          @media screen {\n            #thermal-print-style { display: none; }\n          }\n        </style>\n      `;\n      \n      // Hapus style print lama jika ada\n      const oldStyle = document.getElementById('thermal-print-style');\n      if (oldStyle) oldStyle.remove();\n      \n      // Tambahkan CSS print baru\n      document.head.insertAdjacentHTML('beforeend', printStyle);\n      \n      // Print\n      window.print();\n      \n      // Restore setelah delay\n      setTimeout(() => {\n        const printStyleElement = document.getElementById('thermal-print-style');\n        if (printStyleElement) {\n          printStyleElement.remove();\n        }\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Terjadi kesalahan saat mencetak. Silakan coba lagi.');\n    }\n  };\n\n  const getReceiptWidth = () => {\n    switch (paperSize) {\n      case 'a4': return 'max-w-[500px]';\n      case '58': return 'max-w-[58mm]';\n      case '80': return 'max-w-[80mm]';\n      case '100': return 'max-w-[100mm]';\n      default: return 'max-w-[500px]';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (paperSize) {\n      case 'a4': return 'text-sm';\n      case '58': return 'text-xs';\n      case '80': return 'text-sm';\n      case '100': return 'text-base';\n      default: return 'text-sm';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"no-print\">\n          <DialogTitle>Nota Pembayaran POS</DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"absolute right-4 top-4\"\n            data-testid=\"button-close-receipt\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Paper Size Selector */}\n          <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg no-print\">\n            <Label htmlFor=\"paper-size\" className=\"font-medium\">Ukuran Kertas:</Label>\n            <Select value={paperSize} onValueChange={(value: PaperSize) => setPaperSize(value)}>\n              <SelectTrigger className=\"w-48\" id=\"paper-size\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"a4\">{paperSizes['a4'].name}</SelectItem>\n                <SelectItem value=\"58\">{paperSizes['58'].name}</SelectItem>\n                <SelectItem value=\"80\">{paperSizes['80'].name}</SelectItem>\n                <SelectItem value=\"100\">{paperSizes['100'].name}</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 no-print\">\n            <Button \n              onClick={handlePrint} \n              className=\"flex-1\"\n              data-testid=\"button-print-receipt\"\n            >\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={generatePDF}\n              disabled={isGenerating}\n              className=\"flex-1\"\n              data-testid=\"button-download-receipt\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              {isGenerating ? 'Generating...' : 'Download PDF'}\n            </Button>\n          </div>\n\n          <Separator className=\"no-print\" />\n\n          {/* Preview Receipt */}\n          <div className=\"flex justify-center\">\n            <div className={`${getReceiptWidth()} mx-auto bg-white border rounded-lg overflow-hidden shadow-lg`}>\n              <div \n                className=\"p-4 font-mono\" \n                id=\"purchase-receipt-content\"\n                style={{\n                  minHeight: '300px',\n                  display: 'block',\n                  visibility: 'visible',\n                  position: 'relative'\n                }}\n              >\n                {/* Store Header */}\n                <div className={`text-center ${getTextSize()} space-y-1`}>\n                  <h3 className=\"font-bold\" data-testid=\"text-store-name\">\n                    {(storeConfig as any)?.name || 'LaptopPOS Service Center'}\n                  </h3>\n                  {(storeConfig as any)?.address && (\n                    <div data-testid=\"text-store-address\">\n                      {(storeConfig as any).address}\n                    </div>\n                  )}\n                  <div className=\"space-y-0\">\n                    {(storeConfig as any)?.phone && (\n                      <div data-testid=\"text-store-phone\">Tel: {(storeConfig as any).phone}</div>\n                    )}\n                    {(storeConfig as any)?.email && (\n                      <div data-testid=\"text-store-email\">{(storeConfig as any).email}</div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n                {/* Transaction Info */}\n                <div className={`${getTextSize()} space-y-1`}>\n                  <div className=\"flex justify-between\">\n                    <span>No. Transaksi:</span>\n                    <span data-testid=\"text-receipt-number\">\n                      {transaction.transactionNumber || transaction.id}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Tanggal:</span>\n                    <span data-testid=\"text-receipt-date\">\n                      {format(new Date(transaction.createdAt || transaction.date || new Date()), 'dd/MM/yyyy HH:mm', { locale: idLocale })}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Kasir:</span>\n                    <span data-testid=\"text-cashier-name\">\n                      {transaction.user?.firstName || 'Admin'}\n                    </span>\n                  </div>\n                  {transaction.customer && (\n                    <div className=\"flex justify-between\">\n                      <span>Pelanggan:</span>\n                      <span data-testid=\"text-customer-name\">\n                        {transaction.customer.name || transaction.customer}\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n                {/* Items */}\n                <div className={`${getTextSize()} space-y-1`}>\n                  {transaction.items?.map((item: any, index: number) => (\n                    <div key={index} className=\"space-y-1\">\n                      <div className=\"font-bold\" data-testid={`item-name-${index}`}>\n                        {item.product?.name || item.name}\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>{item.quantity} x {formatCurrency(item.unitPrice || item.price)}</span>\n                        <span data-testid={`item-total-${index}`}>\n                          {formatCurrency(item.totalPrice || (item.price * item.quantity))}\n                        </span>\n                      </div>\n                    </div>\n                  )) || []}\n                </div>\n\n                <div className=\"border-t border-solid border-gray-800 my-2\"></div>\n\n                {/* Totals */}\n                <div className={`${getTextSize()} space-y-1`}>\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span data-testid=\"receipt-subtotal\">\n                      {formatCurrency(Number(transaction.subtotal || 0))}\n                    </span>\n                  </div>\n                  {transaction.taxAmount && Number(transaction.taxAmount) > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span>Pajak:</span>\n                      <span data-testid=\"receipt-tax\">\n                        {formatCurrency(Number(transaction.taxAmount))}\n                      </span>\n                    </div>\n                  )}\n                  {transaction.discountAmount && Number(transaction.discountAmount) > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span>Diskon:</span>\n                      <span data-testid=\"receipt-discount\">\n                        -{formatCurrency(Number(transaction.discountAmount))}\n                      </span>\n                    </div>\n                  )}\n                  <div className={`flex justify-between font-bold ${getTextSize()}`}>\n                    <span>TOTAL:</span>\n                    <span data-testid=\"receipt-total\">\n                      {formatCurrency(Number(transaction.total || 0))}\n                    </span>\n                  </div>\n                  {transaction.paymentMethod && (\n                    <div className=\"flex justify-between\">\n                      <span>Pembayaran:</span>\n                      <span data-testid=\"receipt-payment\">\n                        {transaction.paymentMethod === 'cash' ? 'Tunai' : \n                         transaction.paymentMethod === 'card' ? 'Kartu' : \n                         transaction.paymentMethod === 'transfer' ? 'Transfer' : \n                         transaction.paymentMethod}\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"border-t border-dashed border-gray-400 my-2\"></div>\n\n                {/* Footer */}\n                <div className={`text-center ${getTextSize()} text-gray-600 space-y-1 mt-6`}>\n                  <div>Terima kasih atas pembelian Anda!</div>\n                  <div>Barang yang sudah dibeli tidak dapat dikembalikan</div>\n                  <div data-testid=\"text-print-date\">Cetak: {format(new Date(), 'dd/MM/yy HH:mm', { locale: idLocale })}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":17214},"laptoppos-deployment-20250903-113337/client/src/components/pos/transaction-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plus, Minus, X, Search, Barcode } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CustomerCreateModal from \"@/components/customers/customer-create-modal\";\n\ninterface TransactionModalProps {\n  open: boolean;\n  onClose: () => void;\n  onComplete: (transaction: any) => void;\n}\n\ninterface TransactionItem {\n  productId: string;\n  name: string;\n  sellingPrice: number;\n  quantity: number;\n  stock?: number;\n}\n\nexport default function TransactionModal({ open, onClose, onComplete }: TransactionModalProps) {\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n  const [customerSearch, setCustomerSearch] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"cash\");\n  const [items, setItems] = useState<TransactionItem[]>([]);\n  const [productSearch, setProductSearch] = useState(\"\");\n  const [selectedProducts, setSelectedProducts] = useState<any[]>([]);\n  const [showCustomerCreateModal, setShowCustomerCreateModal] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch products\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Fetch store config for tax rate - WITH PROPER REFRESH\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-transaction'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { taxRate: 0 };\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes instead of Infinity\n    refetchOnWindowFocus: true,\n    retry: false,\n  });\n\n  // Fetch customers\n  const { data: customers = [], isLoading: customersLoading } = useQuery({\n    queryKey: [\"/api/customers\", customerSearch],\n    queryFn: async () => {\n      const url = customerSearch ? `/api/customers?search=${encodeURIComponent(customerSearch)}` : '/api/customers';\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch customers');\n      return response.json();\n    },\n  });\n\n  // Filter customers based on search\n  const filteredCustomers = customers.filter((customer: any) =>\n    customer.name.toLowerCase().includes(customerSearch.toLowerCase()) ||\n    customer.phone?.toLowerCase().includes(customerSearch.toLowerCase()) ||\n    customer.email?.toLowerCase().includes(customerSearch.toLowerCase())\n  );\n\n  // Filter products based on search\n  const filteredProducts = Array.isArray(products) ? products.filter((product: any) =>\n    product.name.toLowerCase().includes(productSearch.toLowerCase()) ||\n    product.barcode?.toLowerCase().includes(productSearch.toLowerCase())\n  ) : [];\n\n  // Create transaction mutation\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/transactions', data);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: \"Transaction completed successfully\",\n      });\n      onComplete(data);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedCustomer(null);\n    setCustomerSearch(\"\");\n    setPaymentMethod(\"cash\");\n    setItems([]);\n    setProductSearch(\"\");\n    setSelectedProducts([]);\n    setShowCustomerCreateModal(false);\n  };\n\n  const selectCustomer = (customer: any) => {\n    setSelectedCustomer(customer);\n    setCustomerSearch(\"\");\n  };\n\n  const handleCustomerCreated = (newCustomer: any) => {\n    selectCustomer(newCustomer);\n  };\n\n  const updateQuantity = (productId: string, delta: number) => {\n    setItems(prev => prev.map(item => {\n      if (item.productId === productId) {\n        const newQuantity = Math.max(0, item.quantity + delta);\n        // Check stock limit\n        if (newQuantity > (item.stock || 0)) {\n          toast({\n            title: \"Stock Insufficient\",\n            description: `Only ${item.stock} units available`,\n            variant: \"destructive\",\n          });\n          return item;\n        }\n        return { ...item, quantity: newQuantity };\n      }\n      return item;\n    }).filter(item => item.quantity > 0));\n  };\n\n  const removeItem = (productId: string) => {\n    setItems(prev => prev.filter(item => item.productId !== productId));\n  };\n\n  const addProductToCart = (product: any) => {\n    if (product.stock <= 0) {\n      toast({\n        title: \"Out of Stock\",\n        description: `${product.name} is out of stock`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Adding product to cart\n    \n    const existingItem = items.find(item => item.productId === product.id);\n    if (existingItem) {\n      updateQuantity(product.id, 1);\n    } else {\n      const sellingPrice = typeof product.sellingPrice === 'string' \n        ? parseFloat(product.sellingPrice) \n        : (product.sellingPrice || 0);\n      \n      const newItem: TransactionItem = {\n        productId: product.id,\n        name: product.name,\n        sellingPrice: sellingPrice,\n        quantity: 1,\n        stock: product.stock,\n      };\n      // Item created successfully\n      setItems(prev => [...prev, newItem]);\n    }\n    setProductSearch(\"\");\n  };\n\n  const subtotal = items.reduce((sum, item) => sum + (item.sellingPrice * item.quantity), 0);\n  const taxRate = Number(storeConfig?.taxRate || 11) / 100;\n  const tax = subtotal * taxRate;\n  const total = subtotal + tax;\n\n  const handleProcessTransaction = () => {\n    if (items.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one item to the transaction\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!paymentMethod) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a payment method\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const transactionData = {\n      transaction: {\n        type: 'sale' as const,\n        customerId: selectedCustomer?.id || null,\n        paymentMethod: paymentMethod || 'cash',\n        subtotal: Math.round(subtotal).toString(),\n        taxAmount: Math.round(tax).toString(),\n        discountAmount: '0.00',\n        total: Math.round(total).toString(),\n        notes: `POS Sale - ${items.length} items${selectedCustomer ? ` for ${selectedCustomer.name}` : ''}`,\n      },\n      items: items.map(item => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        unitPrice: Math.round(item.sellingPrice).toString(),\n        totalPrice: Math.round(item.sellingPrice * item.quantity).toString(),\n      })),\n    };\n\n    createTransactionMutation.mutate(transactionData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>New Transaction</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 overflow-y-auto\">\n          {/* Customer and Payment */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"customer\">Customer</Label>\n              <div className=\"space-y-2\">\n                {selectedCustomer ? (\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-md\">\n                    <div>\n                      <div className=\"font-medium\">{selectedCustomer.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedCustomer.phone} • {selectedCustomer.email}\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedCustomer(null)}\n                      data-testid=\"button-remove-customer\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"customer\"\n                        placeholder=\"Search customer by name, phone, or email...\"\n                        value={customerSearch}\n                        onChange={(e) => setCustomerSearch(e.target.value)}\n                        data-testid=\"input-customer-search\"\n                      />\n                      <Search className=\"absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    </div>\n                    \n                    {/* Customer Search Results */}\n                    {customerSearch && (\n                      <Card className=\"max-h-48 overflow-y-auto\">\n                        <CardContent className=\"p-2\">\n                          {customersLoading ? (\n                            <div className=\"text-center py-4\">Loading customers...</div>\n                          ) : filteredCustomers.length > 0 ? (\n                            <div className=\"space-y-1\">\n                              {filteredCustomers.slice(0, 8).map((customer: any) => (\n                                <Button\n                                  key={customer.id}\n                                  variant=\"ghost\"\n                                  className=\"w-full justify-start h-auto p-3\"\n                                  onClick={() => selectCustomer(customer)}\n                                  data-testid={`button-select-customer-${customer.id}`}\n                                >\n                                  <div className=\"text-left\">\n                                    <div className=\"font-medium\">{customer.name}</div>\n                                    <div className=\"text-sm text-muted-foreground\">\n                                      {customer.phone} • {customer.email}\n                                    </div>\n                                  </div>\n                                </Button>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className=\"text-center py-4 space-y-2\">\n                              <div className=\"text-muted-foreground\">Tidak ada customer ditemukan</div>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setShowCustomerCreateModal(true)}\n                                data-testid=\"button-add-new-customer\"\n                              >\n                                <Plus className=\"w-4 h-4 mr-2\" />\n                                Tambah Customer Baru\n                              </Button>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    )}\n                    \n                    <div className=\"text-xs text-muted-foreground\">\n                      Optional: Leave empty for walk-in customer\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"payment\">Payment Method</Label>\n              <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                <SelectTrigger data-testid=\"select-payment-method\">\n                  <SelectValue placeholder=\"Select payment method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cash\">Cash</SelectItem>\n                  <SelectItem value=\"transfer\">Bank Transfer</SelectItem>\n                  <SelectItem value=\"credit\">Credit Card</SelectItem>\n                  <SelectItem value=\"debit\">Debit Card</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Product Selection */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"product\">Add Products</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"product\"\n                  placeholder=\"Scan barcode or search product...\"\n                  value={productSearch}\n                  onChange={(e) => setProductSearch(e.target.value)}\n                  data-testid=\"input-product-search\"\n                />\n                <Search className=\"absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              </div>\n              \n              {/* Product Search Results */}\n              {productSearch && (\n                <Card className=\"max-h-64 overflow-y-auto\">\n                  <CardContent className=\"p-2\">\n                    {productsLoading ? (\n                      <div className=\"text-center py-4\">Loading products...</div>\n                    ) : filteredProducts.length > 0 ? (\n                      <div className=\"space-y-1\">\n                        {filteredProducts.slice(0, 10).map((product: any) => (\n                          <Button\n                            key={product.id}\n                            variant=\"ghost\"\n                            className=\"w-full justify-between h-auto p-3\"\n                            onClick={() => addProductToCart(product)}\n                            disabled={product.stock <= 0}\n                            data-testid={`button-add-product-${product.id}`}\n                          >\n                            <div className=\"text-left\">\n                              <div className=\"font-medium\">{product.name}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Stock: {product.stock} | Rp {product.sellingPrice?.toLocaleString('id-ID')}\n                              </div>\n                            </div>\n                            <Plus className=\"w-4 h-4\" />\n                          </Button>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        No products found\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Selected Items */}\n            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n              {items.map((item) => (\n                <Card key={item.productId} className=\"p-3\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{item.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Rp {(item.sellingPrice || 0).toLocaleString('id-ID')} × {item.quantity} = Rp {(item.sellingPrice * item.quantity).toLocaleString('id-ID')}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.productId, -1)}\n                        data-testid={`button-decrease-${item.productId}`}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span data-testid={`text-quantity-${item.productId}`} className=\"w-8 text-center\">\n                        {item.quantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.productId, 1)}\n                        data-testid={`button-increase-${item.productId}`}\n                        disabled={item.quantity >= (item.stock || 0)}\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.productId)}\n                        data-testid={`button-remove-${item.productId}`}\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n              \n              {items.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No items added yet. Search and add products above.\n                </div>\n              )}\n            </div>\n\n            {/* Transaction Summary */}\n            <Card className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Subtotal:</span>\n                  <span data-testid=\"text-subtotal\">Rp {subtotal.toLocaleString('id-ID')}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Tax ({((storeConfig as any)?.taxRate || 11)}%):</span>\n                  <span data-testid=\"text-tax\">Rp {tax.toLocaleString('id-ID')}</span>\n                </div>\n                <div className=\"flex justify-between font-semibold border-t pt-2\">\n                  <span>Total:</span>\n                  <span data-testid=\"text-total\">Rp {total.toLocaleString('id-ID')}</span>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose} \n            disabled={createTransactionMutation.isPending}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleProcessTransaction}\n            disabled={createTransactionMutation.isPending || items.length === 0}\n            data-testid=\"button-process-transaction\"\n          >\n            {createTransactionMutation.isPending ? \"Processing...\" : \"Process Transaction\"}\n          </Button>\n        </div>\n      </DialogContent>\n\n      <CustomerCreateModal\n        open={showCustomerCreateModal}\n        onClose={() => setShowCustomerCreateModal(false)}\n        onCustomerCreated={handleCustomerCreated}\n      />\n    </Dialog>\n  );\n}\n","size_bytes":19189},"laptoppos-deployment-20250903-113337/client/src/components/service-parts-selector.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Minus, Package, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ServicePart {\n  productId: string;\n  productName: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  stock: number;\n}\n\ninterface ServicePartsSelectorProps {\n  parts: ServicePart[];\n  onPartsChange: (parts: ServicePart[]) => void;\n  laborCost: number;\n}\n\nexport function ServicePartsSelector({ parts, onPartsChange, laborCost }: ServicePartsSelectorProps) {\n  const { toast } = useToast();\n  const [selectedProductId, setSelectedProductId] = useState<string>(\"\");\n  const [quantity, setQuantity] = useState<number>(1);\n\n  // Fetch products\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n    queryFn: () => fetch('/api/products').then(res => res.json())\n  });\n\n  // Filter products that have stock\n  const availableProducts = useMemo(() => {\n    return products.filter(product => product.stock > 0 && product.isActive);\n  }, [products]);\n\n  const selectedProduct = useMemo(() => {\n    return availableProducts.find(p => p.id === selectedProductId);\n  }, [availableProducts, selectedProductId]);\n\n  const totalPartsCost = useMemo(() => {\n    return parts.reduce((sum, part) => sum + parseFloat(part.totalPrice), 0);\n  }, [parts]);\n\n  const totalCost = useMemo(() => {\n    return laborCost + totalPartsCost;\n  }, [laborCost, totalPartsCost]);\n\n  const handleAddPart = () => {\n    if (!selectedProduct) {\n      toast({\n        title: \"Error\",\n        description: \"Pilih produk terlebih dahulu\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (quantity > selectedProduct.stock) {\n      toast({\n        title: \"Error\",\n        description: `Stock tidak cukup. Tersedia: ${selectedProduct.stock}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Check if product already added\n    const existingPartIndex = parts.findIndex(part => part.productId === selectedProduct.id);\n    \n    if (existingPartIndex >= 0) {\n      const existingPart = parts[existingPartIndex];\n      const newQuantity = existingPart.quantity + quantity;\n      \n      if (newQuantity > selectedProduct.stock) {\n        toast({\n          title: \"Error\",\n          description: `Total quantity melebihi stock. Tersedia: ${selectedProduct.stock}, Sudah dipilih: ${existingPart.quantity}`,\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const unitPrice = selectedProduct.sellingPrice || \"0\";\n      const newTotalPrice = (parseFloat(unitPrice) * newQuantity).toString();\n\n      const updatedParts = parts.map((part, index) => \n        index === existingPartIndex \n          ? { ...part, quantity: newQuantity, totalPrice: newTotalPrice }\n          : part\n      );\n      onPartsChange(updatedParts);\n    } else {\n      const unitPrice = selectedProduct.sellingPrice || \"0\";\n      const totalPrice = (parseFloat(unitPrice) * quantity).toString();\n\n      const newPart: ServicePart = {\n        productId: selectedProduct.id,\n        productName: selectedProduct.name,\n        quantity,\n        unitPrice,\n        totalPrice,\n        stock: selectedProduct.stock\n      };\n\n      onPartsChange([...parts, newPart]);\n    }\n\n    // Reset form\n    setSelectedProductId(\"\");\n    setQuantity(1);\n  };\n\n  const handleRemovePart = (productId: string) => {\n    onPartsChange(parts.filter(part => part.productId !== productId));\n  };\n\n  const handleQuantityChange = (productId: string, newQuantity: number) => {\n    const part = parts.find(p => p.productId === productId);\n    if (!part) return;\n\n    const product = availableProducts.find(p => p.id === productId);\n    if (!product) return;\n\n    if (newQuantity > product.stock) {\n      toast({\n        title: \"Error\",\n        description: `Quantity melebihi stock. Tersedia: ${product.stock}`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (newQuantity <= 0) {\n      handleRemovePart(productId);\n      return;\n    }\n\n    const newTotalPrice = (parseFloat(part.unitPrice) * newQuantity).toString();\n    \n    const updatedParts = parts.map(p => \n      p.productId === productId \n        ? { ...p, quantity: newQuantity, totalPrice: newTotalPrice }\n        : p\n    );\n    onPartsChange(updatedParts);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Add Parts Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"w-4 h-4\" />\n            Tambah Spare Parts\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-12 gap-4 items-end\">\n            <div className=\"col-span-6\">\n              <Label htmlFor=\"product-select\">Pilih Produk</Label>\n              <Select value={selectedProductId} onValueChange={setSelectedProductId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Pilih spare part...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableProducts.map((product) => (\n                    <SelectItem key={product.id} value={product.id}>\n                      <div className=\"flex justify-between items-center w-full\">\n                        <span>{product.name}</span>\n                        <div className=\"flex items-center gap-2 ml-4\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Stock: {product.stock}\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Rp {parseFloat(product.sellingPrice || \"0\").toLocaleString(\"id-ID\")}\n                          </Badge>\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"col-span-2\">\n              <Label htmlFor=\"quantity\">Quantity</Label>\n              <Input\n                id=\"quantity\"\n                type=\"number\"\n                min=\"1\"\n                max={selectedProduct?.stock || 1}\n                value={quantity}\n                onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}\n              />\n            </div>\n            <div className=\"col-span-2\">\n              <Label>Harga Satuan</Label>\n              <div className=\"p-2 bg-muted rounded text-sm\">\n                {selectedProduct \n                  ? `Rp ${parseFloat(selectedProduct.sellingPrice || \"0\").toLocaleString(\"id-ID\")}`\n                  : \"-\"\n                }\n              </div>\n            </div>\n            <div className=\"col-span-2\">\n              <Button \n                onClick={handleAddPart} \n                disabled={!selectedProduct}\n                className=\"w-full\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Tambah\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Parts List */}\n      {parts.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Parts yang Digunakan</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Produk</TableHead>\n                  <TableHead>Stock Tersedia</TableHead>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Harga Satuan</TableHead>\n                  <TableHead>Total</TableHead>\n                  <TableHead>Action</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {parts.map((part) => (\n                  <TableRow key={part.productId}>\n                    <TableCell>{part.productName}</TableCell>\n                    <TableCell>\n                      <Badge variant={part.stock <= 5 ? \"destructive\" : \"secondary\"}>\n                        {part.stock} unit\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleQuantityChange(part.productId, part.quantity - 1)}\n                        >\n                          <Minus className=\"w-3 h-3\" />\n                        </Button>\n                        <span className=\"min-w-[2rem] text-center\">{part.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleQuantityChange(part.productId, part.quantity + 1)}\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      Rp {parseFloat(part.unitPrice).toLocaleString(\"id-ID\")}\n                    </TableCell>\n                    <TableCell>\n                      Rp {parseFloat(part.totalPrice).toLocaleString(\"id-ID\")}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRemovePart(part.productId)}\n                      >\n                        <Minus className=\"w-4 h-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Cost Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Ringkasan Biaya</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span>Biaya Tenaga Kerja:</span>\n              <span>Rp {laborCost.toLocaleString(\"id-ID\")}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Biaya Parts:</span>\n              <span>Rp {totalPartsCost.toLocaleString(\"id-ID\")}</span>\n            </div>\n            <div className=\"border-t pt-2\">\n              <div className=\"flex justify-between font-bold text-lg\">\n                <span>Total Biaya:</span>\n                <span>Rp {totalCost.toLocaleString(\"id-ID\")}</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {availableProducts.length === 0 && (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-8\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">\n                Tidak ada produk dengan stock tersedia\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11750},"laptoppos-deployment-20250903-113337/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"laptoppos-deployment-20250903-113337/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"laptoppos-deployment-20250903-113337/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"laptoppos-deployment-20250903-113337/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"laptoppos-deployment-20250903-113337/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"laptoppos-deployment-20250903-113337/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"laptoppos-deployment-20250903-113337/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"laptoppos-deployment-20250903-113337/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"laptoppos-deployment-20250903-113337/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"laptoppos-deployment-20250903-113337/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"laptoppos-deployment-20250903-113337/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"laptoppos-deployment-20250903-113337/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"laptoppos-deployment-20250903-113337/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"laptoppos-deployment-20250903-113337/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"laptoppos-deployment-20250903-113337/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"laptoppos-deployment-20250903-113337/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"laptoppos-deployment-20250903-113337/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"laptoppos-deployment-20250903-113337/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"laptoppos-deployment-20250903-113337/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"laptoppos-deployment-20250903-113337/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"laptoppos-deployment-20250903-113337/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"laptoppos-deployment-20250903-113337/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"laptoppos-deployment-20250903-113337/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"laptoppos-deployment-20250903-113337/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"laptoppos-deployment-20250903-113337/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"laptoppos-deployment-20250903-113337/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"laptoppos-deployment-20250903-113337/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"laptoppos-deployment-20250903-113337/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"laptoppos-deployment-20250903-113337/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"laptoppos-deployment-20250903-113337/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"laptoppos-deployment-20250903-113337/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"laptoppos-deployment-20250903-113337/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"laptoppos-deployment-20250903-113337/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"laptoppos-deployment-20250903-113337/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"laptoppos-deployment-20250903-113337/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"laptoppos-deployment-20250903-113337/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"laptoppos-deployment-20250903-113337/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"laptoppos-deployment-20250903-113337/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"laptoppos-deployment-20250903-113337/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"laptoppos-deployment-20250903-113337/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"laptoppos-deployment-20250903-113337/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"laptoppos-deployment-20250903-113337/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"laptoppos-deployment-20250903-113337/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"laptoppos-deployment-20250903-113337/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"laptoppos-deployment-20250903-113337/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"laptoppos-deployment-20250903-113337/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"laptoppos-deployment-20250903-113337/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"laptoppos-deployment-20250903-113337/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"laptoppos-deployment-20250903-113337/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"laptoppos-deployment-20250903-113337/client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"laptoppos-deployment-20250903-113337/client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(215, 16%, 47%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(158, 64%, 52%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221, 83%, 53%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(158, 64%, 52%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(221, 83%, 53%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@media print {\n  .no-print { \n    display: none !important; \n  }\n  .print-only { \n    display: block !important; \n  }\n}\n\n.print-only { \n  display: none; \n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3226},"laptoppos-deployment-20250903-113337/client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"laptoppos-deployment-20250903-113337/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n      staleTime: Infinity,\n      cacheTime: Infinity,\n      retry: false,\n      enabled: true,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1493},"laptoppos-deployment-20250903-113337/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"laptoppos-deployment-20250903-113337/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"laptoppos-deployment-20250903-113337/client/src/pages/ServiceStatus.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Search, Clock, CheckCircle, AlertCircle, Package, Calendar, Receipt, Settings, TestTube, FileText } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { id as idLocale } from \"date-fns/locale\";\nimport ServiceStatusTracker from \"@/components/ServiceStatusTracker\";\n\nconst statusConfig = {\n  pending: { label: 'Belum Cek', color: 'bg-yellow-500', icon: Clock },\n  checking: { label: 'Sedang Cek', color: 'bg-sky-500', icon: AlertCircle },\n  'in-progress': { label: 'Sedang Dikerjakan', color: 'bg-blue-500', icon: Settings },\n  'waiting-technician': { label: 'Ditunggu MITRA Teknik', color: 'bg-gray-500', icon: AlertCircle },\n  testing: { label: 'Sedang Tes', color: 'bg-indigo-500', icon: TestTube },\n  'waiting-confirmation': { label: 'Menunggu Konfirmasi', color: 'bg-red-500', icon: FileText },\n  'waiting-parts': { label: 'Menunggu Sparepart', color: 'bg-orange-500', icon: Package },\n  'waiting-payment': { label: 'Menunggu Pembayaran', color: 'bg-purple-500', icon: Receipt },\n  completed: { label: 'Selesai', color: 'bg-green-500', icon: CheckCircle },\n  delivered: { label: 'Sudah Diambil', color: 'bg-emerald-500', icon: CheckCircle },\n  cancelled: { label: 'Dibatalkan', color: 'bg-red-500', icon: AlertCircle },\n};\n\nexport default function ServiceStatus() {\n  const [serviceNumber, setServiceNumber] = useState(\"\");\n  const [searchClicked, setSearchClicked] = useState(false);\n  const [showStatusTracker, setShowStatusTracker] = useState(false);\n\n  const { data: serviceData, isLoading, error } = useQuery({\n    queryKey: ['/api/public/service-status', serviceNumber],\n    enabled: searchClicked && serviceNumber.length > 0,\n    retry: false,\n  });\n\n  const handleSearch = () => {\n    if (serviceNumber.trim()) {\n      setSearchClicked(true);\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  const status = serviceData?.status ? statusConfig[serviceData.status as keyof typeof statusConfig] : null;\n  const StatusIcon = status?.icon || Clock;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container max-w-2xl mx-auto px-4\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Cek Status Service</h1>\n          <p className=\"text-gray-600\">Masukkan nomor service untuk melihat status perbaikan perangkat Anda</p>\n        </div>\n\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Masukkan nomor service (contoh: SRV-20240830-001)\"\n                value={serviceNumber}\n                onChange={(e) => setServiceNumber(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                className=\"flex-1\"\n                data-testid=\"input-service-number\"\n              />\n              <Button onClick={handleSearch} disabled={!serviceNumber.trim()} data-testid=\"button-search\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Cari\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {isLoading && (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n              <p className=\"mt-2 text-gray-600\">Mencari data service...</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {error && (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Service Tidak Ditemukan</h3>\n              <p className=\"text-gray-600\">\n                Nomor service yang Anda masukkan tidak ditemukan. Pastikan nomor service benar.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {serviceData && (\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Receipt className=\"h-5 w-5\" />\n                  Detail Service\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Nomor Service</label>\n                    <p className=\"font-semibold\" data-testid=\"text-service-number\">{serviceData.serviceNumber}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Status</label>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={`${status?.color} text-white`}>\n                        <StatusIcon className=\"h-3 w-3 mr-1\" />\n                        {status?.label}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Nama Customer</label>\n                  <p className=\"font-semibold\" data-testid=\"text-customer-name\">{serviceData.customerName}</p>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Perangkat</label>\n                  <p className=\"font-semibold\" data-testid=\"text-device\">{serviceData.device}</p>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Keluhan</label>\n                  <p className=\"text-gray-900\" data-testid=\"text-problem\">{serviceData.problem}</p>\n                </div>\n\n                {serviceData.diagnosis && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Diagnosis</label>\n                    <p className=\"text-gray-900\" data-testid=\"text-diagnosis\">{serviceData.diagnosis}</p>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Tanggal Masuk</label>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-gray-400\" />\n                      <span data-testid=\"text-created-date\">\n                        {format(new Date(serviceData.createdAt), 'dd MMMM yyyy', { locale: idLocale })}\n                      </span>\n                    </div>\n                  </div>\n                  {serviceData.estimatedCompletion && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Estimasi Selesai</label>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-gray-400\" />\n                        <span data-testid=\"text-estimated-completion\">\n                          {format(new Date(serviceData.estimatedCompletion), 'dd MMMM yyyy', { locale: idLocale })}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {serviceData.completedAt && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Tanggal Selesai</label>\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      <span data-testid=\"text-completed-date\">\n                        {format(new Date(serviceData.completedAt), 'dd MMMM yyyy', { locale: idLocale })}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {serviceData.parts && serviceData.parts.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5\" />\n                    Sparepart yang Digunakan\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {serviceData.parts.map((part: any, index: number) => (\n                      <div key={index} className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-0\">\n                        <div>\n                          <p className=\"font-medium\" data-testid={`text-part-name-${index}`}>{part.name}</p>\n                          <p className=\"text-sm text-gray-500\">Qty: {part.quantity}</p>\n                        </div>\n                        <p className=\"font-semibold\" data-testid={`text-part-price-${index}`}>\n                          {formatCurrency(part.unitPrice)}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-semibold\">Total Biaya Service</span>\n                  <span className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-cost\">\n                    {formatCurrency(serviceData.totalCost)}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Action Button */}\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Button \n                  onClick={() => setShowStatusTracker(true)}\n                  className=\"flex items-center gap-2 bg-blue-500 hover:bg-blue-600 mx-auto\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                  Detail Status Proses Service\n                </Button>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Lihat tahapan detail proses perbaikan perangkat Anda\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Service Status Tracker Dialog */}\n        {serviceData && (\n          <ServiceStatusTracker\n            isOpen={showStatusTracker}\n            onClose={() => setShowStatusTracker(false)}\n            serviceNumber={serviceData.ticketNumber}\n            currentStatus={serviceData.status}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11179},"laptoppos-deployment-20250903-113337/client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, User, Edit, Trash2, Phone, Mail, MapPin } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCustomerSchema, type Customer } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst customerFormSchema = insertCustomerSchema;\n\nexport default function Customers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: customers = [], isLoading } = useQuery({\n    queryKey: [\"/api/customers\", searchQuery],\n    queryFn: async () => {\n      const url = searchQuery ? `/api/customers?search=${encodeURIComponent(searchQuery)}` : '/api/customers';\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch customers');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/customers', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setShowDialog(false);\n      setEditingCustomer(null);\n      form.reset();\n      toast({ title: \"Berhasil\", description: \"Pelanggan berhasil dibuat\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Tidak Diotorisasi\",\n          description: \"Anda telah logout. Masuk kembali...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal membuat pelanggan\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest('PUT', `/api/customers/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setShowDialog(false);\n      setEditingCustomer(null);\n      form.reset();\n      toast({ title: \"Berhasil\", description: \"Pelanggan berhasil diupdate\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Tidak Diotorisasi\",\n          description: \"Anda telah logout. Masuk kembali...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal mengupdate pelanggan\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/customers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({ title: \"Success\", description: \"Customer deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Tidak Diotorisasi\",\n          description: \"Anda telah logout. Masuk kembali...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to delete customer\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    if (editingCustomer) {\n      updateMutation.mutate({ id: editingCustomer.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (customer: Customer) => {\n    setEditingCustomer(customer);\n    form.reset({\n      name: customer.name,\n      email: customer.email || \"\",\n      phone: customer.phone || \"\",\n      address: customer.address || \"\",\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this customer?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleNew = () => {\n    setEditingCustomer(null);\n    form.reset();\n    setShowDialog(true);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Manajemen Pelanggan\" \n          breadcrumb=\"Beranda / Pelanggan\"\n          action={\n            <Button onClick={handleNew} data-testid=\"button-add-customer\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Pelanggan\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search Bar */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search customers by name, email, or phone...\"\n                    className=\"pl-10\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-customer-search\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customers Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Customers ({(customers as Customer[]).length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (customers as Customer[]).length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No customers found</p>\n                  <Button className=\"mt-4\" onClick={handleNew}>\n                    Add First Customer\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Contact Information</TableHead>\n                      <TableHead>Address</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {(customers as Customer[]).map((customer: Customer) => (\n                      <TableRow key={customer.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <User className=\"w-5 h-5 text-primary\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`customer-name-${customer.id}`}>\n                                {customer.name}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            {customer.email && (\n                              <div className=\"flex items-center text-sm\">\n                                <Mail className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`customer-email-${customer.id}`}>\n                                  {customer.email}\n                                </span>\n                              </div>\n                            )}\n                            {customer.phone && (\n                              <div className=\"flex items-center text-sm\">\n                                <Phone className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`customer-phone-${customer.id}`}>\n                                  {customer.phone}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {customer.address && (\n                            <div className=\"flex items-center text-sm\">\n                              <MapPin className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span className=\"text-muted-foreground truncate max-w-xs\" data-testid={`customer-address-${customer.id}`}>\n                                {customer.address}\n                              </span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`customer-joined-${customer.id}`}>\n                            {customer.createdAt ? new Date(customer.createdAt).toLocaleDateString('id-ID') : '-'}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(customer)}\n                              data-testid={`button-edit-customer-${customer.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(customer.id)}\n                              data-testid={`button-delete-customer-${customer.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Customer Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingCustomer ? \"Edit Customer\" : \"Add New Customer\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter customer name\" {...field} data-testid=\"input-customer-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"customer@example.com\" \n                          {...field} \n                          data-testid=\"input-customer-email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"08123456789\" \n                          {...field} \n                          data-testid=\"input-customer-phone\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Customer address\" \n                        {...field} \n                        data-testid=\"textarea-customer-address\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-3 pt-6\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowDialog(false)}\n                  data-testid=\"button-cancel-customer\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-customer\"\n                >\n                  {editingCustomer ? \"Update Customer\" : \"Create Customer\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15790},"laptoppos-deployment-20250903-113337/client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatCard from \"@/components/dashboard/stat-card\";\nimport RecentTransactions from \"@/components/dashboard/recent-transactions\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport ServiceStatus from \"@/components/dashboard/service-status\";\nimport InventoryAlerts from \"@/components/dashboard/inventory-alerts\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Tidak Diotorisasi\",\n        description: \"Anda telah logout. Masuk kembali...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return <div>Memuat...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Dasbor\" breadcrumb=\"Beranda / Dasbor\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Dashboard Stats Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <StatCard\n              title=\"Penjualan Hari Ini\"\n              value={statsLoading ? \"Memuat...\" : `Rp ${Number(stats?.todaySales || 0).toLocaleString('id-ID')}`}\n              change=\"+12% dari kemarin\"\n              icon=\"money-bill-wave\"\n              color=\"primary\"\n              data-testid=\"stat-today-sales\"\n            />\n            <StatCard\n              title=\"Service Aktif\"\n              value={statsLoading ? \"Memuat...\" : stats?.activeServices?.toString() || \"0\"}\n              change=\"5 mendesak\"\n              icon=\"tools\"\n              color=\"accent\"\n              data-testid=\"stat-active-services\"\n            />\n            <StatCard\n              title=\"Stok Menipis\"\n              value={statsLoading ? \"Memuat...\" : stats?.lowStockCount?.toString() || \"0\"}\n              change=\"Perlu perhatian\"\n              icon=\"exclamation-triangle\"\n              color=\"destructive\"\n              data-testid=\"stat-low-stock\"\n            />\n            <StatCard\n              title=\"Profit Bulanan\"\n              value={statsLoading ? \"Memuat...\" : `Rp ${Number(stats?.monthlyProfit || 0).toLocaleString('id-ID')}`}\n              change=\"+8% bulan ini\"\n              icon=\"chart-line\"\n              color=\"accent\"\n              data-testid=\"stat-monthly-profit\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            <div className=\"lg:col-span-2\">\n              <RecentTransactions />\n            </div>\n            <QuickActions />\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <ServiceStatus />\n            <InventoryAlerts />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3534},"laptoppos-deployment-20250903-113337/client/src/pages/finance-new.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, TrendingUp, TrendingDown, DollarSign, Users, Calendar, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\ninterface FinancialTransaction {\n  id: string;\n  type: 'income' | 'expense' | 'transfer';\n  category: string;\n  subcategory?: string;\n  amount: string;\n  description: string;\n  referenceType?: string;\n  reference?: string;\n  paymentMethod?: string;\n  tags?: string[];\n  status: string;\n  userId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface FinancialSummary {\n  totalIncome: string;\n  totalExpense: string;\n  netProfit: string;\n  transactionCount: number;\n  inventoryValue: string;\n  inventoryCount: number;\n  breakdown: {\n    categories: { [key: string]: { income: number; expense: number; count: number } };\n    paymentMethods: { [key: string]: number };\n    sources: { [key: string]: { amount: number; count: number } };\n    subcategories: { [key: string]: { amount: number; type: string; count: number } };\n    inventory: { [key: string]: { value: number; stock: number; avgCost: number } };\n  };\n}\n\ninterface Employee {\n  id: string;\n  employeeNumber: string;\n  name: string;\n  position: string;\n  department?: string;\n  salary: string;\n  salaryType: string;\n  status: string;\n  joinDate: string;\n  phone?: string;\n  createdAt: string;\n}\n\ninterface PayrollRecord {\n  id: string;\n  employeeId: string;\n  payrollNumber: string;\n  periodStart: string;\n  periodEnd: string;\n  baseSalary: string;\n  overtime: string;\n  bonus: string;\n  allowances: string;\n  grossPay: string;\n  taxDeduction: string;\n  socialSecurity: string;\n  healthInsurance: string;\n  otherDeductions: string;\n  netPay: string;\n  status: 'draft' | 'approved' | 'paid';\n  paidDate?: string;\n  notes?: string;\n  createdAt: string;\n}\n\nconst TRANSACTION_CATEGORIES = {\n  income: [\n    'Sales Revenue',\n    'Service Revenue', \n    'Rental Income',\n    'Investment Income',\n    'Other Income'\n  ],\n  expense: [\n    'Operational Expense',\n    'Payroll',\n    'Rent & Utilities',\n    'Marketing',\n    'Travel & Transport',\n    'Office Supplies',\n    'Technology',\n    'Professional Services',\n    'Insurance',\n    'Taxes',\n    'Other Expense'\n  ]\n};\n\nconst PAYMENT_METHODS = [\n  'cash',\n  'bank_transfer',\n  'credit_card',\n  'debit_card',\n  'e_wallet',\n  'check'\n];\n\nexport default function FinanceNew() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Transaction Form State\n  const [transactionForm, setTransactionForm] = useState({\n    type: 'income' as 'income' | 'expense' | 'transfer',\n    category: '',\n    subcategory: '',\n    amount: '',\n    description: '',\n    paymentMethod: 'cash',\n    tags: [] as string[]\n  });\n\n  // Employee Form State\n  const [employeeForm, setEmployeeForm] = useState({\n    name: '',\n    position: '',\n    department: '',\n    salary: '',\n    salaryType: 'monthly' as 'monthly' | 'weekly' | 'daily' | 'hourly',\n    joinDate: new Date().toISOString().split('T')[0],\n    phone: '',\n    bankAccount: '',\n    address: ''\n  });\n\n  // Payroll Form State\n  const [payrollForm, setPayrollForm] = useState({\n    employeeId: '',\n    periodStart: '',\n    periodEnd: '',\n    baseSalary: '',\n    overtime: '0',\n    bonus: '0',\n    allowances: '0',\n    taxDeduction: '0',\n    socialSecurity: '0',\n    healthInsurance: '0',\n    otherDeductions: '0'\n  });\n\n  // Date filters\n  const [dateFilter, setDateFilter] = useState({\n    startDate: '',\n    endDate: ''\n  });\n\n  // Dialog states\n  const [showTransactionDialog, setShowTransactionDialog] = useState(false);\n  const [showEmployeeDialog, setShowEmployeeDialog] = useState(false);\n  const [showPayrollDialog, setShowPayrollDialog] = useState(false);\n\n  // Fetch financial summary\n  const { data: summary } = useQuery<FinancialSummary>({\n    queryKey: ['/api/finance/summary', dateFilter.startDate, dateFilter.endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (dateFilter.startDate) params.append('startDate', dateFilter.startDate);\n      if (dateFilter.endDate) params.append('endDate', dateFilter.endDate);\n      return fetch(`/api/finance/summary?${params}`).then(res => res.json());\n    }\n  });\n\n  // Fetch transactions\n  const { data: transactions } = useQuery<FinancialTransaction[]>({\n    queryKey: ['/api/finance/transactions', dateFilter.startDate, dateFilter.endDate],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (dateFilter.startDate) params.append('startDate', dateFilter.startDate);\n      if (dateFilter.endDate) params.append('endDate', dateFilter.endDate);\n      return fetch(`/api/finance/transactions?${params}`).then(res => res.json());\n    }\n  });\n\n  // Fetch employees\n  const { data: employees } = useQuery<Employee[]>({\n    queryKey: ['/api/employees'],\n    queryFn: () => fetch('/api/employees').then(res => res.json())\n  });\n\n  // Fetch payroll records\n  const { data: payrolls } = useQuery<PayrollRecord[]>({\n    queryKey: ['/api/payroll'],\n    queryFn: () => fetch('/api/payroll').then(res => res.json())\n  });\n\n  // Create transaction mutation\n  const createTransactionMutation = useMutation({\n    mutationFn: async (data: typeof transactionForm) => {\n      return apiRequest('POST', '/api/finance/transactions', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Transaksi berhasil dibuat\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/summary'] });\n      setShowTransactionDialog(false);\n      setTransactionForm({\n        type: 'income',\n        category: '',\n        subcategory: '',\n        amount: '',\n        description: '',\n        paymentMethod: 'cash',\n        tags: []\n      });\n    },\n    onError: () => {\n      toast({ title: \"Gagal membuat transaksi\", variant: \"destructive\" });\n    }\n  });\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: typeof employeeForm) => {\n      return apiRequest('POST', '/api/employees', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Karyawan berhasil ditambahkan\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      setShowEmployeeDialog(false);\n      setEmployeeForm({\n        name: '',\n        position: '',\n        department: '',\n        salary: '',\n        salaryType: 'monthly',\n        joinDate: new Date().toISOString().split('T')[0],\n        phone: '',\n        bankAccount: '',\n        address: ''\n      });\n    },\n    onError: () => {\n      toast({ title: \"Gagal menambahkan karyawan\", variant: \"destructive\" });\n    }\n  });\n\n  // Create payroll mutation\n  const createPayrollMutation = useMutation({\n    mutationFn: async (data: typeof payrollForm) => {\n      return apiRequest('POST', '/api/payroll', data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Payroll berhasil dibuat\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      setShowPayrollDialog(false);\n      setPayrollForm({\n        employeeId: '',\n        periodStart: '',\n        periodEnd: '',\n        baseSalary: '',\n        overtime: '0',\n        bonus: '0',\n        allowances: '0',\n        taxDeduction: '0',\n        socialSecurity: '0',\n        healthInsurance: '0',\n        otherDeductions: '0'\n      });\n    },\n    onError: () => {\n      toast({ title: \"Gagal membuat payroll\", variant: \"destructive\" });\n    }\n  });\n\n  // Update payroll status mutation\n  const updatePayrollStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest('PUT', `/api/payroll/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({ title: \"Status payroll berhasil diupdate\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/summary'] });\n      // Invalidate all reports queries so payroll expenses appear immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/reports'] });\n    },\n    onError: () => {\n      toast({ title: \"Gagal mengupdate status payroll\", variant: \"destructive\" });\n    }\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0\n    }).format(num);\n  };\n\n  const getStatusBadge = (status: string, type?: string) => {\n    const statusConfig = {\n      'confirmed': { variant: 'default' as const, text: 'Dikonfirmasi' },\n      'pending': { variant: 'secondary' as const, text: 'Menunggu' },\n      'cancelled': { variant: 'destructive' as const, text: 'Dibatalkan' },\n      'draft': { variant: 'secondary' as const, text: 'Konsep' },\n      'approved': { variant: 'default' as const, text: 'Disetujui' },\n      'paid': { variant: 'default' as const, text: 'Dibayar' },\n      'active': { variant: 'default' as const, text: 'Aktif' },\n      'inactive': { variant: 'secondary' as const, text: 'Tidak Aktif' }\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || \n                  { variant: 'outline' as const, text: status };\n\n    return <Badge variant={config.variant}>{config.text}</Badge>;\n  };\n\n  // Helper function untuk menampilkan transaksi dengan benar (aset = positif, expense = negatif)\n  const getTransactionDisplay = (transaction: FinancialTransaction) => {\n    if (transaction.type === 'income') {\n      return {\n        sign: '+',\n        color: 'text-green-600',\n        badge: 'default',\n        label: 'Pemasukan'\n      };\n    } else {\n      // Cek apakah ini transaksi aset atau expense berdasarkan kategori dan deskripsi\n      const isAsset = \n        // Deteksi langsung berdasarkan kategori exact match\n        transaction.category === 'Cost of Goods Sold' ||\n        transaction.category === 'Inventory Purchase' ||\n        transaction.subcategory === 'Cost of Goods Sold' ||\n        transaction.subcategory === 'Inventory Purchase' ||\n        // Deteksi berdasarkan kata kunci dalam kategori/deskripsi\n        [\n          'cost of goods sold', 'inventory', 'persediaan', 'stock', 'barang',\n          'peralatan', 'equipment', 'kendaraan', 'vehicle', 'furniture', \n          'aset', 'assets', 'fixed asset', 'kas', 'cash', 'bank', 'tunai',\n          'piutang', 'receivable', 'tagihan', 'purchase'\n        ].some(keyword => \n          transaction.category?.toLowerCase().includes(keyword) || \n          transaction.subcategory?.toLowerCase().includes(keyword) || \n          transaction.description?.toLowerCase().includes(keyword)\n        );\n      \n      if (isAsset) {\n        return {\n          sign: '+',\n          color: 'text-blue-600',\n          badge: 'secondary',\n          label: 'Aset'\n        };\n      } else {\n        return {\n          sign: '-',\n          color: 'text-red-600', \n          badge: 'destructive',\n          label: 'Pengeluaran'\n        };\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Keuangan & Payroll\" breadcrumb=\"Beranda / Keuangan & Payroll\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n        <div className=\"flex gap-2\">\n          <Input\n            type=\"date\"\n            value={dateFilter.startDate}\n            onChange={(e) => setDateFilter(prev => ({ ...prev, startDate: e.target.value }))}\n            placeholder=\"Tanggal Mulai\"\n            className=\"w-40\"\n          />\n          <Input\n            type=\"date\"\n            value={dateFilter.endDate}\n            onChange={(e) => setDateFilter(prev => ({ ...prev, endDate: e.target.value }))}\n            placeholder=\"Tanggal Akhir\"\n            className=\"w-40\"\n          />\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pendapatan</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {formatCurrency(summary?.totalIncome || '0')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pengeluaran</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              {formatCurrency(summary?.totalExpense || '0')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Laba Bersih</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {formatCurrency(summary?.netProfit || '0')}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Nilai Aset Inventory</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {formatCurrency(summary?.inventoryValue || '0')}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {summary?.inventoryCount || 0} item stok\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Transaksi</CardTitle>\n            <Calendar className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {summary?.transactionCount || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {summary?.breakdown?.categories ? (() => {\n                const incomeCount = Object.values(summary.breakdown.categories)\n                  .filter(cat => cat.income > 0)\n                  .reduce((sum, cat) => sum + cat.count, 0);\n                const expenseCount = Object.values(summary.breakdown.categories)\n                  .filter(cat => cat.expense > 0)\n                  .reduce((sum, cat) => sum + cat.count, 0);\n                return `Income: ${incomeCount} | Expense: ${expenseCount}`;\n              })() : 'Income: 0 | Expense: 0'}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Finance Calculation Explanation */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Penjelasan Perhitungan Keuangan</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-green-600\">Sumber Pemasukan:</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Ongkos tenaga kerja service</li>\n                <li>• Penjualan spare parts (harga jual)</li>\n                <li>• Transaksi penjualan langsung</li>\n                <li>• Pendapatan lain-lain</li>\n              </ul>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium text-red-600\">Sumber Pengeluaran:</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Biaya modal spare parts (harga beli)</li>\n                <li>• Gaji karyawan (payroll)</li>\n                <li>• Biaya operasional</li>\n                <li>• Pengeluaran lain-lain</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"mt-4 space-y-3\">\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Catatan:</strong> Saat service ticket diselesaikan, sistem otomatis mencatat 3 transaksi: \n                biaya modal parts sebagai pengeluaran, penjualan parts sebagai pemasukan, dan ongkos kerja sebagai pemasukan.\n              </p>\n            </div>\n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <p className=\"text-sm text-green-800\">\n                <strong>Data Terkini:</strong> Total Pendapatan mencakup semua pemasukan dari penjualan produk (POS) dan layanan service. \n                Saat ini ada {summary?.breakdown?.sources ? \n                  Object.values(summary.breakdown.sources).reduce((sum, source) => sum + source.count, 0) : 0} transaksi pemasukan \n                dengan total {formatCurrency(summary?.totalIncome || '0')}.\n              </p>\n            </div>\n            <div className=\"p-3 bg-orange-50 rounded-lg\">\n              <p className=\"text-sm text-orange-800\">\n                <strong>Nilai Aset Inventory:</strong> Dihitung berdasarkan jumlah stok × harga beli untuk setiap produk aktif. \n                Total ini menunjukkan berapa nilai modal yang tertanam dalam persediaan barang.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Breakdown Detail */}\n      {summary?.breakdown && (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {/* Categories Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Breakdown per Kategori</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(summary.breakdown.categories).map(([category, data]) => (\n                  <div key={category} className=\"flex flex-col space-y-1\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">{category}</span>\n                      <span className=\"text-xs text-muted-foreground\">({data.count} transaksi)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"text-xs text-green-600\">\n                        +{formatCurrency(data.income.toString())}\n                      </div>\n                      <div className=\"text-xs text-red-600\">\n                        -{formatCurrency(data.expense.toString())}\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Bersih: {formatCurrency((data.income - data.expense).toString())}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Sources Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Breakdown per Sumber</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(summary.breakdown.sources).map(([source, data]) => (\n                  <div key={source} className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium\">\n                        {source === 'service' ? 'Service/Perbaikan' :\n                         source === 'service_labor' ? 'Ongkos Kerja' :\n                         source === 'service_parts_cost' ? 'Biaya Parts' :\n                         source === 'service_parts_revenue' ? 'Penjualan Parts' :\n                         source === 'payroll' ? 'Gaji Karyawan' : source}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.count} transaksi\n                      </span>\n                    </div>\n                    <div className=\"text-sm font-medium\">\n                      {formatCurrency(data.amount.toString())}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Subcategories Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Breakdown per Subkategori</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(summary.breakdown.subcategories).map(([subcategory, data]) => (\n                  <div key={subcategory} className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium\">{subcategory}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.count} transaksi\n                      </span>\n                    </div>\n                    <div className=\"flex flex-col items-end\">\n                      <div className={`text-sm font-medium ${\n                        data.type === 'income' ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {data.type === 'income' ? '+' : '-'}{formatCurrency(data.amount.toString())}\n                      </div>\n                      <Badge variant={data.type === 'income' ? 'default' : 'destructive'} className=\"text-xs\">\n                        {data.type === 'income' ? 'Pemasukan' : 'Pengeluaran'}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Inventory Assets Breakdown */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Aset Inventory Detail</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {Object.entries(summary.breakdown.inventory).map(([productName, data]) => (\n                  <div key={productName} className=\"flex justify-between items-center\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm font-medium truncate max-w-32\" title={productName}>\n                        {productName}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.stock} stok • {formatCurrency(data.avgCost.toString())} avg\n                      </span>\n                    </div>\n                    <div className=\"text-sm font-medium text-orange-600\">\n                      {formatCurrency(data.value.toString())}\n                    </div>\n                  </div>\n                ))}\n                {Object.keys(summary.breakdown.inventory).length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    Tidak ada inventory dengan stok\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"transactions\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"transactions\">Transaksi Keuangan</TabsTrigger>\n          <TabsTrigger value=\"employees\">Karyawan</TabsTrigger>\n          <TabsTrigger value=\"payroll\">Payroll</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"transactions\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Transaksi Keuangan</h2>\n            <Dialog open={showTransactionDialog} onOpenChange={setShowTransactionDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Tambah Transaksi\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Tambah Transaksi Keuangan</DialogTitle>\n                  <DialogDescription>\n                    Buat transaksi pemasukan atau pengeluaran baru\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"type\">Tipe Transaksi</Label>\n                    <Select\n                      value={transactionForm.type}\n                      onValueChange={(value: 'income' | 'expense' | 'transfer') => \n                        setTransactionForm(prev => ({ ...prev, type: value, category: '' }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"income\">Pemasukan</SelectItem>\n                        <SelectItem value=\"expense\">Pengeluaran</SelectItem>\n                        <SelectItem value=\"transfer\">Transfer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"category\">Kategori</Label>\n                    <Select\n                      value={transactionForm.category}\n                      onValueChange={(value) => \n                        setTransactionForm(prev => ({ ...prev, category: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Pilih kategori\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {TRANSACTION_CATEGORIES[transactionForm.type]?.map((cat) => (\n                          <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"amount\">Jumlah</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      value={transactionForm.amount}\n                      onChange={(e) => \n                        setTransactionForm(prev => ({ ...prev, amount: e.target.value }))\n                      }\n                      placeholder=\"0\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Deskripsi</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={transactionForm.description}\n                      onChange={(e) => \n                        setTransactionForm(prev => ({ ...prev, description: e.target.value }))\n                      }\n                      placeholder=\"Deskripsi transaksi\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"paymentMethod\">Metode Pembayaran</Label>\n                    <Select\n                      value={transactionForm.paymentMethod}\n                      onValueChange={(value) => \n                        setTransactionForm(prev => ({ ...prev, paymentMethod: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {PAYMENT_METHODS.map((method) => (\n                          <SelectItem key={method} value={method}>\n                            {method.replace('_', ' ').toUpperCase()}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowTransactionDialog(false)}\n                      className=\"flex-1\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      onClick={() => createTransactionMutation.mutate(transactionForm)}\n                      disabled={createTransactionMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {createTransactionMutation.isPending ? 'Menyimpan...' : 'Simpan'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Tanggal</TableHead>\n                    <TableHead>Tipe</TableHead>\n                    <TableHead>Kategori</TableHead>\n                    <TableHead>Deskripsi</TableHead>\n                    <TableHead>Jumlah</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {Array.isArray(transactions) ? transactions.map((transaction) => (\n                    <TableRow key={transaction.id}>\n                      <TableCell>\n                        {format(new Date(transaction.createdAt), 'dd/MM/yyyy')}\n                      </TableCell>\n                      <TableCell>\n                        {(() => {\n                          const display = getTransactionDisplay(transaction);\n                          return (\n                            <Badge variant={display.badge as any}>\n                              {display.label}\n                            </Badge>\n                          );\n                        })()}\n                        {transaction.paymentMethod && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            {transaction.paymentMethod === 'cash' ? 'Tunai' :\n                             transaction.paymentMethod === 'transfer' ? 'Transfer' :\n                             transaction.paymentMethod === 'bank_transfer' ? 'Transfer Bank' :\n                             transaction.paymentMethod === 'inventory' ? 'Stok/Persediaan' : transaction.paymentMethod}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">{transaction.category}</div>\n                        {transaction.subcategory && (\n                          <div className=\"text-sm text-muted-foreground\">{transaction.subcategory}</div>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"truncate font-medium\">{transaction.description}</div>\n                        {transaction.referenceType && (\n                          <div className=\"text-xs text-blue-600 mt-1\">\n                            Dari: {transaction.referenceType === 'service' ? 'Service Ticket' :\n                                  transaction.referenceType === 'service_labor' ? 'Ongkos Kerja Service' :\n                                  transaction.referenceType === 'service_parts_cost' ? 'Biaya Parts Service' :\n                                  transaction.referenceType === 'service_parts_revenue' ? 'Penjualan Parts Service' :\n                                  transaction.referenceType === 'payroll' ? 'Payroll' : transaction.referenceType}\n                            {transaction.reference && ` (${transaction.reference.slice(0, 8)}...)`}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell className={getTransactionDisplay(transaction).color}>\n                        {getTransactionDisplay(transaction).sign}{formatCurrency(transaction.amount)}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(transaction.status)}\n                      </TableCell>\n                    </TableRow>\n                  )) : (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        Tidak ada transaksi\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"employees\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Data Karyawan</h2>\n            <Dialog open={showEmployeeDialog} onOpenChange={setShowEmployeeDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Tambah Karyawan\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Tambah Karyawan Baru</DialogTitle>\n                  <DialogDescription>\n                    Tambahkan karyawan baru ke sistem payroll\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Nama Lengkap</Label>\n                    <Input\n                      id=\"name\"\n                      value={employeeForm.name}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, name: e.target.value }))\n                      }\n                      placeholder=\"Nama lengkap karyawan\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"position\">Posisi</Label>\n                    <Input\n                      id=\"position\"\n                      value={employeeForm.position}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, position: e.target.value }))\n                      }\n                      placeholder=\"Posisi/jabatan\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"department\">Departemen</Label>\n                    <Input\n                      id=\"department\"\n                      value={employeeForm.department}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, department: e.target.value }))\n                      }\n                      placeholder=\"Departemen\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"salary\">Gaji</Label>\n                    <Input\n                      id=\"salary\"\n                      type=\"number\"\n                      value={employeeForm.salary}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, salary: e.target.value }))\n                      }\n                      placeholder=\"Gaji pokok\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"salaryType\">Tipe Gaji</Label>\n                    <Select\n                      value={employeeForm.salaryType}\n                      onValueChange={(value: 'monthly' | 'weekly' | 'daily' | 'hourly') => \n                        setEmployeeForm(prev => ({ ...prev, salaryType: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"monthly\">Bulanan</SelectItem>\n                        <SelectItem value=\"weekly\">Mingguan</SelectItem>\n                        <SelectItem value=\"daily\">Harian</SelectItem>\n                        <SelectItem value=\"hourly\">Per Jam</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"joinDate\">Tanggal Bergabung</Label>\n                    <Input\n                      id=\"joinDate\"\n                      type=\"date\"\n                      value={employeeForm.joinDate}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, joinDate: e.target.value }))\n                      }\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phone\">Nomor Telepon</Label>\n                    <Input\n                      id=\"phone\"\n                      value={employeeForm.phone}\n                      onChange={(e) => \n                        setEmployeeForm(prev => ({ ...prev, phone: e.target.value }))\n                      }\n                      placeholder=\"Nomor telepon\"\n                    />\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowEmployeeDialog(false)}\n                      className=\"flex-1\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      onClick={() => createEmployeeMutation.mutate(employeeForm)}\n                      disabled={createEmployeeMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {createEmployeeMutation.isPending ? 'Menyimpan...' : 'Simpan'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nomor Karyawan</TableHead>\n                    <TableHead>Nama</TableHead>\n                    <TableHead>Posisi</TableHead>\n                    <TableHead>Departemen</TableHead>\n                    <TableHead>Gaji</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Bergabung</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {employees?.map((employee) => (\n                    <TableRow key={employee.id}>\n                      <TableCell className=\"font-mono\">{employee.employeeNumber}</TableCell>\n                      <TableCell className=\"font-medium\">{employee.name}</TableCell>\n                      <TableCell>{employee.position}</TableCell>\n                      <TableCell>{employee.department || '-'}</TableCell>\n                      <TableCell>{formatCurrency(employee.salary)}</TableCell>\n                      <TableCell>{getStatusBadge(employee.status)}</TableCell>\n                      <TableCell>\n                        {format(new Date(employee.joinDate), 'dd/MM/yyyy')}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payroll\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Manajemen Gaji</h2>\n            <Dialog open={showPayrollDialog} onOpenChange={setShowPayrollDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Buat Payroll\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Buat Payroll Baru</DialogTitle>\n                  <DialogDescription>\n                    Buat payroll untuk periode tertentu\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"employeeId\">Karyawan</Label>\n                    <Select\n                      value={payrollForm.employeeId}\n                      onValueChange={(value) => \n                        setPayrollForm(prev => ({ ...prev, employeeId: value }))\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Pilih karyawan\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {employees?.map((employee) => (\n                          <SelectItem key={employee.id} value={employee.id}>\n                            {employee.name} - {employee.position}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"periodStart\">Periode Mulai</Label>\n                      <Input\n                        id=\"periodStart\"\n                        type=\"date\"\n                        value={payrollForm.periodStart}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, periodStart: e.target.value }))\n                        }\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"periodEnd\">Periode Akhir</Label>\n                      <Input\n                        id=\"periodEnd\"\n                        type=\"date\"\n                        value={payrollForm.periodEnd}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, periodEnd: e.target.value }))\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"baseSalary\">Gaji Pokok</Label>\n                    <Input\n                      id=\"baseSalary\"\n                      type=\"number\"\n                      value={payrollForm.baseSalary}\n                      onChange={(e) => \n                        setPayrollForm(prev => ({ ...prev, baseSalary: e.target.value }))\n                      }\n                      placeholder=\"0\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"overtime\">Lembur</Label>\n                      <Input\n                        id=\"overtime\"\n                        type=\"number\"\n                        value={payrollForm.overtime}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, overtime: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"bonus\">Bonus</Label>\n                      <Input\n                        id=\"bonus\"\n                        type=\"number\"\n                        value={payrollForm.bonus}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, bonus: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"allowances\">Tunjangan</Label>\n                    <Input\n                      id=\"allowances\"\n                      type=\"number\"\n                      value={payrollForm.allowances}\n                      onChange={(e) => \n                        setPayrollForm(prev => ({ ...prev, allowances: e.target.value }))\n                      }\n                      placeholder=\"0\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"taxDeduction\">Potongan Pajak</Label>\n                      <Input\n                        id=\"taxDeduction\"\n                        type=\"number\"\n                        value={payrollForm.taxDeduction}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, taxDeduction: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"socialSecurity\">BPJS</Label>\n                      <Input\n                        id=\"socialSecurity\"\n                        type=\"number\"\n                        value={payrollForm.socialSecurity}\n                        onChange={(e) => \n                          setPayrollForm(prev => ({ ...prev, socialSecurity: e.target.value }))\n                        }\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowPayrollDialog(false)}\n                      className=\"flex-1\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      onClick={() => createPayrollMutation.mutate(payrollForm)}\n                      disabled={createPayrollMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      {createPayrollMutation.isPending ? 'Menyimpan...' : 'Simpan'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nomor Payroll</TableHead>\n                    <TableHead>Karyawan</TableHead>\n                    <TableHead>Periode</TableHead>\n                    <TableHead>Gaji Kotor</TableHead>\n                    <TableHead>Potongan</TableHead>\n                    <TableHead>Gaji Bersih</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {payrolls?.map((payroll) => (\n                    <TableRow key={payroll.id}>\n                      <TableCell className=\"font-mono\">{payroll.payrollNumber}</TableCell>\n                      <TableCell>\n                        {employees?.find(e => e.id === payroll.employeeId)?.name || 'Tidak Diketahui'}\n                      </TableCell>\n                      <TableCell>\n                        {format(new Date(payroll.periodStart), 'dd/MM')} - {format(new Date(payroll.periodEnd), 'dd/MM/yyyy')}\n                      </TableCell>\n                      <TableCell>{formatCurrency(payroll.grossPay)}</TableCell>\n                      <TableCell>\n                        {formatCurrency(\n                          (Number(payroll.taxDeduction || 0) + \n                           Number(payroll.socialSecurity || 0) + \n                           Number(payroll.healthInsurance || 0) + \n                           Number(payroll.otherDeductions || 0)).toString()\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-semibold\">\n                        {formatCurrency(payroll.netPay)}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(payroll.status)}</TableCell>\n                      <TableCell>\n                        {payroll.status === 'draft' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => updatePayrollStatusMutation.mutate({\n                              id: payroll.id,\n                              status: 'approved'\n                            })}\n                          >\n                            Setujui\n                          </Button>\n                        )}\n                        {payroll.status === 'approved' && (\n                          <Button\n                            size=\"sm\"\n                            onClick={() => updatePayrollStatusMutation.mutate({\n                              id: payroll.id,\n                              status: 'paid'\n                            })}\n                          >\n                            Bayar\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":50987},"laptoppos-deployment-20250903-113337/client/src/pages/financial.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, CreditCard, Users, TrendingUp } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Financial() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Auto redirect to new finance system after 3 seconds\n    const timer = setTimeout(() => {\n      setLocation('/finance-new');\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, [setLocation]);\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        <main className=\"flex-1 overflow-x-hidden overflow-y-auto bg-background p-6\">\n          <div className=\"container mx-auto\">\n            <div className=\"max-w-2xl mx-auto text-center space-y-8\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-4xl font-bold text-foreground\">Sistem Keuangan Terbaru</h1>\n                <p className=\"text-xl text-muted-foreground\">\n                  Selamat datang di sistem keuangan dan payroll yang telah diperbarui\n                </p>\n              </div>\n\n              <div className=\"grid gap-6 md:grid-cols-3\">\n                <Card className=\"p-6\">\n                  <CardHeader className=\"space-y-1 p-0\">\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto\">\n                      <CreditCard className=\"w-6 h-6 text-blue-600\" />\n                    </div>\n                    <CardTitle className=\"text-center\">Transaksi Keuangan</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0 pt-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Kelola pemasukan dan pengeluaran dengan sistem yang lebih canggih\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <CardHeader className=\"space-y-1 p-0\">\n                    <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto\">\n                      <Users className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <CardTitle className=\"text-center\">Manajemen Karyawan</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0 pt-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Kelola data karyawan dan sistem payroll terintegrasi\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <CardHeader className=\"space-y-1 p-0\">\n                    <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto\">\n                      <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <CardTitle className=\"text-center\">Laporan & Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0 pt-4\">\n                    <p className=\"text-sm text-muted-foreground text-center\">\n                      Dashboard lengkap dengan analisis keuangan mendalam\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <p className=\"text-blue-800 text-sm\">\n                    <strong>Sistem telah diperbarui!</strong> Anda akan dialihkan ke sistem keuangan baru dalam beberapa detik...\n                  </p>\n                </div>\n\n                <Button \n                  onClick={() => setLocation('/finance-new')}\n                  size=\"lg\"\n                  className=\"w-full max-w-md\"\n                >\n                  Buka Sistem Keuangan Baru\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </div>\n\n              <div className=\"text-sm text-muted-foreground\">\n                <p>Sistem keuangan lama akan segera dihentikan. Silakan gunakan sistem baru untuk pengalaman yang lebih baik.</p>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":4588},"laptoppos-deployment-20250903-113337/client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Search, Package, AlertTriangle, History, TrendingUp, DollarSign, Plus, Tag } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { insertProductSchema, insertCategorySchema } from \"@shared/schema\";\n\nconst pricingSchema = z.object({\n  sellingPrice: z.string().min(1, \"Harga jual harus diisi\"),\n  marginPercent: z.string().optional(),\n});\n\ntype PricingFormData = z.infer<typeof pricingSchema>;\ntype ProductFormData = z.infer<typeof insertProductSchema>;\ntype CategoryFormData = z.infer<typeof insertCategorySchema>;\n\n// Add Category Form Component\nfunction AddCategoryForm({ onSuccess }: { onSuccess: () => void }) {\n  const { toast } = useToast();\n  const form = useForm<CategoryFormData>({\n    resolver: zodResolver(insertCategorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const addCategoryMutation = useMutation({\n    mutationFn: async (data: CategoryFormData) => {\n      const response = await fetch('/api/categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to add category');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({ title: \"Berhasil\", description: \"Kategori berhasil ditambahkan!\" });\n      form.reset();\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Gagal menambah kategori\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: CategoryFormData) => {\n    addCategoryMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nama Kategori *</FormLabel>\n              <FormControl>\n                <Input {...field} placeholder=\"Masukkan nama kategori\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Deskripsi</FormLabel>\n              <FormControl>\n                <Textarea {...field} value={field.value || \"\"} placeholder=\"Deskripsi kategori (opsional)\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"submit\" \n            disabled={addCategoryMutation.isPending}\n            data-testid=\"button-add-category-submit\"\n          >\n            {addCategoryMutation.isPending ? \"Menambah...\" : \"Tambah Kategori\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\n// Add Product Form Component  \nfunction AddProductForm({ onSuccess }: { onSuccess: () => void }) {\n  const { toast } = useToast();\n  \n  // Get categories for dropdown\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n  \n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      categoryId: undefined,\n      brand: \"\",\n      model: \"\",\n      unit: \"pcs\",\n      specifications: \"\",\n      sellingPrice: \"0\",\n      minStock: 5,\n      maxStock: 100,\n    },\n  });\n\n  const addProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      const response = await fetch('/api/products', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to add product');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Success\", description: \"Produk berhasil ditambahkan!\" });\n      form.reset();\n      onSuccess();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Gagal menambah produk\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: ProductFormData) => {\n    addProductMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nama Produk *</FormLabel>\n                <FormControl>\n                  <Input {...field} placeholder=\"Masukkan nama produk\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"categoryId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Kategori</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Pilih kategori\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {(categories as any[]).map((category: any) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Deskripsi</FormLabel>\n              <FormControl>\n                <Textarea {...field} value={field.value || \"\"} placeholder=\"Deskripsi produk\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"brand\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Brand</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} placeholder=\"Brand produk\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"model\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Model</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} placeholder=\"Model produk\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"unit\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Unit</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value || \"pcs\"}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"pcs\">Pcs</SelectItem>\n                    <SelectItem value=\"box\">Box</SelectItem>\n                    <SelectItem value=\"set\">Set</SelectItem>\n                    <SelectItem value=\"meter\">Meter</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"sellingPrice\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Harga Jual</FormLabel>\n                <FormControl>\n                  <Input {...field} value={field.value || \"\"} type=\"number\" placeholder=\"0\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"minStock\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Min Stock</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"number\" placeholder=\"5\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"maxStock\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Max Stock</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"number\" placeholder=\"100\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"submit\" \n            disabled={addProductMutation.isPending}\n            data-testid=\"button-add-product-submit\"\n          >\n            {addProductMutation.isPending ? \"Adding...\" : \"Tambah Produk\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nfunction PricingEditForm({ product, onSuccess }: { product: any; onSuccess: () => void }) {\n  const form = useForm<PricingFormData>({\n    resolver: zodResolver(pricingSchema),\n    defaultValues: {\n      sellingPrice: product.sellingPrice?.toString() || \"\",\n      marginPercent: \"\",\n    },\n  });\n\n  const updatePricingMutation = useMutation({\n    mutationFn: async (data: { sellingPrice: string }) => {\n      const response = await fetch(`/api/products/${product.id}/pricing`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ sellingPrice: data.sellingPrice }),\n      });\n      if (!response.ok) throw new Error('Failed to update pricing');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      onSuccess();\n    },\n  });\n\n  const onSubmit = (data: PricingFormData) => {\n    updatePricingMutation.mutate({ sellingPrice: data.sellingPrice });\n  };\n\n  const hpp = Number(product.averageCost || 0);\n  const currentSellingPrice = form.watch(\"sellingPrice\");\n  const calculatedMargin = hpp > 0 && currentSellingPrice ? \n    ((Number(currentSellingPrice) - hpp) / hpp * 100).toFixed(1) : \"0\";\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n          <div>\n            <p className=\"text-sm font-medium\">HPP Saat Ini:</p>\n            <p className=\"text-lg font-bold text-blue-600\">Rp {hpp.toLocaleString('id-ID')}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium\">Margin Terhitung:</p>\n            <p className=\"text-lg font-bold text-green-600\">{calculatedMargin}%</p>\n          </div>\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"sellingPrice\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Harga Jual</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Masukkan harga jual\" \n                  type=\"number\"\n                  step=\"0.01\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button \n            type=\"submit\" \n            disabled={updatePricingMutation.isPending}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {updatePricingMutation.isPending ? \"Menyimpan...\" : \"Update Harga\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default function Inventory() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  // Products with stock info\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", searchQuery],\n    queryFn: async () => {\n      const url = searchQuery ? `/api/products?search=${encodeURIComponent(searchQuery)}` : '/api/products';\n      const response = await fetch(url, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Stock movements for tracking\n  const { data: stockMovementsData } = useQuery({\n    queryKey: [\"/api/reports/stock-movements\"],\n    retry: false,\n  });\n  const stockMovements = stockMovementsData?.movements || [];\n\n  // Purchase orders untuk show incoming stock\n  const { data: purchaseOrders = [] } = useQuery({\n    queryKey: [\"/api/purchase-orders\"],\n    retry: false,\n  });\n\n  const getStockStatus = (product: any) => {\n    const stock = product.stock || 0;\n    const minStock = product.minStock || 5;\n    \n    if (stock <= 0) {\n      return { text: \"Out of Stock\", variant: \"destructive\" as const, color: \"text-red-600\" };\n    }\n    if (stock <= minStock) {\n      return { text: \"Low Stock\", variant: \"secondary\" as const, color: \"text-orange-600\" };\n    }\n    return { text: \"In Stock\", variant: \"default\" as const, color: \"text-green-600\" };\n  };\n\n  const filteredProducts = products.filter((product: any) =>\n    product.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.sku?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const lowStockProducts = products.filter((product: any) => {\n    const stock = product.stock || 0;\n    const minStock = product.minStock || 5;\n    return stock <= minStock;\n  });\n\n  const incomingStock = (purchaseOrders as any[]).filter((po: any) => \n    po.status === 'confirmed' || po.status === 'partial_received'\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Inventory Management\" \n          breadcrumb=\"Home / Inventory\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products</TabsTrigger>\n              <TabsTrigger value=\"pricing\" data-testid=\"tab-pricing\">HPP & Pricing</TabsTrigger>\n              <TabsTrigger value=\"movements\" data-testid=\"tab-movements\">Stock Movements</TabsTrigger>\n              <TabsTrigger value=\"incoming\" data-testid=\"tab-incoming\">Incoming Stock</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {/* Total Products */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                    <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{products.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Active products in inventory\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Low Stock Alerts */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Low Stock Alerts</CardTitle>\n                    <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">{lowStockProducts.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Products need restocking\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {/* Incoming Stock */}\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Incoming Orders</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-600\">{incomingStock.length}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      POs ready for receiving\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Low Stock Products */}\n              {lowStockProducts.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-red-600\">\n                      <AlertTriangle className=\"w-5 h-5 mr-2\" />\n                      Low Stock Products\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Product</TableHead>\n                          <TableHead className=\"text-right\">Current Stock</TableHead>\n                          <TableHead className=\"text-right\">Min Stock</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {lowStockProducts.map((product: any) => {\n                          const stockStatus = getStockStatus(product);\n                          return (\n                            <TableRow key={product.id}>\n                              <TableCell className=\"font-medium\">\n                                {product.name}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <span className={stockStatus.color}>\n                                  {product.stock || 0}\n                                </span>\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                {product.minStock || 5}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={stockStatus.variant}>\n                                  {stockStatus.text}\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Products Tab */}\n            <TabsContent value=\"products\" className=\"space-y-6\">\n              {/* Search Bar with Action Buttons */}\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex space-x-4\">\n                    <div className=\"flex-1 relative\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        placeholder=\"Search products by name or SKU...\"\n                        className=\"pl-10\"\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        data-testid=\"input-product-search\"\n                      />\n                    </div>\n                    \n                    {/* Action Buttons */}\n                    <div className=\"flex space-x-2\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" data-testid=\"button-add-category\">\n                            <Tag className=\"w-4 h-4 mr-2\" />\n                            Add Category\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[425px]\">\n                          <DialogHeader>\n                            <DialogTitle>Tambah Kategori Baru</DialogTitle>\n                          </DialogHeader>\n                          <AddCategoryForm onSuccess={() => {\n                            // Dialog akan tertutup otomatis karena form reset\n                          }} />\n                        </DialogContent>\n                      </Dialog>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button data-testid=\"button-add-product\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Product\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Tambah Produk Baru</DialogTitle>\n                          </DialogHeader>\n                          <AddProductForm onSuccess={() => {\n                            // Dialog akan tertutup otomatis karena form reset\n                          }} />\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Products Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Products Inventory ({filteredProducts.length})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {productsLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(5)].map((_, i) => (\n                        <div key={i} className=\"h-12 bg-muted rounded animate-pulse\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Product Name</TableHead>\n                          <TableHead>SKU</TableHead>\n                          <TableHead className=\"text-right\">Current Stock</TableHead>\n                          <TableHead className=\"text-right\">Min Stock</TableHead>\n                          <TableHead className=\"text-right\">HPP (Harga Pokok)</TableHead>\n                          <TableHead className=\"text-right\">Harga Jual</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredProducts.map((product: any) => {\n                          const stockStatus = getStockStatus(product);\n                          \n                          return (\n                            <TableRow key={product.id}>\n                              <TableCell>\n                                <div>\n                                  <p className=\"font-medium\" data-testid={`product-name-${product.id}`}>\n                                    {product.name}\n                                  </p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {product.description}\n                                  </p>\n                                </div>\n                              </TableCell>\n                              <TableCell data-testid={`product-sku-${product.id}`}>\n                                {product.sku || \"-\"}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <span \n                                  className={`font-bold text-lg ${stockStatus.color}`}\n                                  data-testid={`product-stock-${product.id}`}\n                                >\n                                  {product.stock || 0}\n                                </span>\n                              </TableCell>\n                              <TableCell className=\"text-right text-muted-foreground\">\n                                {product.minStock || 5}\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                <div className=\"space-y-1\">\n                                  <div className=\"font-medium\">Rp {Number(product.averageCost || 0).toLocaleString('id-ID')}</div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    Last: Rp {Number(product.lastPurchasePrice || 0).toLocaleString('id-ID')}\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell className=\"text-right\">\n                                Rp {Number(product.sellingPrice || 0).toLocaleString('id-ID')}\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={stockStatus.variant}>\n                                  {stockStatus.text}\n                                </Badge>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* HPP & Pricing Management Tab */}\n            <TabsContent value=\"pricing\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <DollarSign className=\"w-5 h-5 mr-2\" />\n                    HPP & Pricing Management\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Manage Harga Pokok Penjualan (Cost of Goods Sold) and selling prices\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Product</TableHead>\n                        <TableHead className=\"text-right\">Stock</TableHead>\n                        <TableHead className=\"text-right\">Last Purchase Price</TableHead>\n                        <TableHead className=\"text-right\">HPP (Harga Pokok)</TableHead>\n                        <TableHead className=\"text-right\">Harga Jual</TableHead>\n                        <TableHead className=\"text-right\">Margin %</TableHead>\n                        <TableHead className=\"text-right\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredProducts.map((product: any) => {\n                        const hpp = Number(product.averageCost || 0);\n                        const sellingPrice = Number(product.sellingPrice || 0);\n                        const marginPercent = hpp > 0 ? ((sellingPrice - hpp) / hpp * 100).toFixed(1) : 0;\n                        \n                        return (\n                          <TableRow key={product.id}>\n                            <TableCell>\n                              <div>\n                                <p className=\"font-medium\">{product.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">{product.sku}</p>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Badge variant=\"outline\">{product.stock || 0}</Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"text-sm\">\n                                Rp {Number(product.lastPurchasePrice || 0).toLocaleString('id-ID')}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"font-medium text-blue-600\">\n                                Rp {hpp.toLocaleString('id-ID')}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <span className=\"font-medium text-green-600\">\n                                Rp {sellingPrice.toLocaleString('id-ID')}\n                              </span>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Badge variant={Number(marginPercent) > 20 ? \"default\" : \"secondary\"}>\n                                {marginPercent}%\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    data-testid={`edit-pricing-${product.id}`}\n                                  >\n                                    Edit\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"sm:max-w-[425px]\">\n                                  <DialogHeader>\n                                    <DialogTitle>Edit Pricing - {product.name}</DialogTitle>\n                                  </DialogHeader>\n                                  <PricingEditForm \n                                    product={product} \n                                    onSuccess={() => {\n                                      toast({ title: \"Pricing berhasil diupdate!\" });\n                                    }} \n                                  />\n                                </DialogContent>\n                              </Dialog>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n              \n              {/* HPP Calculation Info */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Info Perhitungan HPP</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">HPP (Harga Pokok Penjualan)</h4>\n                      <p className=\"text-blue-600 dark:text-blue-400\">\n                        Dihitung dari rata-rata tertimbang harga pembelian dari waktu ke waktu\n                      </p>\n                    </div>\n                    <div className=\"bg-green-50 dark:bg-green-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-green-700 dark:text-green-300\">Harga Jual</h4>\n                      <p className=\"text-green-600 dark:text-green-400\">\n                        Ditentukan oleh admin berdasarkan riset pasar dan target margin\n                      </p>\n                    </div>\n                    <div className=\"bg-amber-50 dark:bg-amber-950 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-amber-700 dark:text-amber-300\">Margin %</h4>\n                      <p className=\"text-amber-600 dark:text-amber-400\">\n                        Rumus: (Harga Jual - HPP) / HPP × 100%\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Stock Movements Tab */}\n            <TabsContent value=\"movements\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <History className=\"w-5 h-5 mr-2\" />\n                    Riwayat Pergerakan Stok\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Tanggal</TableHead>\n                        <TableHead>Produk</TableHead>\n                        <TableHead>Jenis</TableHead>\n                        <TableHead className=\"text-right\">Jumlah</TableHead>\n                        <TableHead>Referensi</TableHead>\n                        <TableHead>Catatan</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {stockMovements.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                            No stock movements recorded yet\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        stockMovements.slice(0, 20).map((movement: any) => (\n                          <TableRow key={movement.id}>\n                            <TableCell className=\"text-sm\">\n                              {new Date(movement.createdAt).toLocaleDateString('id-ID')}\n                            </TableCell>\n                            <TableCell className=\"font-medium\">\n                              {movement.productName || movement.productId}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={movement.movementType === 'in' ? 'default' : 'secondary'}>\n                                {movement.movementType === 'in' ? 'IN' : 'OUT'}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right font-medium\">\n                              {movement.movementType === 'in' ? '+' : '-'}{movement.quantity}\n                            </TableCell>\n                            <TableCell className=\"text-sm\">\n                              {movement.referenceType === 'purchase' ? 'Purchase Order' : movement.referenceType}\n                            </TableCell>\n                            <TableCell className=\"text-sm text-muted-foreground\">\n                              {movement.notes}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Incoming Stock Tab */}\n            <TabsContent value=\"incoming\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2 text-blue-600\" />\n                    Incoming Stock from Purchase Orders\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>PO Number</TableHead>\n                        <TableHead>Supplier</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead className=\"text-right\">Items</TableHead>\n                        <TableHead className=\"text-right\">Total Value</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {incomingStock.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                            No incoming stock from purchase orders\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        incomingStock.map((po: any) => (\n                          <TableRow key={po.id}>\n                            <TableCell className=\"font-medium\">\n                              {po.poNumber}\n                            </TableCell>\n                            <TableCell>\n                              {po.supplierName || po.supplierId}\n                            </TableCell>\n                            <TableCell className=\"text-sm\">\n                              {new Date(po.orderDate).toLocaleDateString('id-ID')}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={\n                                po.status === 'confirmed' ? 'default' : \n                                po.status === 'partial_received' ? 'secondary' : 'outline'\n                              }>\n                                {po.status === 'confirmed' ? 'Ready to Receive' :\n                                 po.status === 'partial_received' ? 'Partially Received' : po.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              {po.itemCount || 0} items\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              Rp {Number(po.totalAmount || 0).toLocaleString('id-ID')}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":40762},"laptoppos-deployment-20250903-113337/client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Laptop, Wrench, BarChart3, Package } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Landing() {\n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-landing'], // Unique key\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n  \n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center\">\n              <Laptop className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">{(storeConfig as any)?.name || 'LaptopPOS'}</h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Complete POS System for Laptop Sales & Service Management\n          </p>\n          <Button \n            onClick={handleLogin} \n            size=\"lg\" \n            className=\"px-8 py-3 text-lg\"\n            data-testid=\"button-login\"\n          >\n            Login to Continue\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <CardTitle className=\"text-lg\">Sales Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Complete POS system with transaction tracking and reporting\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Wrench className=\"w-6 h-6 text-accent\" />\n              </div>\n              <CardTitle className=\"text-lg\">Service Tickets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Track laptop repairs and service requests efficiently\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-6 h-6 text-secondary\" />\n              </div>\n              <CardTitle className=\"text-lg\">Inventory Control</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage stock levels and get low stock alerts\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-destructive\" />\n              </div>\n              <CardTitle className=\"text-lg\">Financial Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Track profits, expenses and generate detailed reports\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className=\"max-w-4xl mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center\">Key Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">For Administrators</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Role-based access control</li>\n                  <li>• Complete system configuration</li>\n                  <li>• User management</li>\n                  <li>• Financial oversight</li>\n                </ul>\n              </div>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">For Staff</h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Easy-to-use POS interface</li>\n                  <li>• Service ticket management</li>\n                  <li>• Customer database</li>\n                  <li>• Real-time inventory updates</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5493},"laptoppos-deployment-20250903-113337/client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { LogIn, Laptop } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username harus diisi\"),\n  password: z.string().min(1, \"Password harus diisi\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-login'], // Unique key\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      return apiRequest('POST', '/api/auth/login', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Berhasil\", \n        description: \"Selamat datang di LaptopPOS!\",\n      });\n      // Reload to trigger authentication state update\n      window.location.href = \"/\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Gagal\",\n        description: error.message || \"Username atau password salah\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: LoginFormData) => {\n    setIsLoading(true);\n    loginMutation.mutate(data);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 px-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-0\">\n        <CardHeader className=\"space-y-1 text-center pb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center\">\n              <Laptop className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">\n            {(storeConfig as any)?.name || 'LaptopPOS'}\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n            Sistem Manajemen Penjualan & Servis Laptop\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Username\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Masukkan username Anda\"\n                        {...field}\n                        data-testid=\"input-username\"\n                        className=\"h-11\"\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Password\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Masukkan password Anda\"\n                        {...field}\n                        data-testid=\"input-password\"\n                        className=\"h-11\"\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full h-11 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n                disabled={isLoading || loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {isLoading || loginMutation.isPending ? (\n                  <>\n                    <LogIn className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Masuk...\n                  </>\n                ) : (\n                  <>\n                    <LogIn className=\"w-4 h-4 mr-2\" />\n                    Masuk\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"text-center pt-4 border-t border-gray-200 dark:border-gray-700\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              Gunakan kredensial akun Anda untuk mengakses sistem\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5990},"laptoppos-deployment-20250903-113337/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"laptoppos-deployment-20250903-113337/client/src/pages/pos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport TransactionModal from \"@/components/pos/transaction-modal\";\nimport ReceiptModal from \"@/components/pos/receipt-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Eye } from \"lucide-react\";\n// Format currency helper function\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('id-ID', {\n    style: 'currency',\n    currency: 'IDR',\n    minimumFractionDigits: 0,\n  }).format(amount);\n};\n\nexport default function POS() {\n  const [showTransactionModal, setShowTransactionModal] = useState(false);\n  const [showReceiptModal, setShowReceiptModal] = useState(false);\n  const [currentTransaction, setCurrentTransaction] = useState(null);\n  const queryClient = useQueryClient();\n\n  // Fetch recent transactions (limit to 10)\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/transactions\", { limit: 10 }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/transactions?limit=10\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch transactions\");\n      return response.json();\n    },\n  });\n\n  // Fetch dashboard stats for today's data\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  }) as { data: { todaySales?: string; todayRevenue?: string; activeServices?: number } | undefined };\n\n  const handleNewTransaction = () => {\n    setShowTransactionModal(true);\n  };\n\n  const handleTransactionComplete = (transaction: any) => {\n    setCurrentTransaction(transaction);\n    setShowTransactionModal(false);\n    setShowReceiptModal(true);\n    // Refresh data after transaction\n    queryClient.invalidateQueries({ queryKey: [\"/api/transactions\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n  };\n\n  const handleViewTransaction = (transaction: any) => {\n    setCurrentTransaction(transaction);\n    setShowReceiptModal(true);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Kasir\" \n          breadcrumb=\"Beranda / Kasir\"\n          action={\n            <Button \n              onClick={handleNewTransaction}\n              data-testid=\"button-new-transaction\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Transaksi Baru\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle>Transaksi Terbaru</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {transactionsLoading ? (\n                  <p className=\"text-muted-foreground\">Loading transactions...</p>\n                ) : transactions.length === 0 ? (\n                  <p className=\"text-muted-foreground\">\n                    No transactions yet. Click \"New Transaction\" to start processing sales.\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {transactions.map((transaction: any) => (\n                      <div\n                        key={transaction.id}\n                        className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50\"\n                        data-testid={`transaction-${transaction.id}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"font-medium\">{transaction.transactionNumber}</span>\n                            <Badge variant={transaction.type === 'sale' ? 'default' : 'secondary'}>\n                              {transaction.type}\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {transaction.customer?.name || 'Walk-in Customer'} • {' '}\n                            {new Date(transaction.createdAt).toLocaleString('id-ID')}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">{formatCurrency(parseFloat(transaction.total))}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {transaction.paymentMethod || 'cash'}\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleViewTransaction(transaction)}\n                            data-testid={`button-view-transaction-${transaction.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Product Sales</span>\n                    <span className=\"font-medium\">\n                      {stats?.todaySales ? formatCurrency(parseFloat(stats.todaySales)) : 'Rp 0'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Total Revenue</span>\n                    <span className=\"font-medium\">\n                      {stats?.todayRevenue ? formatCurrency(parseFloat(stats.todayRevenue)) : 'Rp 0'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Transactions</span>\n                    <span className=\"font-medium\">{transactions.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Active Services</span>\n                    <span className=\"font-medium\">{stats?.activeServices || 0}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n\n      <TransactionModal\n        open={showTransactionModal}\n        onClose={() => setShowTransactionModal(false)}\n        onComplete={handleTransactionComplete}\n      />\n\n      <ReceiptModal\n        open={showReceiptModal}\n        onClose={() => setShowReceiptModal(false)}\n        transaction={currentTransaction}\n      />\n    </div>\n  );\n}\n","size_bytes":7498},"laptoppos-deployment-20250903-113337/client/src/pages/purchasing.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, ShoppingCart, Package, Truck, CheckCircle, Clock, AlertCircle, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { z } from \"zod\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\n// Schema for forms\nconst purchaseOrderSchema = z.object({\n  supplierId: z.string().min(1, \"Supplier wajib dipilih\"),\n  expectedDeliveryDate: z.string().min(1, \"Tanggal pengiriman wajib diisi\"),\n  notes: z.string().optional(),\n});\n\nconst purchaseOrderItemSchema = z.object({\n  productId: z.string().min(1, \"Produk wajib dipilih\"),\n  quantity: z.number().min(1, \"Kuantitas minimal 1\"),\n  unitCost: z.string().min(1, \"Harga satuan wajib diisi\"),\n  notes: z.string().optional(),\n});\n\nexport default function PurchasingPage() {\n  const [selectedTab, setSelectedTab] = useState(\"orders\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedPO, setSelectedPO] = useState<any>(null);\n  const [isAddPOOpen, setIsAddPOOpen] = useState(false);\n  const [isAddItemOpen, setIsAddItemOpen] = useState(false);\n  const [poItems, setPOItems] = useState<any[]>([]);\n  const [receivingPOOpen, setReceivingPOOpen] = useState(false);\n  const [receivingItems, setReceivingItems] = useState<any[]>([]);\n  const [viewPOOpen, setViewPOOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Forms\n  const poForm = useForm({\n    resolver: zodResolver(purchaseOrderSchema),\n    defaultValues: {\n      supplierId: \"\",\n      expectedDeliveryDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  const itemForm = useForm({\n    resolver: zodResolver(purchaseOrderItemSchema),\n    defaultValues: {\n      productId: \"\",\n      quantity: 1,\n      unitCost: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Queries\n  const { data: purchaseOrders, isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/purchase-orders\"],\n    enabled: selectedTab === \"orders\",\n  });\n\n  const { data: suppliers } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: selectedPOItems } = useQuery({\n    queryKey: [\"/api/purchase-orders\", selectedPO?.id, \"items\"],\n    enabled: !!selectedPO?.id,\n  });\n\n  // Mutations\n  const createPOMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/purchase-orders\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      setIsAddPOOpen(false);\n      setPOItems([]);\n      poForm.reset();\n      toast({ title: \"Purchase order berhasil dibuat dengan items\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Gagal membuat purchase order\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const approvePOMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/purchase-orders/${id}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      toast({ title: \"Purchase order berhasil disetujui\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Gagal menyetujui purchase order\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const addItemMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", `/api/purchase-orders/${selectedPO?.id}/items`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\", selectedPO?.id, \"items\"] });\n      setIsAddItemOpen(false);\n      itemForm.reset();\n      toast({ title: \"Item berhasil ditambahkan\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Gagal menambahkan item\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const receiveMutation = useMutation({\n    mutationFn: async (itemsToReceive: any[]) => {\n      return Promise.all(\n        itemsToReceive.map(item => \n          apiRequest('POST', `/api/purchase-orders/items/${item.itemId}/receive`, { receivedQuantity: item.quantity })\n        )\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] }); // Refresh products for updated HPP\n      setReceivingPOOpen(false);\n      setReceivingItems([]);\n      toast({ title: \"Items received successfully\" });\n    },\n    onError: (error) => {\n      console.error(\"Failed to receive items:\", error);\n      toast({ title: \"Failed to receive items\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const onSubmitPO = (data: any) => {\n    createPOMutation.mutate({\n      ...data,\n      items: poItems\n    });\n  };\n\n  const addItemToPO = (item: any) => {\n    setPOItems([...poItems, { ...item, id: Date.now() }]);\n  };\n\n  const removeItemFromPO = (itemId: any) => {\n    setPOItems(poItems.filter(item => item.id !== itemId));\n  };\n\n  // Mutation to delete item from existing purchase order\n  const deleteItemMutation = useMutation({\n    mutationFn: ({ poId, itemId }: { poId: string; itemId: string }) => \n      fetch(`/api/purchase-orders/${poId}/items/${itemId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(res => {\n        if (!res.ok) throw new Error('Failed to delete item');\n        return res.json();\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/purchase-orders'] });\n      if (selectedPO) {\n        queryClient.invalidateQueries({ queryKey: [`/api/purchase-orders/${selectedPO.id}/items`] });\n      }\n      toast({ title: \"Item berhasil dihapus\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Gagal menghapus item\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Function to remove item from existing purchase order\n  const removeItemFromExistingPO = (itemId: string) => {\n    if (!selectedPO) return;\n    deleteItemMutation.mutate({ poId: selectedPO.id, itemId });\n  };\n\n  const onSubmitItem = (data: any) => {\n    addItemMutation.mutate({\n      ...data,\n      quantity: parseInt(data.quantity) || 1,\n      orderedQuantity: parseInt(data.quantity) || 1,\n      unitCost: parseFloat(data.unitCost) || 0,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return <Badge variant=\"secondary\" data-testid={`badge-status-draft`}>Draft</Badge>;\n      case \"pending\":\n        return <Badge variant=\"outline\" data-testid={`badge-status-pending`}>Pending</Badge>;\n      case \"confirmed\":\n        return <Badge variant=\"default\" data-testid={`badge-status-confirmed`}>Confirmed</Badge>;\n      case \"partial_received\":\n        return <Badge variant=\"default\" className=\"bg-orange-500\" data-testid={`badge-status-partial_received`}>Partial Received</Badge>;\n      case \"received\":\n        return <Badge variant=\"default\" className=\"bg-green-500\" data-testid={`badge-status-received`}>Received</Badge>;\n      case \"delivered\":\n        return <Badge variant=\"default\" className=\"bg-green-500\" data-testid={`badge-status-delivered`}>Delivered</Badge>;\n      case \"cancelled\":\n        return <Badge variant=\"destructive\" data-testid={`badge-status-cancelled`}>Cancelled</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const filteredOrders = purchaseOrders?.filter((order: any) =>\n    order.poNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    order.notes?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Purchasing Management\" \n          breadcrumb=\"Beranda / Purchasing\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\" data-testid=\"purchasing-page\">\n            <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n              <div>\n                <p className=\"text-muted-foreground\">Kelola purchase order, supplier, dan penerimaan barang</p>\n              </div>\n              <div className=\"flex gap-2\">\n          <Dialog open={isAddPOOpen} onOpenChange={setIsAddPOOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-po\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Buat Purchase Order\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Buat Purchase Order Baru</DialogTitle>\n              </DialogHeader>\n              <Form {...poForm}>\n                <form onSubmit={poForm.handleSubmit(onSubmitPO)} className=\"space-y-4\">\n                  <FormField\n                    control={poForm.control}\n                    name=\"supplierId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-supplier\">\n                              <SelectValue placeholder=\"Pilih supplier\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {suppliers?.map((supplier: any) => (\n                              <SelectItem key={supplier.id} value={supplier.id}>\n                                {supplier.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={poForm.control}\n                    name=\"expectedDeliveryDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tanggal Pengiriman Diharapkan</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-delivery-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={poForm.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Catatan</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Catatan tambahan\" {...field} data-testid=\"input-po-notes\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Items Section */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold\">Items</h3>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          const product = products?.[0];\n                          if (product) {\n                            addItemToPO({\n                              productId: product.id,\n                              productName: product.name,\n                              quantity: 1,\n                              unitCost: 0\n                            });\n                          }\n                        }}\n                        data-testid=\"button-add-item-to-po\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Tambah Item\n                      </Button>\n                    </div>\n                    \n                    {poItems.length > 0 ? (\n                      <div className=\"space-y-2\">\n                        {poItems.map((item, index) => (\n                          <div key={item.id} className=\"border p-3 rounded-md\">\n                            <div className=\"grid grid-cols-4 gap-3 items-center\">\n                              <div>\n                                <Label className=\"text-sm\">Produk</Label>\n                                <Select \n                                  value={item.productId} \n                                  onValueChange={(value) => {\n                                    const product = products?.find(p => p.id === value);\n                                    setPOItems(poItems.map((it, i) => \n                                      i === index ? { ...it, productId: value, productName: product?.name } : it\n                                    ));\n                                  }}\n                                >\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {products?.map((product: any) => (\n                                      <SelectItem key={product.id} value={product.id}>\n                                        {product.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Kuantitas</Label>\n                                <Input \n                                  type=\"number\" \n                                  value={item.quantity}\n                                  onChange={(e) => {\n                                    setPOItems(poItems.map((it, i) => \n                                      i === index ? { ...it, quantity: parseInt(e.target.value) || 1 } : it\n                                    ));\n                                  }}\n                                />\n                              </div>\n                              <div>\n                                <Label className=\"text-sm\">Harga Satuan</Label>\n                                <Input \n                                  type=\"number\" \n                                  value={item.unitCost}\n                                  onChange={(e) => {\n                                    setPOItems(poItems.map((it, i) => \n                                      i === index ? { ...it, unitCost: parseFloat(e.target.value) || 0 } : it\n                                    ));\n                                  }}\n                                />\n                              </div>\n                              <div className=\"flex items-end\">\n                                <Button \n                                  type=\"button\" \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => removeItemFromPO(item.id)}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-muted-foreground text-sm\">Belum ada item. Klik \"Tambah Item\" untuk menambahkan.</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-4\">\n                    <Button type=\"submit\" disabled={createPOMutation.isPending || poItems.length === 0} data-testid=\"button-save-po\">\n                      {createPOMutation.isPending ? \"Menyimpan...\" : \"Buat Purchase Order\"}\n                    </Button>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => {\n                      setIsAddPOOpen(false);\n                      setPOItems([]);\n                    }}>\n                      Batal\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"orders\" className=\"flex items-center gap-2\" data-testid=\"tab-orders\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            Purchase Orders\n          </TabsTrigger>\n          <TabsTrigger value=\"receiving\" className=\"flex items-center gap-2\" data-testid=\"tab-receiving\">\n            <Truck className=\"h-4 w-4\" />\n            Receiving\n          </TabsTrigger>\n          <TabsTrigger value=\"suppliers\" className=\"flex items-center gap-2\" data-testid=\"tab-suppliers\">\n            <Package className=\"h-4 w-4\" />\n            Suppliers\n          </TabsTrigger>\n          <TabsTrigger value=\"reports\" className=\"flex items-center gap-2\" data-testid=\"tab-reports\">\n            <Eye className=\"h-4 w-4\" />\n            Reports\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <div className=\"flex flex-col gap-4 md:flex-row md:items-center\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Cari purchase order berdasarkan nomor PO atau catatan...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"max-w-lg\"\n                data-testid=\"input-search-po\"\n              />\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Orders</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>PO Number</TableHead>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Tanggal Order</TableHead>\n                      <TableHead>Expected Delivery</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Total</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredOrders?.map((order: any) => (\n                      <TableRow key={order.id} data-testid={`row-po-${order.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-po-number-${order.id}`}>\n                          {order.poNumber}\n                        </TableCell>\n                        <TableCell>{(order as any).supplierName || order.supplierId}</TableCell>\n                        <TableCell>{new Date(order.orderDate).toLocaleDateString()}</TableCell>\n                        <TableCell>{new Date(order.expectedDeliveryDate).toLocaleDateString()}</TableCell>\n                        <TableCell>{getStatusBadge(order.status)}</TableCell>\n                        <TableCell>Rp {Number(order.totalAmount || 0).toLocaleString()}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedPO(order);\n                                setViewPOOpen(true);\n                              }}\n                              data-testid={`button-view-po-${order.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            {order.status === \"pending\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => approvePOMutation.mutate(order.id)}\n                                data-testid={`button-approve-po-${order.id}`}\n                              >\n                                <CheckCircle className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                // For now, just open the view dialog as edit functionality\n                                setSelectedPO(order);\n                                setViewPOOpen(true);\n                              }}\n                              data-testid={`button-edit-po-${order.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"receiving\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">Goods Receiving</h2>\n              <p className=\"text-muted-foreground\">Terima barang dari purchase order yang sudah dikonfirmasi</p>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Orders Ready for Receiving</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {ordersLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>PO Number</TableHead>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Order Date</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Total Amount</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {purchaseOrders?.filter((order: any) => order.status === 'confirmed').map((order: any) => (\n                      <TableRow key={order.id}>\n                        <TableCell className=\"font-medium\">{order.poNumber}</TableCell>\n                        <TableCell>{(order as any).supplierName || order.supplierId}</TableCell>\n                        <TableCell>{new Date(order.orderDate).toLocaleDateString()}</TableCell>\n                        <TableCell>{getStatusBadge(order.status)}</TableCell>\n                        <TableCell>Rp {Number(order.totalAmount || 0).toLocaleString()}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedPO(order);\n                              setReceivingPOOpen(true);\n                              setReceivingItems([]);\n                            }}\n                            data-testid={`button-receive-po-${order.id}`}\n                          >\n                            <Truck className=\"h-4 w-4 mr-2\" />\n                            Receive Items\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    {!purchaseOrders?.some((order: any) => order.status === 'confirmed') && (\n                      <TableRow>\n                        <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                          No confirmed purchase orders ready for receiving\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"suppliers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Supplier Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Supplier Management</h3>\n                <p className=\"text-muted-foreground\">Fitur manajemen supplier akan segera hadir</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total PO</CardTitle>\n                <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-po\">{purchaseOrders?.length || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">Purchase orders</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pending PO</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-pending-po\">\n                  {purchaseOrders?.filter((po: any) => po.status === \"pending\").length || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Menunggu persetujuan</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Confirmed PO</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-confirmed-po\">\n                  {purchaseOrders?.filter((po: any) => po.status === \"confirmed\").length || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Sudah dikonfirmasi</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Nilai PO</CardTitle>\n                <Package className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-po-value\">\n                  Rp {purchaseOrders?.reduce((sum: number, po: any) => sum + Number(po.totalAmount || 0), 0).toLocaleString() || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Nilai total PO bulan ini</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* View PO Dialog */}\n      <Dialog open={viewPOOpen} onOpenChange={setViewPOOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Purchase Order Detail - {selectedPO?.poNumber}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Supplier</Label>\n                <p className=\"text-sm font-medium\">{(selectedPO as any)?.supplierName || selectedPO?.supplierId}</p>\n              </div>\n              <div>\n                <Label>Status</Label>\n                <div className=\"mt-1\">{selectedPO && getStatusBadge(selectedPO.status)}</div>\n              </div>\n              <div>\n                <Label>Tanggal Order</Label>\n                <p className=\"text-sm\">{selectedPO && new Date(selectedPO.orderDate).toLocaleDateString()}</p>\n              </div>\n              <div>\n                <Label>Expected Delivery</Label>\n                <p className=\"text-sm\">{selectedPO && new Date(selectedPO.expectedDeliveryDate).toLocaleDateString()}</p>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">Items</h3>\n                <Dialog open={isAddItemOpen} onOpenChange={setIsAddItemOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-item\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Tambah Item\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Tambah Item ke PO</DialogTitle>\n                    </DialogHeader>\n                    <Form {...itemForm}>\n                      <form onSubmit={itemForm.handleSubmit(onSubmitItem)} className=\"space-y-4\">\n                        <FormField\n                          control={itemForm.control}\n                          name=\"productId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Produk</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-product\">\n                                    <SelectValue placeholder=\"Pilih produk\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {products?.map((product: any) => (\n                                    <SelectItem key={product.id} value={product.id}>\n                                      {product.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={itemForm.control}\n                            name=\"quantity\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Kuantitas</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field} \n                                    onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                    data-testid=\"input-quantity\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={itemForm.control}\n                            name=\"unitCost\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Harga Satuan</FormLabel>\n                                <FormControl>\n                                  <Input type=\"number\" placeholder=\"0\" {...field} data-testid=\"input-unit-cost\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <FormField\n                          control={itemForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Catatan</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Catatan item\" {...field} data-testid=\"input-item-notes\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex gap-2 pt-4\">\n                          <Button type=\"submit\" disabled={addItemMutation.isPending} data-testid=\"button-save-item\">\n                            {addItemMutation.isPending ? \"Menyimpan...\" : \"Tambah Item\"}\n                          </Button>\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddItemOpen(false)}>\n                            Batal\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n              \n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Produk</TableHead>\n                    <TableHead>Kuantitas</TableHead>\n                    <TableHead>Harga Satuan</TableHead>\n                    <TableHead>Total</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {selectedPOItems?.map((item: any) => (\n                    <TableRow key={item.id}>\n                      <TableCell>{(item as any).productName || item.productId}</TableCell>\n                      <TableCell>{item.quantity}</TableCell>\n                      <TableCell>Rp {Number(item.unitCost).toLocaleString()}</TableCell>\n                      <TableCell>Rp {(item.quantity * Number(item.unitCost)).toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => removeItemFromExistingPO(item.id)}\n                          disabled={selectedPO?.status !== 'pending'}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Goods Receiving Dialog */}\n      <Dialog open={receivingPOOpen} onOpenChange={setReceivingPOOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Receive Items - {selectedPO?.poNumber}</DialogTitle>\n            <DialogDescription>\n              Terima barang dari supplier dan update stock inventory\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label>Supplier</Label>\n                <p className=\"text-sm font-medium\">{(selectedPO as any)?.supplierName || selectedPO?.supplierId}</p>\n              </div>\n              <div>\n                <Label>Total Amount</Label>\n                <p className=\"text-sm font-medium\">Rp {Number(selectedPO?.totalAmount || 0).toLocaleString()}</p>\n              </div>\n            </div>\n            \n            <div className=\"border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Ordered Qty</TableHead>\n                    <TableHead>Already Received</TableHead>\n                    <TableHead>Receive Now</TableHead>\n                    <TableHead>Remaining</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {selectedPOItems?.map((item: any) => {\n                    const receivingQty = receivingItems.find(r => r.itemId === item.id)?.quantity || 0;\n                    const remaining = item.quantity - (item.receivedQuantity || 0) - receivingQty;\n                    return (\n                      <TableRow key={item.id}>\n                        <TableCell>{(item as any).productName || item.productId}</TableCell>\n                        <TableCell>{item.quantity}</TableCell>\n                        <TableCell>{item.receivedQuantity || 0}</TableCell>\n                        <TableCell>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max={remaining}\n                            value={receivingQty}\n                            onChange={(e) => {\n                              const qty = parseInt(e.target.value) || 0;\n                              setReceivingItems(prev => {\n                                const existing = prev.find(r => r.itemId === item.id);\n                                if (existing) {\n                                  return prev.map(r => \n                                    r.itemId === item.id ? { ...r, quantity: qty } : r\n                                  );\n                                } else {\n                                  return [...prev, { itemId: item.id, quantity: qty }];\n                                }\n                              });\n                            }}\n                            className=\"w-20\"\n                          />\n                        </TableCell>\n                        <TableCell>{remaining}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setReceivingPOOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={() => {\n                  const itemsToReceive = receivingItems.filter(item => item.quantity > 0);\n                  \n                  if (itemsToReceive.length > 0) {\n                    receiveMutation.mutate(itemsToReceive);\n                  } else {\n                    toast({ title: \"No items to receive\", description: \"Please enter quantities to receive\", variant: \"destructive\" });\n                  }\n                }}\n                disabled={receiveMutation.isPending || !receivingItems.some(item => item.quantity > 0)}\n              >\n                {receiveMutation.isPending ? \"Processing...\" : \"Receive Items\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":41815},"laptoppos-deployment-20250903-113337/client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Calendar, DollarSign, TrendingUp, TrendingDown, BarChart3, Package, FileText, Download } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRef } from \"react\";\n\nexport default function Reports() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"this-month\");\n  const [startDate, setStartDate] = useState(\n    new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0]\n  );\n  const [endDate, setEndDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  \n  // Get store config for app name - WITH BETTER CACHING\n  const { data: storeConfig } = useQuery({\n    queryKey: ['store-config-reports'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  // API queries untuk data reports\n  const { data: salesReport, isLoading: salesLoading } = useQuery({\n    queryKey: [`/api/reports/sales/${startDate}/${endDate}`],\n    retry: false,\n  });\n\n  const { data: serviceReport, isLoading: serviceLoading } = useQuery({\n    queryKey: [`/api/reports/services/${startDate}/${endDate}`],\n    retry: false,\n  });\n\n  const { data: financialReport, isLoading: financialLoading } = useQuery({\n    queryKey: [`/api/reports/financial/${startDate}/${endDate}`],\n    retry: false,\n  });\n\n  const { data: inventoryReport, isLoading: inventoryLoading } = useQuery({\n    queryKey: [\"/api/reports/inventory\"],\n    retry: false,\n  });\n\n  const { toast } = useToast();\n\n  // PDF Export mutation - client-side generation\n  const exportPdfMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        // Import jsPDF dynamically to avoid SSR issues\n        const { jsPDF } = await import('jspdf');\n        \n        const doc = new jsPDF('portrait', 'mm', 'a4');\n        \n        // Add header\n        doc.setFontSize(20);\n        doc.setTextColor(79, 70, 229);\n        doc.text(`${(storeConfig as any)?.name || 'LaptopPOS'} - Laporan Bisnis`, 20, 30);\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Periode: ${new Date(startDate).toLocaleDateString('id-ID')} - ${new Date(endDate).toLocaleDateString('id-ID')}`, 20, 40);\n        \n        let yPos = 60;\n        \n        // Ringkasan Keuangan\n        doc.setFontSize(16);\n        doc.setTextColor(79, 70, 229);\n        doc.text('Ringkasan Keuangan', 20, yPos);\n        yPos += 15;\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Total Penjualan: Rp ${Number(salesReport?.totalSales || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Omset Servis: Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Total Pemasukan: Rp ${Number(financialReport?.totalIncome || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Total Pengeluaran: Rp ${Number(financialReport?.totalExpense || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Laba Bersih: Rp ${Number(financialReport?.profit || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 20;\n        \n        // Laporan Servis\n        doc.setFontSize(16);\n        doc.setTextColor(79, 70, 229);\n        doc.text('Laporan Servis', 20, yPos);\n        yPos += 15;\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Total Servis: ${serviceReport?.totalServices || 0} tiket`, 20, yPos);\n        yPos += 8;\n        doc.text(`Revenue Labor: Rp ${Number(serviceReport?.revenueBreakdown?.laborRevenue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Revenue Parts: Rp ${Number(serviceReport?.revenueBreakdown?.partsRevenue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Modal Parts: Rp ${Number(serviceReport?.totalCost || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Laba Servis: Rp ${Number(serviceReport?.totalProfit || 0).toLocaleString('id-ID')}`, 20, yPos);\n        yPos += 20;\n        \n        // Laporan Inventory\n        doc.setFontSize(16);\n        doc.setTextColor(79, 70, 229);\n        doc.text('Laporan Inventory', 20, yPos);\n        yPos += 15;\n        \n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0);\n        doc.text(`Total Produk: ${inventoryReport?.totalProducts || 0}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Stok Rendah: ${inventoryReport?.lowStockCount || 0}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Total Stok: ${inventoryReport?.totalStockQuantity || 0}`, 20, yPos);\n        yPos += 8;\n        doc.text(`Nilai Aset: Rp ${Number(inventoryReport?.totalAssetValue || 0).toLocaleString('id-ID')}`, 20, yPos);\n        \n        // Footer\n        doc.setFontSize(10);\n        doc.setTextColor(107, 114, 128);\n        doc.text(`Generated on ${new Date().toLocaleString('id-ID')}`, 20, 280);\n        doc.text(`© 2025 ${(storeConfig as any)?.name || 'LaptopPOS'} - Sistem Manajemen Bisnis Laptop`, 20, 290);\n        \n        // Save PDF\n        doc.save(`laporan-bisnis-${startDate}-${endDate}.pdf`);\n        \n        return doc;\n      } catch (error) {\n        console.error('PDF Export error:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export PDF Berhasil\",\n        description: \"Laporan PDF berhasil didownload\",\n      });\n    },\n    onError: (error) => {\n      console.error('Export PDF error:', error);\n      toast({\n        title: \"Export PDF Gagal\",\n        description: \"Terjadi kesalahan saat mengexport laporan PDF\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // XLSX Export mutation\n  const exportXlsxMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        const response = await fetch('/api/reports/export-xlsx', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            startDate,\n            endDate\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // Handle XLSX download\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `laporan-bisnis-${startDate}-${endDate}.xlsx`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n\n        return blob;\n      } catch (error) {\n        console.error('Export XLSX error:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export XLSX Berhasil\",\n        description: \"Laporan Excel berhasil didownload\",\n      });\n    },\n    onError: (error) => {\n      console.error('Export XLSX error:', error);\n      toast({\n        title: \"Export XLSX Gagal\",\n        description: \"Terjadi kesalahan saat mengexport laporan Excel\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExportPDF = () => {\n    // Server will fetch fresh data directly from database, no need to check cached data\n    exportPdfMutation.mutate();\n  };\n\n  const handleExportXLSX = () => {\n    // Server will fetch fresh data directly from database, no need to check cached data\n    exportXlsxMutation.mutate();\n  };\n\n  const handlePeriodChange = (period: string) => {\n    setSelectedPeriod(period);\n    const today = new Date();\n    \n    switch (period) {\n      case \"today\":\n        setStartDate(today.toISOString().split('T')[0]);\n        setEndDate(today.toISOString().split('T')[0]);\n        break;\n      case \"this-week\":\n        const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));\n        setStartDate(weekStart.toISOString().split('T')[0]);\n        setEndDate(new Date().toISOString().split('T')[0]);\n        break;\n      case \"this-month\":\n        setStartDate(new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0]);\n        setEndDate(new Date().toISOString().split('T')[0]);\n        break;\n      case \"last-month\":\n        const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        const lastMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);\n        setStartDate(lastMonth.toISOString().split('T')[0]);\n        setEndDate(lastMonthEnd.toISOString().split('T')[0]);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Laporan Bisnis\" breadcrumb=\"Beranda / Laporan\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          \n          {/* Filter Controls */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Filter Periode\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Select value={selectedPeriod} onValueChange={handlePeriodChange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Pilih periode\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Hari Ini</SelectItem>\n                    <SelectItem value=\"this-week\">Minggu Ini</SelectItem>\n                    <SelectItem value=\"this-month\">Bulan Ini</SelectItem>\n                    <SelectItem value=\"last-month\">Bulan Lalu</SelectItem>\n                    <SelectItem value=\"custom\">Custom</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  disabled={selectedPeriod !== \"custom\"}\n                />\n                \n                <Input\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  disabled={selectedPeriod !== \"custom\"}\n                />\n                \n                <div className=\"flex gap-2\">\n                  <Button \n                    className=\"flex items-center gap-2\"\n                    onClick={handleExportPDF}\n                    disabled={exportPdfMutation.isPending}\n                    data-testid=\"button-export-pdf\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    {exportPdfMutation.isPending ? \"Mengexport...\" : \"Export PDF\"}\n                  </Button>\n                  \n                  <Button \n                    variant=\"outline\"\n                    className=\"flex items-center gap-2\"\n                    onClick={handleExportXLSX}\n                    disabled={exportXlsxMutation.isPending}\n                    data-testid=\"button-export-xlsx\"\n                  >\n                    <FileText className=\"w-4 h-4\" />\n                    {exportXlsxMutation.isPending ? \"Mengexport...\" : \"Export Excel\"}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"sales\">Penjualan</TabsTrigger>\n              <TabsTrigger value=\"services\">Servis</TabsTrigger>\n              <TabsTrigger value=\"financial\">Keuangan</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Total Penjualan</p>\n                        <p className=\"text-2xl font-bold\">\n                          {salesLoading ? \"Loading...\" : `Rp ${Number(salesReport?.totalSales || 0).toLocaleString('id-ID')}`}\n                        </p>\n                      </div>\n                      <DollarSign className=\"w-8 h-8 text-green-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Omset Servis</p>\n                        <p className=\"text-2xl font-bold\">\n                          {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}`}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {serviceReport?.totalServices || 0} servis\n                        </p>\n                      </div>\n                      <BarChart3 className=\"w-8 h-8 text-blue-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Profit</p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {financialLoading ? \"Loading...\" : `Rp ${Number(financialReport?.profit || 0).toLocaleString('id-ID')}`}\n                        </p>\n                      </div>\n                      <TrendingUp className=\"w-8 h-8 text-green-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Nilai Aset Inventory</p>\n                        <p className=\"text-2xl font-bold text-orange-600\">\n                          {inventoryLoading ? \"Loading...\" : `Rp ${Number(inventoryReport?.totalAssetValue || 0).toLocaleString('id-ID')}`}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {inventoryReport?.totalStockQuantity || 0} stok • {inventoryReport?.lowStockCount || 0} rendah\n                        </p>\n                      </div>\n                      <Package className=\"w-8 h-8 text-orange-600\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Sales Tab */}\n            <TabsContent value=\"sales\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Laporan Penjualan</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {salesLoading ? (\n                    <div className=\"text-center py-8\">Loading...</div>\n                  ) : !salesReport?.transactions || salesReport.transactions.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Tidak ada data penjualan untuk periode ini\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>No. Transaksi</TableHead>\n                          <TableHead>Tanggal</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Total</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {salesReport.transactions.map((transaction: any) => (\n                          <TableRow key={transaction.id}>\n                            <TableCell>{transaction.transactionNumber}</TableCell>\n                            <TableCell>{new Date(transaction.createdAt).toLocaleDateString('id-ID')}</TableCell>\n                            <TableCell>{transaction.customer?.name || \"Walk-in\"}</TableCell>\n                            <TableCell>Rp {Number(transaction.total).toLocaleString('id-ID')}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"secondary\">Completed</Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Services Tab */}\n            <TabsContent value=\"services\" className=\"space-y-6\">\n              {/* Service Financial Summary */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-green-600\">Total Omset</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}`}\n                    </p>\n                    <div className=\"text-sm text-muted-foreground mt-2\">\n                      <div>Labor: Rp {Number(serviceReport?.revenueBreakdown?.laborRevenue || 0).toLocaleString('id-ID')}</div>\n                      <div>Parts: Rp {Number(serviceReport?.revenueBreakdown?.partsRevenue || 0).toLocaleString('id-ID')}</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-red-600\">Total Modal Parts</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalCost || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-blue-600\">Laba Bersih</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {serviceLoading ? \"Loading...\" : `Rp ${Number(serviceReport?.totalProfit || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Detail Tiket Servis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {serviceLoading ? (\n                    <div className=\"text-center py-8\">Loading...</div>\n                  ) : !serviceReport?.tickets || serviceReport.tickets.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Tidak ada data servis untuk periode ini\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>No. Tiket</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Device</TableHead>\n                          <TableHead>Problem</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Biaya</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {serviceReport.tickets.map((ticket: any) => (\n                          <TableRow key={ticket.id}>\n                            <TableCell>{ticket.ticketNumber}</TableCell>\n                            <TableCell>{ticket.customer?.name}</TableCell>\n                            <TableCell>{ticket.deviceType} {ticket.deviceBrand}</TableCell>\n                            <TableCell>{ticket.problem}</TableCell>\n                            <TableCell>\n                              <Badge variant={ticket.status === 'completed' ? 'default' : 'secondary'}>\n                                {ticket.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex flex-col\">\n                                <div className=\"text-sm\">\n                                  {ticket.laborCost ? `Labor: Rp ${Number(ticket.laborCost).toLocaleString('id-ID')}` : 'Labor: -'}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {ticket.partsCost ? `Parts: Rp ${Number(ticket.partsCost).toLocaleString('id-ID')}` : 'Parts: -'}\n                                </div>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Financial Tab */}\n            <TabsContent value=\"financial\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-green-600\">Pemasukan</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {financialLoading ? \"Loading...\" : `Rp ${Number(financialReport?.totalIncome || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-red-600\">Pengeluaran</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">\n                      {financialLoading ? \"Loading...\" : `Rp ${Number(financialReport?.totalExpense || 0).toLocaleString('id-ID')}`}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Catatan:</strong> Data keuangan mencakup penjualan produk, biaya modal parts service, \n                  penjualan parts service, dan ongkos kerja. Sistem otomatis mencatat 3 transaksi saat service diselesaikan.\n                </p>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Detail Transaksi Keuangan</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {financialLoading ? (\n                    <div className=\"text-center py-8\">Loading...</div>\n                  ) : !financialReport?.records || financialReport.records.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Tidak ada data keuangan untuk periode ini\n                    </div>\n                  ) : (\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Tanggal</TableHead>\n                          <TableHead>Tipe</TableHead>\n                          <TableHead>Kategori</TableHead>\n                          <TableHead>Deskripsi</TableHead>\n                          <TableHead>Jumlah</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {financialReport.records.map((record: any) => (\n                          <TableRow key={record.id}>\n                            <TableCell>{new Date(record.createdAt).toLocaleDateString('id-ID')}</TableCell>\n                            <TableCell>\n                              <Badge variant={record.type === 'income' ? 'default' : 'destructive'}>\n                                {record.type === 'income' ? 'Pemasukan' : 'Pengeluaran'}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{record.category}</TableCell>\n                            <TableCell>{record.description}</TableCell>\n                            <TableCell className={record.type === 'income' ? 'text-green-600' : 'text-red-600'}>\n                              {record.type === 'income' ? '+' : '-'}Rp {Number(record.amount).toLocaleString('id-ID')}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26789},"laptoppos-deployment-20250903-113337/client/src/pages/roles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertRoleSchema } from \"@shared/schema\";\nimport { Trash2, Edit, Plus, UserCheck, Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Role } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nconst roleFormSchema = insertRoleSchema.extend({\n  permissions: z.array(z.string()).optional(),\n});\n\n// Permission definitions for all system features\nconst availablePermissions = [\n  // Core system access\n  \"dashboard:view\",              // View dashboard statistics and metrics\n  \n  // Point of Sale system\n  \"pos:use\",                    // Access POS system for sales transactions\n  \"pos:print\",                  // Print thermal receipts for purchases\n  \n  // Service ticket management  \n  \"service:create\",             // Create new service tickets\n  \"service:manage\",             // View, edit, update service tickets\n  \"service:print\",              // Print thermal service receipts\n  \"service:whatsapp\",           // Send WhatsApp notifications to customers\n  \n  // Inventory & Stock management\n  \"inventory:view\",             // View product inventory levels\n  \"inventory:manage\",           // Add, edit, delete products\n  \"inventory:adjust\",           // Adjust stock quantities manually\n  \"stock:movements\",            // View stock movement history\n  \n  // Financial management\n  \"financial:view\",             // View financial data and transactions\n  \"financial:manage\",           // Manage financial records and calculations\n  \"financial:reports\",          // Generate financial reports and analytics\n  \n  // Customer relationship\n  \"customers:view\",             // View customer information\n  \"customers:manage\",           // Add, edit, delete customers\n  \n  // Supplier management\n  \"suppliers:view\",             // View supplier information\n  \"suppliers:manage\",           // Add, edit, delete suppliers\n  \n  // Reporting system\n  \"reports:view\",               // View business reports\n  \"reports:export\",             // Export reports to Excel/PDF\n  \n  // System configuration\n  \"settings:view\",              // View system settings\n  \"settings:manage\",            // Change system configuration\n  \"settings:whatsapp\",          // Configure WhatsApp integration\n  \n  // User & Role management\n  \"users:view\",                 // View user accounts\n  \"users:manage\",               // Create, edit, delete users\n  \"roles:view\",                 // View roles and permissions\n  \"roles:manage\",               // Create, edit, delete roles\n  \n  // Transaction management\n  \"transactions:view\",          // View transaction history\n  \"transactions:create\",        // Process new transactions\n  \n  // Product catalog\n  \"products:view\",              // View product catalog\n  \"products:manage\",            // Add, edit, delete products\n  \"categories:manage\"           // Manage product categories\n];\n\n// Helper functions for permission display\nconst getPermissionDescription = (permission: string): string => {\n  const descriptions: { [key: string]: string } = {\n    \"dashboard:view\": \"Lihat statistik dan metrik dashboard\",\n    \"pos:use\": \"Akses sistem POS untuk transaksi penjualan\", \n    \"pos:print\": \"Cetak nota thermal untuk pembelian\",\n    \"service:create\": \"Buat tiket service baru\",\n    \"service:manage\": \"Kelola dan update tiket service\",\n    \"service:print\": \"Cetak nota service thermal\",\n    \"service:whatsapp\": \"Kirim notifikasi WhatsApp ke pelanggan\",\n    \"inventory:view\": \"Lihat level stok inventory\",\n    \"inventory:manage\": \"Tambah, edit, hapus produk\",\n    \"inventory:adjust\": \"Sesuaikan jumlah stok manual\",\n    \"stock:movements\": \"Lihat riwayat pergerakan stok\",\n    \"financial:view\": \"Lihat data keuangan dan transaksi\",\n    \"financial:manage\": \"Kelola catatan keuangan\",\n    \"financial:reports\": \"Generate laporan keuangan\",\n    \"customers:view\": \"Lihat informasi pelanggan\",\n    \"customers:manage\": \"Kelola data pelanggan\",\n    \"suppliers:view\": \"Lihat informasi supplier\",\n    \"suppliers:manage\": \"Kelola data supplier\",\n    \"reports:view\": \"Lihat laporan bisnis\",\n    \"reports:export\": \"Export laporan ke Excel/PDF\",\n    \"settings:view\": \"Lihat pengaturan sistem\",\n    \"settings:manage\": \"Ubah konfigurasi sistem\",\n    \"settings:whatsapp\": \"Konfigurasi integrasi WhatsApp\",\n    \"users:view\": \"Lihat akun pengguna\",\n    \"users:manage\": \"Kelola akun pengguna\",\n    \"roles:view\": \"Lihat peran dan izin\",\n    \"roles:manage\": \"Kelola peran dan izin\",\n    \"transactions:view\": \"Lihat riwayat transaksi\",\n    \"transactions:create\": \"Proses transaksi baru\",\n    \"products:view\": \"Lihat katalog produk\",\n    \"products:manage\": \"Kelola produk\",\n    \"categories:manage\": \"Kelola kategori produk\"\n  };\n  return descriptions[permission] || permission;\n};\n\nconst formatPermissionLabel = (permission: string): string => {\n  const labels: { [key: string]: string } = {\n    \"dashboard:view\": \"Dashboard\",\n    \"pos:use\": \"POS System\", \n    \"pos:print\": \"Print POS\",\n    \"service:create\": \"Buat Service\",\n    \"service:manage\": \"Kelola Service\",\n    \"service:print\": \"Print Service\",\n    \"service:whatsapp\": \"WhatsApp Service\",\n    \"inventory:view\": \"Lihat Inventory\",\n    \"inventory:manage\": \"Kelola Inventory\",\n    \"inventory:adjust\": \"Adjust Stok\",\n    \"stock:movements\": \"Pergerakan Stok\",\n    \"financial:view\": \"Lihat Keuangan\",\n    \"financial:manage\": \"Kelola Keuangan\",\n    \"financial:reports\": \"Laporan Keuangan\",\n    \"customers:view\": \"Lihat Customer\",\n    \"customers:manage\": \"Kelola Customer\",\n    \"suppliers:view\": \"Lihat Supplier\",\n    \"suppliers:manage\": \"Kelola Supplier\",\n    \"reports:view\": \"Lihat Laporan\",\n    \"reports:export\": \"Export Laporan\",\n    \"settings:view\": \"Lihat Settings\",\n    \"settings:manage\": \"Kelola Settings\",\n    \"settings:whatsapp\": \"WhatsApp Config\",\n    \"users:view\": \"Lihat Users\",\n    \"users:manage\": \"Kelola Users\",\n    \"roles:view\": \"Lihat Roles\",\n    \"roles:manage\": \"Kelola Roles\",\n    \"transactions:view\": \"Lihat Transaksi\",\n    \"transactions:create\": \"Buat Transaksi\",\n    \"products:view\": \"Lihat Produk\",\n    \"products:manage\": \"Kelola Produk\",\n    \"categories:manage\": \"Kelola Kategori\"\n  };\n  return labels[permission] || permission.replace(\":\", \": \");\n};\n\n// Default role configurations for easy setup\nconst defaultRoleConfigs = {\n  admin: {\n    displayName: \"Administrator\",\n    description: \"Akses penuh ke seluruh sistem\",\n    permissions: availablePermissions\n  },\n  owner: {\n    displayName: \"Pemilik\",\n    description: \"Akses penuh untuk owner bisnis\",\n    permissions: availablePermissions\n  },\n  kasir: {\n    displayName: \"Kasir\",\n    description: \"Operator POS dan customer service\",\n    permissions: [\n      \"dashboard:view\", \"pos:use\", \"pos:print\", \"customers:view\", \n      \"customers:manage\", \"transactions:view\", \"transactions:create\",\n      \"products:view\", \"inventory:view\"\n    ]\n  },\n  teknisi: {\n    displayName: \"Teknisi\",\n    description: \"Pengelola service dan perbaikan\",\n    permissions: [\n      \"dashboard:view\", \"service:create\", \"service:manage\", \"service:print\",\n      \"service:whatsapp\", \"customers:view\", \"inventory:view\", \"products:view\"\n    ]\n  },\n  purchasing: {\n    displayName: \"Purchasing\",\n    description: \"Pengelola inventory dan supplier\",\n    permissions: [\n      \"dashboard:view\", \"inventory:view\", \"inventory:manage\", \"inventory:adjust\",\n      \"stock:movements\", \"suppliers:view\", \"suppliers:manage\", \"products:view\",\n      \"products:manage\", \"categories:manage\"\n    ]\n  },\n  finance: {\n    displayName: \"Finance\",\n    description: \"Pengelola keuangan dan laporan\",\n    permissions: [\n      \"dashboard:view\", \"financial:view\", \"financial:manage\", \"financial:reports\",\n      \"reports:view\", \"reports:export\", \"transactions:view\"\n    ]\n  }\n};\n\nexport default function RolesPage() {\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingRole, setEditingRole] = useState<Role | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch roles\n  const { data: roles = [], isLoading } = useQuery({\n    queryKey: ['/api/roles'],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(roleFormSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      description: \"\",\n      permissions: [] as string[],\n      isActive: true,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        permissions: data.permissions || [],\n      };\n      return apiRequest('POST', '/api/roles', payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setShowDialog(false);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"Role berhasil dibuat\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal membuat role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const payload = {\n        ...data,\n        permissions: data.permissions || [],\n      };\n      return apiRequest('PUT', `/api/roles/${editingRole?.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setShowDialog(false);\n      setEditingRole(null);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"Role berhasil diupdate\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal mengupdate role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/roles/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Role berhasil dihapus\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menghapus role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    if (editingRole) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (role: Role) => {\n    setEditingRole(role);\n    form.reset({\n      name: role.name,\n      displayName: role.displayName,\n      description: role.description || \"\",\n      permissions: role.permissions || [],\n      isActive: role.isActive !== null ? role.isActive : true,\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus role ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return <div data-testid=\"loading\">Memuat data role...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Manajemen Peran\" breadcrumb=\"Beranda / Peran\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">Manajemen Peran</h1>\n                <p className=\"text-muted-foreground\">\n                  Kelola peran dan izin pengguna untuk sistem POS dengan fitur lengkap: \n                  POS, Service, Inventory, Finance, WhatsApp, dan Thermal Printing\n                </p>\n              </div>\n\n        <Dialog open={showDialog} onOpenChange={setShowDialog}>\n          <DialogTrigger asChild>\n            <Button \n              onClick={() => {\n                setEditingRole(null);\n                form.reset({\n                  name: \"\",\n                  displayName: \"\",\n                  description: \"\",\n                  permissions: [],\n                  isActive: true,\n                });\n              }}\n              data-testid=\"button-add-role\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Role\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle data-testid=\"dialog-title\">\n                {editingRole ? \"Edit Role\" : \"Tambah Role Baru\"}\n              </DialogTitle>\n            </DialogHeader>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nama Role</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"admin, kasir, teknisi\"\n                            data-testid=\"input-role-name\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"displayName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nama Tampilan</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Administrator, Kasir, Teknisi\"\n                            data-testid=\"input-display-name\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Deskripsi</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Deskripsi peran dan tanggung jawab...\"\n                          data-testid=\"input-description\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"permissions\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Izin Akses</FormLabel>\n                      <div className=\"grid grid-cols-2 gap-2 max-h-48 overflow-y-auto border rounded p-3\">\n                        {availablePermissions.map((permission) => (\n                          <div key={permission} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id={`permission-${permission}`}\n                              checked={(field.value || []).includes(permission)}\n                              onChange={(e) => {\n                                const current = field.value || [];\n                                if (e.target.checked) {\n                                  field.onChange([...current, permission]);\n                                } else {\n                                  field.onChange(current.filter((p) => p !== permission));\n                                }\n                              }}\n                              data-testid={`checkbox-permission-${permission}`}\n                            />\n                            <label \n                              htmlFor={`permission-${permission}`}\n                              className=\"text-sm cursor-pointer\"\n                              title={getPermissionDescription(permission)}\n                            >\n                              {formatPermissionLabel(permission)}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Status Aktif</FormLabel>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Role dapat digunakan dan diterapkan ke pengguna\n                        </div>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-is-active\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setShowDialog(false);\n                      setEditingRole(null);\n                      form.reset();\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Batal\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {editingRole ? \"Update\" : \"Simpan\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <UserCheck className=\"w-5 h-5 mr-2\" />\n            Daftar Role\n          </CardTitle>\n          <CardDescription>\n            Total {(roles as any[]).length} role tersedia\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {(roles as any[]).length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-state\">\n              Belum ada role yang dibuat. Mulai dengan membuat role baru.\n            </div>\n          ) : (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nama Role</TableHead>\n                    <TableHead>Nama Tampilan</TableHead>\n                    <TableHead>Deskripsi</TableHead>\n                    <TableHead>Izin</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {(roles as Role[]).map((role: Role) => (\n                    <TableRow key={role.id} data-testid={`role-row-${role.id}`}>\n                      <TableCell>\n                        <span className=\"font-mono text-sm bg-muted px-2 py-1 rounded\">\n                          {role.name}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span data-testid={`role-display-name-${role.id}`}>\n                          {role.displayName}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span \n                          className=\"text-sm text-muted-foreground\" \n                          data-testid={`role-description-${role.id}`}\n                        >\n                          {role.description || \"-\"}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {(role.permissions || []).slice(0, 3).map((permission, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {permission.split(\":\")[0]}\n                            </Badge>\n                          ))}\n                          {(role.permissions || []).length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{(role.permissions || []).length - 3} lainnya\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={role.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`role-status-${role.id}`}\n                        >\n                          {role.isActive ? \"Aktif\" : \"Nonaktif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(role)}\n                            data-testid={`button-edit-${role.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(role.id)}\n                            data-testid={`button-delete-${role.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":23695},"laptoppos-deployment-20250903-113337/client/src/pages/service-tickets.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Laptop, Edit, Trash2, Clock, AlertCircle, CheckCircle, Calendar, User, Package, Settings, Wrench, Receipt, TestTube, FileText, CreditCard } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { serviceTickets, type ServiceTicket, type Customer } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ServicePartsSelector } from \"@/components/service-parts-selector\";\nimport ServiceReceipt from \"@/components/ServiceReceipt\";\nimport ServiceReceiptNew from \"@/components/ServiceReceiptNew\";\nimport ServicePaymentReceipt from \"@/components/ServicePaymentReceipt\";\nimport ServiceStatusTracker from \"@/components/ServiceStatusTracker\";\nimport CustomerCreateModal from \"@/components/customers/customer-create-modal\";\n\nconst serviceTicketFormSchema = createInsertSchema(serviceTickets).omit({\n  id: true,\n  ticketNumber: true,\n  createdAt: true,\n  updatedAt: true,\n  estimatedCost: true,\n  actualCost: true,\n  partsCost: true,\n  completedAt: true,\n  estimatedCompletion: true,\n}).extend({\n  estimatedCost: z.string().optional(),\n  laborCost: z.string().optional(),\n}).refine((data) => {\n  return data.customerId && data.customerId.trim() !== \"\";\n}, {\n  message: \"Customer harus dipilih\",\n  path: [\"customerId\"]\n}).refine((data) => {\n  return data.deviceType && data.deviceType.trim() !== \"\";\n}, {\n  message: \"Jenis perangkat harus diisi\",\n  path: [\"deviceType\"]\n}).refine((data) => {\n  return data.problem && data.problem.trim() !== \"\";\n}, {\n  message: \"Deskripsi masalah harus diisi\",\n  path: [\"problem\"]\n});\n\ninterface ServicePart {\n  productId: string;\n  productName: string;\n  quantity: number;\n  unitPrice: string;\n  totalPrice: string;\n  stock: number;\n}\n\ntype ServiceTicketStatus = \"pending\" | \"checking\" | \"in-progress\" | \"waiting-technician\" | \"testing\" | \"waiting-confirmation\" | \"waiting-parts\" | \"completed\" | \"delivered\" | \"cancelled\";\n\nconst statusColors = {\n  pending: { bg: \"bg-yellow-100\", text: \"text-yellow-800\", icon: Clock },\n  checking: { bg: \"bg-sky-100\", text: \"text-sky-800\", icon: AlertCircle },\n  \"in-progress\": { bg: \"bg-blue-100\", text: \"text-blue-800\", icon: Settings },\n  \"waiting-technician\": { bg: \"bg-gray-100\", text: \"text-gray-800\", icon: AlertCircle },\n  testing: { bg: \"bg-indigo-100\", text: \"text-indigo-800\", icon: TestTube },\n  \"waiting-confirmation\": { bg: \"bg-red-100\", text: \"text-red-800\", icon: FileText },\n  \"waiting-parts\": { bg: \"bg-orange-100\", text: \"text-orange-800\", icon: Package },\n  completed: { bg: \"bg-green-100\", text: \"text-green-800\", icon: CheckCircle },\n  delivered: { bg: \"bg-purple-100\", text: \"text-purple-800\", icon: CheckCircle },\n  cancelled: { bg: \"bg-red-100\", text: \"text-red-800\", icon: AlertCircle },\n};\n\nconst statusLabels = {\n  pending: \"Belum Cek\",\n  checking: \"Sedang Cek\", \n  \"in-progress\": \"Sedang Dikerjakan\",\n  \"waiting-technician\": \"Ditunggu MITRA Teknik\",\n  testing: \"Sedang Tes\",\n  \"waiting-confirmation\": \"Menunggu Konfirmasi\",\n  \"waiting-parts\": \"Menunggu Sparepart\",\n  completed: \"Selesai\",\n  delivered: \"Sudah Diambil\",\n  cancelled: \"Dibatalkan\",\n};\n\n\nexport default function ServiceTickets() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<ServiceTicketStatus | \"all\">(\"all\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingTicket, setEditingTicket] = useState<ServiceTicket | null>(null);\n  const [selectedParts, setSelectedParts] = useState<ServicePart[]>([]);\n  const [showReceipt, setShowReceipt] = useState(false);\n  const [receiptData, setReceiptData] = useState<ServiceTicket | null>(null);\n  const [showPaymentReceipt, setShowPaymentReceipt] = useState(false);\n  const [paymentReceiptData, setPaymentReceiptData] = useState<ServiceTicket | null>(null);\n  const [showStatusTracker, setShowStatusTracker] = useState(false);\n  const [statusTrackerData, setStatusTrackerData] = useState<ServiceTicket | null>(null);\n  const [showCustomerCreateModal, setShowCustomerCreateModal] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: tickets = [], isLoading } = useQuery({\n    queryKey: [\"/api/service-tickets\"],\n    retry: false,\n  });\n\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers\"],\n    retry: false,\n  });\n\n  const { data: storeConfig = {} } = useQuery({\n    queryKey: ['/api/store-config'],\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return { name: 'LaptopPOS' };\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 menit\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    retry: false,\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(serviceTicketFormSchema),\n    defaultValues: {\n      customerId: \"\",\n      deviceType: \"\",\n      deviceBrand: \"\",\n      deviceModel: \"\",\n      serialNumber: \"\",\n      completeness: \"\",\n      problem: \"\",\n      diagnosis: \"\",\n      solution: \"\",\n      status: \"pending\",\n      estimatedCost: \"\",\n      laborCost: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const ticketData = {\n        ...data,\n        estimatedCost: data.estimatedCost ? parseFloat(data.estimatedCost) : null,\n      };\n      return apiRequest('POST', '/api/service-tickets', ticketData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      setShowDialog(false);\n      setEditingTicket(null);\n      setSelectedParts([]);\n      form.reset({\n        customerId: \"\",\n        deviceType: \"\",\n        deviceBrand: \"\",\n        deviceModel: \"\",\n        serialNumber: \"\",\n        completeness: \"\",\n        problem: \"\",\n        diagnosis: \"\",\n        solution: \"\",\n        status: \"pending\",\n        estimatedCost: \"\",\n        laborCost: \"\",\n      });\n      toast({ title: \"Sukses\", description: \"Tiket servis berhasil dibuat\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal membuat tiket servis\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      console.log(\"Raw update body:\", JSON.stringify(data, null, 2));\n      \n      const { parts, ...ticketData } = data;\n      console.log(\"Processed update data:\", JSON.stringify(ticketData, null, 2));\n      \n      return apiRequest('PUT', `/api/service-tickets/${id}`, { ...ticketData, parts });\n    },\n    onSuccess: (updatedTicket, variables) => {\n      // Update specific item in cache immediately\n      queryClient.setQueryData([\"/api/service-tickets\"], (oldData: any) => {\n        if (!oldData) return oldData;\n        return oldData.map((ticket: any) => \n          ticket.id === variables.id ? { ...ticket, ...updatedTicket } : ticket\n        );\n      });\n      \n      // Then invalidate to refresh from server\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/summary\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      setShowDialog(false);\n      setEditingTicket(null);\n      setSelectedParts([]);\n      form.reset({\n        customerId: \"\",\n        deviceType: \"\",\n        deviceBrand: \"\",\n        deviceModel: \"\",\n        serialNumber: \"\",\n        completeness: \"\",\n        problem: \"\",\n        diagnosis: \"\",\n        solution: \"\",\n        status: \"pending\",\n        estimatedCost: \"\",\n        laborCost: \"\",\n      });\n      toast({ title: \"Sukses\", description: \"Tiket servis berhasil diperbarui\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal memperbarui tiket servis\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/service-tickets/${id}`);\n    },\n    onSuccess: (_, deletedId) => {\n      // Remove item from cache immediately (optimistic update)\n      queryClient.setQueryData([\"/api/service-tickets\"], (oldData: any) => {\n        if (!oldData) return oldData;\n        return oldData.filter((ticket: any) => ticket.id !== deletedId);\n      });\n      \n      // Then invalidate to refresh from server\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/summary\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      // Close modal if it was open\n      setEditingTicket(null);\n      setShowDialog(false);\n      \n      toast({ title: \"Sukses\", description: \"Tiket servis berhasil dihapus\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Gagal menghapus tiket servis\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCustomerCreated = (newCustomer: any) => {\n    // Select the newly created customer\n    form.setValue(\"customerId\", newCustomer.id);\n  };\n\n  const handleSubmit = (data: any) => {\n    // Validate required fields\n    if (!data.customerId || data.customerId.trim() === \"\") {\n      toast({\n        title: \"Error\",\n        description: \"Customer harus dipilih\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!data.deviceType || data.deviceType.trim() === \"\") {\n      toast({\n        title: \"Error\", \n        description: \"Jenis perangkat harus diisi\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (!data.problem || data.problem.trim() === \"\") {\n      toast({\n        title: \"Error\",\n        description: \"Deskripsi masalah harus diisi\", \n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const submitData = {\n      ...data,\n      parts: selectedParts.map(part => ({\n        productId: part.productId,\n        quantity: part.quantity,\n        unitPrice: part.unitPrice\n      }))\n    };\n    \n    if (editingTicket) {\n      updateMutation.mutate({ id: editingTicket.id, data: submitData });\n    } else {\n      createMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (ticket: ServiceTicket) => {\n    setEditingTicket(ticket);\n    \n    // Load existing parts for this ticket\n    if (ticket.id) {\n      fetch(`/api/service-tickets/${ticket.id}/parts`)\n        .then(res => res.json())\n        .then(parts => {\n          const partsData = parts.map((part: any) => ({\n            productId: part.productId,\n            productName: part.productName,\n            quantity: part.quantity,\n            unitPrice: part.unitPrice,\n            totalPrice: part.totalPrice,\n            stock: 999 // Will be updated when component loads\n          }));\n          setSelectedParts(partsData);\n        })\n        .catch(console.error);\n    }\n    \n    form.reset({\n      customerId: ticket.customerId,\n      deviceType: ticket.deviceType,\n      deviceBrand: ticket.deviceBrand || \"\",\n      deviceModel: ticket.deviceModel || \"\",\n      serialNumber: ticket.serialNumber || \"\",\n      completeness: ticket.completeness || \"\",\n      problem: ticket.problem,\n      diagnosis: ticket.diagnosis || \"\",\n      solution: ticket.solution || \"\",\n      status: ticket.status || \"pending\",\n      estimatedCost: ticket.estimatedCost ? ticket.estimatedCost.toString() : \"\",\n      laborCost: ticket.laborCost ? ticket.laborCost.toString() : \"\",\n    });\n    \n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus tiket servis ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handlePrintReceipt = (ticket: ServiceTicket) => {\n    setReceiptData(ticket);\n    setShowReceipt(true);\n  };\n\n  const handlePrintPaymentReceipt = (ticket: ServiceTicket) => {\n    setPaymentReceiptData(ticket);\n    setShowPaymentReceipt(true);\n  };\n\n  const handleNew = () => {\n    setEditingTicket(null);\n    form.reset({\n      customerId: \"\",\n      deviceType: \"\",\n      deviceBrand: \"\",\n      deviceModel: \"\",\n      serialNumber: \"\",\n      completeness: \"\",\n      problem: \"\",\n      diagnosis: \"\",\n      solution: \"\",\n      status: \"pending\",\n      estimatedCost: \"\",\n      laborCost: \"\",\n    });\n    setSelectedParts([]);\n    setShowDialog(true);\n  };\n\n  const filteredTickets = (tickets as ServiceTicket[])\n    .filter((ticket) => {\n      const matchesSearch = \n        ticket.deviceType.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        ticket.problem.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (ticket.deviceBrand && ticket.deviceBrand.toLowerCase().includes(searchQuery.toLowerCase())) ||\n        (ticket.deviceModel && ticket.deviceModel.toLowerCase().includes(searchQuery.toLowerCase()));\n      const matchesStatus = statusFilter === \"all\" || ticket.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    });\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tiket Service\" \n          breadcrumb=\"Beranda / Service\"\n          action={\n            <Button onClick={handleNew} data-testid=\"button-add-ticket\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tiket Baru\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search and Filter Bar */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Cari berdasarkan perangkat atau masalah...\"\n                    className=\"pl-10\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-ticket-search\"\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={(value: ServiceTicketStatus | \"all\") => setStatusFilter(value)}>\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Semua Status</SelectItem>\n                    <SelectItem value=\"pending\">Belum Cek</SelectItem>\n                    <SelectItem value=\"checking\">Sedang Cek</SelectItem>\n                    <SelectItem value=\"in-progress\">Sedang Dikerjakan</SelectItem>\n                    <SelectItem value=\"waiting-technician\">Ditunggu MITRA Teknik</SelectItem>\n                    <SelectItem value=\"testing\">Sedang Tes</SelectItem>\n                    <SelectItem value=\"waiting-confirmation\">Menunggu Konfirmasi</SelectItem>\n                    <SelectItem value=\"waiting-parts\">Menunggu Sparepart</SelectItem>\n                    <SelectItem value=\"completed\">Selesai</SelectItem>\n                    <SelectItem value=\"delivered\">Sudah Diambil</SelectItem>\n                    <SelectItem value=\"cancelled\">Dibatalkan</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Service Tickets Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Tiket Servis ({filteredTickets.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : filteredTickets.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Laptop className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery || statusFilter !== \"all\" ? \"Tidak ada tiket yang cocok dengan pencarian\" : \"Belum ada tiket servis\"}\n                  </p>\n                  <Button className=\"mt-4\" onClick={handleNew}>\n                    Buat Tiket Pertama\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Ticket ID</TableHead>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Perangkat</TableHead>\n                      <TableHead>Masalah</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Estimasi Biaya</TableHead>\n                      <TableHead>Tanggal</TableHead>\n                      <TableHead className=\"text-right\">Aksi</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredTickets.map((ticket: ServiceTicket) => {\n                      const customer = (customers as Customer[]).find(c => c.id === ticket.customerId);\n                      const statusConfig = statusColors[ticket.status || 'pending'];\n                      const StatusIcon = statusConfig.icon;\n\n                      return (\n                        <TableRow key={ticket.id}>\n                          <TableCell>\n                            <span className=\"font-mono text-sm\" data-testid={`ticket-id-${ticket.id}`}>\n                              #{ticket.id.slice(-8)}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <User className=\"w-4 h-4 text-muted-foreground\" />\n                              <span data-testid={`ticket-customer-${ticket.id}`}>\n                                {customer ? customer.name : \"Unknown\"}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <span className=\"font-medium\" data-testid={`ticket-device-${ticket.id}`}>\n                                {ticket.deviceType}\n                              </span>\n                              {ticket.deviceBrand && (\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {ticket.deviceBrand} {ticket.deviceModel}\n                                </p>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm truncate max-w-xs\" data-testid={`ticket-problem-${ticket.id}`}>\n                              {ticket.problem}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className={`flex items-center space-x-2 px-2 py-1 rounded-full ${statusConfig.bg} w-fit`}>\n                              <StatusIcon className={`w-3 h-3 ${statusConfig.text}`} />\n                              <span className={`text-xs font-medium ${statusConfig.text}`} data-testid={`ticket-status-${ticket.id}`}>\n                                {statusLabels[ticket.status || 'pending']}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span data-testid={`ticket-cost-${ticket.id}`}>\n                              {ticket.estimatedCost \n                                ? `Rp ${parseFloat(ticket.estimatedCost.toString()).toLocaleString(\"id-ID\")}` \n                                : \"-\"\n                              }\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center text-sm\">\n                              <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span data-testid={`ticket-date-${ticket.id}`}>\n                                {ticket.createdAt ? new Date(ticket.createdAt).toLocaleDateString('id-ID') : '-'}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setStatusTrackerData(ticket);\n                                  setShowStatusTracker(true);\n                                }}\n                                data-testid={`button-status-${ticket.id}`}\n                                title=\"Detail Status\"\n                              >\n                                <Settings className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handlePrintReceipt(ticket)}\n                                data-testid={`button-receipt-ticket-${ticket.id}`}\n                                title=\"Cetak Nota Service\"\n                              >\n                                <Receipt className=\"w-4 h-4\" />\n                              </Button>\n                              {/* Payment Receipt Button - Only show for completed/delivered */}\n                              {(ticket.status === 'completed' || ticket.status === 'delivered') && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handlePrintPaymentReceipt(ticket)}\n                                  data-testid={`button-payment-receipt-${ticket.id}`}\n                                  title=\"Nota Pembayaran\"\n                                >\n                                  <CreditCard className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleEdit(ticket)}\n                                data-testid={`button-edit-ticket-${ticket.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleDelete(ticket.id)}\n                                data-testid={`button-delete-ticket-${ticket.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Service Ticket Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingTicket ? \"Edit Tiket Servis\" : \"Buat Tiket Servis Baru\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <Tabs defaultValue=\"ticket-info\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"ticket-info\" className=\"flex items-center gap-2\">\n                    <Settings className=\"w-4 h-4\" />\n                    Informasi Servis\n                  </TabsTrigger>\n                  <TabsTrigger value=\"spare-parts\" className=\"flex items-center gap-2\">\n                    <Package className=\"w-4 h-4\" />\n                    Spare Parts\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"ticket-info\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"customerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-customer\">\n                            <SelectValue placeholder=\"Pilih customer\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {(customers as Customer[]).map((customer: Customer) => (\n                            <SelectItem key={customer.id} value={customer.id}>\n                              {customer.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"col-span-2\">\n                  <div className=\"flex justify-end\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowCustomerCreateModal(true)}\n                      data-testid=\"button-create-customer\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Tambah Customer Baru\n                    </Button>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"deviceType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Jenis Perangkat *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Misal: Laptop, Tablet, HP\" {...field} data-testid=\"input-device-type\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"deviceBrand\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Misal: Dell, HP, Asus\" {...field} data-testid=\"input-device-brand\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"deviceModel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Model</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Misal: Latitude 7520\" {...field} data-testid=\"input-device-model\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"serialNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Serial Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Masukkan serial number perangkat\" {...field} data-testid=\"input-serial-number\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"completeness\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Kelengkapan</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Misal: Charger, Tas laptop, Mouse, dll...\" \n                        {...field} \n                        data-testid=\"textarea-completeness\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"problem\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Masalah *</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Deskripsikan masalah perangkat...\" \n                        {...field} \n                        data-testid=\"textarea-problem\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"diagnosis\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Diagnosis</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Hasil diagnosis teknisi...\" \n                        {...field} \n                        data-testid=\"textarea-diagnosis\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"solution\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Solusi</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Tindakan yang dilakukan...\" \n                        {...field} \n                        data-testid=\"textarea-solution\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">Belum Cek</SelectItem>\n                          <SelectItem value=\"checking\">Sedang Cek</SelectItem>\n                          <SelectItem value=\"in-progress\">Sedang Dikerjakan</SelectItem>\n                          <SelectItem value=\"waiting-technician\">Ditunggu MITRA Teknik</SelectItem>\n                          <SelectItem value=\"testing\">Sedang Tes</SelectItem>\n                          <SelectItem value=\"waiting-confirmation\">Menunggu Konfirmasi</SelectItem>\n                          <SelectItem value=\"waiting-parts\">Menunggu Sparepart</SelectItem>\n                          <SelectItem value=\"completed\">Selesai</SelectItem>\n                          <SelectItem value=\"delivered\">Sudah Diambil</SelectItem>\n                          <SelectItem value=\"cancelled\">Dibatalkan</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"laborCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Biaya Tenaga Kerja</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"0\" \n                          {...field} \n                          data-testid=\"input-labor-cost\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"estimatedCost\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estimasi Biaya</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"0\" \n                          {...field} \n                          data-testid=\"input-estimated-cost\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n                </TabsContent>\n\n                <TabsContent value=\"spare-parts\" className=\"space-y-4\">\n                  <ServicePartsSelector\n                    parts={selectedParts}\n                    onPartsChange={setSelectedParts}\n                    laborCost={parseFloat(form.watch(\"laborCost\") || \"0\")}\n                  />\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowDialog(false)}\n                  data-testid=\"button-cancel-ticket\"\n                >\n                  Batal\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-ticket\"\n                >\n                  {editingTicket ? \"Perbarui Tiket\" : \"Buat Tiket\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Service Receipt Dialog */}\n      <Dialog open={showReceipt} onOpenChange={setShowReceipt}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Tanda Terima Service - {receiptData?.ticketNumber}\n            </DialogTitle>\n          </DialogHeader>\n          {receiptData && (\n            <ServiceReceiptNew\n              serviceTicket={receiptData}\n              customer={customers.find((c: Customer) => c.id === receiptData.customerId) || {\n                id: receiptData.customerId,\n                name: 'Customer',\n                phone: '',\n                email: '',\n                address: ''\n              }}\n              storeConfig={storeConfig || {\n                name: 'LaptopPOS Service',\n                address: 'Alamat Toko',\n                phone: '0123456789',\n                email: 'info@laptoppos.com'\n              }}\n              technician={receiptData.technicianId ? users.find((u: any) => u.id === receiptData.technicianId) : null}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Service Payment Receipt Dialog */}\n      {paymentReceiptData && (\n        <ServicePaymentReceipt\n          open={showPaymentReceipt}\n          onClose={() => setShowPaymentReceipt(false)}\n          serviceTicket={paymentReceiptData}\n          customer={customers.find((c: Customer) => c.id === paymentReceiptData.customerId) || {\n            id: paymentReceiptData.customerId,\n            name: 'Customer',\n            phone: '',\n            email: '',\n            address: ''\n          }}\n          storeConfig={storeConfig || {\n            name: 'LaptopPOS Service',\n            address: 'Alamat Toko',\n            phone: '0123456789',\n            email: 'info@laptoppos.com'\n          }}\n          technician={paymentReceiptData.technicianId ? users.find((u: any) => u.id === paymentReceiptData.technicianId) : null}\n        />\n      )}\n\n      {/* Service Status Tracker Dialog */}\n      {statusTrackerData && (\n        <ServiceStatusTracker\n          isOpen={showStatusTracker}\n          onClose={() => setShowStatusTracker(false)}\n          serviceNumber={statusTrackerData.ticketNumber}\n          currentStatus={statusTrackerData.status}\n        />\n      )}\n\n      <CustomerCreateModal\n        open={showCustomerCreateModal}\n        onClose={() => setShowCustomerCreateModal(false)}\n        onCustomerCreated={handleCustomerCreated}\n      />\n    </div>\n  );\n}","size_bytes":40526},"laptoppos-deployment-20250903-113337/client/src/pages/service.tsx":{"content":"import Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Service() {\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Service Management\" \n          breadcrumb=\"Home / Service\"\n          action={\n            <Button data-testid=\"button-new-service\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Service\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Service Tickets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                Service ticket management interface will be implemented here.\n              </p>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1187},"laptoppos-deployment-20250903-113337/client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Store, Users, Shield, Database, MessageCircle, Settings as SettingsIcon } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { WhatsAppSettings as WhatsAppSettingsComponent } from \"@/components/WhatsAppSettings\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState(\"store\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch store config with better caching\n  const { data: storeConfig, isLoading: configLoading } = useQuery({\n    queryKey: ['store-config-settings'], // Unique key\n    queryFn: async () => {\n      const response = await fetch('/api/store-config', { credentials: 'include' });\n      if (!response.ok) return null;\n      return response.json();\n    },\n    staleTime: Infinity,\n    refetchInterval: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    retry: false,\n  });\n\n  // Store settings mutation\n  const updateStoreMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/store-config', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update store config');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all store config queries across all components\n      queryClient.invalidateQueries({ queryKey: ['/api/store-config'] });\n      queryClient.invalidateQueries({ queryKey: ['store-config-transaction'] });\n      queryClient.invalidateQueries({ queryKey: ['store-config-landing'] });\n      queryClient.invalidateQueries({ queryKey: ['store-config-settings'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"Pengaturan toko berhasil diupdate\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Store config update error:', error);\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Gagal mengupdate pengaturan\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStoreSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get('storeName'),\n      address: formData.get('address'),\n      phone: formData.get('phone'),\n      email: formData.get('email'),\n      taxRate: formData.get('taxRate'),\n    };\n    console.log('Updating store config with:', data); // Debug log\n    updateStoreMutation.mutate(data);\n  };\n\n  if (configLoading) {\n    return <div>Memuat...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Pengaturan\" breadcrumb=\"Beranda / Pengaturan\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Pengaturan</h1>\n              <p className=\"text-muted-foreground\">\n                Kelola pengaturan toko dan sistem Anda\n              </p>\n            </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"store\" className=\"flex items-center space-x-2\">\n            <Store className=\"w-4 h-4\" />\n            <span>Toko</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\">\n            <Users className=\"w-4 h-4\" />\n            <span>Pengguna</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"whatsapp\" className=\"flex items-center space-x-2\">\n            <MessageCircle className=\"w-4 h-4\" />\n            <span>WhatsApp</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span>Keamanan</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"backup\" className=\"flex items-center space-x-2\">\n            <Database className=\"w-4 h-4\" />\n            <span>Backup</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Store Settings */}\n        <TabsContent value=\"store\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Informasi Toko</CardTitle>\n              <CardDescription>\n                Kelola informasi dasar tentang toko Anda\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleStoreSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"storeName\">Nama Toko</Label>\n                    <Input\n                      id=\"storeName\"\n                      name=\"storeName\"\n                      defaultValue={(storeConfig as any)?.name || \"\"}\n                      placeholder=\"Masukkan nama toko\"\n                      data-testid=\"input-store-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Telepon</Label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      defaultValue={(storeConfig as any)?.phone || \"\"}\n                      placeholder=\"Masukkan nomor telepon\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Alamat</Label>\n                  <Input\n                    id=\"address\"\n                    name=\"address\"\n                    defaultValue={(storeConfig as any)?.address || \"\"}\n                    placeholder=\"Masukkan alamat lengkap toko\"\n                    data-testid=\"input-address\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    defaultValue={(storeConfig as any)?.email || \"\"}\n                    placeholder=\"Masukkan email toko\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxRate\">PPN / Tax Rate (%)</Label>\n                    <Input\n                      id=\"taxRate\"\n                      name=\"taxRate\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max=\"100\"\n                      defaultValue={(storeConfig as any)?.taxRate || \"11.00\"}\n                      placeholder=\"11.00\"\n                      data-testid=\"input-tax-rate\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"defaultDiscount\">Diskon Default (%)</Label>\n                    <Input\n                      id=\"defaultDiscount\"\n                      name=\"defaultDiscount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max=\"100\"\n                      defaultValue={(storeConfig as any)?.defaultDiscount || \"0.00\"}\n                      placeholder=\"0.00\"\n                      data-testid=\"input-default-discount\"\n                    />\n                  </div>\n                </div>\n                <Button \n                  type=\"submit\" \n                  disabled={updateStoreMutation.isPending}\n                  data-testid=\"button-save-store\"\n                >\n                  {updateStoreMutation.isPending ? \"Menyimpan...\" : \"Simpan Perubahan\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* User Management */}\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Manajemen User</CardTitle>\n              <CardDescription>\n                Kelola user dan role dalam sistem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-muted-foreground\">\n                Fitur manajemen user akan tersedia segera\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* WhatsApp Integration */}\n        <TabsContent value=\"whatsapp\" className=\"space-y-6\">\n          <WhatsAppSettingsComponent storeConfig={storeConfig || {}} />\n        </TabsContent>\n\n        {/* Security Settings */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Pengaturan Keamanan</CardTitle>\n              <CardDescription>\n                Kelola pengaturan keamanan sistem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-muted-foreground\">\n                Fitur pengaturan keamanan akan tersedia segera\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Backup Settings */}\n        <TabsContent value=\"backup\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Database className=\"w-5 h-5 mr-2\" />\n                Backup & Restore\n              </CardTitle>\n              <CardDescription>\n                Kelola backup data dan pengaturan sistem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-muted-foreground\">\n                Fitur backup & restore akan tersedia segera\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":10863},"laptoppos-deployment-20250903-113337/client/src/pages/stock-movements.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowUp, ArrowDown, Package, Filter, Search } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function StockMovements() {\n  const [startDate, setStartDate] = useState(\n    new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n  );\n  const [endDate, setEndDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [productFilter, setProductFilter] = useState(\"\");\n  const [referenceTypeFilter, setReferenceTypeFilter] = useState(\"\");\n\n  // Fetch stock movements with filters\n  const { data: stockData, isLoading, refetch } = useQuery({\n    queryKey: ['/api/reports/stock-movements', startDate, endDate, productFilter, referenceTypeFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (productFilter && productFilter !== 'all') params.append('productId', productFilter);\n      if (referenceTypeFilter && referenceTypeFilter !== 'all') params.append('referenceType', referenceTypeFilter);\n      \n      const response = await fetch(`/api/reports/stock-movements?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch stock movements');\n      return response.json();\n    },\n  });\n\n  // Fetch products for filter\n  const { data: products } = useQuery({\n    queryKey: ['/api/products'],\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('id-ID', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getReferenceTypeBadge = (type: string) => {\n    const variants = {\n      service: \"destructive\",\n      sale: \"default\",\n      purchase: \"secondary\", \n      adjustment: \"outline\",\n      return: \"secondary\"\n    } as const;\n    \n    const labels = {\n      service: \"Servis\",\n      sale: \"Penjualan\", \n      purchase: \"Pembelian\",\n      adjustment: \"Penyesuaian\",\n      return: \"Retur\"\n    };\n    \n    return (\n      <Badge variant={variants[type as keyof typeof variants] || \"outline\"}>\n        {labels[type as keyof typeof labels] || type}\n      </Badge>\n    );\n  };\n\n  const getMovementIcon = (type: string) => {\n    return type === 'out' ? \n      <ArrowDown className=\"h-4 w-4 text-red-500\" /> : \n      <ArrowUp className=\"h-4 w-4 text-green-500\" />;\n  };\n\n  const handleFilter = () => {\n    refetch();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Laporan Pergerakan Stok</h1>\n            <p className=\"text-gray-600\">Pantau semua pergerakan stok produk</p>\n          </div>\n        </div>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"h-96 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Pergerakan Stok\" breadcrumb=\"Beranda / Pergerakan Stok\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Laporan Pergerakan Stok</h1>\n                <p className=\"text-gray-600\">Pantau semua pergerakan stok produk</p>\n              </div>\n            </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Pergerakan</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-movements\">\n              {stockData?.totalMovements || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        {Object.entries(stockData?.summary || {}).map(([refType, data]) => (\n          <Card key={refType}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {refType === 'service' ? 'Untuk Servis' :\n                 refType === 'sale' ? 'Untuk Penjualan' :\n                 refType === 'purchase' ? 'Dari Pembelian' :\n                 refType}\n              </CardTitle>\n              {refType === 'service' ? \n                <ArrowDown className=\"h-4 w-4 text-red-500\" /> :\n                <ArrowUp className=\"h-4 w-4 text-green-500\" />\n              }\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {(data as any).totalOut || (data as any).totalIn || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {(data as any).count} transaksi\n              </p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filter Laporan\n          </CardTitle>\n          <CardDescription>\n            Filter data berdasarkan periode, produk, atau jenis transaksi\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 items-end\">\n            <div>\n              <Label htmlFor=\"start-date\">Tanggal Mulai</Label>\n              <Input\n                id=\"start-date\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"end-date\">Tanggal Akhir</Label>\n              <Input\n                id=\"end-date\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                data-testid=\"input-end-date\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"product-filter\">Produk</Label>\n              <Select value={productFilter} onValueChange={setProductFilter}>\n                <SelectTrigger data-testid=\"select-product-filter\">\n                  <SelectValue placeholder=\"Semua produk\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Semua produk</SelectItem>\n                  {(products as any[])?.map((product: any) => (\n                    <SelectItem key={product.id} value={product.id}>\n                      {product.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"reference-filter\">Jenis Transaksi</Label>\n              <Select value={referenceTypeFilter} onValueChange={setReferenceTypeFilter}>\n                <SelectTrigger data-testid=\"select-reference-filter\">\n                  <SelectValue placeholder=\"Semua jenis\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Semua jenis</SelectItem>\n                  <SelectItem value=\"service\">Servis</SelectItem>\n                  <SelectItem value=\"sale\">Penjualan</SelectItem>\n                  <SelectItem value=\"purchase\">Pembelian</SelectItem>\n                  <SelectItem value=\"adjustment\">Penyesuaian</SelectItem>\n                  <SelectItem value=\"return\">Retur</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Button onClick={handleFilter} className=\"w-full\" data-testid=\"button-filter\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stock Movements Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Riwayat Pergerakan Stok</CardTitle>\n          <CardDescription>\n            Daftar lengkap semua pergerakan stok produk\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Tanggal</TableHead>\n                  <TableHead>Produk</TableHead>\n                  <TableHead>Jenis</TableHead>\n                  <TableHead>Tipe</TableHead>\n                  <TableHead>Qty</TableHead>\n                  <TableHead>Referensi</TableHead>\n                  <TableHead>Catatan</TableHead>\n                  <TableHead>User</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {stockData?.movements?.length ? (\n                  stockData.movements.map((movement: any) => (\n                    <TableRow key={movement.id} data-testid={`row-movement-${movement.id}`}>\n                      <TableCell className=\"font-mono text-sm\">\n                        {formatDate(movement.createdAt)}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {movement.productName || 'Produk tidak ditemukan'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getMovementIcon(movement.type)}\n                          <span className=\"capitalize\">{movement.type === 'out' ? 'Keluar' : 'Masuk'}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {getReferenceTypeBadge(movement.referenceType)}\n                      </TableCell>\n                      <TableCell className=\"font-bold\">\n                        <span className={movement.type === 'out' ? 'text-red-600' : 'text-green-600'}>\n                          {movement.type === 'out' ? '-' : '+'}{movement.quantity}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {movement.reference}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {movement.notes}\n                      </TableCell>\n                      <TableCell>\n                        {movement.userName || 'Unknown'}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"h-24 text-center\">\n                      Tidak ada data pergerakan stok.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":12078},"laptoppos-deployment-20250903-113337/client/src/pages/suppliers.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Search, Truck, Edit, Trash2, Phone, Mail, MapPin, User } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertSupplierSchema, type Supplier } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst supplierFormSchema = insertSupplierSchema;\n\nexport default function Suppliers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: suppliers = [], isLoading } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n    retry: false,\n  });\n\n  const form = useForm({\n    resolver: zodResolver(supplierFormSchema),\n    defaultValues: {\n      code: \"\",\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      contactPerson: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/suppliers', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      setShowDialog(false);\n      setEditingSupplier(null);\n      form.reset();\n      toast({ title: \"Success\", description: \"Supplier created successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to create supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest('PUT', `/api/suppliers/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      setShowDialog(false);\n      setEditingSupplier(null);\n      form.reset();\n      toast({ title: \"Success\", description: \"Supplier updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to update supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/suppliers/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({ title: \"Success\", description: \"Supplier deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: \"Failed to delete supplier\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    if (editingSupplier) {\n      updateMutation.mutate({ id: editingSupplier.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (supplier: Supplier) => {\n    setEditingSupplier(supplier);\n    form.reset({\n      code: supplier.code || \"\",\n      name: supplier.name,\n      email: supplier.email || \"\",\n      phone: supplier.phone || \"\",\n      address: supplier.address || \"\",\n      contactPerson: supplier.contactPerson || \"\",\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this supplier?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleNew = () => {\n    setEditingSupplier(null);\n    form.reset();\n    setShowDialog(true);\n  };\n\n  const filteredSuppliers = (suppliers as Supplier[]).filter((supplier) =>\n    supplier.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (supplier.email && supplier.email.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    (supplier.contactPerson && supplier.contactPerson.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Manajemen Supplier\" \n          breadcrumb=\"Beranda / Supplier\"\n          action={\n            <Button onClick={handleNew} data-testid=\"button-add-supplier\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tambah Supplier\n            </Button>\n          }\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search Bar */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search suppliers by name, email, or contact person...\"\n                    className=\"pl-10\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-supplier-search\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Suppliers Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Suppliers ({filteredSuppliers.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : filteredSuppliers.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Truck className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    {searchQuery ? \"No suppliers match your search\" : \"No suppliers found\"}\n                  </p>\n                  <Button className=\"mt-4\" onClick={handleNew}>\n                    Add First Supplier\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Contact Information</TableHead>\n                      <TableHead>Contact Person</TableHead>\n                      <TableHead>Address</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredSuppliers.map((supplier: Supplier) => (\n                      <TableRow key={supplier.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-secondary/10 rounded-full flex items-center justify-center\">\n                              <Truck className=\"w-5 h-5 text-secondary\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`supplier-name-${supplier.id}`}>\n                                {supplier.name}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            {supplier.email && (\n                              <div className=\"flex items-center text-sm\">\n                                <Mail className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`supplier-email-${supplier.id}`}>\n                                  {supplier.email}\n                                </span>\n                              </div>\n                            )}\n                            {supplier.phone && (\n                              <div className=\"flex items-center text-sm\">\n                                <Phone className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                                <span data-testid={`supplier-phone-${supplier.id}`}>\n                                  {supplier.phone}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {supplier.contactPerson && (\n                            <div className=\"flex items-center text-sm\">\n                              <User className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span data-testid={`supplier-contact-${supplier.id}`}>\n                                {supplier.contactPerson}\n                              </span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {supplier.address && (\n                            <div className=\"flex items-center text-sm\">\n                              <MapPin className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                              <span className=\"text-muted-foreground truncate max-w-xs\" data-testid={`supplier-address-${supplier.id}`}>\n                                {supplier.address}\n                              </span>\n                            </div>\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(supplier)}\n                              data-testid={`button-edit-supplier-${supplier.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(supplier.id)}\n                              data-testid={`button-delete-supplier-${supplier.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Supplier Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingSupplier ? \"Edit Supplier\" : \"Add New Supplier\"}\n            </DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Code *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"SUP001\" {...field} data-testid=\"input-supplier-code\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter supplier name\" {...field} data-testid=\"input-supplier-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"contactPerson\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Person</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Contact person name\" {...field} data-testid=\"input-contact-person\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"email\" \n                          placeholder=\"supplier@example.com\" \n                          {...field} \n                          data-testid=\"input-supplier-email\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"08123456789\" \n                          {...field} \n                          data-testid=\"input-supplier-phone\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Supplier address\" \n                        {...field} \n                        data-testid=\"textarea-supplier-address\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-3 pt-6\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowDialog(false)}\n                  data-testid=\"button-cancel-supplier\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-save-supplier\"\n                >\n                  {editingSupplier ? \"Update Supplier\" : \"Create Supplier\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17348},"laptoppos-deployment-20250903-113337/client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Trash2, Edit, Users, Mail, UserCheck, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { User } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nconst userUpdateSchema = z.object({\n  firstName: z.string().min(1, \"Nama depan harus diisi\"),\n  lastName: z.string().optional(),\n  email: z.string().email(\"Format email tidak valid\"),\n  role: z.enum([\"admin\", \"kasir\", \"teknisi\", \"purchasing\", \"finance\", \"owner\"]),\n  isActive: z.boolean(),\n});\n\nconst roleLabels = {\n  admin: \"Administrator\",\n  kasir: \"Kasir\",\n  teknisi: \"Teknisi\",\n  purchasing: \"Purchasing\",\n  finance: \"Finance\", \n  owner: \"Owner\"\n};\n\nconst roleColors = {\n  admin: \"destructive\",\n  kasir: \"default\",\n  teknisi: \"secondary\",\n  purchasing: \"outline\",\n  finance: \"default\",\n  owner: \"destructive\"\n} as const;\n\nexport default function UsersPage() {\n  const [showDialog, setShowDialog] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch users\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: ['/api/users'],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(userUpdateSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      role: \"kasir\" as const,\n      isActive: true,\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('PUT', `/api/users/${editingUser?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setShowDialog(false);\n      setEditingUser(null);\n      form.reset();\n      toast({\n        title: \"Berhasil\",\n        description: \"User berhasil diupdate\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal mengupdate user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/users/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Berhasil\",\n        description: \"User berhasil dihapus\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Gagal menghapus user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    updateMutation.mutate(data);\n  };\n\n  const handleEdit = (user: User) => {\n    setEditingUser(user);\n    form.reset({\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      email: user.email || \"\",\n      role: (user.role as any) || \"kasir\",\n      isActive: user.isActive ?? true,\n    });\n    setShowDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Apakah Anda yakin ingin menghapus user ini?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getInitials = (user: User) => {\n    const first = user.firstName?.charAt(0) || \"\";\n    const last = user.lastName?.charAt(0) || \"\";\n    return (first + last).toUpperCase() || user.email?.charAt(0).toUpperCase() || \"?\";\n  };\n\n  if (isLoading) {\n    return <div data-testid=\"loading\">Memuat data user...</div>;\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Manajemen Pengguna\" breadcrumb=\"Beranda / Pengguna\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h1 className=\"text-2xl font-bold\" data-testid=\"page-title\">Manajemen Pengguna</h1>\n                <p className=\"text-muted-foreground\">Kelola akun pengguna dan peran mereka</p>\n              </div>\n            </div>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle data-testid=\"dialog-title\">Edit User</DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nama Depan</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Nama depan\"\n                          data-testid=\"input-first-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nama Belakang</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Nama belakang\"\n                          data-testid=\"input-last-name\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"user@example.com\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Peran</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Pilih peran\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Administrator</SelectItem>\n                        <SelectItem value=\"kasir\">Kasir</SelectItem>\n                        <SelectItem value=\"teknisi\">Teknisi</SelectItem>\n                        <SelectItem value=\"purchasing\">Purchasing</SelectItem>\n                        <SelectItem value=\"finance\">Finance</SelectItem>\n                        <SelectItem value=\"owner\">Owner</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Status Aktif</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        User dapat login dan mengakses sistem\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowDialog(false);\n                    setEditingUser(null);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel\"\n                >\n                  Batal\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={updateMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  Update\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"w-5 h-5 mr-2\" />\n            Daftar User\n          </CardTitle>\n          <CardDescription>\n            Total {(users as any[]).length} user terdaftar dalam sistem\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {(users as any[]).length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-state\">\n              Belum ada user yang terdaftar.\n            </div>\n          ) : (\n            <div className=\"border rounded-md\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Peran</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Bergabung</TableHead>\n                    <TableHead>Aksi</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {(users as User[]).map((user: User) => (\n                    <TableRow key={user.id} data-testid={`user-row-${user.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarImage src={user.profileImageUrl || \"\"} />\n                            <AvatarFallback className=\"text-sm\">\n                              {getInitials(user)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\" data-testid={`user-name-${user.id}`}>\n                              {`${user.firstName || \"\"} ${user.lastName || \"\"}`.trim() || \"User\"}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              ID: {user.id}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <Mail className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n                          <span data-testid={`user-email-${user.id}`}>\n                            {user.email || \"-\"}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={roleColors[user.role as keyof typeof roleColors] || \"default\"}\n                          data-testid={`user-role-${user.id}`}\n                        >\n                          <Shield className=\"w-3 h-3 mr-1\" />\n                          {roleLabels[user.role as keyof typeof roleLabels] || user.role}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.isActive ? \"default\" : \"secondary\"}\n                          data-testid={`user-status-${user.id}`}\n                        >\n                          <UserCheck className=\"w-3 h-3 mr-1\" />\n                          {user.isActive ? \"Aktif\" : \"Nonaktif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <span \n                          className=\"text-sm text-muted-foreground\"\n                          data-testid={`user-created-${user.id}`}\n                        >\n                          {user.createdAt \n                            ? new Date(user.createdAt).toLocaleDateString(\"id-ID\")\n                            : \"-\"\n                          }\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(user)}\n                            data-testid={`button-edit-${user.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(user.id)}\n                            data-testid={`button-delete-${user.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":15376},"laptoppos-deployment-20250903-113337/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"laptoppos-deployment-20250903-113337/ecosystem.config.js":{"content":"module.exports = {\n  apps: [{\n    name: 'laptoppos',\n    script: 'dist/server/index.js',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true\n  }]\n};\n","size_bytes":369},"laptoppos-deployment-20250903-113337/install-linux.sh":{"content":"#!/bin/bash\n\n# LaptopPOS - Automated Linux Installation Script\n# This script completely automates the installation process\n\nset -e  # Exit on any error\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\necho -e \"${GREEN}=============================================${NC}\"\necho -e \"${GREEN}LaptopPOS - Automated Linux Installation${NC}\"\necho -e \"${GREEN}=============================================${NC}\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\n# Logging functions\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"\n}\n\nerror() {\n    echo -e \"${RED}[ERROR] $1${NC}\"\n    exit 1\n}\n\nwarning() {\n    echo -e \"${YELLOW}[WARNING] $1${NC}\"\n}\n\ninfo() {\n    echo -e \"${BLUE}[INFO] $1${NC}\"\n}\n\n# Check if running as root\nif [[ $EUID -eq 0 ]]; then\n    error \"This script should not be run as root. Please run as a regular user with sudo privileges.\"\nfi\n\n# Detect Linux distribution\nif [ -f /etc/os-release ]; then\n    . /etc/os-release\n    DISTRO=$ID\n    VERSION=$VERSION_ID\nelse\n    error \"Cannot detect Linux distribution\"\nfi\n\nlog \"Detected distribution: $DISTRO $VERSION\"\nlog \"Starting automated installation...\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    print_error \"Node.js is not installed!\"\n    print_status \"Installing Node.js...\"\n    \n    # Detect OS\n    if [[ -f /etc/ubuntu-release ]] || [[ -f /etc/debian_version ]]; then\n        # Ubuntu/Debian\n        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\n        sudo apt-get install -y nodejs\n    elif [[ -f /etc/redhat-release ]] || [[ -f /etc/centos-release ]]; then\n        # RHEL/CentOS/Fedora\n        curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -\n        sudo yum install -y nodejs\n    elif [[ -f /etc/arch-release ]]; then\n        # Arch Linux\n        sudo pacman -S nodejs npm\n    else\n        print_error \"Unsupported Linux distribution. Please install Node.js manually:\"\n        print_status \"Visit: https://nodejs.org/en/download/package-manager/\"\n        exit 1\n    fi\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version)\nprint_success \"Node.js version: $NODE_VERSION\"\n\n# Check if npm is installed\nif ! command -v npm &> /dev/null; then\n    print_error \"npm is not installed!\"\n    exit 1\nfi\n\nNPM_VERSION=$(npm --version)\nprint_success \"npm version: $NPM_VERSION\"\n\n# Check if PostgreSQL is installed\nif ! command -v pg_config &> /dev/null; then\n    print_warning \"PostgreSQL is not installed!\"\n    print_status \"Installing PostgreSQL...\"\n    \n    if [[ -f /etc/ubuntu-release ]] || [[ -f /etc/debian_version ]]; then\n        # Ubuntu/Debian\n        sudo apt-get update\n        sudo apt-get install -y postgresql postgresql-contrib\n        sudo systemctl start postgresql\n        sudo systemctl enable postgresql\n    elif [[ -f /etc/redhat-release ]] || [[ -f /etc/centos-release ]]; then\n        # RHEL/CentOS/Fedora\n        sudo yum install -y postgresql-server postgresql-contrib\n        sudo postgresql-setup initdb\n        sudo systemctl start postgresql\n        sudo systemctl enable postgresql\n    elif [[ -f /etc/arch-release ]]; then\n        # Arch Linux\n        sudo pacman -S postgresql\n        sudo -u postgres initdb --locale=C.UTF-8 --encoding=UTF8 -D /var/lib/postgres/data\n        sudo systemctl start postgresql\n        sudo systemctl enable postgresql\n    fi\nfi\n\nPG_VERSION=$(pg_config --version 2>/dev/null || echo \"Not available\")\nprint_success \"PostgreSQL: $PG_VERSION\"\n\nprint_status \"Installing dependencies...\"\nnpm install\n\nif [ $? -ne 0 ]; then\n    print_error \"Failed to install dependencies!\"\n    exit 1\nfi\n\nprint_status \"Creating necessary directories...\"\nmkdir -p logs uploads temp/reports backups whatsapp_session\n\nprint_status \"Setting up environment configuration...\"\nif [ ! -f \".env\" ]; then\n    cp .env.example .env\n    print_success \"Created .env file from template\"\n    print_warning \"IMPORTANT: Please edit .env file with your database credentials!\"\nelse\n    print_status \".env file already exists\"\nfi\n\nprint_status \"Building application...\"\nnpm run build\n\nif [ $? -ne 0 ]; then\n    print_error \"Failed to build application!\"\n    exit 1\nfi\n\nprint_status \"Setting up systemd service...\"\ncat > laptoppos.service << EOF\n[Unit]\nDescription=LaptopPOS Service Management System\nAfter=network.target postgresql.service\n\n[Service]\nType=simple\nUser=$USER\nWorkingDirectory=$(pwd)\nEnvironment=NODE_ENV=production\nExecStart=/usr/bin/node dist/index.js\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=laptoppos\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nprint_success \"Created laptoppos.service file\"\n\n# Setup database automatically\nsetup_database() {\n    log \"Setting up PostgreSQL database...\"\n    \n    # Generate secure random password\n    DB_PASSWORD=$(openssl rand -base64 32 | tr -d \"=+/\" | cut -c1-25)\n    \n    # Create database and user\n    sudo -u postgres psql <<EOF\nCREATE USER laptoppos WITH PASSWORD '$DB_PASSWORD';\nCREATE DATABASE laptoppos OWNER laptoppos;\nGRANT ALL PRIVILEGES ON DATABASE laptoppos TO laptoppos;\nALTER USER laptoppos CREATEDB;\n\\\\q\nEOF\n    \n    # Create environment file with actual credentials\n    cat > .env <<EOF\nNODE_ENV=production\nPORT=5000\nSESSION_SECRET=$(openssl rand -base64 32)\n\n# Database Configuration\nDATABASE_URL=postgresql://laptoppos:$DB_PASSWORD@localhost:5432/laptoppos\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=laptoppos\nPGUSER=laptoppos\nPGPASSWORD=$DB_PASSWORD\n\n# Security\nBCRYPT_ROUNDS=12\n\n# Default Admin\nDEFAULT_ADMIN_USERNAME=admin\nDEFAULT_ADMIN_PASSWORD=admin123\nDEFAULT_ADMIN_EMAIL=admin@laptoppos.com\nEOF\n    \n    info \"Database credentials saved to .env file\"\n    \n    # Run database migrations\n    log \"Running database migrations...\"\n    export $(cat .env | xargs)\n    npm run db:push --force || npm run db:push\n    \n    log \"Database setup completed successfully\"\n}\n\n# Create systemd service\ncreate_systemd_service() {\n    log \"Creating systemd service...\"\n    \n    CURRENT_DIR=$(pwd)\n    CURRENT_USER=$(whoami)\n    \n    sudo tee /etc/systemd/system/laptoppos.service > /dev/null <<EOF\n[Unit]\nDescription=LaptopPOS - Point of Sale System\nAfter=network.target postgresql.service\nWants=postgresql.service\n\n[Service]\nType=simple\nUser=$CURRENT_USER\nWorkingDirectory=$CURRENT_DIR\nEnvironment=NODE_ENV=production\nEnvironmentFile=$CURRENT_DIR/.env\nExecStart=/usr/bin/npm start\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=laptoppos\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    \n    sudo systemctl daemon-reload\n    sudo systemctl enable laptoppos\n    \n    log \"Systemd service created and enabled\"\n}\n\n# Start the application\nstart_application() {\n    log \"Starting LaptopPOS application...\"\n    \n    sudo systemctl start laptoppos\n    \n    # Wait for service to start\n    sleep 5\n    \n    if sudo systemctl is-active --quiet laptoppos; then\n        log \"LaptopPOS started successfully!\"\n    else\n        error \"Failed to start LaptopPOS. Check logs with: sudo journalctl -u laptoppos -f\"\n    fi\n}\n\n# Configure firewall\nsetup_firewall() {\n    if command -v ufw >/dev/null 2>&1; then\n        sudo ufw allow 5000/tcp\n        info \"Firewall configured to allow port 5000\"\n    elif command -v firewall-cmd >/dev/null 2>&1; then\n        sudo firewall-cmd --permanent --add-port=5000/tcp\n        sudo firewall-cmd --reload\n        info \"Firewall configured to allow port 5000\"\n    else\n        warning \"No firewall detected. Make sure port 5000 is accessible.\"\n    fi\n}\n\n# Call all setup functions\nsetup_database\ncreate_systemd_service\nsetup_firewall\nstart_application\n\necho\necho -e \"${GREEN}=============================================${NC}\"\necho -e \"${GREEN}     Installation Completed Successfully!${NC}\"\necho -e \"${GREEN}=============================================${NC}\"\necho\necho -e \"${BLUE}Application URL:${NC} http://$(hostname -I | awk '{print $1}'):5000\"\necho -e \"${BLUE}Default Login:${NC} admin / admin123\"\necho\necho -e \"${YELLOW}Service Management:${NC}\"\necho \"  Start:   sudo systemctl start laptoppos\"\necho \"  Stop:    sudo systemctl stop laptoppos\"\necho \"  Restart: sudo systemctl restart laptoppos\"\necho \"  Status:  sudo systemctl status laptoppos\"\necho \"  Logs:    sudo journalctl -u laptoppos -f\"\necho\necho -e \"${YELLOW}Configuration Files:${NC}\"\necho \"  Environment: $(pwd)/.env\"\necho \"  Service:     /etc/systemd/system/laptoppos.service\"\necho\necho -e \"${RED}IMPORTANT: Change the default password after first login!${NC}\"\necho -e \"${GREEN}=============================================${NC}\"","size_bytes":8712},"client/src/hooks/useSetup.ts":{"content":"import { useQuery } from '@tanstack/react-query';\n\ninterface SetupStatus {\n  setupCompleted: boolean;\n  hasStoreConfig: boolean;\n  hasAdminUser: boolean;\n  storeName?: string;\n  setupSteps: {\n    store?: boolean;\n    admin?: boolean;\n    completed?: boolean;\n  };\n}\n\nexport function useSetup() {\n  const { data: setupStatus, isLoading: isSetupLoading, error } = useQuery<SetupStatus>({\n    queryKey: ['/api/setup/status'],\n    refetchInterval: false,\n    staleTime: Infinity, // Don't refetch unless manually invalidated\n    retry: 3, // Retry failed requests\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n  });\n\n  const isSetupCompleted = setupStatus?.setupCompleted ?? false;\n  // Show setup if not completed OR if there's an error (assume fresh installation)\n  const needsSetup = (!isSetupCompleted && !isSetupLoading) || (!setupStatus && !isSetupLoading);\n\n  // Debug logging for development\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Setup Status Debug:', {\n      setupStatus,\n      isSetupLoading,\n      isSetupCompleted,\n      needsSetup,\n      error: error?.message\n    });\n  }\n\n  return {\n    setupStatus,\n    isSetupLoading,\n    isSetupCompleted,\n    needsSetup,\n    error,\n  };\n}","size_bytes":1264},"client/src/pages/setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { CheckCircle, Circle, Store, User, Settings, ArrowRight, Loader2, Database } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\ninterface SetupStatus {\n  setupCompleted: boolean;\n  hasStoreConfig: boolean;\n  hasAdminUser: boolean;\n  storeName?: string;\n  databaseMigrated?: boolean;\n  setupSteps: {\n    store?: boolean;\n    database?: boolean;\n    admin?: boolean;\n    completed?: boolean;\n  };\n}\n\nexport default function Setup() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [dbMigrationProgress, setDbMigrationProgress] = useState(0);\n  const [dbMigrationStatus, setDbMigrationStatus] = useState('');\n  const [setupData, setSetupData] = useState({\n    storeName: '',\n    storeAddress: '',\n    storePhone: '',\n    storeEmail: '',\n    adminUsername: '',\n    adminPassword: '',\n    adminEmail: '',\n    adminFirstName: '',\n    adminLastName: '',\n  });\n\n  // Check setup status\n  const { data: setupStatus, isLoading } = useQuery<SetupStatus>({\n    queryKey: ['/api/setup/status'],\n    refetchInterval: false,\n  });\n\n  useEffect(() => {\n    // Redirect if setup is already completed\n    if (setupStatus?.setupCompleted) {\n      toast({\n        title: \"Setup Completed\",\n        description: \"Application is already set up. Redirecting to dashboard...\",\n      });\n      setTimeout(() => setLocation('/dashboard'), 2000);\n    }\n  }, [setupStatus, setLocation, toast]);\n\n  // Store setup mutation\n  const storeSetupMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/setup/store', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to setup store');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Store Setup Complete\",\n        description: \"Store configuration has been saved successfully\",\n      });\n      setCurrentStep(3);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Setup Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Database migration mutation with progress simulation\n  const databaseMigrationMutation = useMutation({\n    mutationFn: async () => {\n      // Simulate progress during migration\n      setDbMigrationProgress(0);\n      setDbMigrationStatus('Initializing database connection...');\n      \n      // Simulate progress steps\n      const progressSteps = [\n        { progress: 8, status: 'Connecting to database...' },\n        { progress: 15, status: 'Creating core tables schema...' },\n        { progress: 25, status: 'Setting up user roles & authentication...' },\n        { progress: 35, status: 'Creating product & inventory tables...' },\n        { progress: 45, status: 'Setting up financial system...' },\n        { progress: 55, status: 'Initializing service management...' },\n        { progress: 65, status: 'Setting up SaaS multi-tenant architecture...' },\n        { progress: 75, status: 'Creating client & subscription tables...' },\n        { progress: 85, status: 'Setting up subscription plans...' },\n        { progress: 92, status: 'Initializing billing system...' },\n        { progress: 98, status: 'Finalizing database structure...' }\n      ];\n\n      for (const step of progressSteps) {\n        await new Promise(resolve => setTimeout(resolve, 800));\n        setDbMigrationProgress(step.progress);\n        setDbMigrationStatus(step.status);\n      }\n\n      const response = await fetch('/api/setup/migrate-database', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to migrate database');\n      }\n      \n      setDbMigrationProgress(100);\n      setDbMigrationStatus('Database migration completed!');\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Database Setup Complete\",\n        description: \"Database schema has been pushed successfully\",\n      });\n      \n      // Auto-proceed to initial data setup after a short delay\n      setTimeout(() => {\n        initialDataSetupMutation.mutate();\n      }, 1500);\n    },\n    onError: (error: Error) => {\n      setDbMigrationProgress(0);\n      setDbMigrationStatus('');\n      toast({\n        title: \"Database Setup Error\", \n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initial data setup mutation\n  const initialDataSetupMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/setup/initial-data', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to setup initial data');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Initial Data Setup Complete\",\n        description: \"Categories, locations, and accounts created successfully\",\n      });\n      setCurrentStep(2);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Setup Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Admin setup mutation\n  const adminSetupMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/setup/admin', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create admin user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Admin User Created\",\n        description: \"Admin user has been created successfully\",\n      });\n      setCurrentStep(4);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Setup Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete setup mutation\n  const completeSetupMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/setup/complete', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to complete setup');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Setup Completed!\",\n        description: \"Setup selesai! Mengarahkan ke halaman login dalam 3 detik...\",\n        duration: 3000,\n      });\n      // Immediate redirect to login page\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 3000);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Setup Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStoreSetup = () => {\n    if (!setupData.storeName.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Store name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    storeSetupMutation.mutate({\n      name: setupData.storeName,\n      address: setupData.storeAddress,\n      phone: setupData.storePhone,\n      email: setupData.storeEmail,\n      taxRate: '11.00',\n    });\n  };\n\n  const handleAdminSetup = () => {\n    if (!setupData.adminUsername.trim() || !setupData.adminPassword.trim() || !setupData.adminEmail.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Username, password, and email are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    adminSetupMutation.mutate({\n      username: setupData.adminUsername,\n      password: setupData.adminPassword,\n      email: setupData.adminEmail,\n      firstName: setupData.adminFirstName || 'System',\n      lastName: setupData.adminLastName || 'Administrator',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\n          <span>Loading setup status...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (setupStatus?.setupCompleted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-emerald-100 dark:from-gray-900 dark:to-gray-800\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\n            <CardTitle className=\"text-2xl\">Setup Complete!</CardTitle>\n            <CardDescription>\n              Your application is already configured and ready to use.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-center text-muted-foreground\">\n              Redirecting to dashboard...\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-full p-4 shadow-lg\">\n                <Settings className=\"h-12 w-12 text-blue-600\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              LaptopPOS Setup Wizard\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Welcome! Let's set up your point-of-sale system in a few simple steps.\n            </p>\n          </div>\n\n          {/* Progress Steps */}\n          <div className=\"flex justify-center mb-12\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center\">\n                {currentStep > 1 ? (\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                ) : currentStep === 1 ? (\n                  <div className=\"h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">1</span>\n                  </div>\n                ) : (\n                  <Circle className=\"h-8 w-8 text-gray-400\" />\n                )}\n                <span className=\"ml-2 font-medium text-gray-900 dark:text-white\">Database</span>\n              </div>\n              \n              <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n              \n              <div className=\"flex items-center\">\n                {currentStep > 2 ? (\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                ) : currentStep === 2 ? (\n                  <div className=\"h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">2</span>\n                  </div>\n                ) : (\n                  <Circle className=\"h-8 w-8 text-gray-400\" />\n                )}\n                <span className=\"ml-2 font-medium text-gray-900 dark:text-white\">Store</span>\n              </div>\n              \n              <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n              \n              <div className=\"flex items-center\">\n                {currentStep > 3 ? (\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                ) : currentStep === 3 ? (\n                  <div className=\"h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">3</span>\n                  </div>\n                ) : (\n                  <Circle className=\"h-8 w-8 text-gray-400\" />\n                )}\n                <span className=\"ml-2 font-medium text-gray-900 dark:text-white\">Admin</span>\n              </div>\n              \n              <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n              \n              <div className=\"flex items-center\">\n                {currentStep === 4 ? (\n                  <div className=\"h-8 w-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">4</span>\n                  </div>\n                ) : (\n                  <Circle className=\"h-8 w-8 text-gray-400\" />\n                )}\n                <span className=\"ml-2 font-medium text-gray-900 dark:text-white\">Complete</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Step Content */}\n          <Card className=\"max-w-2xl mx-auto\">\n            {currentStep === 1 && (\n              <>\n                <CardHeader>\n                  <div className=\"flex items-center\">\n                    <Database className=\"h-6 w-6 text-blue-600 mr-2\" />\n                    <CardTitle>Database Setup</CardTitle>\n                  </div>\n                  <CardDescription>\n                    Push schema dan buat semua tabel database yang diperlukan\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"text-center py-8\">\n                    <Database className=\"h-16 w-16 text-blue-600 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium mb-2\">Siap Setup Database</h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Klik tombol di bawah untuk melakukan database push otomatis. \n                      Ini akan membuat semua tabel dan indeks yang diperlukan aplikasi Anda.\n                    </p>\n                    \n                    {databaseMigrationMutation.isPending && (\n                      <div className=\"bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg mb-6\">\n                        <div className=\"space-y-4\">\n                          {/* Progress Bar */}\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n                                Database Push Progress\n                              </span>\n                              <span className=\"text-sm text-blue-600 dark:text-blue-400\">\n                                {dbMigrationProgress}%\n                              </span>\n                            </div>\n                            <Progress \n                              value={dbMigrationProgress} \n                              className=\"w-full h-2 bg-blue-100 dark:bg-blue-900\"\n                            />\n                          </div>\n                          \n                          {/* Status Text */}\n                          <div className=\"flex items-center justify-center space-x-2 text-blue-700 dark:text-blue-300\">\n                            <Loader2 className=\"h-5 w-5 animate-spin\" />\n                            <span className=\"text-sm\">{dbMigrationStatus || 'Initializing...'}</span>\n                          </div>\n                          \n                          {/* Info Text */}\n                          <p className=\"text-xs text-blue-600 dark:text-blue-400 text-center\">\n                            Sedang melakukan database push - mohon tunggu sebentar...\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    <Button \n                      onClick={() => databaseMigrationMutation.mutate()}\n                      disabled={databaseMigrationMutation.isPending}\n                      data-testid=\"button-migrate-database\"\n                    >\n                      {databaseMigrationMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Pushing Schema...\n                        </>\n                      ) : (\n                        <>\n                          🚀 Push Database\n                          <ArrowRight className=\"h-4 w-4 ml-2\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </>\n            )}\n\n            {currentStep === 2 && (\n              <>\n                <CardHeader>\n                  <div className=\"flex items-center\">\n                    <Store className=\"h-6 w-6 text-blue-600 mr-2\" />\n                    <CardTitle>Store Configuration</CardTitle>\n                  </div>\n                  <CardDescription>\n                    Enter your store information to get started\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"storeName\">Store Name *</Label>\n                      <Input\n                        id=\"storeName\"\n                        placeholder=\"My LaptopPOS Store\"\n                        value={setupData.storeName}\n                        onChange={(e) => setSetupData(prev => ({ ...prev, storeName: e.target.value }))}\n                        data-testid=\"input-store-name\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"storeAddress\">Store Address</Label>\n                      <Input\n                        id=\"storeAddress\"\n                        placeholder=\"123 Main Street, City, State\"\n                        value={setupData.storeAddress}\n                        onChange={(e) => setSetupData(prev => ({ ...prev, storeAddress: e.target.value }))}\n                        data-testid=\"input-store-address\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"storePhone\">Phone Number</Label>\n                        <Input\n                          id=\"storePhone\"\n                          placeholder=\"+62 123 456 7890\"\n                          value={setupData.storePhone}\n                          onChange={(e) => setSetupData(prev => ({ ...prev, storePhone: e.target.value }))}\n                          data-testid=\"input-store-phone\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"storeEmail\">Store Email</Label>\n                        <Input\n                          id=\"storeEmail\"\n                          type=\"email\"\n                          placeholder=\"store@example.com\"\n                          value={setupData.storeEmail}\n                          onChange={(e) => setSetupData(prev => ({ ...prev, storeEmail: e.target.value }))}\n                          data-testid=\"input-store-email\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setCurrentStep(1)}\n                      data-testid=\"button-back-store\"\n                      disabled={storeSetupMutation.isPending}\n                    >\n                      Back\n                    </Button>\n                    <Button \n                      onClick={handleStoreSetup}\n                      disabled={storeSetupMutation.isPending}\n                      data-testid=\"button-continue-store\"\n                    >\n                      {storeSetupMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Setting up...\n                        </>\n                      ) : (\n                        <>\n                          Continue\n                          <ArrowRight className=\"h-4 w-4 ml-2\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </>\n            )}\n\n            {currentStep === 3 && (\n              <>\n                <CardHeader>\n                  <div className=\"flex items-center\">\n                    <User className=\"h-6 w-6 text-blue-600 mr-2\" />\n                    <CardTitle>Create Admin User</CardTitle>\n                  </div>\n                  <CardDescription>\n                    Create the first administrator account for your system\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"adminUsername\">Username *</Label>\n                      <Input\n                        id=\"adminUsername\"\n                        placeholder=\"admin\"\n                        value={setupData.adminUsername}\n                        onChange={(e) => setSetupData(prev => ({ ...prev, adminUsername: e.target.value }))}\n                        data-testid=\"input-admin-username\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"adminPassword\">Password *</Label>\n                      <Input\n                        id=\"adminPassword\"\n                        type=\"password\"\n                        placeholder=\"Enter a secure password\"\n                        value={setupData.adminPassword}\n                        onChange={(e) => setSetupData(prev => ({ ...prev, adminPassword: e.target.value }))}\n                        data-testid=\"input-admin-password\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"adminEmail\">Email *</Label>\n                      <Input\n                        id=\"adminEmail\"\n                        type=\"email\"\n                        placeholder=\"admin@example.com\"\n                        value={setupData.adminEmail}\n                        onChange={(e) => setSetupData(prev => ({ ...prev, adminEmail: e.target.value }))}\n                        data-testid=\"input-admin-email\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"adminFirstName\">First Name</Label>\n                        <Input\n                          id=\"adminFirstName\"\n                          placeholder=\"John\"\n                          value={setupData.adminFirstName}\n                          onChange={(e) => setSetupData(prev => ({ ...prev, adminFirstName: e.target.value }))}\n                          data-testid=\"input-admin-firstname\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"adminLastName\">Last Name</Label>\n                        <Input\n                          id=\"adminLastName\"\n                          placeholder=\"Doe\"\n                          value={setupData.adminLastName}\n                          onChange={(e) => setSetupData(prev => ({ ...prev, adminLastName: e.target.value }))}\n                          data-testid=\"input-admin-lastname\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setCurrentStep(2)}\n                      data-testid=\"button-back-admin\"\n                    >\n                      Back\n                    </Button>\n                    <Button \n                      onClick={handleAdminSetup}\n                      disabled={adminSetupMutation.isPending}\n                      data-testid=\"button-create-admin\"\n                    >\n                      {adminSetupMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Creating...\n                        </>\n                      ) : (\n                        <>\n                          Create Admin\n                          <ArrowRight className=\"h-4 w-4 ml-2\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </>\n            )}\n\n            {currentStep === 4 && (\n              <>\n                <CardHeader>\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-6 w-6 text-green-600 mr-2\" />\n                    <CardTitle>Setup Complete</CardTitle>\n                  </div>\n                  <CardDescription>\n                    Your LaptopPOS system is ready to use!\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-green-50 dark:bg-green-900/20 p-6 rounded-lg text-center\">\n                    <h3 className=\"font-semibold text-green-800 dark:text-green-200 mb-4 text-lg\">\n                      🎉 Setup Selesai!\n                    </h3>\n                    <p className=\"text-green-700 dark:text-green-300 text-sm mb-4\">\n                      Sistem LaptopPOS Anda sudah berhasil dikonfigurasi. Sekarang Anda bisa login dan mulai mengelola bisnis.\n                    </p>\n                    <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg border-2 border-green-200 dark:border-green-700\">\n                      <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                        Klik tombol \"Complete Setup\" di bawah untuk menyelesaikan instalasi\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Anda akan diarahkan ke halaman login setelah setup selesai\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium\">What's next?</h4>\n                    <ul className=\"list-disc list-inside space-y-2 text-sm text-muted-foreground\">\n                      <li>Add products and categories to your inventory</li>\n                      <li>Configure additional user roles and permissions</li>\n                      <li>Set up WhatsApp integration for notifications</li>\n                      <li>Start processing sales and service tickets</li>\n                    </ul>\n                  </div>\n\n                  <div className=\"flex justify-between\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setCurrentStep(3)}\n                      data-testid=\"button-back-complete\"\n                    >\n                      Back\n                    </Button>\n                    <Button \n                      size=\"lg\"\n                      className=\"px-8 py-3 text-lg font-semibold bg-green-600 hover:bg-green-700 text-white\"\n                      onClick={() => completeSetupMutation.mutate()}\n                      disabled={completeSetupMutation.isPending}\n                      data-testid=\"button-complete-setup\"\n                    >\n                      {completeSetupMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n                          Menyelesaikan Setup...\n                        </>\n                      ) : (\n                        <>\n                          ✅ Complete Setup\n                          <CheckCircle className=\"h-5 w-5 ml-2\" />\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":29702},"server/defaultRoles.ts":{"content":"export const defaultRoleConfigs = [\n  {\n    name: 'admin',\n    displayName: 'Administrator',\n    description: 'Full system access with all permissions',\n    permissions: [\n      'dashboard_view', 'pos_access', 'inventory_full', 'purchasing_full',\n      'financial_full', 'reports_full', 'customers_full', 'suppliers_full',\n      'service_tickets_full', 'users_full', 'roles_full', 'settings_full',\n      'whatsapp_settings', 'store_settings', 'system_admin', 'saas_admin'\n    ]\n  },\n  {\n    name: 'kasir',\n    displayName: 'Kasir',\n    description: 'Point of sale operations and basic customer management',\n    permissions: [\n      'dashboard_view', 'pos_access', 'inventory_view', 'customers_view',\n      'customers_create', 'customers_edit', 'transactions_create',\n      'reports_sales_view'\n    ]\n  },\n  {\n    name: 'teknisi',\n    displayName: 'Teknisi',\n    description: 'Service ticket management and technical operations',\n    permissions: [\n      'dashboard_view', 'service_tickets_full', 'inventory_view',\n      'inventory_update_stock', 'customers_view', 'customers_create',\n      'customers_edit', 'reports_services_view'\n    ]\n  },\n  {\n    name: 'purchasing',\n    displayName: 'Purchasing',\n    description: 'Purchasing and supplier management',\n    permissions: [\n      'dashboard_view', 'purchasing_full', 'suppliers_full', 'inventory_full',\n      'reports_purchasing_view', 'reports_inventory_view'\n    ]\n  },\n  {\n    name: 'finance',\n    displayName: 'Finance',\n    description: 'Financial management and reporting',\n    permissions: [\n      'dashboard_view', 'financial_full', 'reports_full', 'customers_view',\n      'suppliers_view', 'transactions_view'\n    ]\n  },\n  {\n    name: 'owner',\n    displayName: 'Owner',\n    description: 'Business owner with comprehensive access',\n    permissions: [\n      'dashboard_view', 'pos_access', 'inventory_view', 'purchasing_view',\n      'financial_full', 'reports_full', 'customers_full', 'suppliers_view',\n      'service_tickets_view', 'users_view', 'settings_view'\n    ]\n  }\n];","size_bytes":2034},"laptoppos-deployment-20250903-113337/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"laptoppos-deployment-20250903-113337/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"laptoppos-deployment-20250903-113337/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"laptoppos-deployment-20250903-113337/server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport session from 'express-session';\nimport type { Express, RequestHandler } from 'express';\nimport connectPg from 'connect-pg-simple';\nimport { storage } from './storage';\nimport type { User, LoginUser } from '@shared/schema';\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: 'sessions',\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-change-this',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: 'auto', // Auto-detect HTTPS for deployment compatibility\n      sameSite: 'lax', // Better compatibility with modern browsers\n      maxAge: sessionTtl,\n    },\n    name: 'laptoppos.session', // Custom session name\n    proxy: true, // Trust proxy for deployment\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set('trust proxy', 1);\n  app.use(getSession());\n  \n  // Create default admin user if it doesn't exist (for local deployment)\n  await createDefaultAdminUser();\n}\n\nasync function createDefaultAdminUser() {\n  try {\n    const adminUsername = process.env.DEFAULT_ADMIN_USERNAME || 'admin';\n    const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123';\n    const adminEmail = process.env.DEFAULT_ADMIN_EMAIL || 'admin@laptoppos.com';\n    \n    // Check if admin user exists\n    const existingUser = await storage.getUserByUsername(adminUsername);\n    \n    if (!existingUser) {\n      // Create default admin user\n      const hashedPassword = await hashPassword(adminPassword);\n      \n      await storage.createUser({\n        id: 'admin-' + Date.now(),\n        username: adminUsername,\n        email: adminEmail,\n        firstName: 'System',\n        lastName: 'Administrator',\n        password: hashedPassword,\n        role: 'admin',\n        isActive: true,\n        profileImageUrl: null\n      });\n      \n      console.log(`✅ Default admin user created: ${adminUsername}/${adminPassword}`);\n    }\n  } catch (error) {\n    console.error('Error creating default admin user:', error);\n  }\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (req.session && req.session.user) {\n    return next();\n  }\n  return res.status(401).json({ message: 'Unauthorized' });\n};\n\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function authenticateUser(credentials: LoginUser): Promise<User | null> {\n  try {\n    const user = await storage.getUserByUsername(credentials.username);\n    if (!user || !user.password) {\n      return null;\n    }\n\n    const isValidPassword = await verifyPassword(credentials.password, user.password);\n    if (!isValidPassword) {\n      return null;\n    }\n\n    // Don't return password in user object\n    const { password, ...userWithoutPassword } = user;\n    return userWithoutPassword as User;\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return null;\n  }\n}\n\n// Extend session interface\ndeclare module 'express-session' {\n  interface SessionData {\n    user: User;\n  }\n}","size_bytes":3479},"laptoppos-deployment-20250903-113337/server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"laptoppos-deployment-20250903-113337/server/defaultAccounts.ts":{"content":"// Standard Chart of Accounts untuk Indonesia\nexport const defaultAccounts = [\n  // ASSETS (Aset) - Normal Balance: Debit\n  { code: '1000', name: 'Aset', type: 'asset', subtype: 'asset_root', normalBalance: 'debit', description: 'Aset utama perusahaan' },\n  \n  // Current Assets (Aset Lancar)\n  { code: '1100', name: 'Aset Lancar', type: 'asset', subtype: 'current_asset', normalBalance: 'debit', parentCode: '1000', description: 'Aset yang dapat dicairkan dalam 1 tahun' },\n  { code: '1110', name: 'Kas dan Setara Kas', type: 'asset', subtype: 'cash', normalBalance: 'debit', parentCode: '1100', description: 'Kas di tangan dan bank' },\n  { code: '1111', name: 'Kas', type: 'asset', subtype: 'cash', normalBalance: 'debit', parentCode: '1110', description: 'Uang tunai' },\n  { code: '1112', name: 'Bank', type: 'asset', subtype: 'cash', normalBalance: 'debit', parentCode: '1110', description: 'Rekening bank' },\n  { code: '1120', name: 'Piutang Usaha', type: 'asset', subtype: 'receivable', normalBalance: 'debit', parentCode: '1100', description: 'Tagihan kepada pelanggan' },\n  { code: '1130', name: 'Persediaan', type: 'asset', subtype: 'inventory', normalBalance: 'debit', parentCode: '1100', description: 'Stok barang dagangan' },\n  { code: '1140', name: 'Piutang Lainnya', type: 'asset', subtype: 'receivable', normalBalance: 'debit', parentCode: '1100', description: 'Piutang di luar usaha utama' },\n  { code: '1150', name: 'Biaya Dibayar Dimuka', type: 'asset', subtype: 'prepaid', normalBalance: 'debit', parentCode: '1100', description: 'Biaya yang sudah dibayar untuk periode mendatang' },\n\n  // Fixed Assets (Aset Tetap)\n  { code: '1200', name: 'Aset Tetap', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1000', description: 'Aset jangka panjang untuk operasional' },\n  { code: '1210', name: 'Peralatan', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1200', description: 'Peralatan kantor dan toko' },\n  { code: '1220', name: 'Kendaraan', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1200', description: 'Kendaraan operasional' },\n  { code: '1230', name: 'Furniture dan Fixtures', type: 'asset', subtype: 'fixed_asset', normalBalance: 'debit', parentCode: '1200', description: 'Mebel dan perlengkapan' },\n  { code: '1240', name: 'Akumulasi Penyusutan - Peralatan', type: 'asset', subtype: 'accumulated_depreciation', normalBalance: 'credit', parentCode: '1200', description: 'Akumulasi penyusutan peralatan' },\n\n  // LIABILITIES (Kewajiban) - Normal Balance: Credit\n  { code: '2000', name: 'Kewajiban', type: 'liability', subtype: 'liability_root', normalBalance: 'credit', description: 'Kewajiban perusahaan' },\n  \n  // Current Liabilities (Kewajiban Lancar)\n  { code: '2100', name: 'Kewajiban Lancar', type: 'liability', subtype: 'current_liability', normalBalance: 'credit', parentCode: '2000', description: 'Kewajiban jatuh tempo dalam 1 tahun' },\n  { code: '2110', name: 'Hutang Usaha', type: 'liability', subtype: 'payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang kepada supplier' },\n  { code: '2120', name: 'Hutang Pajak', type: 'liability', subtype: 'tax_payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang pajak yang belum dibayar' },\n  { code: '2130', name: 'Hutang Gaji', type: 'liability', subtype: 'payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang gaji karyawan' },\n  { code: '2140', name: 'Hutang Lainnya', type: 'liability', subtype: 'payable', normalBalance: 'credit', parentCode: '2100', description: 'Hutang di luar usaha utama' },\n\n  // Long-term Liabilities (Kewajiban Jangka Panjang)\n  { code: '2200', name: 'Kewajiban Jangka Panjang', type: 'liability', subtype: 'long_term_liability', normalBalance: 'credit', parentCode: '2000', description: 'Kewajiban jatuh tempo lebih dari 1 tahun' },\n  { code: '2210', name: 'Hutang Bank', type: 'liability', subtype: 'loan', normalBalance: 'credit', parentCode: '2200', description: 'Pinjaman bank jangka panjang' },\n\n  // EQUITY (Modal) - Normal Balance: Credit\n  { code: '3000', name: 'Modal', type: 'equity', subtype: 'equity_root', normalBalance: 'credit', description: 'Modal pemilik' },\n  { code: '3100', name: 'Modal Pemilik', type: 'equity', subtype: 'owner_equity', normalBalance: 'credit', parentCode: '3000', description: 'Modal yang disetorkan pemilik' },\n  { code: '3200', name: 'Laba Ditahan', type: 'equity', subtype: 'retained_earnings', normalBalance: 'credit', parentCode: '3000', description: 'Akumulasi laba/rugi periode sebelumnya' },\n  { code: '3300', name: 'Laba Rugi Tahun Berjalan', type: 'equity', subtype: 'current_earnings', normalBalance: 'credit', parentCode: '3000', description: 'Laba/rugi periode berjalan' },\n\n  // REVENUE (Pendapatan) - Normal Balance: Credit\n  { code: '4000', name: 'Pendapatan', type: 'revenue', subtype: 'revenue_root', normalBalance: 'credit', description: 'Pendapatan perusahaan' },\n  { code: '4100', name: 'Pendapatan Penjualan', type: 'revenue', subtype: 'sales_revenue', normalBalance: 'credit', parentCode: '4000', description: 'Pendapatan dari penjualan barang' },\n  { code: '4110', name: 'Penjualan Laptop', type: 'revenue', subtype: 'sales_revenue', normalBalance: 'credit', parentCode: '4100', description: 'Penjualan produk laptop' },\n  { code: '4120', name: 'Penjualan Aksesoris', type: 'revenue', subtype: 'sales_revenue', normalBalance: 'credit', parentCode: '4100', description: 'Penjualan aksesoris laptop' },\n  { code: '4200', name: 'Pendapatan Jasa', type: 'revenue', subtype: 'service_revenue', normalBalance: 'credit', parentCode: '4000', description: 'Pendapatan dari layanan service' },\n  { code: '4210', name: 'Jasa Service Laptop', type: 'revenue', subtype: 'service_revenue', normalBalance: 'credit', parentCode: '4200', description: 'Pendapatan service dan perbaikan laptop' },\n  { code: '4300', name: 'Pendapatan Lainnya', type: 'revenue', subtype: 'other_revenue', normalBalance: 'credit', parentCode: '4000', description: 'Pendapatan di luar usaha utama' },\n\n  // EXPENSES (Biaya) - Normal Balance: Debit\n  { code: '5000', name: 'Biaya', type: 'expense', subtype: 'expense_root', normalBalance: 'debit', description: 'Biaya operasional perusahaan' },\n  \n  // Cost of Goods Sold (HPP)\n  { code: '5100', name: 'Harga Pokok Penjualan', type: 'expense', subtype: 'cost_of_goods_sold', normalBalance: 'debit', parentCode: '5000', description: 'HPP barang yang dijual' },\n  { code: '5110', name: 'HPP Laptop', type: 'expense', subtype: 'cost_of_goods_sold', normalBalance: 'debit', parentCode: '5100', description: 'Harga pokok laptop yang dijual' },\n  { code: '5120', name: 'HPP Aksesoris', type: 'expense', subtype: 'cost_of_goods_sold', normalBalance: 'debit', parentCode: '5100', description: 'Harga pokok aksesoris yang dijual' },\n  \n  // Operating Expenses (Biaya Operasional)\n  { code: '5200', name: 'Biaya Operasional', type: 'expense', subtype: 'operating_expense', normalBalance: 'debit', parentCode: '5000', description: 'Biaya untuk menjalankan usaha' },\n  { code: '5210', name: 'Biaya Gaji', type: 'expense', subtype: 'payroll_expense', normalBalance: 'debit', parentCode: '5200', description: 'Gaji dan tunjangan karyawan' },\n  { code: '5220', name: 'Biaya Sewa', type: 'expense', subtype: 'rent_expense', normalBalance: 'debit', parentCode: '5200', description: 'Sewa tempat usaha' },\n  { code: '5230', name: 'Biaya Listrik', type: 'expense', subtype: 'utility_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya listrik dan air' },\n  { code: '5240', name: 'Biaya Telepon & Internet', type: 'expense', subtype: 'communication_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya komunikasi' },\n  { code: '5250', name: 'Biaya Pemasaran', type: 'expense', subtype: 'marketing_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya promosi dan iklan' },\n  { code: '5260', name: 'Biaya Transportasi', type: 'expense', subtype: 'transport_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya transport dan pengiriman' },\n  { code: '5270', name: 'Biaya Perlengkapan', type: 'expense', subtype: 'supplies_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya perlengkapan kantor' },\n  { code: '5280', name: 'Biaya Penyusutan', type: 'expense', subtype: 'depreciation_expense', normalBalance: 'debit', parentCode: '5200', description: 'Penyusutan aset tetap' },\n  { code: '5290', name: 'Biaya Lain-lain', type: 'expense', subtype: 'other_expense', normalBalance: 'debit', parentCode: '5200', description: 'Biaya operasional lainnya' },\n  \n  // Non-Operating Expenses\n  { code: '5300', name: 'Biaya Non-Operasional', type: 'expense', subtype: 'non_operating_expense', normalBalance: 'debit', parentCode: '5000', description: 'Biaya di luar operasional utama' },\n  { code: '5310', name: 'Biaya Bunga', type: 'expense', subtype: 'interest_expense', normalBalance: 'debit', parentCode: '5300', description: 'Biaya bunga pinjaman' },\n  { code: '5320', name: 'Biaya Pajak', type: 'expense', subtype: 'tax_expense', normalBalance: 'debit', parentCode: '5300', description: 'Biaya pajak penghasilan' },\n];\n\n// Mapping untuk migrasi dari kategori lama ke akun baru\nexport const categoryToAccountMapping = {\n  // Revenue mapping\n  'Sales Revenue': '4110',\n  'Service Revenue': '4210',\n  'Rental Income': '4300',\n  'Investment Income': '4300',\n  'Other Income': '4300',\n\n  // Expense mapping\n  'Operational Expense': '5290',\n  'Payroll': '5210',\n  'Rent & Utilities': '5220',\n  'Marketing': '5250',\n  'Travel & Transport': '5260',\n  'Office Supplies': '5270',\n  'Technology': '5290',\n  'Professional Services': '5290',\n  'Insurance': '5290',\n  'Taxes': '5320',\n  'Other Expense': '5290',\n};\n\n// Default accounts untuk transaksi umum\nexport const commonAccountCodes = {\n  CASH: '1111',\n  BANK: '1112',\n  ACCOUNTS_RECEIVABLE: '1120',\n  INVENTORY: '1130',\n  ACCOUNTS_PAYABLE: '2110',\n  SALES_REVENUE: '4110',\n  SERVICE_REVENUE: '4210',\n  COST_OF_GOODS_SOLD: '5110',\n  PAYROLL_EXPENSE: '5210',\n  OTHER_EXPENSE: '5290',\n};","size_bytes":10139},"laptoppos-deployment-20250903-113337/server/financeManager.ts":{"content":"import { db } from \"./db\";\nimport { \n  financialRecords, \n  employees, \n  payrollRecords, \n  attendanceRecords,\n  products,\n  accounts,\n  journalEntries,\n  journalEntryLines,\n  transactions,\n  transactionItems,\n  serviceTickets,\n  type InsertFinancialRecord,\n  type FinancialRecord,\n  type InsertEmployee,\n  type Employee,\n  type InsertPayrollRecord,\n  type PayrollRecord,\n  type InsertAttendanceRecord,\n  type AttendanceRecord,\n  type JournalEntry,\n  type InsertJournalEntry,\n  type JournalEntryLine,\n  type InsertJournalEntryLine,\n  type Account\n} from \"@shared/schema\";\nimport { eq, and, gte, lte, desc, sum, count, sql } from \"drizzle-orm\";\n\n// Default Chart of Accounts codes\nconst ACCOUNT_CODES = {\n  CASH: '1111',\n  BANK: '1112',\n  ACCOUNTS_RECEIVABLE: '1120',\n  INVENTORY: '1130',\n  ACCOUNTS_PAYABLE: '2110',\n  SALES_REVENUE: '4110',\n  SERVICE_REVENUE: '4210',\n  COST_OF_GOODS_SOLD: '5110',\n  PAYROLL_EXPENSE: '5210',\n  OTHER_EXPENSE: '5290',\n};\n\nexport class FinanceManager {\n  // Helper method to get account by code\n  private async getAccountByCode(code: string): Promise<Account | null> {\n    const [account] = await db.select().from(accounts).where(eq(accounts.code, code)).limit(1);\n    return account || null;\n  }\n  \n  // Create Journal Entry with double-entry bookkeeping\n  async createJournalEntry(data: {\n    description: string;\n    reference?: string;\n    referenceType?: string;\n    lines: {\n      accountCode: string;\n      description: string;\n      debitAmount?: string;\n      creditAmount?: string;\n    }[];\n    userId: string;\n  }): Promise<{ success: boolean; journalEntry?: JournalEntry; error?: string }> {\n    try {\n      // Validate that debits equal credits\n      const totalDebits = data.lines.reduce((sum, line) => sum + Number(line.debitAmount || 0), 0);\n      const totalCredits = data.lines.reduce((sum, line) => sum + Number(line.creditAmount || 0), 0);\n      \n      if (Math.abs(totalDebits - totalCredits) > 0.01) {\n        return {\n          success: false,\n          error: `Debits (${totalDebits}) must equal Credits (${totalCredits})`\n        };\n      }\n      \n      const totalAmount = totalDebits;\n      const journalNumber = `JE-${Date.now()}`;\n      \n      // Create journal entry\n      const [journalEntry] = await db.insert(journalEntries).values({\n        journalNumber,\n        date: new Date(),\n        description: data.description,\n        reference: data.reference,\n        referenceType: data.referenceType,\n        totalAmount: totalAmount.toString(),\n        status: 'posted',\n        userId: data.userId\n      }).returning();\n      \n      // Create journal entry lines and update account balances\n      for (const lineData of data.lines) {\n        const account = await this.getAccountByCode(lineData.accountCode);\n        if (!account) {\n          return {\n            success: false,\n            error: `Account with code ${lineData.accountCode} not found`\n          };\n        }\n        \n        // Create journal entry line\n        await db.insert(journalEntryLines).values({\n          journalEntryId: journalEntry.id,\n          accountId: account.id,\n          description: lineData.description,\n          debitAmount: lineData.debitAmount || '0',\n          creditAmount: lineData.creditAmount || '0'\n        });\n        \n        // Update account balance based on normal balance\n        const debitAmount = Number(lineData.debitAmount || 0);\n        const creditAmount = Number(lineData.creditAmount || 0);\n        let balanceChange = 0;\n        \n        if (account.normalBalance === 'debit') {\n          balanceChange = debitAmount - creditAmount;\n        } else {\n          balanceChange = creditAmount - debitAmount;\n        }\n        \n        await db.update(accounts)\n          .set({ \n            balance: sql`${accounts.balance} + ${balanceChange}`,\n            updatedAt: new Date()\n          })\n          .where(eq(accounts.id, account.id));\n      }\n      \n      return { success: true, journalEntry };\n      \n    } catch (error) {\n      console.error('Error creating journal entry:', error);\n      return {\n        success: false,\n        error: `Failed to create journal entry: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n  \n  // Enhanced transaction creation with automatic journal entries\n  async createTransactionWithJournal(data: {\n    type: 'income' | 'expense' | 'transfer';\n    category: string;\n    subcategory?: string;\n    amount: string;\n    description: string;\n    referenceType?: string;\n    reference?: string;\n    paymentMethod?: string;\n    tags?: string[];\n    userId: string;\n  }): Promise<{ success: boolean; transaction?: FinancialRecord; error?: string }> {\n    try {\n      // Create the financial record\n      const [transaction] = await db.insert(financialRecords).values({\n        type: data.type,\n        category: data.category,\n        subcategory: data.subcategory,\n        amount: data.amount,\n        description: data.description,\n        reference: data.reference,\n        referenceType: data.referenceType,\n        paymentMethod: data.paymentMethod,\n        tags: data.tags,\n        status: 'confirmed',\n        userId: data.userId\n      }).returning();\n      \n      // Create corresponding journal entries\n      const amount = Number(data.amount);\n      let journalLines: Array<{\n        accountCode: string;\n        description: string;\n        debitAmount?: string;\n        creditAmount?: string;\n      }> = [];\n      \n      // Map categories to accounts and create journal entries\n      if (data.type === 'income') {\n        // Income: Debit Cash/Bank, Credit Revenue\n        const cashAccount = data.paymentMethod === 'cash' ? ACCOUNT_CODES.CASH : ACCOUNT_CODES.BANK;\n        const revenueAccount = data.category === 'Service Revenue' ? ACCOUNT_CODES.SERVICE_REVENUE : ACCOUNT_CODES.SALES_REVENUE;\n        \n        journalLines = [\n          {\n            accountCode: cashAccount,\n            description: `Receive payment - ${data.description}`,\n            debitAmount: amount.toString()\n          },\n          {\n            accountCode: revenueAccount,\n            description: data.description,\n            creditAmount: amount.toString()\n          }\n        ];\n      } else if (data.type === 'expense') {\n        // Expense: Debit Expense, Credit Cash/Bank\n        const cashAccount = data.paymentMethod === 'cash' ? ACCOUNT_CODES.CASH : ACCOUNT_CODES.BANK;\n        const expenseAccount = data.category === 'Payroll' ? ACCOUNT_CODES.PAYROLL_EXPENSE : ACCOUNT_CODES.OTHER_EXPENSE;\n        \n        journalLines = [\n          {\n            accountCode: expenseAccount,\n            description: data.description,\n            debitAmount: amount.toString()\n          },\n          {\n            accountCode: cashAccount,\n            description: `Payment - ${data.description}`,\n            creditAmount: amount.toString()\n          }\n        ];\n      }\n      \n      // Create journal entry if we have lines\n      if (journalLines.length > 0) {\n        const journalResult = await this.createJournalEntry({\n          description: `${data.type.toUpperCase()}: ${data.description}`,\n          reference: transaction.id,\n          referenceType: 'financial_transaction',\n          lines: journalLines,\n          userId: data.userId\n        });\n        \n        if (!journalResult.success) {\n          console.warn('Failed to create journal entry:', journalResult.error);\n        } else {\n          // Link the journal entry to the financial record\n          await db.update(financialRecords)\n            .set({ journalEntryId: journalResult.journalEntry?.id })\n            .where(eq(financialRecords.id, transaction.id));\n        }\n      }\n      \n      return { success: true, transaction };\n      \n    } catch (error) {\n      console.error('Error creating transaction with journal:', error);\n      return {\n        success: false,\n        error: `Failed to create transaction: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n  // Standard Accounting Reports\n  async getBalanceSheet(asOfDate?: Date): Promise<{\n    assets: { [category: string]: { accounts: Array<{ name: string; balance: number; code: string }>, total: number } },\n    liabilities: { [category: string]: { accounts: Array<{ name: string; balance: number; code: string }>, total: number } },\n    equity: { [category: string]: { accounts: Array<{ name: string; balance: number; code: string }>, total: number } },\n    totalAssets: number,\n    totalLiabilities: number,\n    totalEquity: number,\n    balanceCheck: boolean\n  }> {\n    const asOf = asOfDate || new Date();\n    \n    // Get all accounts with their current balances\n    const allAccounts = await db.select({\n      id: accounts.id,\n      code: accounts.code,\n      name: accounts.name,\n      type: accounts.type,\n      subtype: accounts.subtype,\n      balance: accounts.balance,\n      normalBalance: accounts.normalBalance\n    })\n    .from(accounts)\n    .where(and(\n      eq(accounts.isActive, true),\n      sql`${accounts.type} IN ('asset', 'liability', 'equity')`\n    ))\n    .orderBy(accounts.code);\n    \n    const assets: any = {};\n    const liabilities: any = {};\n    const equity: any = {};\n    \n    let totalAssets = 0;\n    let totalLiabilities = 0;\n    let totalEquity = 0;\n    \n    allAccounts.forEach(account => {\n      const balance = Number(account.balance);\n      const accountInfo = {\n        name: account.name,\n        balance: balance,\n        code: account.code\n      };\n      \n      if (account.type === 'asset') {\n        const category = account.subtype || 'Other Assets';\n        if (!assets[category]) {\n          assets[category] = { accounts: [], total: 0 };\n        }\n        assets[category].accounts.push(accountInfo);\n        assets[category].total += balance;\n        totalAssets += balance;\n      } else if (account.type === 'liability') {\n        const category = account.subtype || 'Other Liabilities';\n        if (!liabilities[category]) {\n          liabilities[category] = { accounts: [], total: 0 };\n        }\n        liabilities[category].accounts.push(accountInfo);\n        liabilities[category].total += balance;\n        totalLiabilities += balance;\n      } else if (account.type === 'equity') {\n        const category = account.subtype || 'Owner Equity';\n        if (!equity[category]) {\n          equity[category] = { accounts: [], total: 0 };\n        }\n        equity[category].accounts.push(accountInfo);\n        equity[category].total += balance;\n        totalEquity += balance;\n      }\n    });\n    \n    const balanceCheck = Math.abs(totalAssets - (totalLiabilities + totalEquity)) < 0.01;\n    \n    return {\n      assets,\n      liabilities,\n      equity,\n      totalAssets,\n      totalLiabilities,\n      totalEquity,\n      balanceCheck\n    };\n  }\n  \n  async getIncomeStatement(startDate?: Date, endDate?: Date): Promise<{\n    revenue: { [category: string]: { accounts: Array<{ name: string; amount: number; code: string }>, total: number } },\n    expenses: { [category: string]: { accounts: Array<{ name: string; amount: number; code: string }>, total: number } },\n    totalRevenue: number,\n    totalExpenses: number,\n    grossProfit: number,\n    netIncome: number\n  }> {\n    const start = startDate || new Date(new Date().getFullYear(), 0, 1); // Beginning of year\n    const end = endDate || new Date();\n    \n    // Get revenue and expense accounts with their activity in the period\n    const revenueAndExpenseAccounts = await db.select({\n      id: accounts.id,\n      code: accounts.code,\n      name: accounts.name,\n      type: accounts.type,\n      subtype: accounts.subtype,\n      normalBalance: accounts.normalBalance\n    })\n    .from(accounts)\n    .where(and(\n      eq(accounts.isActive, true),\n      sql`${accounts.type} IN ('revenue', 'expense')`\n    ))\n    .orderBy(accounts.code);\n    \n    const revenue: any = {};\n    const expenses: any = {};\n    let totalRevenue = 0;\n    let totalExpenses = 0;\n    \n    // Calculate account activity for the period\n    for (const account of revenueAndExpenseAccounts) {\n      // Get journal entry lines for this account in the period\n      const activityQuery = await db.select({\n        debitAmount: journalEntryLines.debitAmount,\n        creditAmount: journalEntryLines.creditAmount\n      })\n      .from(journalEntryLines)\n      .innerJoin(journalEntries, eq(journalEntryLines.journalEntryId, journalEntries.id))\n      .where(and(\n        eq(journalEntryLines.accountId, account.id),\n        gte(journalEntries.date, start),\n        lte(journalEntries.date, end),\n        eq(journalEntries.status, 'posted')\n      ));\n      \n      let periodActivity = 0;\n      activityQuery.forEach(line => {\n        const debit = Number(line.debitAmount);\n        const credit = Number(line.creditAmount);\n        \n        // For revenue accounts (normal credit balance), credit increases, debit decreases\n        // For expense accounts (normal debit balance), debit increases, credit decreases\n        if (account.normalBalance === 'credit') {\n          periodActivity += credit - debit;\n        } else {\n          periodActivity += debit - credit;\n        }\n      });\n      \n      // Only include accounts with activity\n      if (Math.abs(periodActivity) > 0.01) {\n        const accountInfo = {\n          name: account.name,\n          amount: periodActivity,\n          code: account.code\n        };\n        \n        if (account.type === 'revenue') {\n          const category = account.subtype || 'Other Revenue';\n          if (!revenue[category]) {\n            revenue[category] = { accounts: [], total: 0 };\n          }\n          revenue[category].accounts.push(accountInfo);\n          revenue[category].total += periodActivity;\n          totalRevenue += periodActivity;\n        } else if (account.type === 'expense') {\n          const category = account.subtype || 'Other Expenses';\n          if (!expenses[category]) {\n            expenses[category] = { accounts: [], total: 0 };\n          }\n          expenses[category].accounts.push(accountInfo);\n          expenses[category].total += periodActivity;\n          totalExpenses += periodActivity;\n        }\n      }\n    }\n    \n    // Calculate gross profit (Revenue - COGS)\n    const cogs = expenses['cost_of_goods_sold']?.total || 0;\n    const grossProfit = totalRevenue - cogs;\n    const netIncome = totalRevenue - totalExpenses;\n    \n    return {\n      revenue,\n      expenses,\n      totalRevenue,\n      totalExpenses,\n      grossProfit,\n      netIncome\n    };\n  }\n  \n  // Get Chart of Accounts\n  async getChartOfAccounts(): Promise<Account[]> {\n    return await db.select().from(accounts)\n      .where(eq(accounts.isActive, true))\n      .orderBy(accounts.code);\n  }\n  \n  // Financial Transactions (Enhanced)\n  async createTransaction(data: {\n    type: 'income' | 'expense' | 'transfer';\n    category: string;\n    subcategory?: string;\n    amount: string;\n    description: string;\n    referenceType?: string;\n    reference?: string;\n    paymentMethod?: string;\n    tags?: string[];\n    userId: string;\n  }): Promise<FinancialRecord> {\n    // Use the enhanced method that creates journal entries\n    const result = await this.createTransactionWithJournal(data);\n    \n    if (!result.success || !result.transaction) {\n      throw new Error(result.error || 'Failed to create transaction');\n    }\n    \n    return result.transaction;\n  }\n\n  async getTransactions(filters?: {\n    type?: string;\n    category?: string;\n    startDate?: Date;\n    endDate?: Date;\n    referenceType?: string;\n  }): Promise<FinancialRecord[]> {\n    const conditions = [];\n    if (filters?.type) conditions.push(eq(financialRecords.type, filters.type));\n    if (filters?.category) conditions.push(eq(financialRecords.category, filters.category));\n    if (filters?.referenceType) conditions.push(eq(financialRecords.referenceType, filters.referenceType));\n    if (filters?.startDate) conditions.push(gte(financialRecords.createdAt, filters.startDate));\n    if (filters?.endDate) conditions.push(lte(financialRecords.createdAt, filters.endDate));\n    \n    if (conditions.length > 0) {\n      return await db\n        .select()\n        .from(financialRecords)\n        .where(and(...conditions))\n        .orderBy(desc(financialRecords.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(financialRecords)\n      .orderBy(desc(financialRecords.createdAt));\n  }\n\n  async getSummary(startDate?: Date, endDate?: Date): Promise<{\n    totalIncome: string;\n    totalExpense: string;\n    netProfit: string;\n    transactionCount: number;\n    inventoryValue: string;\n    inventoryCount: number;\n    breakdown: {\n      categories: { [key: string]: { income: number; expense: number; count: number } };\n      paymentMethods: { [key: string]: number };\n      sources: { [key: string]: { amount: number; count: number } };\n      subcategories: { [key: string]: { amount: number; type: string; count: number } };\n      inventory: { [key: string]: { value: number; stock: number; avgCost: number } };\n    };\n  }> {\n    const conditions = [];\n    if (startDate) conditions.push(gte(financialRecords.createdAt, startDate));\n    if (endDate) conditions.push(lte(financialRecords.createdAt, endDate));\n    \n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    // Total income\n    const [incomeResult] = await db\n      .select({ total: sum(financialRecords.amount) })\n      .from(financialRecords)\n      .where(and(eq(financialRecords.type, 'income'), whereClause));\n    \n    // Total expense - calculate properly excluding asset purchases\n    const allExpenses = await db\n      .select({\n        category: financialRecords.category,\n        amount: financialRecords.amount\n      })\n      .from(financialRecords)\n      .where(and(eq(financialRecords.type, 'expense'), whereClause));\n    \n    // Exclude inventory purchases from expense calculation for profit\n    const actualExpenses = allExpenses.filter(expense => \n      expense.category !== 'Inventory Purchase' &&\n      !expense.category?.toLowerCase().includes('purchase') &&\n      !expense.category?.toLowerCase().includes('asset')\n    );\n    \n    const totalExpenseAmount = actualExpenses.reduce((sum, expense) => sum + Number(expense.amount), 0);\n    const expenseResult = { total: totalExpenseAmount };\n    \n    // Count\n    const [countResult] = await db\n      .select({ count: count() })\n      .from(financialRecords)\n      .where(whereClause);\n\n    // Breakdown by category\n    const categoryBreakdown = await db\n      .select({\n        category: financialRecords.category,\n        type: financialRecords.type,\n        total: sum(financialRecords.amount),\n        count: count()\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.category, financialRecords.type);\n\n    // Breakdown by subcategory\n    const subcategoryBreakdown = await db\n      .select({\n        subcategory: financialRecords.subcategory,\n        type: financialRecords.type,\n        total: sum(financialRecords.amount),\n        count: count()\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.subcategory, financialRecords.type);\n\n    // Breakdown by payment method\n    const paymentBreakdown = await db\n      .select({\n        paymentMethod: financialRecords.paymentMethod,\n        total: sum(financialRecords.amount)\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.paymentMethod);\n\n    // Breakdown by source/reference type\n    const sourceBreakdown = await db\n      .select({\n        referenceType: financialRecords.referenceType,\n        total: sum(financialRecords.amount),\n        count: count()\n      })\n      .from(financialRecords)\n      .where(whereClause)\n      .groupBy(financialRecords.referenceType);\n\n    // Inventory value calculation\n    const inventoryBreakdown = await db\n      .select({\n        name: products.name,\n        stock: products.stock,\n        averageCost: products.averageCost,\n        sellingPrice: products.sellingPrice,\n        totalValue: sql<number>`${products.stock} * COALESCE(${products.averageCost}, 0)`,\n      })\n      .from(products)\n      .where(and(eq(products.isActive, true), gte(products.stock, 0)));\n\n    const totalInventoryValue = inventoryBreakdown.reduce((total, item) => total + Number(item.totalValue), 0);\n    const totalInventoryCount = inventoryBreakdown.reduce((total, item) => total + (item.stock || 0), 0);\n    \n    const totalIncome = Number(incomeResult.total || 0);\n    const totalExpense = totalExpenseAmount;\n\n    // Process category breakdown\n    const categories: { [key: string]: { income: number; expense: number; count: number } } = {};\n    categoryBreakdown.forEach(item => {\n      if (!categories[item.category]) {\n        categories[item.category] = { income: 0, expense: 0, count: 0 };\n      }\n      if (item.type === 'income') {\n        categories[item.category].income = Number(item.total);\n      } else {\n        categories[item.category].expense = Number(item.total);\n      }\n      categories[item.category].count += item.count;\n    });\n\n    // Process subcategory breakdown\n    const subcategories: { [key: string]: { amount: number; type: string; count: number } } = {};\n    subcategoryBreakdown.forEach(item => {\n      if (item.subcategory) {\n        subcategories[item.subcategory] = {\n          amount: Number(item.total),\n          type: item.type,\n          count: item.count\n        };\n      }\n    });\n\n    // Process payment method breakdown\n    const paymentMethods: { [key: string]: number } = {};\n    paymentBreakdown.forEach(item => {\n      if (item.paymentMethod) {\n        paymentMethods[item.paymentMethod] = Number(item.total);\n      }\n    });\n\n    // Process source breakdown\n    const sources: { [key: string]: { amount: number; count: number } } = {};\n    sourceBreakdown.forEach(item => {\n      if (item.referenceType) {\n        sources[item.referenceType] = {\n          amount: Number(item.total),\n          count: item.count\n        };\n      }\n    });\n\n    // Process inventory breakdown\n    const inventory: { [key: string]: { value: number; stock: number; avgCost: number } } = {};\n    inventoryBreakdown.forEach(item => {\n      if (item.name) {\n        inventory[item.name] = {\n          value: Number(item.totalValue),\n          stock: item.stock,\n          avgCost: Number(item.averageCost || 0)\n        };\n      }\n    });\n    \n    return {\n      totalIncome: totalIncome.toString(),\n      totalExpense: totalExpense.toString(),\n      netProfit: (totalIncome - totalExpense).toString(),\n      transactionCount: countResult.count,\n      inventoryValue: totalInventoryValue.toString(),\n      inventoryCount: totalInventoryCount,\n      breakdown: {\n        categories,\n        paymentMethods,\n        sources,\n        subcategories,\n        inventory\n      }\n    };\n  }\n\n  // Employee Management\n  async createEmployee(data: InsertEmployee): Promise<Employee> {\n    const employeeNumber = `EMP${Date.now().toString().slice(-6)}`;\n    \n    // Convert string date to Date object if needed\n    const processedData = {\n      ...data,\n      employeeNumber,\n      joinDate: typeof data.joinDate === 'string' ? new Date(data.joinDate) : data.joinDate,\n      endDate: data.endDate && typeof data.endDate === 'string' ? new Date(data.endDate) : data.endDate\n    };\n    \n    const [employee] = await db.insert(employees).values(processedData).returning();\n    return employee;\n  }\n\n  async getEmployees(includeInactive = false): Promise<Employee[]> {\n    if (!includeInactive) {\n      return await db\n        .select()\n        .from(employees)\n        .where(eq(employees.status, 'active'))\n        .orderBy(employees.name);\n    }\n    \n    return await db\n      .select()\n      .from(employees)\n      .orderBy(employees.name);\n  }\n\n  async getEmployeeById(id: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee;\n  }\n\n  async updateEmployee(id: string, data: Partial<InsertEmployee>): Promise<Employee> {\n    // Convert string dates to Date objects if needed\n    const processedData = {\n      ...data,\n      updatedAt: new Date(),\n      joinDate: data.joinDate && typeof data.joinDate === 'string' ? new Date(data.joinDate) : data.joinDate,\n      endDate: data.endDate && typeof data.endDate === 'string' ? new Date(data.endDate) : data.endDate\n    };\n    \n    const [employee] = await db\n      .update(employees)\n      .set(processedData)\n      .where(eq(employees.id, id))\n      .returning();\n    return employee;\n  }\n\n  // Payroll Management\n  async createPayroll(data: {\n    employeeId: string;\n    periodStart: Date | string;\n    periodEnd: Date | string;\n    baseSalary: string;\n    overtime?: string;\n    bonus?: string;\n    allowances?: string;\n    taxDeduction?: string;\n    socialSecurity?: string;\n    healthInsurance?: string;\n    otherDeductions?: string;\n    userId: string;\n  }): Promise<PayrollRecord> {\n    const payrollNumber = `PAY${Date.now().toString().slice(-8)}`;\n    \n    // Convert string dates to Date objects if needed\n    const periodStart = typeof data.periodStart === 'string' ? new Date(data.periodStart) : data.periodStart;\n    const periodEnd = typeof data.periodEnd === 'string' ? new Date(data.periodEnd) : data.periodEnd;\n    \n    const baseSalary = Number(data.baseSalary);\n    const overtime = Number(data.overtime || 0);\n    const bonus = Number(data.bonus || 0);\n    const allowances = Number(data.allowances || 0);\n    const grossPay = baseSalary + overtime + bonus + allowances;\n    \n    const taxDeduction = Number(data.taxDeduction || 0);\n    const socialSecurity = Number(data.socialSecurity || 0);\n    const healthInsurance = Number(data.healthInsurance || 0);\n    const otherDeductions = Number(data.otherDeductions || 0);\n    const totalDeductions = taxDeduction + socialSecurity + healthInsurance + otherDeductions;\n    \n    const netPay = grossPay - totalDeductions;\n    \n    const [payroll] = await db.insert(payrollRecords).values({\n      employeeId: data.employeeId,\n      payrollNumber,\n      periodStart,\n      periodEnd,\n      baseSalary: data.baseSalary,\n      overtime: data.overtime || \"0\",\n      bonus: data.bonus || \"0\",\n      allowances: data.allowances || \"0\",\n      grossPay: grossPay.toString(),\n      taxDeduction: data.taxDeduction || \"0\",\n      socialSecurity: data.socialSecurity || \"0\",\n      healthInsurance: data.healthInsurance || \"0\",\n      otherDeductions: data.otherDeductions || \"0\",\n      netPay: netPay.toString(),\n      status: 'draft',\n      userId: data.userId\n    }).returning();\n    \n    return payroll;\n  }\n\n  async getPayrollRecords(employeeId?: string): Promise<PayrollRecord[]> {\n    if (employeeId) {\n      return await db\n        .select()\n        .from(payrollRecords)\n        .where(eq(payrollRecords.employeeId, employeeId))\n        .orderBy(desc(payrollRecords.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(payrollRecords)\n      .orderBy(desc(payrollRecords.createdAt));\n  }\n\n  async updatePayrollStatus(id: string, status: 'draft' | 'approved' | 'paid'): Promise<PayrollRecord> {\n    const [payroll] = await db\n      .update(payrollRecords)\n      .set({ \n        status, \n        paidDate: status === 'paid' ? new Date() : null,\n        updatedAt: new Date() \n      })\n      .where(eq(payrollRecords.id, id))\n      .returning();\n    \n    // Create financial record when marked as paid\n    if (status === 'paid' && payroll) {\n      const existingRecord = await db\n        .select()\n        .from(financialRecords)\n        .where(and(\n          eq(financialRecords.referenceType, 'payroll'),\n          eq(financialRecords.reference, payroll.id)\n        ));\n      \n      if (existingRecord.length === 0) {\n        await this.createTransaction({\n          type: 'expense',\n          category: 'Payroll',\n          subcategory: 'Salary',\n          amount: payroll.netPay,\n          description: `Gaji ${payroll.payrollNumber}`,\n          referenceType: 'payroll',\n          reference: payroll.id,\n          paymentMethod: 'bank_transfer',\n          userId: payroll.userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n        });\n      }\n    }\n    \n    return payroll;\n  }\n\n  // Attendance Management\n  async createAttendance(data: InsertAttendanceRecord): Promise<AttendanceRecord> {\n    const [attendance] = await db.insert(attendanceRecords).values(data).returning();\n    return attendance;\n  }\n\n  async getAttendanceRecords(employeeId?: string, startDate?: Date, endDate?: Date): Promise<AttendanceRecord[]> {\n    const conditions = [];\n    if (employeeId) conditions.push(eq(attendanceRecords.employeeId, employeeId));\n    if (startDate) conditions.push(gte(attendanceRecords.date, startDate));\n    if (endDate) conditions.push(lte(attendanceRecords.date, endDate));\n    \n    if (conditions.length > 0) {\n      return await db\n        .select()\n        .from(attendanceRecords)\n        .where(and(...conditions))\n        .orderBy(desc(attendanceRecords.date));\n    }\n    \n    return await db\n      .select()\n      .from(attendanceRecords)\n      .orderBy(desc(attendanceRecords.date));\n  }\n\n  // Service Integration\n  async recordServiceIncome(serviceId: string, amount: string, description: string, userId: string): Promise<void> {\n    // Check if record already exists\n    const existingRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.type, 'income')\n      ));\n    \n    if (existingRecord.length === 0) {\n      await this.createTransaction({\n        type: 'income',\n        category: 'Service Revenue',\n        subcategory: 'Repair Service',\n        amount,\n        description,\n        referenceType: 'service',\n        reference: serviceId,\n        paymentMethod: 'cash',\n        userId\n      });\n    }\n  }\n\n  async recordPartsCost(serviceId: string, partName: string, quantity: number, modalPrice: string, sellingPrice: string, userId: string): Promise<void> {\n    // Record parts cost (modal/purchase price) as expense\n    const modalAmount = (Number(modalPrice) * quantity).toString();\n    const existingModalRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service_parts_cost'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.description, `Biaya modal ${partName} (${quantity}x)`)\n      ));\n\n    if (existingModalRecord.length === 0) {\n      await this.createTransaction({\n        type: 'expense',\n        category: 'Cost of Goods Sold',\n        subcategory: 'Parts Cost',\n        amount: modalAmount,\n        description: `Biaya modal ${partName} (${quantity}x)`,\n        referenceType: 'service_parts_cost',\n        reference: serviceId,\n        paymentMethod: 'inventory',\n        userId\n      });\n    }\n\n    // Record parts revenue (selling price) as income\n    const sellingAmount = (Number(sellingPrice) * quantity).toString();\n    const existingSellingRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service_parts_revenue'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.description, `Penjualan ${partName} (${quantity}x)`)\n      ));\n\n    if (existingSellingRecord.length === 0) {\n      await this.createTransaction({\n        type: 'income',\n        category: 'Service Revenue',\n        subcategory: 'Parts Sales',\n        amount: sellingAmount,\n        description: `Penjualan ${partName} (${quantity}x)`,\n        referenceType: 'service_parts_revenue',\n        reference: serviceId,\n        paymentMethod: 'cash',\n        userId\n      });\n    }\n  }\n\n  async recordLaborCost(serviceId: string, laborCost: string, description: string, userId: string): Promise<void> {\n    // Check if record already exists\n    const existingRecord = await db\n      .select()\n      .from(financialRecords)\n      .where(and(\n        eq(financialRecords.referenceType, 'service_labor'),\n        eq(financialRecords.reference, serviceId),\n        eq(financialRecords.type, 'income')\n      ));\n    \n    if (existingRecord.length === 0 && Number(laborCost) > 0) {\n      await this.createTransaction({\n        type: 'income',\n        category: 'Service Revenue',\n        subcategory: 'Labor Charge',\n        amount: laborCost,\n        description: `Ongkos tenaga kerja - ${description}`,\n        referenceType: 'service_labor',\n        reference: serviceId,\n        paymentMethod: 'cash',\n        userId\n      });\n    }\n  }\n\n  // Categories and Analytics\n  async getFinancialCategories(): Promise<{\n    incomeCategories: string[];\n    expenseCategories: string[];\n  }> {\n    const records = await db.select().from(financialRecords);\n    \n    const incomeSet = new Set<string>();\n    const expenseSet = new Set<string>();\n    \n    records.forEach(r => {\n      if (r.type === 'income') {\n        incomeSet.add(r.category);\n      } else if (r.type === 'expense') {\n        expenseSet.add(r.category);\n      }\n    });\n    \n    return { \n      incomeCategories: Array.from(incomeSet),\n      expenseCategories: Array.from(expenseSet)\n    };\n  }\n}\n\nexport const financeManager = new FinanceManager();","size_bytes":33385},"laptoppos-deployment-20250903-113337/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"laptoppos-deployment-20250903-113337/server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":3565},"laptoppos-deployment-20250903-113337/server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  type ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      console.warn(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Object storage features will be disabled. \" +\n          \"Create a bucket in 'Object Storage' tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths) to enable object storage.\"\n      );\n      return [];\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string | null {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      console.warn(\n        \"PRIVATE_OBJECT_DIR not set. Private object storage features will be disabled. \" +\n          \"Create a bucket in 'Object Storage' tool and set PRIVATE_OBJECT_DIR env var to enable private object storage.\"\n      );\n      return null;\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: Error) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string | null> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      console.warn(\"Cannot generate upload URL: PRIVATE_OBJECT_DIR not configured\");\n      return null;\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir) {\n      throw new ObjectNotFoundError();\n    }\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir) {\n      return rawObjectPath;\n    }\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8684},"laptoppos-deployment-20250903-113337/server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Detect if we're in production (Replit deployment)\n  const isProduction = process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === 'true' || !!process.env.REPLIT_DOMAINS;\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: 'auto', // Let express-session detect HTTPS automatically\n      sameSite: 'lax', // Use lax instead of none for better compatibility\n      maxAge: sessionTtl,\n      domain: undefined, // Let the browser determine the domain\n    },\n    name: 'laptoppos.session', // Custom session name\n    proxy: true, // Trust the proxy\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  // Trust proxy for Replit deployment\n  app.set(\"trust proxy\", true);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n  \n  for (const domain of domains) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n  \n  // Add localhost strategy for development\n  const localhostStrategy = new Strategy(\n    {\n      name: `replitauth:localhost`,\n      config,\n      scope: \"openid email profile offline_access\",\n      callbackURL: `https://${domains[0]}/api/callback`, // Use first domain as callback\n    },\n    verify,\n  );\n  passport.use(localhostStrategy);\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    const hostname = req.hostname;\n    const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n    \n    // Use localhost strategy for localhost, otherwise use the matching domain or first domain\n    let strategyName = `replitauth:${hostname}`;\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      strategyName = `replitauth:localhost`;\n    } else if (!domains.includes(hostname)) {\n      strategyName = `replitauth:${domains[0]}`;\n    }\n    \n    passport.authenticate(strategyName, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    const hostname = req.hostname;\n    const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n    \n    // Use localhost strategy for localhost, otherwise use the matching domain or first domain\n    let strategyName = `replitauth:${hostname}`;\n    if (hostname === 'localhost' || hostname === '127.0.0.1') {\n      strategyName = `replitauth:localhost`;\n    } else if (!domains.includes(hostname)) {\n      strategyName = `replitauth:${domains[0]}`;\n    }\n    \n    passport.authenticate(strategyName, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":6000},"laptoppos-deployment-20250903-113337/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { whatsappService } from \"./whatsappService\";\n// Conditional auth import based on environment\nimport { isAuthenticated, authenticateUser, hashPassword } from \"./auth\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\n// import htmlPdf from 'html-pdf-node';  // Removed due to Chromium dependencies issues\nimport * as XLSX from 'xlsx';\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, count, sql } from \"drizzle-orm\";\nimport {\n  products,\n  categories, \n  customers,\n  suppliers,\n  transactions,\n  transactionItems,\n  serviceTickets,\n  serviceTicketParts,\n  stockMovements,\n  purchaseOrders,\n  financialRecords,\n  storeConfig,\n  roles,\n  users,\n  employees,\n  payrollRecords,\n  attendanceRecords\n} from \"@shared/schema\";\n\n// HTML template generator for PDF reports\nfunction generateReportHTML(reportData: any, startDate: string, endDate: string): string {\n  const { salesReport, serviceReport, financialReport, inventoryReport } = reportData;\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Laporan Bisnis</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }\n        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #4F46E5; padding-bottom: 20px; }\n        .header h1 { color: #4F46E5; margin: 0; font-size: 28px; }\n        .header p { margin: 5px 0; color: #666; }\n        .period { background: #F3F4F6; padding: 15px; border-radius: 8px; margin-bottom: 25px; text-align: center; }\n        .section { margin-bottom: 30px; }\n        .section h2 { color: #4F46E5; border-bottom: 1px solid #E5E7EB; padding-bottom: 8px; }\n        .stats-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }\n        .stat-card { background: #F9FAFB; padding: 15px; border-radius: 8px; border-left: 4px solid #4F46E5; }\n        .stat-card h3 { margin: 0 0 8px 0; color: #6B7280; font-size: 14px; }\n        .stat-card .value { font-size: 24px; font-weight: bold; color: #111827; }\n        .breakdown { margin: 15px 0; }\n        .breakdown-item { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #E5E7EB; }\n        .table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n        .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #E5E7EB; }\n        .table th { background: #F9FAFB; font-weight: 600; color: #374151; }\n        .income { color: #059669; }\n        .expense { color: #DC2626; }\n        .footer { margin-top: 40px; text-align: center; color: #6B7280; font-size: 12px; border-top: 1px solid #E5E7EB; padding-top: 20px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>LaptopPOS - Laporan Bisnis</h1>\n        <p>Sistem Manajemen Penjualan & Servis Laptop</p>\n      </div>\n      \n      <div class=\"period\">\n        <strong>Periode Laporan: ${new Date(startDate).toLocaleDateString('id-ID')} - ${new Date(endDate).toLocaleDateString('id-ID')}</strong>\n      </div>\n      \n      <div class=\"section\">\n        <h2>📊 Ringkasan Keuangan</h2>\n        <div class=\"stats-grid\">\n          <div class=\"stat-card\">\n            <h3>Total Penjualan</h3>\n            <div class=\"value\">Rp ${Number(salesReport?.totalSales || 0).toLocaleString('id-ID')}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Omset Servis</h3>\n            <div class=\"value\">Rp ${Number(serviceReport?.totalRevenue || 0).toLocaleString('id-ID')}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Total Pemasukan</h3>\n            <div class=\"value income\">Rp ${Number(financialReport?.totalIncome || 0).toLocaleString('id-ID')}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Total Pengeluaran</h3>\n            <div class=\"value expense\">Rp ${Number(financialReport?.totalExpense || 0).toLocaleString('id-ID')}</div>\n          </div>\n        </div>\n        \n        <div class=\"stat-card\" style=\"margin-top: 20px;\">\n          <h3>Laba Bersih</h3>\n          <div class=\"value income\">Rp ${Number(financialReport?.profit || 0).toLocaleString('id-ID')}</div>\n        </div>\n      </div>\n      \n      <div class=\"section\">\n        <h2>🔧 Laporan Servis</h2>\n        <div class=\"stats-grid\">\n          <div class=\"stat-card\">\n            <h3>Total Servis</h3>\n            <div class=\"value\">${serviceReport?.totalServices || 0} tiket</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Modal Parts</h3>\n            <div class=\"value expense\">Rp ${Number(serviceReport?.totalCost || 0).toLocaleString('id-ID')}</div>\n          </div>\n        </div>\n        \n        <div class=\"breakdown\">\n          <h3>Breakdown Revenue Servis:</h3>\n          <div class=\"breakdown-item\">\n            <span>Revenue Labor:</span>\n            <span class=\"income\">Rp ${Number(serviceReport?.revenueBreakdown?.laborRevenue || 0).toLocaleString('id-ID')}</span>\n          </div>\n          <div class=\"breakdown-item\">\n            <span>Revenue Parts:</span>\n            <span class=\"income\">Rp ${Number(serviceReport?.revenueBreakdown?.partsRevenue || 0).toLocaleString('id-ID')}</span>\n          </div>\n          <div class=\"breakdown-item\" style=\"font-weight: bold;\">\n            <span>Laba Servis:</span>\n            <span class=\"income\">Rp ${Number(serviceReport?.totalProfit || 0).toLocaleString('id-ID')}</span>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"section\">\n        <h2>📦 Laporan Inventory</h2>\n        <div class=\"stats-grid\">\n          <div class=\"stat-card\">\n            <h3>Total Produk</h3>\n            <div class=\"value\">${inventoryReport?.totalProducts || 0}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Stok Rendah</h3>\n            <div class=\"value expense\">${inventoryReport?.lowStockCount || 0}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Total Stok</h3>\n            <div class=\"value\">${inventoryReport?.totalStockQuantity || 0}</div>\n          </div>\n          <div class=\"stat-card\">\n            <h3>Nilai Aset</h3>\n            <div class=\"value\">Rp ${Number(inventoryReport?.totalAssetValue || 0).toLocaleString('id-ID')}</div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"footer\">\n        <p>Laporan digenerate otomatis oleh LaptopPOS System pada ${new Date().toLocaleString('id-ID')}</p>\n        <p>© 2025 LaptopPOS - Sistem Manajemen Bisnis Laptop</p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\n// Duplicate imports removed - already imported above\nimport { \n  insertProductSchema,\n  insertCustomerSchema,\n  insertSupplierSchema,\n  insertTransactionSchema,\n  insertTransactionItemSchema,\n  insertServiceTicketSchema,\n  insertStockMovementSchema,\n  insertFinancialRecordSchema,\n  insertCategorySchema,\n  insertStoreConfigSchema,\n  insertRoleSchema,\n  generateSKU,\n  generateBarcode\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  // Always use local authentication for universal deployment compatibility\n  const { setupAuth } = await import('./auth');\n  await setupAuth(app);\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: 'Username and password are required' });\n      }\n\n      const user = await authenticateUser({ username, password });\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid username or password' });\n      }\n\n      // Store user in session\n      req.session.user = user;\n      \n      res.json({ user, message: 'Login successful' });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: 'Failed to logout' });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: 'Logout successful' });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // User is already available in session\n      res.json(req.session.user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Reports API endpoints\n  app.get('/api/reports/sales/:startDate/:endDate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const start = new Date(startDate + 'T00:00:00.000Z');\n      const end = new Date(endDate + 'T23:59:59.999Z');\n      \n      const report = await storage.getSalesReport(start, end);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching sales report:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales report\" });\n    }\n  });\n\n  app.get('/api/reports/services/:startDate/:endDate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const start = new Date(startDate + 'T00:00:00.000Z');\n      const end = new Date(endDate + 'T23:59:59.999Z');\n      \n      const report = await storage.getServiceReport(start, end);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching service report:\", error);\n      res.status(500).json({ message: \"Failed to fetch service report\" });\n    }\n  });\n\n  app.get('/api/reports/financial/:startDate/:endDate', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.params;\n      const start = new Date(startDate + 'T00:00:00.000Z');\n      const end = new Date(endDate + 'T23:59:59.999Z');\n      \n      const report = await storage.getFinancialReport(start, end);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching financial report:\", error);\n      res.status(500).json({ message: \"Failed to fetch financial report\" });\n    }\n  });\n\n  app.get('/api/reports/inventory', isAuthenticated, async (req, res) => {\n    try {\n      const report = await storage.getInventoryReport();\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching inventory report:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory report\" });\n    }\n  });\n\n  // Stock movements report - Clean implementation\n  app.get('/api/reports/stock-movements', isAuthenticated, async (req, res) => {\n    try {\n      // Get stock movements with product names and readable references\n      const movementData = await db\n        .select({\n          id: stockMovements.id,\n          productId: stockMovements.productId,\n          productName: products.name,\n          movementType: stockMovements.movementType, // Frontend expects 'movementType'\n          quantity: stockMovements.quantity,\n          unitCost: stockMovements.unitCost,\n          referenceType: stockMovements.referenceType,\n          reference: sql<string>`\n            CASE \n              WHEN ${stockMovements.referenceType} = 'purchase' THEN COALESCE(${purchaseOrders.poNumber}, ${stockMovements.referenceId})\n              ELSE ${stockMovements.referenceId}\n            END\n          `,\n          notes: stockMovements.notes,\n          createdAt: stockMovements.createdAt,\n          userName: sql<string>`'Admin'`, // Add userName field\n        })\n        .from(stockMovements)\n        .leftJoin(products, eq(stockMovements.productId, products.id))\n        .leftJoin(purchaseOrders, eq(stockMovements.referenceId, purchaseOrders.id))\n        .orderBy(desc(stockMovements.createdAt));\n      \n      // Frontend expects { movements: [...] } structure\n      res.json({ movements: movementData });\n    } catch (error) {\n      console.error('Error fetching stock movements:', error);\n      res.status(500).json({ message: 'Failed to fetch stock movements' });\n    }\n  });\n\n  // Export XLSX endpoint\n  app.post('/api/reports/export-xlsx', isAuthenticated, async (req, res) => {\n    try {\n      console.log('XLSX export request received');\n      const { startDate, endDate } = req.body;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      // Fetch fresh data from database instead of using cached client data\n      const start = new Date(startDate + 'T00:00:00.000Z');\n      const end = new Date(endDate + 'T23:59:59.999Z');\n      \n      const salesReport = await storage.getSalesReport(start, end);\n      const serviceReport = await storage.getServiceReport(start, end);\n      const financialReport = await storage.getFinancialReport(start, end);\n      const inventoryReport = await storage.getInventoryReport();\n      \n      // Create workbook\n      const wb = XLSX.utils.book_new();\n      \n      // No need for additional DB query, we'll use financialReport.records\n\n      // Overview sheet\n      const overviewData = [\n        ['Laporan Bisnis LaptopPOS'],\n        ['Periode', `${new Date(startDate).toLocaleDateString('id-ID')} - ${new Date(endDate).toLocaleDateString('id-ID')}`],\n        [],\n        ['Ringkasan Keuangan'],\n        ['Total Penjualan', Number(salesReport?.totalSales || 0)],\n        ['Omset Servis', Number(serviceReport?.totalRevenue || 0)],\n        ['Total Pemasukan', Number(financialReport?.totalIncome || 0)],\n        ['Total Pengeluaran', Number(financialReport?.totalExpense || 0)],\n        ['Laba Bersih', Number(financialReport?.profit || 0)],\n        []\n      ];\n\n      // Add expense breakdown section\n      if (financialReport?.records && financialReport.records.length > 0) {\n        // Group expenses by category\n        const expensesByCategory = financialReport.records\n          .filter((record: any) => record.type === 'expense')\n          .reduce((acc: any, record: any) => {\n            const category = record.category || 'Lainnya';\n            acc[category] = (acc[category] || 0) + Number(record.amount || 0);\n            return acc;\n          }, {});\n\n        overviewData.push(['Detail Pengeluaran']);\n        Object.entries(expensesByCategory).forEach(([category, amount]) => {\n          overviewData.push([`  ${category}`, Number(amount)]);\n        });\n        overviewData.push([]);\n      }\n\n      // Add service and inventory data\n      overviewData.push(\n        ['Laporan Servis'],\n        ['Total Servis', serviceReport?.totalServices || 0],\n        ['Revenue Labor', Number(serviceReport?.revenueBreakdown?.laborRevenue || 0)],\n        ['Revenue Parts', Number(serviceReport?.revenueBreakdown?.partsRevenue || 0)],\n        ['Modal Parts', Number(serviceReport?.totalCost || 0)],\n        ['Laba Servis', Number(serviceReport?.totalProfit || 0)],\n        [],\n        ['Laporan Inventory'],\n        ['Total Produk', inventoryReport?.totalProducts || 0],\n        ['Stok Rendah', inventoryReport?.lowStockCount || 0],\n        ['Total Stok', inventoryReport?.totalStockQuantity || 0],\n        ['Nilai Aset', Number(inventoryReport?.totalAssetValue || 0)]\n      );\n      \n      const ws = XLSX.utils.aoa_to_sheet(overviewData);\n      XLSX.utils.book_append_sheet(wb, ws, 'Overview');\n      \n      // Generate buffer\n      const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n      \n      console.log('XLSX generated successfully, size:', buffer.length);\n      \n      // Set headers and send file\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"laporan-bisnis-${startDate}-${endDate}.xlsx\"`);\n      res.setHeader('Content-Length', buffer.length);\n      \n      res.send(buffer);\n    } catch (error) {\n      console.error(\"Error exporting XLSX:\", error);\n      res.status(500).json({ \n        message: \"Failed to export XLSX\", \n        error: (error as Error).message \n      });\n    }\n  });\n\n  // Export PDF endpoint\n  app.post('/api/reports/export-pdf', isAuthenticated, async (req, res) => {\n    try {\n      console.log('PDF export request received');\n      const { startDate, endDate } = req.body;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      // Fetch fresh data from database instead of using cached client data\n      const start = new Date(startDate + 'T00:00:00.000Z');\n      const end = new Date(endDate + 'T23:59:59.999Z');\n      \n      const salesReport = await storage.getSalesReport(start, end);\n      const serviceReport = await storage.getServiceReport(start, end);\n      const financialReport = await storage.getFinancialReport(start, end);\n      const inventoryReport = await storage.getInventoryReport();\n      \n      const reportData = { salesReport, serviceReport, financialReport, inventoryReport };\n      \n      console.log('Generating HTML content...');\n      // Generate HTML template for PDF\n      const htmlContent = generateReportHTML(reportData, startDate, endDate);\n      \n      console.log('Generating PDF...');\n      // For now, return HTML version with PDF styling  \n      // Client-side PDF generation will be handled by jsPDF\n      res.setHeader('Content-Type', 'text/html');\n      res.setHeader('Content-Disposition', `inline; filename=\"laporan-bisnis-${startDate}-${endDate}.html\"`);\n      \n      // Send HTML content with PDF-optimized styling\n      res.send(htmlContent);\n    } catch (error) {\n      console.error(\"Error exporting PDF:\", error);\n      res.status(500).json({ \n        message: \"Failed to export PDF\", \n        error: (error as Error).message,\n        stack: (error as Error).stack \n      });\n    }\n  });\n\n  // Store configuration routes\n  // GET is public so app name can be displayed on login/landing pages\n  app.get('/api/store-config', async (req, res) => {\n    try {\n      const config = await storage.getStoreConfig();\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error fetching store config:\", error);\n      res.status(500).json({ message: \"Failed to fetch store config\" });\n    }\n  });\n\n  app.post('/api/store-config', isAuthenticated, async (req, res) => {\n    try {\n      const configData = insertStoreConfigSchema.parse(req.body);\n      const config = await storage.upsertStoreConfig(configData);\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error updating store config:\", error);\n      res.status(500).json({ message: \"Failed to update store config\" });\n    }\n  });\n\n  // Add PATCH method for store config updates\n  app.patch('/api/store-config', isAuthenticated, async (req, res) => {\n    try {\n      const configData = insertStoreConfigSchema.parse(req.body);\n      const config = await storage.upsertStoreConfig(configData);\n      res.json(config);\n    } catch (error: any) {\n      console.error(\"Error updating store config:\", error);\n      if (error.issues) {\n        console.error(\"Zod validation errors:\", error.issues);\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.issues \n        });\n      }\n      res.status(500).json({ message: \"Failed to update store config\" });\n    }\n  });\n\n  // Category routes\n  app.get('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Product routes\n  app.get('/api/products', isAuthenticated, async (req, res) => {\n    try {\n      const { search } = req.query;\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.get('/api/products/low-stock', isAuthenticated, async (req, res) => {\n    try {\n      const products = await storage.getLowStockProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching low stock products:\", error);\n      res.status(500).json({ message: \"Failed to fetch low stock products\" });\n    }\n  });\n\n  app.get('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      const product = await storage.getProductById(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post('/api/products', isAuthenticated, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const productWithCodes = {\n        ...productData,\n        sku: generateSKU(),\n        barcode: generateBarcode(),\n      };\n      const product = await storage.createProduct(productWithCodes);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete('/api/products/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Specialized pricing management endpoint\n  app.patch('/api/products/:id/pricing', isAuthenticated, async (req, res) => {\n    try {\n      const { sellingPrice, marginPercent } = req.body;\n      \n      // Calculate margin percentage if selling price provided\n      let updateData: any = {};\n      if (sellingPrice) updateData.sellingPrice = sellingPrice;\n      if (marginPercent) updateData.marginPercent = marginPercent;\n      \n      const product = await storage.updateProduct(req.params.id, updateData);\n      \n      // Return updated product with current HPP info\n      const currentHPP = await storage.getAveragePurchasePrice(req.params.id);\n      const updatedProduct = await storage.getProductById(req.params.id);\n      \n      res.json({\n        ...updatedProduct,\n        currentHPP: currentHPP\n      });\n    } catch (error) {\n      console.error(\"Error updating product pricing:\", error);\n      res.status(500).json({ message: \"Failed to update product pricing\" });\n    }\n  });\n\n  // Location routes\n  app.get('/api/locations', isAuthenticated, async (req, res) => {\n    try {\n      const locations = await storage.getLocations();\n      res.json(locations);\n    } catch (error) {\n      console.error(\"Error fetching locations:\", error);\n      res.status(500).json({ message: \"Failed to fetch locations\" });\n    }\n  });\n\n  app.post('/api/locations', isAuthenticated, async (req, res) => {\n    try {\n      const locationData = req.body; // Create proper schema later\n      const location = await storage.createLocation(locationData);\n      res.json(location);\n    } catch (error) {\n      console.error(\"Error creating location:\", error);\n      res.status(500).json({ message: \"Failed to create location\" });\n    }\n  });\n\n  // Purchase Order routes\n  app.get('/api/purchase-orders', isAuthenticated, async (req, res) => {\n    try {\n      const orders = await storage.getPurchaseOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching purchase orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchase orders\" });\n    }\n  });\n\n  app.get('/api/purchase-orders/:id', isAuthenticated, async (req, res) => {\n    try {\n      const order = await storage.getPurchaseOrderById(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Purchase order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching purchase order:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchase order\" });\n    }\n  });\n\n  app.post('/api/purchase-orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const { items, ...poData } = req.body;\n      const orderData = {\n        ...poData,\n        requestedBy: req.session.user.id\n      };\n      const order = await storage.createPurchaseOrder(orderData);\n      \n      // Create items if provided\n      if (items && items.length > 0) {\n        for (const item of items) {\n          await storage.createPurchaseOrderItem({\n            ...item,\n            purchaseOrderId: order.id,\n            orderedQuantity: item.quantity\n          });\n        }\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating purchase order:\", error);\n      res.status(500).json({ message: \"Failed to create purchase order\" });\n    }\n  });\n\n  app.post('/api/purchase-orders/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const order = await storage.approvePurchaseOrder(req.params.id, req.session.user.id);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error approving purchase order:\", error);\n      res.status(500).json({ message: \"Failed to approve purchase order\" });\n    }\n  });\n\n  // Purchase Order Items routes\n  app.get('/api/purchase-orders/:id/items', isAuthenticated, async (req, res) => {\n    try {\n      const items = await storage.getPurchaseOrderItems(req.params.id);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching purchase order items:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchase order items\" });\n    }\n  });\n\n  app.post('/api/purchase-orders/:id/items', isAuthenticated, async (req, res) => {\n    try {\n      const quantity = parseInt(req.body.quantity) || 1;\n      const unitCost = parseFloat(req.body.unitCost) || 0;\n      const itemData = {\n        purchaseOrderId: req.params.id,\n        productId: req.body.productId,\n        quantity: quantity, // Maps to quantity field (NOT NULL)\n        orderedQuantity: quantity, // Maps to ordered_quantity field\n        unitCost: String(unitCost), // Maps to unit_cost (varchar)\n        totalCost: String(quantity * unitCost), // Maps to total_cost (varchar)\n        notes: req.body.notes || \"\",\n      };\n      console.log(\"Creating PO item with data:\", itemData);\n      const item = await storage.createPurchaseOrderItem(itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating purchase order item:\", error);\n      res.status(500).json({ message: \"Failed to create purchase order item\" });\n    }\n  });\n\n  // Delete purchase order item\n  app.delete('/api/purchase-orders/:poId/items/:itemId', isAuthenticated, async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      await storage.deletePurchaseOrderItem(itemId);\n      res.json({ message: \"Item berhasil dihapus\" });\n    } catch (error) {\n      console.error(\"Error deleting purchase order item:\", error);\n      res.status(500).json({ message: \"Gagal menghapus item\", error: (error as Error).message });\n    }\n  });\n\n  // Receiving routes\n  app.post('/api/purchase-orders/items/:itemId/receive', isAuthenticated, async (req, res) => {\n    try {\n      const { itemId } = req.params;\n      const { receivedQuantity } = req.body;\n      \n      console.log(\"Receiving items:\", { itemId, receivedQuantity });\n      await storage.receivePurchaseOrderItem(itemId, parseInt(receivedQuantity));\n      res.json({ message: \"Items received successfully\" });\n    } catch (error) {\n      console.error(\"Error receiving items:\", error);\n      res.status(500).json({ message: \"Failed to receive items\", error: (error as Error).message });\n    }\n  });\n\n  // Product Batch routes\n  app.get('/api/product-batches', isAuthenticated, async (req, res) => {\n    try {\n      const { productId } = req.query;\n      const batches = await storage.getProductBatches(productId as string);\n      res.json(batches);\n    } catch (error) {\n      console.error(\"Error fetching product batches:\", error);\n      res.status(500).json({ message: \"Failed to fetch product batches\" });\n    }\n  });\n\n  app.post('/api/product-batches', isAuthenticated, async (req, res) => {\n    try {\n      const batch = await storage.createProductBatch(req.body);\n      res.json(batch);\n    } catch (error) {\n      console.error(\"Error creating product batch:\", error);\n      res.status(500).json({ message: \"Failed to create product batch\" });\n    }\n  });\n\n  // Inventory Adjustment routes\n  app.get('/api/inventory-adjustments', isAuthenticated, async (req, res) => {\n    try {\n      const adjustments = await storage.getInventoryAdjustments();\n      res.json(adjustments);\n    } catch (error) {\n      console.error(\"Error fetching inventory adjustments:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory adjustments\" });\n    }\n  });\n\n  app.post('/api/inventory-adjustments', isAuthenticated, async (req: any, res) => {\n    try {\n      const adjustmentData = {\n        ...req.body,\n        createdBy: req.session.user.id\n      };\n      const adjustment = await storage.createInventoryAdjustment(adjustmentData);\n      res.json(adjustment);\n    } catch (error) {\n      console.error(\"Error creating inventory adjustment:\", error);\n      res.status(500).json({ message: \"Failed to create inventory adjustment\" });\n    }\n  });\n\n  app.post('/api/inventory-adjustments/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const adjustment = await storage.approveInventoryAdjustment(req.params.id, req.session.user.id);\n      res.json(adjustment);\n    } catch (error) {\n      console.error(\"Error approving inventory adjustment:\", error);\n      res.status(500).json({ message: \"Failed to approve inventory adjustment\" });\n    }\n  });\n\n  // Customer routes\n  app.get('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const { search } = req.query;\n      let customers;\n      \n      if (search) {\n        customers = await storage.searchCustomers(search as string);\n      } else {\n        customers = await storage.getCustomers();\n      }\n      \n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.get('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const customer = await storage.getCustomerById(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error fetching customer:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer\" });\n    }\n  });\n\n  app.post('/api/customers', isAuthenticated, async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  app.put('/api/customers/:id', isAuthenticated, async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  // Supplier routes\n  app.get('/api/suppliers', isAuthenticated, async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      console.error(\"Error fetching suppliers:\", error);\n      res.status(500).json({ message: \"Failed to fetch suppliers\" });\n    }\n  });\n\n  app.post('/api/suppliers', isAuthenticated, async (req, res) => {\n    try {\n      const supplierData = insertSupplierSchema.parse(req.body);\n      const supplier = await storage.createSupplier(supplierData);\n      res.json(supplier);\n    } catch (error) {\n      console.error(\"Error creating supplier:\", error);\n      res.status(500).json({ message: \"Failed to create supplier\" });\n    }\n  });\n\n  // Transaction routes\n  app.get('/api/transactions', isAuthenticated, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const transactions = await storage.getTransactions(limit);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get('/api/transactions/:id', isAuthenticated, async (req, res) => {\n    try {\n      const transaction = await storage.getTransactionById(req.params.id);\n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error fetching transaction:\", error);\n      res.status(500).json({ message: \"Failed to fetch transaction\" });\n    }\n  });\n\n  const createTransactionSchema = z.object({\n    transaction: insertTransactionSchema,\n    items: z.array(insertTransactionItemSchema),\n  });\n\n  app.post('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const { transaction: transactionData, items } = createTransactionSchema.parse(req.body);\n      \n      // Generate transaction number\n      const transactionNumber = `TRX-${Date.now()}`;\n      \n      const transaction = await storage.createTransaction(\n        transactionData,\n        items\n      );\n      \n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating transaction:\", error);\n      res.status(500).json({ message: \"Failed to create transaction\" });\n    }\n  });\n\n  // Service Ticket routes\n  app.get('/api/service-tickets', isAuthenticated, async (req, res) => {\n    try {\n      const { active } = req.query;\n      let tickets;\n      \n      if (active === 'true') {\n        tickets = await storage.getActiveServiceTickets();\n      } else {\n        tickets = await storage.getServiceTickets();\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching service tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch service tickets\" });\n    }\n  });\n\n  app.get('/api/service-tickets/:id', isAuthenticated, async (req, res) => {\n    try {\n      const ticket = await storage.getServiceTicketById(req.params.id);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Service ticket not found\" });\n      }\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error fetching service ticket:\", error);\n      res.status(500).json({ message: \"Failed to fetch service ticket\" });\n    }\n  });\n\n  app.post('/api/service-tickets', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"Raw request body:\", JSON.stringify(req.body, null, 2));\n      \n      // Manual validation and transformation\n      const { customerId, deviceType, deviceBrand, deviceModel, serialNumber, completeness, problem, diagnosis, solution, status, technicianId, estimatedCost, laborCost } = req.body;\n      \n      const ticketData = {\n        customerId: customerId || \"\",\n        deviceType: deviceType || \"\",\n        deviceBrand: deviceBrand || null,\n        deviceModel: deviceModel || null,\n        serialNumber: serialNumber || null,\n        completeness: completeness || null,\n        problem: problem || \"\",\n        diagnosis: diagnosis || null,\n        solution: solution || null,\n        status: status || 'pending',\n        technicianId: technicianId || null,\n        estimatedCost: estimatedCost ? String(estimatedCost) : null,\n        laborCost: laborCost ? String(laborCost) : null,\n        actualCost: null,\n        partsCost: null,\n        estimatedCompletion: null,\n        completedAt: null,\n      };\n      \n      console.log(\"Processed ticket data:\", JSON.stringify(ticketData, null, 2));\n      \n      // Generate ticket number\n      const ticketNumber = `SVC-${Date.now()}`;\n      \n      const ticket = await storage.createServiceTicket({\n        ...ticketData,\n        ticketNumber,\n      });\n      \n      // Send WhatsApp notification for new service (async, don't block response)\n      setImmediate(async () => {\n        try {\n          const config = await storage.getStoreConfig();\n          if (config?.whatsappEnabled && whatsappService.isConnected()) {\n            const customer = await storage.getCustomerById(ticket.customerId);\n            if (customer?.phone) {\n              await whatsappService.sendServiceCreatedNotification(\n                customer.phone,\n                ticket,\n                customer,\n                config\n              );\n            }\n          }\n        } catch (error) {\n          console.error('Error sending WhatsApp notification for new service:', error);\n        }\n      });\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error creating service ticket:\", error);\n      res.status(500).json({ message: \"Failed to create service ticket\" });\n    }\n  });\n\n  app.put('/api/service-tickets/:id', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"Raw update body:\", JSON.stringify(req.body, null, 2));\n      \n      // Manual validation and transformation for update\n      const { customerId, deviceType, deviceBrand, deviceModel, serialNumber, completeness, problem, diagnosis, solution, status, technicianId, estimatedCost, laborCost, parts } = req.body;\n      \n      const ticketData: any = {};\n      \n      if (customerId !== undefined) ticketData.customerId = customerId;\n      if (deviceType !== undefined) ticketData.deviceType = deviceType;\n      if (deviceBrand !== undefined) ticketData.deviceBrand = deviceBrand || null;\n      if (deviceModel !== undefined) ticketData.deviceModel = deviceModel || null;\n      if (serialNumber !== undefined) ticketData.serialNumber = serialNumber || null;\n      if (completeness !== undefined) ticketData.completeness = completeness || null;\n      if (problem !== undefined) ticketData.problem = problem;\n      if (diagnosis !== undefined) ticketData.diagnosis = diagnosis || null;\n      if (solution !== undefined) ticketData.solution = solution || null;\n      if (status !== undefined) ticketData.status = status;\n      if (technicianId !== undefined) ticketData.technicianId = technicianId || null;\n      if (estimatedCost !== undefined) ticketData.estimatedCost = estimatedCost ? String(estimatedCost) : null;\n      if (laborCost !== undefined) ticketData.laborCost = laborCost ? String(laborCost) : null;\n      \n      console.log(\"Processed update data:\", JSON.stringify(ticketData, null, 2));\n      \n      // Get old ticket for status comparison\n      const oldTicket = await storage.getServiceTicketById(req.params.id);\n      const ticket = await storage.updateServiceTicket(req.params.id, ticketData, parts);\n      \n      // Send WhatsApp notification for status change (async, don't block response)\n      if (status !== undefined && oldTicket && status !== oldTicket.status) {\n        setImmediate(async () => {\n          try {\n            const config = await storage.getStoreConfig();\n            if (config?.whatsappEnabled && whatsappService.isConnected()) {\n              const customer = await storage.getCustomerById(ticket.customerId);\n              if (customer?.phone) {\n                await whatsappService.sendServiceStatusNotification(\n                  customer.phone,\n                  ticket,\n                  customer,\n                  config\n                );\n              }\n            }\n          } catch (error) {\n            console.error('Error sending WhatsApp notification for status change:', error);\n          }\n        });\n      }\n      \n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error updating service ticket:\", error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Failed to update service ticket\" });\n    }\n  });\n\n  // Delete service ticket\n  app.delete('/api/service-tickets/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteServiceTicket(id);\n      res.json({ message: \"Service ticket deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting service ticket:\", error);\n      res.status(500).json({ message: \"Failed to delete service ticket\" });\n    }\n  });\n\n  // Get parts for a service ticket\n  app.get('/api/service-tickets/:id/parts', isAuthenticated, async (req, res) => {\n    try {\n      const parts = await storage.getServiceTicketParts(req.params.id);\n      res.json(parts);\n    } catch (error) {\n      console.error(\"Error fetching service ticket parts:\", error);\n      res.status(500).json({ message: \"Failed to fetch service ticket parts\" });\n    }\n  });\n\n  // Stock Movement routes\n  app.get('/api/stock-movements', isAuthenticated, async (req, res) => {\n    try {\n      const { productId } = req.query;\n      const movements = await storage.getStockMovements(productId as string);\n      res.json(movements);\n    } catch (error) {\n      console.error(\"Error fetching stock movements:\", error);\n      res.status(500).json({ message: \"Failed to fetch stock movements\" });\n    }\n  });\n\n  app.post('/api/stock-movements', isAuthenticated, async (req: any, res) => {\n    try {\n      const movementData = insertStockMovementSchema.parse(req.body);\n      const movement = await storage.createStockMovement({\n        ...movementData,\n        userId: req.session.user.id,\n      });\n      res.json(movement);\n    } catch (error) {\n      console.error(\"Error creating stock movement:\", error);\n      res.status(500).json({ message: \"Failed to create stock movement\" });\n    }\n  });\n\n\n  // User Management routes\n  app.get('/api/users', isAuthenticated, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userData = req.body;\n      const user = await storage.updateUser(id, userData);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Role Management routes\n  app.get('/api/roles', isAuthenticated, async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      console.error(\"Error fetching roles:\", error);\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.post('/api/roles', isAuthenticated, async (req, res) => {\n    try {\n      const roleData = insertRoleSchema.parse(req.body);\n      const role = await storage.createRole(roleData);\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error creating role:\", error);\n      res.status(500).json({ message: \"Failed to create role\" });\n    }\n  });\n\n  app.put('/api/roles/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const roleData = req.body;\n      const role = await storage.updateRole(id, roleData);\n      res.json(role);\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.delete('/api/roles/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteRole(id);\n      res.json({ message: \"Role deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting role:\", error);\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n  // New Finance Management Routes\n  const { financeManager } = await import('./financeManager');\n\n  // Financial Transactions\n  app.get('/api/finance/transactions', isAuthenticated, async (req, res) => {\n    try {\n      const { type, category, startDate, endDate, referenceType } = req.query;\n      const filters = {\n        type: type as string,\n        category: category as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        referenceType: referenceType as string\n      };\n      const transactions = await financeManager.getTransactions(filters);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/finance/transactions', isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const transaction = await financeManager.createTransaction({\n        ...req.body,\n        userId\n      });\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error creating transaction:\", error);\n      res.status(500).json({ message: \"Failed to create transaction\" });\n    }\n  });\n\n  app.get('/api/finance/summary', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const summary = await financeManager.getSummary(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching summary:\", error);\n      res.status(500).json({ message: \"Failed to fetch summary\" });\n    }\n  });\n\n  app.delete('/api/finance/service-records/:serviceId', isAuthenticated, async (req, res) => {\n    try {\n      const { serviceId } = req.params;\n      \n      // Delete all financial records related to this service\n      await db.delete(financialRecords).where(eq(financialRecords.reference, serviceId));\n      \n      res.json({ message: \"Service financial records cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing service financial records:\", error);\n      res.status(500).json({ message: \"Failed to clear records\" });\n    }\n  });\n  \n  // Enhanced Accounting Reports API\n  app.get('/api/finance/balance-sheet', isAuthenticated, async (req, res) => {\n    try {\n      const { asOfDate } = req.query;\n      const asOf = asOfDate ? new Date(asOfDate as string) : undefined;\n      const balanceSheet = await storage.getBalanceSheet(asOf);\n      res.json(balanceSheet);\n    } catch (error) {\n      console.error(\"Error fetching balance sheet:\", error);\n      res.status(500).json({ message: \"Failed to fetch balance sheet\" });\n    }\n  });\n  \n  app.get('/api/finance/income-statement', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      const incomeStatement = await storage.getIncomeStatement(start, end);\n      res.json(incomeStatement);\n    } catch (error) {\n      console.error(\"Error fetching income statement:\", error);\n      res.status(500).json({ message: \"Failed to fetch income statement\" });\n    }\n  });\n  \n  app.get('/api/finance/chart-of-accounts', isAuthenticated, async (req, res) => {\n    try {\n      const accounts = await storage.getChartOfAccounts();\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching chart of accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch chart of accounts\" });\n    }\n  });\n  \n  app.post('/api/finance/journal-entry', isAuthenticated, async (req, res) => {\n    try {\n      const data = req.body;\n      data.userId = req.session?.user?.id;\n      const result = await storage.createJournalEntry(data);\n      \n      if (result.success) {\n        res.status(201).json(result.journalEntry);\n      } else {\n        res.status(400).json({ message: result.error });\n      }\n    } catch (error) {\n      console.error(\"Error creating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to create journal entry\" });\n    }\n  });\n\n  // Reset database (keep only users and roles)\n  app.post('/api/admin/reset-database', isAuthenticated, async (req, res) => {\n    try {\n      await db.transaction(async (tx) => {\n        // Delete in correct order to handle foreign keys\n        await tx.delete(attendanceRecords);\n        await tx.delete(payrollRecords);\n        await tx.delete(employees);\n        await tx.delete(financialRecords);\n        await tx.delete(stockMovements);\n        await tx.delete(serviceTicketParts);\n        await tx.delete(serviceTickets);\n        await tx.delete(transactionItems);\n        await tx.delete(transactions);\n        await tx.delete(products);\n        await tx.delete(categories);\n        await tx.delete(customers);\n        await tx.delete(suppliers);\n        await tx.delete(storeConfig);\n      });\n      \n      res.json({ message: \"Database reset completed. Users and roles preserved.\" });\n    } catch (error) {\n      console.error(\"Error resetting database:\", error);\n      res.status(500).json({ message: \"Failed to reset database\" });\n    }\n  });\n\n  // Employee Management\n  app.get('/api/employees', isAuthenticated, async (req, res) => {\n    try {\n      const { includeInactive } = req.query;\n      const employees = await financeManager.getEmployees(includeInactive === 'true');\n      res.json(employees);\n    } catch (error) {\n      console.error(\"Error fetching employees:\", error);\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.post('/api/employees', isAuthenticated, async (req, res) => {\n    try {\n      const employee = await financeManager.createEmployee(req.body);\n      res.json(employee);\n    } catch (error) {\n      console.error(\"Error creating employee:\", error);\n      res.status(500).json({ message: \"Failed to create employee\" });\n    }\n  });\n\n  app.put('/api/employees/:id', isAuthenticated, async (req, res) => {\n    try {\n      const employee = await financeManager.updateEmployee(req.params.id, req.body);\n      res.json(employee);\n    } catch (error) {\n      console.error(\"Error updating employee:\", error);\n      res.status(500).json({ message: \"Failed to update employee\" });\n    }\n  });\n\n  // Payroll Management\n  app.get('/api/payroll', isAuthenticated, async (req, res) => {\n    try {\n      const { employeeId } = req.query;\n      const payrolls = await financeManager.getPayrollRecords(employeeId as string);\n      res.json(payrolls);\n    } catch (error) {\n      console.error(\"Error fetching payroll records:\", error);\n      res.status(500).json({ message: \"Failed to fetch payroll records\" });\n    }\n  });\n\n  app.post('/api/payroll', isAuthenticated, async (req: any, res) => {\n    try {\n      const payroll = await financeManager.createPayroll({\n        ...req.body,\n        userId: req.session.user.id\n      });\n      res.json(payroll);\n    } catch (error) {\n      console.error(\"Error creating payroll:\", error);\n      res.status(500).json({ message: \"Failed to create payroll\" });\n    }\n  });\n\n  app.put('/api/payroll/:id/status', isAuthenticated, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const payroll = await financeManager.updatePayrollStatus(req.params.id, status);\n      res.json(payroll);\n    } catch (error) {\n      console.error(\"Error updating payroll status:\", error);\n      res.status(500).json({ message: \"Failed to update payroll status\" });\n    }\n  });\n\n  // Object storage routes\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      // Check if object storage is configured\n      const searchPaths = objectStorageService.getPublicObjectSearchPaths();\n      if (searchPaths.length === 0) {\n        return res.status(503).json({ error: \"Object storage not configured\" });\n      }\n      \n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      // Check if private object storage is configured\n      const privateDir = objectStorageService.getPrivateObjectDir();\n      if (!privateDir) {\n        return res.status(503).json({ error: \"Private object storage not configured\" });\n      }\n      \n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      if (!uploadURL) {\n        return res.status(503).json({ error: \"Object storage not configured for uploads\" });\n      }\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      return res.status(500).json({ error: \"Failed to generate upload URL\" });\n    }\n  });\n\n  app.put(\"/api/logos\", isAuthenticated, async (req, res) => {\n    if (!req.body.logoURL) {\n      return res.status(400).json({ error: \"logoURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      \n      // Check if private object storage is configured\n      const privateDir = objectStorageService.getPrivateObjectDir();\n      if (!privateDir) {\n        return res.status(503).json({ error: \"Object storage not configured\" });\n      }\n      \n      const objectPath = objectStorageService.normalizeObjectEntityPath(\n        req.body.logoURL,\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting logo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // WhatsApp API endpoints\n  \n  // Get WhatsApp status\n  app.get('/api/whatsapp/status', isAuthenticated, async (req, res) => {\n    try {\n      res.json({\n        connected: whatsappService.isConnected(),\n        connectionState: whatsappService.getConnectionState(),\n        qrCode: whatsappService.getQRCode(),\n      });\n    } catch (error) {\n      console.error('Error getting WhatsApp status:', error);\n      res.status(500).json({ message: 'Failed to get WhatsApp status' });\n    }\n  });\n\n  // Enable WhatsApp\n  app.post('/api/whatsapp/enable', isAuthenticated, async (req, res) => {\n    try {\n      const existingConfig = await storage.getStoreConfig();\n      await storage.upsertStoreConfig({\n        name: existingConfig?.name || \"LaptopPOS\",\n        address: existingConfig?.address || \"\",\n        phone: existingConfig?.phone || \"\",\n        email: existingConfig?.email || \"\",\n        taxRate: existingConfig?.taxRate || \"11.00\",\n        defaultDiscount: existingConfig?.defaultDiscount || \"0.00\",\n        whatsappEnabled: true,\n      });\n      res.json({ message: 'WhatsApp enabled successfully' });\n    } catch (error) {\n      console.error('Error enabling WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to enable WhatsApp' });\n    }\n  });\n\n  // Disable WhatsApp\n  app.post('/api/whatsapp/disable', isAuthenticated, async (req, res) => {\n    try {\n      // Disconnect if currently connected\n      if (whatsappService.isConnected()) {\n        await whatsappService.disconnect();\n      }\n      \n      const existingConfig = await storage.getStoreConfig();\n      await storage.upsertStoreConfig({\n        name: existingConfig?.name || \"LaptopPOS\",\n        address: existingConfig?.address || \"\",\n        phone: existingConfig?.phone || \"\",\n        email: existingConfig?.email || \"\",\n        taxRate: existingConfig?.taxRate || \"11.00\",\n        defaultDiscount: existingConfig?.defaultDiscount || \"0.00\",\n        whatsappEnabled: false,\n      });\n      res.json({ message: 'WhatsApp disabled successfully' });\n    } catch (error) {\n      console.error('Error disabling WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to disable WhatsApp' });\n    }\n  });\n\n  // Connect WhatsApp\n  app.post('/api/whatsapp/connect', isAuthenticated, async (req, res) => {\n    try {\n      const config = await storage.getStoreConfig();\n      if (!config?.whatsappEnabled) {\n        return res.status(400).json({ message: 'WhatsApp not enabled in settings' });\n      }\n\n      await whatsappService.initialize();\n      res.json({ message: 'WhatsApp connection initiated' });\n    } catch (error) {\n      console.error('Error connecting WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to connect WhatsApp' });\n    }\n  });\n\n  // Disconnect WhatsApp\n  app.post('/api/whatsapp/disconnect', isAuthenticated, async (req, res) => {\n    try {\n      await whatsappService.disconnect();\n      res.json({ message: 'WhatsApp disconnected successfully' });\n    } catch (error) {\n      console.error('Error disconnecting WhatsApp:', error);\n      res.status(500).json({ message: 'Failed to disconnect WhatsApp' });\n    }\n  });\n\n  // Test message\n  app.post('/api/whatsapp/test-message', isAuthenticated, async (req, res) => {\n    try {\n      const { phoneNumber } = req.body;\n      \n      if (!phoneNumber) {\n        return res.status(400).json({ message: 'Phone number is required' });\n      }\n\n      if (!whatsappService.isConnected()) {\n        return res.status(400).json({ message: 'WhatsApp not connected' });\n      }\n\n      const testMessage = `🔧 Test pesan dari LaptopPOS Service Center\n\nIni adalah pesan test untuk memastikan koneksi WhatsApp berfungsi dengan baik.\n\nTerima kasih!\n- LaptopPOS Team`;\n\n      const success = await whatsappService.sendMessage(phoneNumber, testMessage);\n      \n      if (success) {\n        res.json({ message: 'Test message sent successfully' });\n      } else {\n        res.status(500).json({ message: 'Failed to send test message' });\n      }\n    } catch (error) {\n      console.error('Error sending test message:', error);\n      res.status(500).json({ message: 'Failed to send test message' });\n    }\n  });\n\n  // Public API for customers to check service status with query parameter\n  app.get('/api/public/service-status', async (req, res) => {\n    try {\n      const { ticket } = req.query;\n      \n      if (!ticket) {\n        return res.status(400).json({ message: 'Ticket number is required' });\n      }\n\n      // Get service ticket with customer info using Drizzle\n      const serviceTicket = await db\n        .select()\n        .from(serviceTickets)\n        .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n        .where(eq(serviceTickets.ticketNumber, ticket as string))\n        .limit(1);\n\n      if (!serviceTicket.length) {\n        return res.status(404).json({ message: 'Service not found' });\n      }\n\n      const service = serviceTicket[0];\n      \n      // Return limited info for customer\n      res.json({\n        ticketNumber: service.service_tickets.ticketNumber,\n        customerName: service.customers?.name,\n        deviceType: service.service_tickets.deviceType,\n        deviceBrand: service.service_tickets.deviceBrand,\n        deviceModel: service.service_tickets.deviceModel,\n        problem: service.service_tickets.problem,\n        diagnosis: service.service_tickets.diagnosis,\n        status: service.service_tickets.status,\n        estimatedCost: service.service_tickets.estimatedCost,\n        estimatedCompletion: service.service_tickets.estimatedCompletion,\n        completedAt: service.service_tickets.completedAt,\n        createdAt: service.service_tickets.createdAt,\n      });\n    } catch (error) {\n      console.error('Error getting service status:', error);\n      res.status(500).json({ message: 'Failed to get service status' });\n    }\n  });\n\n  // Public API for customers to check service status\n  app.get('/api/public/service-status/:serviceNumber', async (req, res) => {\n    try {\n      const { serviceNumber } = req.params;\n      \n      if (!serviceNumber) {\n        return res.status(400).json({ message: 'Service number is required' });\n      }\n\n      // Get service ticket with customer info using Drizzle\n      const serviceTicket = await db\n        .select()\n        .from(serviceTickets)\n        .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n        .where(eq(serviceTickets.ticketNumber, serviceNumber as string))\n        .limit(1);\n\n      if (!serviceTicket.length) {\n        return res.status(404).json({ message: 'Service not found' });\n      }\n\n      const service = serviceTicket[0];\n      \n      // Return limited info for customer\n      res.json({\n        ticketNumber: service.service_tickets.ticketNumber,\n        customerName: service.customers?.name,\n        deviceType: service.service_tickets.deviceType,\n        deviceBrand: service.service_tickets.deviceBrand,\n        deviceModel: service.service_tickets.deviceModel,\n        problem: service.service_tickets.problem,\n        diagnosis: service.service_tickets.diagnosis,\n        status: service.service_tickets.status,\n        estimatedCost: service.service_tickets.estimatedCost,\n        estimatedCompletion: service.service_tickets.estimatedCompletion,\n        completedAt: service.service_tickets.completedAt,\n        createdAt: service.service_tickets.createdAt,\n      });\n\n      // Get customer info and parts from the service ticket\n      const ticket = service.service_tickets;\n      const customer = service.customers;\n      \n      // Get used parts\n      const parts = await storage.getServiceTicketParts(ticket.id);\n      \n      // Return limited info for customer\n      res.json({\n        ticketNumber: ticket.ticketNumber,\n        customerName: customer?.name,\n        deviceType: ticket.deviceType,\n        deviceBrand: ticket.deviceBrand,\n        deviceModel: ticket.deviceModel,\n        problem: ticket.problem,\n        diagnosis: ticket.diagnosis,\n        status: ticket.status,\n        estimatedCost: ticket.estimatedCost,\n        estimatedCompletion: ticket.estimatedCompletion,\n        completedAt: ticket.completedAt,\n        createdAt: ticket.createdAt,\n        parts: parts.map(part => ({\n          name: part.productName,\n          quantity: part.quantity,\n          unitPrice: part.unitPrice\n        }))\n      });\n    } catch (error) {\n      console.error('Error getting service status:', error);\n      res.status(500).json({ message: 'Failed to get service status' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":65963},"laptoppos-deployment-20250903-113337/server/storage.ts":{"content":"import {\n  users,\n  roles,\n  storeConfig,\n  categories,\n  products,\n  customers,\n  suppliers,\n  locations,\n  productBatches,\n  purchaseOrders,\n  purchaseOrderItems,\n  inventoryAdjustments,\n  inventoryAdjustmentItems,\n  transactions,\n  transactionItems,\n  serviceTickets,\n  serviceTicketParts,\n  stockMovements,\n  financialRecords,\n  type User,\n  type InsertUser,\n  type Role,\n  type InsertRole,\n  type StoreConfig,\n  type InsertStoreConfig,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Customer,\n  type InsertCustomer,\n  type Supplier,\n  type InsertSupplier,\n  type Location,\n  type InsertLocation,\n  type ProductBatch,\n  type InsertProductBatch,\n  type PurchaseOrder,\n  type InsertPurchaseOrder,\n  type PurchaseOrderItem,\n  type InsertPurchaseOrderItem,\n  type InventoryAdjustment,\n  type InsertInventoryAdjustment,\n  type InventoryAdjustmentItem,\n  type InsertInventoryAdjustmentItem,\n  type Transaction,\n  type InsertTransaction,\n  type TransactionItem,\n  type InsertTransactionItem,\n  type ServiceTicket,\n  type InsertServiceTicket,\n  type ServiceTicketPart,\n  type InsertServiceTicketPart,\n  type StockMovement,\n  type InsertStockMovement,\n  type FinancialRecord,\n  type InsertFinancialRecord,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, gte, lte, like, ilike, count, sum, sql, isNotNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: Partial<InsertUser> & { id: string }): Promise<User>;\n  \n  // User management\n  getUsers(): Promise<User[]>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Role management\n  getRoles(): Promise<Role[]>;\n  getRoleById(id: string): Promise<Role | undefined>;\n  getRoleByName(name: string): Promise<Role | undefined>;\n  createRole(role: InsertRole): Promise<Role>;\n  updateRole(id: string, role: Partial<InsertRole>): Promise<Role>;\n  deleteRole(id: string): Promise<void>;\n  \n  // Store configuration\n  getStoreConfig(): Promise<StoreConfig | undefined>;\n  upsertStoreConfig(config: InsertStoreConfig): Promise<StoreConfig>;\n  \n  // Categories\n  getCategories(): Promise<Category[]>;\n  getCategoryById(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n  \n  // Products\n  getProducts(search?: string): Promise<Product[]>;\n  getProductById(id: string): Promise<Product | undefined>;\n  getProductBySku(sku: string): Promise<Product | undefined>;\n  getProductByBarcode(barcode: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  \n  // Locations\n  getLocations(): Promise<Location[]>;\n  getLocationById(id: string): Promise<Location | undefined>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  updateLocation(id: string, location: Partial<InsertLocation>): Promise<Location>;\n  deleteLocation(id: string): Promise<void>;\n  \n  // Product Batches\n  getProductBatches(productId?: string): Promise<ProductBatch[]>;\n  getProductBatchById(id: string): Promise<ProductBatch | undefined>;\n  createProductBatch(batch: InsertProductBatch): Promise<ProductBatch>;\n  updateProductBatch(id: string, batch: Partial<InsertProductBatch>): Promise<ProductBatch>;\n  \n  // Purchase Orders\n  getPurchaseOrders(): Promise<PurchaseOrder[]>;\n  getPurchaseOrderById(id: string): Promise<PurchaseOrder | undefined>;\n  createPurchaseOrder(po: InsertPurchaseOrder): Promise<PurchaseOrder>;\n  updatePurchaseOrder(id: string, po: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder>;\n  deletePurchaseOrder(id: string): Promise<void>;\n  approvePurchaseOrder(id: string, approvedBy: string): Promise<PurchaseOrder>;\n  \n  // Purchase Order Items\n  getPurchaseOrderItems(poId: string): Promise<(PurchaseOrderItem & { productName: string; productSku: string })[]>;\n  createPurchaseOrderItem(item: InsertPurchaseOrderItem): Promise<PurchaseOrderItem>;\n  updatePurchaseOrderItem(id: string, item: Partial<InsertPurchaseOrderItem>): Promise<PurchaseOrderItem>;\n  deletePurchaseOrderItem(id: string): Promise<void>;\n  recalculatePurchaseOrderTotal(poId: string): Promise<void>;\n  receivePurchaseOrderItem(itemId: string, receivedQuantity: number): Promise<void>;\n  \n  // Inventory Adjustments\n  getInventoryAdjustments(): Promise<InventoryAdjustment[]>;\n  getInventoryAdjustmentById(id: string): Promise<InventoryAdjustment | undefined>;\n  createInventoryAdjustment(adjustment: InsertInventoryAdjustment): Promise<InventoryAdjustment>;\n  approveInventoryAdjustment(id: string, approvedBy: string): Promise<InventoryAdjustment>;\n  \n  // Inventory Adjustment Items\n  getInventoryAdjustmentItems(adjustmentId: string): Promise<InventoryAdjustmentItem[]>;\n  createInventoryAdjustmentItem(item: InsertInventoryAdjustmentItem): Promise<InventoryAdjustmentItem>;\n  \n  // Customers\n  getCustomers(): Promise<Customer[]>;\n  getCustomerById(id: string): Promise<Customer | undefined>;\n  searchCustomers(query: string): Promise<Customer[]>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n  \n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplierById(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: string, supplier: Partial<InsertSupplier>): Promise<Supplier>;\n  deleteSupplier(id: string): Promise<void>;\n  \n  // Transactions\n  getTransactions(limit?: number): Promise<Transaction[]>;\n  getTransactionById(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction, items: InsertTransactionItem[]): Promise<Transaction>;\n  \n  // Service Tickets\n  getServiceTickets(): Promise<ServiceTicket[]>;\n  getServiceTicketById(id: string): Promise<ServiceTicket | undefined>;\n  getActiveServiceTickets(): Promise<ServiceTicket[]>;\n  createServiceTicket(ticket: InsertServiceTicket): Promise<ServiceTicket>;\n  updateServiceTicket(id: string, ticket: Partial<InsertServiceTicket>): Promise<ServiceTicket>;\n  deleteServiceTicket(id: string): Promise<void>;\n  \n  // Stock Movements\n  getStockMovements(productId?: string): Promise<StockMovement[]>;\n  createStockMovement(movement: InsertStockMovement): Promise<StockMovement>;\n  \n  // Financial Records\n  getFinancialRecords(startDate?: Date, endDate?: Date): Promise<FinancialRecord[]>;\n  createFinancialRecord(record: InsertFinancialRecord): Promise<FinancialRecord>;\n  \n  // Reports\n  getSalesReport(startDate: Date, endDate: Date): Promise<{ totalSales: string; transactions: any[] }>;\n  getServiceReport(startDate: Date, endDate: Date): Promise<{ totalServices: number; tickets: any[] }>;\n  getFinancialReport(startDate: Date, endDate: Date): Promise<{ totalIncome: string; totalExpense: string; profit: string; records: any[] }>;\n  getInventoryReport(): Promise<{ lowStockCount: number; lowStockProducts: any[]; totalProducts: number }>;\n  \n  // Enhanced Accounting Reports\n  getBalanceSheet(asOfDate?: Date): Promise<any>;\n  getIncomeStatement(startDate?: Date, endDate?: Date): Promise<any>;\n  getChartOfAccounts(): Promise<any[]>;\n  createJournalEntry(data: any): Promise<{ success: boolean; journalEntry?: any; error?: string }>;\n  \n  // Dashboard Statistics\n  getDashboardStats(): Promise<{\n    todaySales: string;\n    activeServices: number;\n    lowStockCount: number;\n    monthlyProfit: string;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: Partial<InsertUser> & { id: string }): Promise<User> {\n    // Try to find existing user\n    const existingUser = await this.getUser(userData.id);\n    \n    if (existingUser) {\n      // User exists, update them\n      const [user] = await db\n        .update(users)\n        .set({ ...userData, updatedAt: new Date() })\n        .where(eq(users.id, userData.id))\n        .returning();\n      return user;\n    } else {\n      // User doesn't exist, create them with defaults\n      const newUserData: InsertUser = {\n        id: userData.id,\n        username: userData.email || `user_${userData.id}`,\n        email: userData.email || null,\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        password: '', // No password for Replit Auth users\n        role: 'admin', // Default to admin for first user, or could be 'kasir'\n        isActive: true,\n        profileImageUrl: userData.profileImageUrl || null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        ...userData\n      };\n      \n      const [user] = await db\n        .insert(users)\n        .values(newUserData)\n        .returning();\n      return user;\n    }\n  }\n\n  // User management\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Role management\n  async getRoles(): Promise<Role[]> {\n    return await db.select().from(roles).where(eq(roles.isActive, true)).orderBy(asc(roles.displayName));\n  }\n\n  async getRoleById(id: string): Promise<Role | undefined> {\n    const [role] = await db.select().from(roles).where(eq(roles.id, id));\n    return role;\n  }\n\n  async getRoleByName(name: string): Promise<Role | undefined> {\n    const [role] = await db.select().from(roles).where(eq(roles.name, name));\n    return role;\n  }\n\n  async createRole(roleData: InsertRole): Promise<Role> {\n    const [role] = await db.insert(roles).values(roleData).returning();\n    return role;\n  }\n\n  async updateRole(id: string, roleData: Partial<InsertRole>): Promise<Role> {\n    const [role] = await db\n      .update(roles)\n      .set({ ...roleData, updatedAt: new Date() })\n      .where(eq(roles.id, id))\n      .returning();\n    return role;\n  }\n\n  async deleteRole(id: string): Promise<void> {\n    await db.update(roles).set({ isActive: false }).where(eq(roles.id, id));\n  }\n\n  // Store configuration\n  async getStoreConfig(): Promise<StoreConfig | undefined> {\n    const [config] = await db.select().from(storeConfig).limit(1);\n    return config;\n  }\n\n  async upsertStoreConfig(configData: InsertStoreConfig): Promise<StoreConfig> {\n    const existing = await this.getStoreConfig();\n    \n    if (existing) {\n      const [config] = await db\n        .update(storeConfig)\n        .set({ ...configData, updatedAt: new Date() })\n        .where(eq(storeConfig.id, existing.id))\n        .returning();\n      return config;\n    } else {\n      const [config] = await db\n        .insert(storeConfig)\n        .values(configData)\n        .returning();\n      return config;\n    }\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(asc(categories.name));\n  }\n\n  async getCategoryById(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category;\n  }\n\n  async createCategory(categoryData: InsertCategory): Promise<Category> {\n    const [category] = await db.insert(categories).values(categoryData).returning();\n    return category;\n  }\n\n  async updateCategory(id: string, categoryData: Partial<InsertCategory>): Promise<Category> {\n    const [category] = await db\n      .update(categories)\n      .set(categoryData)\n      .where(eq(categories.id, id))\n      .returning();\n    return category;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.delete(categories).where(eq(categories.id, id));\n  }\n\n  // Products\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isActive, true)).orderBy(asc(products.name));\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async getProductBySku(sku: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.sku, sku));\n    return product;\n  }\n\n  async getProductByBarcode(barcode: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.barcode, barcode));\n    return product;\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          ilike(products.name, `%${query}%`)\n        )\n      )\n      .orderBy(asc(products.name));\n  }\n\n  async getLowStockProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.totalStock} <= ${products.minStock}`\n        )\n      )\n      .orderBy(asc(products.name));\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(productData).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db\n      .update(products)\n      .set({ ...productData, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  // Locations\n  async getLocations(): Promise<Location[]> {\n    return await db.select().from(locations).where(eq(locations.isActive, true)).orderBy(asc(locations.name));\n  }\n\n  async getLocationById(id: string): Promise<Location | undefined> {\n    const [location] = await db.select().from(locations).where(eq(locations.id, id));\n    return location;\n  }\n\n  async createLocation(locationData: InsertLocation): Promise<Location> {\n    const [location] = await db.insert(locations).values(locationData).returning();\n    return location;\n  }\n\n  async updateLocation(id: string, locationData: Partial<InsertLocation>): Promise<Location> {\n    const [location] = await db\n      .update(locations)\n      .set(locationData)\n      .where(eq(locations.id, id))\n      .returning();\n    return location;\n  }\n\n  async deleteLocation(id: string): Promise<void> {\n    await db.update(locations).set({ isActive: false }).where(eq(locations.id, id));\n  }\n\n  // Product Batches\n  async getProductBatches(productId?: string): Promise<ProductBatch[]> {\n    if (productId) {\n      return await db.select().from(productBatches).where(eq(productBatches.productId, productId)).orderBy(desc(productBatches.receivedDate));\n    }\n    return await db.select().from(productBatches).orderBy(desc(productBatches.receivedDate));\n  }\n\n  async getProductBatchById(id: string): Promise<ProductBatch | undefined> {\n    const [batch] = await db.select().from(productBatches).where(eq(productBatches.id, id));\n    return batch;\n  }\n\n  async createProductBatch(batchData: InsertProductBatch): Promise<ProductBatch> {\n    const [batch] = await db.insert(productBatches).values(batchData).returning();\n    return batch;\n  }\n\n  async updateProductBatch(id: string, batchData: Partial<InsertProductBatch>): Promise<ProductBatch> {\n    const [batch] = await db\n      .update(productBatches)\n      .set({ ...batchData, updatedAt: new Date() })\n      .where(eq(productBatches.id, id))\n      .returning();\n    return batch;\n  }\n\n  // Purchase Orders\n  async getPurchaseOrders(): Promise<(PurchaseOrder & { supplierName: string })[]> {\n    return await db\n      .select({\n        ...purchaseOrders,\n        supplierName: suppliers.name,\n      })\n      .from(purchaseOrders)\n      .leftJoin(suppliers, eq(purchaseOrders.supplierId, suppliers.id))\n      .orderBy(desc(purchaseOrders.orderDate));\n  }\n\n  async getPurchaseOrderById(id: string): Promise<PurchaseOrder | undefined> {\n    const [po] = await db.select().from(purchaseOrders).where(eq(purchaseOrders.id, id));\n    return po;\n  }\n\n  async createPurchaseOrder(poData: InsertPurchaseOrder): Promise<PurchaseOrder> {\n    // Generate PO number\n    const countResult = await db.select({ count: count() }).from(purchaseOrders);\n    const poNumber = `PO-${String(countResult[0].count + 1).padStart(5, '0')}`;\n    \n    const [po] = await db.insert(purchaseOrders).values({\n      ...poData,\n      poNumber,\n    }).returning();\n    return po;\n  }\n\n  async updatePurchaseOrder(id: string, poData: Partial<InsertPurchaseOrder>): Promise<PurchaseOrder> {\n    const [po] = await db\n      .update(purchaseOrders)\n      .set({ ...poData, updatedAt: new Date() })\n      .where(eq(purchaseOrders.id, id))\n      .returning();\n    return po;\n  }\n\n  async deletePurchaseOrder(id: string): Promise<void> {\n    await db.delete(purchaseOrders).where(eq(purchaseOrders.id, id));\n  }\n\n  async approvePurchaseOrder(id: string, approvedBy: string): Promise<PurchaseOrder> {\n    const [po] = await db\n      .update(purchaseOrders)\n      .set({ \n        status: 'confirmed',\n        approvedBy: approvedBy,\n        approvedDate: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrders.id, id))\n      .returning();\n    return po;\n  }\n\n  // Purchase Order Items\n  async getPurchaseOrderItems(poId: string): Promise<(PurchaseOrderItem & { productName: string; productSku: string })[]> {\n    return await db\n      .select({\n        ...purchaseOrderItems,\n        productName: products.name,\n        productSku: products.sku,\n      })\n      .from(purchaseOrderItems)\n      .leftJoin(products, eq(purchaseOrderItems.productId, products.id))\n      .where(eq(purchaseOrderItems.purchaseOrderId, poId));\n  }\n\n  async createPurchaseOrderItem(itemData: InsertPurchaseOrderItem): Promise<PurchaseOrderItem> {\n    const [item] = await db.insert(purchaseOrderItems).values(itemData).returning();\n    \n    // Auto recalculate PO total and update status\n    await this.recalculatePurchaseOrderTotal(itemData.purchaseOrderId);\n    \n    return item;\n  }\n\n  async recalculatePurchaseOrderTotal(poId: string): Promise<void> {\n    // Calculate total from all items\n    const result = await db\n      .select({\n        total: sql<number>`COALESCE(SUM(${purchaseOrderItems.quantity} * CAST(${purchaseOrderItems.unitCost} AS NUMERIC)), 0)`,\n        count: sql<number>`COUNT(${purchaseOrderItems.id})`\n      })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.purchaseOrderId, poId));\n    \n    const calculatedTotal = result[0]?.total || 0;\n    const itemCount = result[0]?.count || 0;\n    \n    // Update PO with new total and status\n    const updateData: any = {\n      totalAmount: calculatedTotal.toString(),\n      updatedAt: new Date()\n    };\n    \n    // Change status from draft to pending if there are items\n    if (itemCount > 0) {\n      updateData.status = 'pending';\n    }\n    \n    await db\n      .update(purchaseOrders)\n      .set(updateData)\n      .where(eq(purchaseOrders.id, poId));\n  }\n\n  async updatePurchaseOrderItem(id: string, itemData: Partial<InsertPurchaseOrderItem>): Promise<PurchaseOrderItem> {\n    // Get PO ID for recalculation\n    const [existingItem] = await db.select({ purchaseOrderId: purchaseOrderItems.purchaseOrderId })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, id));\n    \n    const [item] = await db\n      .update(purchaseOrderItems)\n      .set(itemData)\n      .where(eq(purchaseOrderItems.id, id))\n      .returning();\n    \n    // Recalculate total after update\n    if (existingItem) {\n      await this.recalculatePurchaseOrderTotal(existingItem.purchaseOrderId);\n    }\n    \n    return item;\n  }\n\n  async deletePurchaseOrderItem(id: string): Promise<void> {\n    // Get PO ID before deleting item\n    const [item] = await db.select({ purchaseOrderId: purchaseOrderItems.purchaseOrderId })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, id));\n    \n    await db.delete(purchaseOrderItems).where(eq(purchaseOrderItems.id, id));\n    \n    // Recalculate total after deletion\n    if (item) {\n      await this.recalculatePurchaseOrderTotal(item.purchaseOrderId);\n    }\n  }\n\n  async receivePurchaseOrderItem(itemId: string, receivedQuantity: number): Promise<void> {\n    // SIMPLIFIED: Get item details with select all - no complex field selection\n    const [item] = await db\n      .select()\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.id, itemId));\n\n    if (!item) throw new Error(\"Purchase order item not found\");\n\n    const newReceivedQuantity = (item.receivedQuantity || 0) + receivedQuantity;\n    \n    // Update received quantity\n    await db\n      .update(purchaseOrderItems)\n      .set({ \n        receivedQuantity: newReceivedQuantity,\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrderItems.id, itemId));\n\n    // Record stock movement with actual purchase price\n    await db.insert(stockMovements).values({\n      productId: item.productId,\n      movementType: 'in',\n      quantity: receivedQuantity,\n      unitCost: item.unitCost || item.unitPrice, // Try both field names for HPP calculation\n      referenceId: item.purchaseOrderId,\n      referenceType: 'purchase',\n      notes: `Received from PO`,\n      userId: 'a4fb9372-ec01-4825-b035-81de75a18053',\n    });\n\n    // CREATE FINANCE RECORD for purchase expense\n    const totalCost = parseFloat(item.unitCost || item.unitPrice || '0') * receivedQuantity;\n    if (totalCost > 0) {\n      await db.insert(financialRecords).values({\n        type: 'expense',\n        amount: totalCost.toString(),\n        description: `Purchase: ${receivedQuantity} units received`,\n        category: 'Inventory Purchase',\n        reference: item.purchaseOrderId,\n        referenceType: 'purchase_order',\n        userId: 'a4fb9372-ec01-4825-b035-81de75a18053',\n      });\n    }\n\n    // DIRECT UPDATE: Use SQL arithmetic to ensure stock update works\n    await db\n      .update(products)\n      .set({ \n        stock: sql`${products.stock} + ${receivedQuantity}`,\n        lastPurchasePrice: item.unitCost || item.unitPrice, // Update last purchase price - use available field\n        updatedAt: new Date()\n      })\n      .where(eq(products.id, item.productId));\n\n    // CALCULATE AND UPDATE HPP (Average Cost) after receiving new stock\n    const newAverageCost = await this.getAveragePurchasePrice(item.productId);\n    await db\n      .update(products)\n      .set({ \n        averageCost: newAverageCost.toString(),\n        updatedAt: new Date()\n      })\n      .where(eq(products.id, item.productId));\n\n    // Check if PO should be updated to received status\n    await this.updatePurchaseOrderStatus(item.purchaseOrderId);\n  }\n\n  async updatePurchaseOrderStatus(poId: string): Promise<void> {\n    // Get all items for this PO\n    const items = await db\n      .select({\n        quantity: purchaseOrderItems.quantity,\n        receivedQuantity: purchaseOrderItems.receivedQuantity\n      })\n      .from(purchaseOrderItems)\n      .where(eq(purchaseOrderItems.purchaseOrderId, poId));\n\n    if (items.length === 0) return;\n\n    const totalOrdered = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totalReceived = items.reduce((sum, item) => sum + (item.receivedQuantity || 0), 0);\n\n    let newStatus = 'confirmed';\n    if (totalReceived === totalOrdered) {\n      newStatus = 'received';\n    } else if (totalReceived > 0) {\n      newStatus = 'partial_received';\n    }\n\n    await db\n      .update(purchaseOrders)\n      .set({ \n        status: newStatus as any,\n        updatedAt: new Date()\n      })\n      .where(eq(purchaseOrders.id, poId));\n  }\n\n  // Inventory Adjustments\n  async getInventoryAdjustments(): Promise<InventoryAdjustment[]> {\n    return await db.select().from(inventoryAdjustments).orderBy(desc(inventoryAdjustments.createdAt));\n  }\n\n  async getInventoryAdjustmentById(id: string): Promise<InventoryAdjustment | undefined> {\n    const [adjustment] = await db.select().from(inventoryAdjustments).where(eq(inventoryAdjustments.id, id));\n    return adjustment;\n  }\n\n  async createInventoryAdjustment(adjustmentData: InsertInventoryAdjustment): Promise<InventoryAdjustment> {\n    // Generate adjustment number\n    const countResult = await db.select({ count: count() }).from(inventoryAdjustments);\n    const adjustmentNumber = `ADJ-${String(countResult[0].count + 1).padStart(5, '0')}`;\n    \n    const [adjustment] = await db.insert(inventoryAdjustments).values({\n      ...adjustmentData,\n      adjustmentNumber,\n    }).returning();\n    return adjustment;\n  }\n\n  async approveInventoryAdjustment(id: string, approvedBy: string): Promise<InventoryAdjustment> {\n    return await db.transaction(async (tx) => {\n      // Get adjustment and items\n      const [adjustment] = await tx.select().from(inventoryAdjustments).where(eq(inventoryAdjustments.id, id));\n      if (!adjustment) {\n        throw new Error('Adjustment not found');\n      }\n\n      const items = await tx.select().from(inventoryAdjustmentItems).where(eq(inventoryAdjustmentItems.adjustmentId, id));\n\n      // Update product stocks based on adjustment\n      for (const item of items) {\n        await tx\n          .update(products)\n          .set({ \n            stock: sql`${products.stock} + ${item.adjustmentQuantity}`,\n            updatedAt: new Date()\n          })\n          .where(eq(products.id, item.productId));\n\n        // Create stock movement\n        await tx.insert(stockMovements).values({\n          productId: item.productId,\n          batchId: item.batchId,\n          locationId: item.locationId,\n          movementType: item.adjustmentQuantity > 0 ? 'in' : 'out',\n          quantity: Math.abs(item.adjustmentQuantity),\n          unitCost: item.unitCost,\n          referenceId: id,\n          referenceType: 'adjustment',\n          notes: `Inventory adjustment: ${adjustment.reason}`,\n          userId: approvedBy,\n        });\n      }\n\n      // Update adjustment status\n      const [updatedAdjustment] = await tx\n        .update(inventoryAdjustments)\n        .set({ \n          status: 'approved',\n          approvedBy: approvedBy,\n          approvedDate: new Date(),\n          updatedAt: new Date()\n        })\n        .where(eq(inventoryAdjustments.id, id))\n        .returning();\n\n      return updatedAdjustment;\n    });\n  }\n\n  // Inventory Adjustment Items\n  async getInventoryAdjustmentItems(adjustmentId: string): Promise<InventoryAdjustmentItem[]> {\n    return await db.select().from(inventoryAdjustmentItems).where(eq(inventoryAdjustmentItems.adjustmentId, adjustmentId));\n  }\n\n  async createInventoryAdjustmentItem(itemData: InsertInventoryAdjustmentItem): Promise<InventoryAdjustmentItem> {\n    const [item] = await db.insert(inventoryAdjustmentItems).values(itemData).returning();\n    return item;\n  }\n\n  // Enhanced stock movement with new system\n  async createStockMovement(movementData: InsertStockMovement): Promise<StockMovement> {\n    const [movement] = await db.insert(stockMovements).values(movementData).returning();\n    \n    // CREATE FINANCE TRANSACTION for stock movements that have cost impact\n    if (movement.unitCost && parseFloat(movement.unitCost) > 0) {\n      const totalCost = parseFloat(movement.unitCost) * movement.quantity;\n      let transactionType: 'income' | 'expense' = 'expense';\n      let description = `Stock movement: ${movement.movementType}`;\n      \n      if (movement.movementType === 'out') {\n        // When stock goes out, it's usually a sale (income) or expense (cost of goods sold)\n        transactionType = movement.referenceType === 'sale' ? 'income' : 'expense';\n        description = movement.referenceType === 'sale' ? \n          `Sale: ${movement.quantity} units` : \n          `Stock out: ${movement.quantity} units`;\n      } else {\n        // When stock comes in, it's usually a purchase (expense)\n        transactionType = 'expense';\n        description = `Stock in: ${movement.quantity} units`;\n      }\n      \n      await db.insert(financialRecords).values({\n        type: transactionType,\n        amount: totalCost.toString(),\n        description,\n        category: movement.referenceType === 'sale' ? 'Sales Revenue' : 'Inventory',\n        reference: movement.referenceId,\n        referenceType: movement.referenceType,\n        userId: movement.userId,\n      });\n    }\n    \n    return movement;\n  }\n\n  async getAveragePurchasePrice(productId: string): Promise<number> {\n    // Get all stock movements where stock came in (type: 'in') for this product\n    const movements = await db\n      .select({\n        quantity: stockMovements.quantity,\n        unitCost: stockMovements.unitCost\n      })\n      .from(stockMovements)\n      .where(and(\n        eq(stockMovements.productId, productId),\n        eq(stockMovements.movementType, 'in'),\n        isNotNull(stockMovements.unitCost)\n      ));\n\n    if (movements.length === 0) {\n      // If no stock movements with price found, fallback to product's purchase price\n      const [product] = await db.select({ purchasePrice: products.lastPurchasePrice })\n        .from(products)\n        .where(eq(products.id, productId));\n      return parseFloat(product?.purchasePrice || '0');\n    }\n\n    // Calculate weighted average: sum(quantity * price) / sum(quantity)\n    let totalWeightedCost = 0;\n    let totalQuantity = 0;\n    \n    for (const movement of movements) {\n      const price = parseFloat(movement.unitCost || '0');\n      const quantity = movement.quantity;\n      totalWeightedCost += price * quantity;\n      totalQuantity += quantity;\n    }\n\n    return totalQuantity > 0 ? totalWeightedCost / totalQuantity : 0;\n  }\n\n  // Customers\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(asc(customers.name));\n  }\n\n  async getCustomerById(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async searchCustomers(query: string): Promise<Customer[]> {\n    return await db\n      .select()\n      .from(customers)\n      .where(ilike(customers.name, `%${query}%`))\n      .orderBy(asc(customers.name));\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<Customer> {\n    const [customer] = await db.insert(customers).values(customerData).returning();\n    return customer;\n  }\n\n  async updateCustomer(id: string, customerData: Partial<InsertCustomer>): Promise<Customer> {\n    const [customer] = await db\n      .update(customers)\n      .set({ ...customerData, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return customer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db.delete(customers).where(eq(customers.id, id));\n  }\n\n  // Suppliers\n  async getSuppliers(): Promise<Supplier[]> {\n    return await db.select().from(suppliers).orderBy(asc(suppliers.name));\n  }\n\n  async getSupplierById(id: string): Promise<Supplier | undefined> {\n    const [supplier] = await db.select().from(suppliers).where(eq(suppliers.id, id));\n    return supplier;\n  }\n\n  async createSupplier(supplierData: InsertSupplier): Promise<Supplier> {\n    const [supplier] = await db.insert(suppliers).values(supplierData).returning();\n    return supplier;\n  }\n\n  async updateSupplier(id: string, supplierData: Partial<InsertSupplier>): Promise<Supplier> {\n    const [supplier] = await db\n      .update(suppliers)\n      .set({ ...supplierData, updatedAt: new Date() })\n      .where(eq(suppliers.id, id))\n      .returning();\n    return supplier;\n  }\n\n  async deleteSupplier(id: string): Promise<void> {\n    await db.delete(suppliers).where(eq(suppliers.id, id));\n  }\n\n  // Transactions\n  async getTransactions(limit: number = 50): Promise<Transaction[]> {\n    const transactionList = await db\n      .select()\n      .from(transactions)\n      .leftJoin(customers, eq(transactions.customerId, customers.id))\n      .leftJoin(users, eq(transactions.userId, users.id))\n      .orderBy(desc(transactions.createdAt))\n      .limit(limit);\n    \n    // For each transaction, get its items with product details\n    const transactionsWithItems = await Promise.all(\n      transactionList.map(async (row) => {\n        const transaction = row.transactions;\n        \n        const items = await db\n          .select({\n            id: transactionItems.id,\n            quantity: transactionItems.quantity,\n            unitPrice: transactionItems.unitPrice,\n            totalPrice: transactionItems.totalPrice,\n            product: {\n              id: products.id,\n              name: products.name,\n              sku: products.sku,\n            }\n          })\n          .from(transactionItems)\n          .leftJoin(products, eq(transactionItems.productId, products.id))\n          .where(eq(transactionItems.transactionId, transaction.id));\n        \n        const { password: _, ...userWithoutPassword } = row.users || {};\n        \n        return {\n          ...transaction,\n          items,\n          customer: row.customers,\n          user: userWithoutPassword\n        };\n      })\n    );\n    \n    return transactionsWithItems as any;\n  }\n\n  async getTransactionById(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.id, id));\n    if (!transaction) return undefined;\n    \n    // Get transaction items with product details\n    const items = await db\n      .select({\n        id: transactionItems.id,\n        quantity: transactionItems.quantity,\n        unitPrice: transactionItems.unitPrice,\n        totalPrice: transactionItems.totalPrice,\n        product: {\n          id: products.id,\n          name: products.name,\n          sku: products.sku,\n        }\n      })\n      .from(transactionItems)\n      .leftJoin(products, eq(transactionItems.productId, products.id))\n      .where(eq(transactionItems.transactionId, id));\n    \n    // Get customer details if exists\n    let customer = null;\n    if (transaction.customerId) {\n      const [customerData] = await db.select().from(customers).where(eq(customers.id, transaction.customerId));\n      customer = customerData;\n    }\n    \n    // Get user details\n    let user = null;\n    if (transaction.userId) {\n      const [userData] = await db.select().from(users).where(eq(users.id, transaction.userId));\n      if (userData) {\n        const { password, ...userWithoutPassword } = userData;\n        user = userWithoutPassword;\n      }\n    }\n    \n    return {\n      ...transaction,\n      items,\n      customer,\n      user\n    } as any;\n  }\n\n  async createTransaction(transactionData: InsertTransaction, items: InsertTransactionItem[]): Promise<Transaction> {\n    return await db.transaction(async (tx) => {\n      // Create transaction\n      const [transaction] = await tx.insert(transactions).values(transactionData).returning();\n      \n      // Create transaction items\n      const itemsWithTransactionId = items.map(item => ({\n        ...item,\n        transactionId: transaction.id,\n      }));\n      await tx.insert(transactionItems).values(itemsWithTransactionId);\n      \n      // Update stock for sales\n      if (transactionData.type === 'sale') {\n        for (const item of items) {\n          await tx\n            .update(products)\n            .set({ \n              stock: sql`${products.stock} - ${item.quantity}`,\n              updatedAt: new Date()\n            })\n            .where(eq(products.id, item.productId));\n          \n          // Create stock movement record\n          await tx.insert(stockMovements).values({\n            productId: item.productId,\n            movementType: 'out',\n            quantity: item.quantity,\n            unitCost: item.unitPrice, // Record sale price for profit tracking\n            referenceId: transaction.id,\n            referenceType: 'sale',\n            notes: `Penjualan - ${transaction.transactionNumber}`,\n            userId: transactionData.userId,\n          });\n        }\n\n        // Create financial records via new finance manager\n        try {\n          const { financeManager } = await import('./financeManager');\n          \n          // Record revenue (income)\n          await financeManager.createTransaction({\n            type: 'income',\n            category: 'Sales Revenue',\n            subcategory: 'Product Sales',\n            amount: transaction.total,\n            description: `Penjualan ${transaction.transactionNumber}`,\n            referenceType: 'sale',\n            reference: transaction.id,\n            paymentMethod: transaction.paymentMethod?.toLowerCase() || 'cash',\n            userId: transactionData.userId\n          });\n\n          // Calculate and record COGS (Cost of Goods Sold) using average purchase price\n          let totalCOGS = 0;\n          for (const item of items) {\n            // Use weighted average purchase price instead of current product price\n            const averagePrice = await this.getAveragePurchasePrice(item.productId);\n            const itemCOGS = averagePrice * item.quantity;\n            totalCOGS += itemCOGS;\n          }\n\n          // Record COGS as expense\n          if (totalCOGS > 0) {\n            await financeManager.createTransaction({\n              type: 'expense',\n              category: 'Cost of Goods Sold',\n              subcategory: 'Product Cost',\n              amount: totalCOGS.toString(),\n              description: `COGS - ${transaction.transactionNumber}`,\n              referenceType: 'sale',\n              reference: transaction.id,\n              paymentMethod: 'system',\n              userId: transactionData.userId\n            });\n          }\n        } catch (error) {\n          console.error(\"Error creating financial records via finance manager:\", error);\n        }\n      }\n      \n      return transaction;\n    });\n  }\n\n  // Service Tickets\n  async getServiceTickets(): Promise<ServiceTicket[]> {\n    return await db.select().from(serviceTickets).orderBy(desc(serviceTickets.createdAt));\n  }\n\n  async getServiceTicketById(id: string): Promise<ServiceTicket | undefined> {\n    const [ticket] = await db.select().from(serviceTickets).where(eq(serviceTickets.id, id));\n    return ticket;\n  }\n\n  async getActiveServiceTickets(): Promise<ServiceTicket[]> {\n    return await db\n      .select()\n      .from(serviceTickets)\n      .where(sql`${serviceTickets.status} != 'completed' AND ${serviceTickets.status} != 'cancelled'`)\n      .orderBy(desc(serviceTickets.createdAt));\n  }\n\n  async createServiceTicket(ticketData: InsertServiceTicket): Promise<ServiceTicket> {\n    const [ticket] = await db.insert(serviceTickets).values(ticketData).returning();\n    return ticket;\n  }\n\n  async updateServiceTicket(id: string, ticketData: Partial<InsertServiceTicket>, parts?: InsertServiceTicketPart[]): Promise<ServiceTicket> {\n    return await db.transaction(async (tx) => {\n      const [ticket] = await tx\n        .update(serviceTickets)\n        .set({ ...ticketData, updatedAt: new Date() })\n        .where(eq(serviceTickets.id, id))\n        .returning();\n      \n      // Handle parts if provided\n      if (parts && parts.length > 0) {\n        // Clear existing parts\n        await tx.delete(serviceTicketParts).where(eq(serviceTicketParts.serviceTicketId, id));\n        \n        let totalPartsCost = 0;\n        \n        // Add new parts and handle stock based on status\n        for (const part of parts) {\n          // Check if product exists\n          const [product] = await tx.select().from(products).where(eq(products.id, part.productId));\n          \n          if (!product) {\n            throw new Error(`Product dengan ID ${part.productId} tidak ditemukan`);\n          }\n          \n          // Use product selling price as default\n          const unitPrice = part.unitPrice || product.sellingPrice || '0';\n          const totalPrice = (parseFloat(unitPrice) * part.quantity).toString();\n          \n          // Insert service ticket part\n          await tx.insert(serviceTicketParts).values({\n            serviceTicketId: id,\n            productId: part.productId,\n            quantity: part.quantity,\n            unitPrice: unitPrice,\n            totalPrice: totalPrice\n          });\n          \n          // Only update stock and record movement for completed/delivered status\n          if (ticket.status === 'completed' || ticket.status === 'delivered') {\n            const currentStock = product.totalStock || 0;\n            \n            // Check stock only for completed services\n            if (currentStock < part.quantity) {\n              throw new Error(`Stock ${product.name} tidak cukup untuk menyelesaikan servis. Tersedia: ${currentStock}, Diperlukan: ${part.quantity}`);\n            }\n            \n            // Update product stock\n            const newStock = currentStock - part.quantity;\n            await tx.update(products)\n              .set({ \n                stock: newStock,\n                updatedAt: new Date()\n              })\n              .where(eq(products.id, part.productId));\n            \n            // Record stock movement\n            await tx.insert(stockMovements).values({\n              productId: part.productId,\n              movementType: 'out',\n              quantity: part.quantity,\n              referenceId: id,\n              referenceType: 'service',\n              notes: `Digunakan untuk servis ${ticket.ticketNumber}`,\n              userId: ticket.userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n            });\n          } else {\n            // For non-completed status, just reserve stock (optional - estimate only)\n            const currentReserved = product.reservedStock || 0;\n            // Note: Reserved stock - for now we'll keep it simple and just track main stock\n            // await tx.update(products)\n            //   .set({ \n            //     reservedStock: currentReserved + part.quantity,\n            //     updatedAt: new Date()\n            //   })\n            //   .where(eq(products.id, part.productId));\n          }\n          \n          totalPartsCost += parseFloat(totalPrice);\n        }\n        \n        // Update ticket with parts cost\n        const currentLaborCost = parseFloat(ticket.laborCost || '0');\n        const newActualCost = (currentLaborCost + totalPartsCost).toString();\n        \n        await tx.update(serviceTickets)\n          .set({ \n            partsCost: totalPartsCost.toString(),\n            actualCost: newActualCost,\n            updatedAt: new Date()\n          })\n          .where(eq(serviceTickets.id, id));\n          \n        ticket.partsCost = totalPartsCost.toString();\n        ticket.actualCost = newActualCost;\n      }\n      \n      // Auto-record financial transactions for completed services\n      if (ticket && (ticket.status === 'completed' || ticket.status === 'delivered')) {\n        try {\n          const { financeManager } = await import('./financeManager');\n          \n          // Record labor cost as income if exists\n          if (ticket.laborCost && parseFloat(ticket.laborCost) > 0) {\n            await financeManager.recordLaborCost(\n              ticket.id,\n              ticket.laborCost,\n              `${ticket.ticketNumber}: ${ticket.problem}`,\n              ticket.userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n            );\n          }\n          \n          // Record parts costs and revenue for each part used\n          if (parts && parts.length > 0) {\n            for (const part of parts) {\n              // Get product details to get modal price\n              const [product] = await tx.select().from(products).where(eq(products.id, part.productId));\n              if (product) {\n                await financeManager.recordPartsCost(\n                  ticket.id,\n                  product.name,\n                  part.quantity,\n                  product.lastPurchasePrice || '0', // modal price\n                  part.unitPrice, // selling price\n                  ticket.userId || 'a4fb9372-ec01-4825-b035-81de75a18053'\n                );\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Error recording service financial transactions:\", error);\n        }\n      }\n      \n      return ticket;\n    });\n  }\n\n  async deleteServiceTicket(id: string): Promise<void> {\n    return await db.transaction(async (tx) => {\n      // First get the ticket to check if it has financial records\n      const [ticket] = await tx.select().from(serviceTickets).where(eq(serviceTickets.id, id));\n      \n      if (ticket) {\n        // Delete related service ticket parts\n        await tx.delete(serviceTicketParts).where(eq(serviceTicketParts.serviceTicketId, id));\n        \n        // Delete related financial records if any\n        await tx.delete(financialRecords).where(eq(financialRecords.reference, id));\n      }\n      \n      // Delete the service ticket\n      await tx.delete(serviceTickets).where(eq(serviceTickets.id, id));\n    });\n  }\n\n  // Service Ticket Parts\n  async getServiceTicketParts(serviceTicketId: string): Promise<(ServiceTicketPart & { productName: string })[]> {\n    const parts = await db\n      .select({\n        id: serviceTicketParts.id,\n        serviceTicketId: serviceTicketParts.serviceTicketId,\n        productId: serviceTicketParts.productId,\n        quantity: serviceTicketParts.quantity,\n        unitPrice: serviceTicketParts.unitPrice,\n        totalPrice: serviceTicketParts.totalPrice,\n        createdAt: serviceTicketParts.createdAt,\n        productName: products.name\n      })\n      .from(serviceTicketParts)\n      .innerJoin(products, eq(serviceTicketParts.productId, products.id))\n      .where(eq(serviceTicketParts.serviceTicketId, serviceTicketId))\n      .orderBy(desc(serviceTicketParts.createdAt));\n    \n    return parts;\n  }\n\n  // Stock Movements\n  async getStockMovements(productId?: string): Promise<StockMovement[]> {\n    const query = db.select().from(stockMovements);\n    \n    if (productId) {\n      return await query.where(eq(stockMovements.productId, productId)).orderBy(desc(stockMovements.createdAt));\n    }\n    \n    return await query.orderBy(desc(stockMovements.createdAt));\n  }\n\n  // Financial Records (delegated to FinanceManager but interface still needed)\n  async getFinancialRecords(startDate?: Date, endDate?: Date): Promise<FinancialRecord[]> {\n    const { financeManager } = await import('./financeManager');\n    return await financeManager.getTransactions({\n      startDate,\n      endDate\n    });\n  }\n\n  async createFinancialRecord(record: InsertFinancialRecord): Promise<FinancialRecord> {\n    const { financeManager } = await import('./financeManager');\n    return await financeManager.createTransaction({\n      type: record.type as 'income' | 'expense' | 'transfer',\n      category: record.category,\n      subcategory: record.subcategory || undefined,\n      amount: record.amount,\n      description: record.description,\n      referenceType: record.referenceType || undefined,\n      reference: record.reference || undefined,\n      paymentMethod: record.paymentMethod || undefined,\n      tags: record.tags || undefined,\n      userId: record.userId\n    });\n  }\n\n  // Dashboard Statistics\n  // Reports\n  async getSalesReport(startDate: Date, endDate: Date): Promise<{\n    totalSales: string;\n    transactions: any[];\n  }> {\n    const [totalResult] = await db\n      .select({ total: sum(transactions.total) })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.type, 'sale'),\n          gte(transactions.createdAt, startDate),\n          lte(transactions.createdAt, endDate)\n        )\n      );\n\n    const transactionList = await db\n      .select()\n      .from(transactions)\n      .leftJoin(customers, eq(transactions.customerId, customers.id))\n      .where(\n        and(\n          eq(transactions.type, 'sale'),\n          gte(transactions.createdAt, startDate),\n          lte(transactions.createdAt, endDate)\n        )\n      )\n      .orderBy(desc(transactions.createdAt));\n\n    return {\n      totalSales: totalResult.total || '0',\n      transactions: transactionList.map(t => ({\n        ...t.transactions,\n        customer: t.customers\n      }))\n    };\n  }\n\n  async getServiceReport(startDate: Date, endDate: Date): Promise<{\n    totalServices: number;\n    totalRevenue: string;\n    totalCost: string;\n    totalProfit: string;\n    revenueBreakdown: {\n      laborRevenue: string;\n      partsRevenue: string;\n    };\n    tickets: any[];\n  }> {\n    // Use same method as financeManager for consistency\n    try {\n      const { financeManager } = await import('./financeManager');\n      const summary = await financeManager.getSummary(startDate, endDate);\n      \n      // Get service-specific financial data\n      const [serviceIncomeResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            or(\n              eq(financialRecords.referenceType, 'service_labor'),\n              eq(financialRecords.referenceType, 'service_parts_revenue')\n            ),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const [serviceCostResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'expense'),\n            eq(financialRecords.referenceType, 'service_parts_cost'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      // Get labor revenue\n      const [laborRevenueResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            eq(financialRecords.referenceType, 'service_labor'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      // Get parts revenue\n      const [partsRevenueResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            eq(financialRecords.referenceType, 'service_parts_revenue'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const [totalResult] = await db\n        .select({ count: count() })\n        .from(serviceTickets)\n        .where(\n          and(\n            gte(serviceTickets.createdAt, startDate),\n            lte(serviceTickets.createdAt, endDate)\n          )\n        );\n\n      const ticketList = await db\n        .select()\n        .from(serviceTickets)\n        .leftJoin(customers, eq(serviceTickets.customerId, customers.id))\n        .where(\n          and(\n            gte(serviceTickets.createdAt, startDate),\n            lte(serviceTickets.createdAt, endDate)\n          )\n        )\n        .orderBy(desc(serviceTickets.createdAt));\n\n      const totalRevenue = Number(serviceIncomeResult.total || 0);\n      const totalCost = Number(serviceCostResult.total || 0);\n      const totalProfit = totalRevenue - totalCost;\n\n      return {\n        totalServices: totalResult.count,\n        totalRevenue: totalRevenue.toString(),\n        totalCost: totalCost.toString(),\n        totalProfit: totalProfit.toString(),\n        revenueBreakdown: {\n          laborRevenue: (Number(laborRevenueResult.total || 0)).toString(),\n          partsRevenue: (Number(partsRevenueResult.total || 0)).toString(),\n        },\n        tickets: ticketList.map(t => ({\n          ...t.service_tickets,\n          customer: t.customers\n        }))\n      };\n    } catch (error) {\n      console.error(\"Error getting service report:\", error);\n      // Fallback to simple count\n      const [totalResult] = await db\n        .select({ count: count() })\n        .from(serviceTickets)\n        .where(\n          and(\n            gte(serviceTickets.createdAt, startDate),\n            lte(serviceTickets.createdAt, endDate)\n          )\n        );\n\n      return {\n        totalServices: totalResult.count,\n        totalRevenue: \"0\",\n        totalCost: \"0\", \n        totalProfit: \"0\",\n        revenueBreakdown: {\n          laborRevenue: \"0\",\n          partsRevenue: \"0\",\n        },\n        tickets: []\n      };\n    }\n  }\n\n  async getFinancialReport(startDate: Date, endDate: Date): Promise<{\n    totalIncome: string;\n    totalExpense: string;\n    profit: string;\n    records: any[];\n  }> {\n    try {\n      const { financeManager } = await import('./financeManager');\n      \n      const summary = await financeManager.getSummary(startDate, endDate);\n      const records = await financeManager.getTransactions({\n        startDate,\n        endDate\n      });\n\n      return {\n        totalIncome: summary.totalIncome,\n        totalExpense: summary.totalExpense,\n        profit: summary.netProfit,\n        records\n      };\n    } catch (error) {\n      console.error(\"Error getting financial report from finance manager:\", error);\n      // Fallback to old method\n      const [incomeResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'income'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const [expenseResult] = await db\n        .select({ total: sum(financialRecords.amount) })\n        .from(financialRecords)\n        .where(\n          and(\n            eq(financialRecords.type, 'expense'),\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        );\n\n      const records = await db\n        .select()\n        .from(financialRecords)\n        .where(\n          and(\n            gte(financialRecords.createdAt, startDate),\n            lte(financialRecords.createdAt, endDate)\n          )\n        )\n        .orderBy(desc(financialRecords.createdAt));\n\n      const totalIncome = Number(incomeResult.total || 0);\n      const totalExpense = Number(expenseResult.total || 0);\n\n      return {\n        totalIncome: totalIncome.toString(),\n        totalExpense: totalExpense.toString(),\n        profit: (totalIncome - totalExpense).toString(),\n        records\n      };\n    }\n  }\n\n  async getInventoryReport(): Promise<{\n    lowStockCount: number;\n    lowStockProducts: any[];\n    totalProducts: number;\n    totalAssetValue: string;\n    totalStockQuantity: number;\n  }> {\n    const [lowStockResult] = await db\n      .select({ count: count() })\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.totalStock} <= ${products.minStock}`\n        )\n      );\n\n    const lowStockProducts = await db\n      .select()\n      .from(products)\n      .leftJoin(categories, eq(products.categoryId, categories.id))\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.totalStock} <= ${products.minStock}`\n        )\n      )\n      .orderBy(products.totalStock);\n\n    const [totalResult] = await db\n      .select({ count: count() })\n      .from(products)\n      .where(eq(products.isActive, true));\n\n    // Calculate total asset value (stock × purchase price)\n    const assetValueResult = await db\n      .select({\n        totalValue: sql<number>`SUM(${products.totalStock} * COALESCE(${products.lastPurchasePrice}, 0))`,\n        totalQuantity: sql<number>`SUM(${products.totalStock})`\n      })\n      .from(products)\n      .where(and(eq(products.isActive, true), gte(products.totalStock, 0)));\n\n    const totalAssetValue = Number(assetValueResult[0]?.totalValue || 0);\n    const totalStockQuantity = Number(assetValueResult[0]?.totalQuantity || 0);\n\n    return {\n      lowStockCount: lowStockResult.count,\n      lowStockProducts: lowStockProducts.map(p => ({\n        ...p.products,\n        category: p.categories\n      })),\n      totalProducts: totalResult.count,\n      totalAssetValue: totalAssetValue.toString(),\n      totalStockQuantity: totalStockQuantity\n    };\n  }\n\n  async getDashboardStats(): Promise<{\n    todaySales: string;\n    todayRevenue: string;\n    activeServices: number;\n    lowStockCount: number;\n    monthlyProfit: string;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    \n    // Today's product sales (POS transactions only)\n    const [todayProductSalesResult] = await db\n      .select({ total: sum(transactions.total) })\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.type, 'sale'),\n          gte(transactions.createdAt, today)\n        )\n      );\n    \n    // Today's total revenue (all income including services)\n    const [todayRevenueResult] = await db\n      .select({ total: sum(financialRecords.amount) })\n      .from(financialRecords)\n      .where(\n        and(\n          eq(financialRecords.type, 'income'),\n          gte(financialRecords.createdAt, today)\n        )\n      );\n    \n    // Active services\n    const [activeServicesResult] = await db\n      .select({ count: count() })\n      .from(serviceTickets)\n      .where(sql`${serviceTickets.status} != 'completed' AND ${serviceTickets.status} != 'cancelled'`);\n    \n    // Low stock count\n    const [lowStockResult] = await db\n      .select({ count: count() })\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.totalStock} <= ${products.minStock}`\n        )\n      );\n    \n    // Monthly profit from finance manager\n    let monthlyProfit = 0;\n    try {\n      const { financeManager } = await import('./financeManager');\n      const summary = await financeManager.getSummary(startOfMonth, new Date());\n      monthlyProfit = Number(summary.netProfit || 0);\n    } catch (error) {\n      console.error(\"Error getting monthly profit from finance manager:\", error);\n      // Fallback to transaction-based calculation\n      const [monthlySalesResult] = await db\n        .select({ total: sum(transactions.total) })\n        .from(transactions)\n        .where(\n          and(\n            eq(transactions.type, 'sale'),\n            gte(transactions.createdAt, startOfMonth)\n          )\n        );\n      \n      const [monthlyPurchasesResult] = await db\n        .select({ total: sum(transactions.total) })\n        .from(transactions)\n        .where(\n          and(\n            eq(transactions.type, 'purchase'),\n            gte(transactions.createdAt, startOfMonth)\n          )\n        );\n      \n      const monthlySales = Number(monthlySalesResult.total || 0);\n      const monthlyPurchases = Number(monthlyPurchasesResult.total || 0);\n      monthlyProfit = monthlySales - monthlyPurchases;\n    }\n    \n    return {\n      todaySales: todayProductSalesResult.total || '0',\n      todayRevenue: todayRevenueResult.total || '0',\n      activeServices: activeServicesResult.count,\n      lowStockCount: lowStockResult.count,\n      monthlyProfit: monthlyProfit.toString(),\n    };\n  }\n  \n  // Enhanced Accounting Methods Implementation\n  async getBalanceSheet(asOfDate?: Date): Promise<any> {\n    // Import and use FinanceManager to implement double-entry bookkeeping\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.getBalanceSheet(asOfDate);\n  }\n  \n  async getIncomeStatement(startDate?: Date, endDate?: Date): Promise<any> {\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.getIncomeStatement(startDate, endDate);\n  }\n  \n  async getChartOfAccounts(): Promise<any[]> {\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.getChartOfAccounts();\n  }\n  \n  async createJournalEntry(data: any): Promise<{ success: boolean; journalEntry?: any; error?: string }> {\n    const { FinanceManager } = await import('./financeManager');\n    const financeManager = new FinanceManager();\n    return await financeManager.createJournalEntry(data);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":61744},"laptoppos-deployment-20250903-113337/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"laptoppos-deployment-20250903-113337/server/whatsappService.ts":{"content":"import { makeWASocket, DisconnectReason, useMultiFileAuthState } from '@whiskeysockets/baileys';\nimport { Boom } from '@hapi/boom';\nimport qrcode from 'qrcode-terminal';\nimport { storage } from './storage';\n\nexport class WhatsAppService {\n  private socket: any = null;\n  private isConnecting = false;\n  private qrCode: string | null = null;\n  private connectionState: string = 'close';\n\n  async initialize() {\n    if (this.isConnecting) {\n      console.log('WhatsApp already connecting...');\n      return;\n    }\n\n    this.isConnecting = true;\n    \n    try {\n      // Use file-based auth state\n      const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys');\n      \n      this.socket = makeWASocket({\n        auth: state,\n        printQRInTerminal: false,\n        logger: { level: 'silent', child: () => ({ level: 'silent' } as any) } as any,\n      });\n\n      // Connection updates\n      this.socket.ev.on('connection.update', async (update: any) => {\n        const { connection, lastDisconnect, qr } = update;\n        \n        if (qr) {\n          this.qrCode = qr;\n          qrcode.generate(qr, { small: true });\n          console.log('QR Code updated');\n          await this.updateQRInDatabase();\n        }\n\n        if (connection === 'close') {\n          this.connectionState = 'close';\n          const shouldReconnect = (lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut;\n          console.log('Connection closed due to ', lastDisconnect?.error, ', reconnecting ', shouldReconnect);\n          \n          if (shouldReconnect) {\n            setTimeout(() => this.initialize(), 3000);\n          } else {\n            console.log('WhatsApp logged out');\n            this.qrCode = null;\n            await this.clearQRFromDatabase();\n          }\n          \n          this.isConnecting = false;\n          await this.updateConnectionStatus(false);\n        } else if (connection === 'open') {\n          this.connectionState = 'open';\n          this.isConnecting = false;\n          this.qrCode = null;\n          console.log('WhatsApp connected successfully');\n          await this.updateConnectionStatus(true);\n          await this.clearQRFromDatabase();\n        }\n      });\n\n      // Save credentials when updated\n      this.socket.ev.on('creds.update', saveCreds);\n      \n    } catch (error) {\n      console.error('WhatsApp initialization error:', error);\n      this.isConnecting = false;\n      await this.updateConnectionStatus(false);\n    }\n  }\n\n  async disconnect() {\n    if (this.socket) {\n      await this.socket.logout();\n      this.socket = null;\n    }\n    await this.updateConnectionStatus(false);\n    await this.clearQRFromDatabase();\n  }\n\n  async sendMessage(phoneNumber: string, message: string): Promise<boolean> {\n    if (!this.socket || this.connectionState !== 'open') {\n      console.log('WhatsApp not connected, cannot send message');\n      return false;\n    }\n\n    try {\n      // Format phone number (add country code if not present)\n      let formattedNumber = phoneNumber.replace(/\\D/g, '');\n      if (!formattedNumber.startsWith('62')) {\n        if (formattedNumber.startsWith('0')) {\n          formattedNumber = '62' + formattedNumber.substring(1);\n        } else {\n          formattedNumber = '62' + formattedNumber;\n        }\n      }\n      \n      const jid = formattedNumber + '@s.whatsapp.net';\n      \n      await this.socket.sendMessage(jid, { text: message });\n      console.log(`WhatsApp message sent to ${phoneNumber}: ${message}`);\n      return true;\n    } catch (error) {\n      console.error('Error sending WhatsApp message:', error);\n      return false;\n    }\n  }\n\n  getQRCode(): string | null {\n    return this.qrCode;\n  }\n\n  isConnected(): boolean {\n    return this.connectionState === 'open';\n  }\n\n  getConnectionState(): string {\n    return this.connectionState;\n  }\n\n  private async updateConnectionStatus(connected: boolean) {\n    try {\n      const config = await storage.getStoreConfig();\n      if (config) {\n        await storage.upsertStoreConfig({\n          ...config,\n          whatsappConnected: connected,\n        });\n      }\n    } catch (error) {\n      console.error('Error updating WhatsApp connection status:', error);\n    }\n  }\n\n  private async updateQRInDatabase() {\n    try {\n      const config = await storage.getStoreConfig();\n      if (config && this.qrCode) {\n        await storage.upsertStoreConfig({\n          ...config,\n          whatsappQR: this.qrCode,\n        });\n      }\n    } catch (error) {\n      console.error('Error updating QR code in database:', error);\n    }\n  }\n\n  private async clearQRFromDatabase() {\n    try {\n      const config = await storage.getStoreConfig();\n      if (config) {\n        await storage.upsertStoreConfig({\n          ...config,\n          whatsappQR: null,\n        });\n      }\n    } catch (error) {\n      console.error('Error clearing QR code from database:', error);\n    }\n  }\n\n  // Service notification templates\n  async sendServiceCreatedNotification(customerPhone: string, serviceTicket: any, customer: any, storeConfig: any) {\n    const statusUrl = `${process.env.REPLIT_DOMAINS?.split(',')[0] ? 'https://' + process.env.REPLIT_DOMAINS.split(',')[0] : 'http://localhost:5000'}/service-status`;\n    \n    // Format estimated cost\n    const formatCurrency = (amount: string | number) => {\n      return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n      }).format(Number(amount));\n    };\n\n    // Format received date\n    const receivedDate = new Date(serviceTicket.createdAt).toLocaleDateString('id-ID', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    // Status label\n    const statusLabels = {\n      'pending': 'Menunggu Pemeriksaan',\n      'checking': 'Sedang Dicek',\n      'in-progress': 'Sedang Dikerjakan',\n      'waiting-parts': 'Menunggu Sparepart',\n      'waiting-payment': 'Menunggu Pembayaran',\n      'completed': 'Selesai',\n      'delivered': 'Sudah Diambil',\n      'cancelled': 'Dibatalkan'\n    };\n\n    // Build spare parts info if available\n    let sparepartsInfo = '';\n    if (serviceTicket.parts && serviceTicket.parts.length > 0) {\n      sparepartsInfo = `\\n\\n📦 **SPAREPART YANG DIPERLUKAN:**`;\n      serviceTicket.parts.forEach((part: any, index: number) => {\n        sparepartsInfo += `\\n${index + 1}. ${part.name}`;\n        sparepartsInfo += `\\n   • Jumlah: ${part.quantity} unit`;\n        sparepartsInfo += `\\n   • Harga: ${formatCurrency(part.unitPrice)}`;\n        if (part.description) {\n          sparepartsInfo += `\\n   • Keterangan: ${part.description}`;\n        }\n      });\n      \n      const totalParts = serviceTicket.parts.reduce((sum: number, part: any) => \n        sum + (Number(part.quantity) * Number(part.unitPrice)), 0\n      );\n      sparepartsInfo += `\\n\\n💰 **Total Sparepart:** ${formatCurrency(totalParts)}`;\n    }\n\n    const message = `🔧 **KONFIRMASI PENERIMAAN SERVICE**\n\nHalo ${customer.name},\n\nService laptop Anda telah kami terima dengan detail lengkap sebagai berikut:\n\n📋 **INFORMASI SERVICE:**\n📝 Nomor Service: *${serviceTicket.ticketNumber}*\n📅 Tanggal Diterima: ${receivedDate}\n⏰ Status Saat Ini: *${statusLabels[serviceTicket.status] || 'Menunggu'}*\n\n💻 **DETAIL PERANGKAT:**\n🏷️ Jenis: ${serviceTicket.deviceType}\n${serviceTicket.deviceBrand ? `🏭 Merk: ${serviceTicket.deviceBrand}` : ''}\n${serviceTicket.deviceModel ? `📱 Model: ${serviceTicket.deviceModel}` : ''}\n${serviceTicket.serialNumber ? `🔢 Serial Number: ${serviceTicket.serialNumber}` : ''}\n\n🔍 **KELUHAN & MASALAH:**\n${serviceTicket.problem}\n\n${serviceTicket.symptoms ? `🩺 **GEJALA YANG DIALAMI:**\\n${serviceTicket.symptoms}\\n\\n` : ''}\n${serviceTicket.notes ? `📌 **CATATAN TEKNISI:**\\n${serviceTicket.notes}\\n\\n` : ''}\n💰 **ESTIMASI BIAYA SERVICE:**\n${serviceTicket.estimatedCost ? formatCurrency(serviceTicket.estimatedCost) : 'Akan diberitahu setelah pemeriksaan'}\n${sparepartsInfo}\n\n📞 **INFORMASI KONTAK:**\n👤 Customer: ${customer.name}\n📱 Telepon: ${customer.phone}\n${customer.email ? `📧 Email: ${customer.email}` : ''}\n${customer.address ? `🏠 Alamat: ${customer.address}` : ''}\n\n🔍 **CEK STATUS SERVICE:**\nAnda dapat memantau perkembangan service kapan saja melalui:\n${statusUrl}\nMasukkan nomor service: *${serviceTicket.ticketNumber}*\n\n⚠️ **PENTING:**\n• Harap simpan nomor service untuk tracking\n• Kami akan menghubungi jika ada update penting\n• Estimasi waktu pengerjaan: ${serviceTicket.estimatedDays ? serviceTicket.estimatedDays + ' hari' : '3-7 hari kerja'}\n• Bawa tanda terima saat pengambilan\n\nTerima kasih telah mempercayakan perangkat Anda kepada kami. Kami akan memberikan pelayanan terbaik untuk memperbaiki laptop Anda.\n\n---\n🏪 **${storeConfig?.name || 'LaptopPOS Service Center'}**\n📍 ${storeConfig?.address || 'Alamat Toko'}\n📞 ${storeConfig?.phone || 'Telepon Toko'}\n${storeConfig?.email ? `📧 ${storeConfig.email}` : ''}`;\n\n    return await this.sendMessage(customerPhone, message);\n  }\n\n  async sendServiceStatusNotification(customerPhone: string, serviceTicket: any, customer: any, storeConfig: any) {\n    // Format currency\n    const formatCurrency = (amount: string | number) => {\n      return new Intl.NumberFormat('id-ID', {\n        style: 'currency',\n        currency: 'IDR',\n        minimumFractionDigits: 0,\n      }).format(Number(amount));\n    };\n\n    // Format update date\n    const updateDate = new Date().toLocaleDateString('id-ID', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    let statusText = '';\n    let emoji = '';\n    let nextSteps = '';\n    \n    switch (serviceTicket.status) {\n      case 'checking':\n        statusText = 'SEDANG DICEK';\n        emoji = '🔍';\n        nextSteps = 'Tim teknisi kami sedang memeriksa perangkat Anda untuk menentukan kerusakan dan solusi yang tepat.';\n        break;\n      case 'in-progress':\n        statusText = 'SEDANG DIKERJAKAN';\n        emoji = '🔧';\n        nextSteps = 'Perangkat Anda sedang dalam proses perbaikan. Tim teknisi kami bekerja untuk menyelesaikan masalah.';\n        break;\n      case 'completed':\n        statusText = 'SELESAI DIKERJAKAN';\n        emoji = '✅';\n        nextSteps = 'Perbaikan telah selesai! Perangkat siap diambil. Silakan datang ke toko dengan membawa tanda terima.';\n        break;\n      case 'cancelled':\n        statusText = 'DIBATALKAN';\n        emoji = '❌';\n        nextSteps = 'Service dibatalkan sesuai permintaan. Jika ada pertanyaan, silakan hubungi kami.';\n        break;\n      case 'waiting-parts':\n        statusText = 'MENUNGGU SPAREPART';\n        emoji = '📦';\n        nextSteps = 'Kami sedang memesan sparepart yang diperlukan. Akan ada update setelah sparepart tersedia.';\n        break;\n      case 'waiting-payment':\n        statusText = 'MENUNGGU PEMBAYARAN';\n        emoji = '💳';\n        nextSteps = 'Perbaikan selesai, silakan lakukan pembayaran untuk mengambil perangkat.';\n        break;\n      case 'waiting-confirmation':\n        statusText = 'MENUNGGU KONFIRMASI';\n        emoji = '❓';\n        nextSteps = 'Kami memerlukan konfirmasi dari Anda untuk melanjutkan perbaikan. Silakan hubungi kami.';\n        break;\n      case 'testing':\n        statusText = 'SEDANG TES';\n        emoji = '🧪';\n        nextSteps = 'Sedang dilakukan pengujian untuk memastikan perbaikan berfungsi dengan baik.';\n        break;\n      default:\n        statusText = 'DIUPDATE';\n        emoji = '🔄';\n        nextSteps = 'Status service Anda telah diperbarui. Silakan cek detail lengkap melalui link di bawah.';\n    }\n\n    const statusUrl = `${process.env.REPLIT_DOMAINS?.split(',')[0] ? 'https://' + process.env.REPLIT_DOMAINS.split(',')[0] : 'http://localhost:5000'}/service-status`;\n    \n    // Build diagnosis and solution info\n    let progressInfo = '';\n    if (serviceTicket.diagnosis) {\n      progressInfo += `\\n🔍 **HASIL DIAGNOSIS:**\\n${serviceTicket.diagnosis}`;\n    }\n    if (serviceTicket.solution) {\n      progressInfo += `\\n\\n🔧 **SOLUSI PERBAIKAN:**\\n${serviceTicket.solution}`;\n    }\n    if (serviceTicket.actualCost && serviceTicket.actualCost > 0) {\n      progressInfo += `\\n\\n💰 **BIAYA AKTUAL:**\\n${formatCurrency(serviceTicket.actualCost)}`;\n    }\n\n    // Completion info for completed status\n    let completionInfo = '';\n    if (serviceTicket.status === 'completed' && serviceTicket.completedAt) {\n      const completedDate = new Date(serviceTicket.completedAt).toLocaleDateString('id-ID', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      completionInfo = `\\n\\n✅ **WAKTU SELESAI:** ${completedDate}`;\n    }\n\n    const message = `${emoji} **UPDATE STATUS SERVICE**\\n\\nHalo ${customer.name},\\n\\nAda update untuk service laptop Anda:\\n\\n📋 **INFORMASI SERVICE:**\\n📝 Nomor Service: *${serviceTicket.ticketNumber}*\\n📅 Update Terakhir: ${updateDate}\\n⏰ Status: *${statusText}*\\n\\n💻 **PERANGKAT:**\\n${serviceTicket.deviceType}${serviceTicket.deviceBrand ? ` - ${serviceTicket.deviceBrand}` : ''}${serviceTicket.deviceModel ? ` ${serviceTicket.deviceModel}` : ''}\\n\\n🔍 **MASALAH:**\\n${serviceTicket.problem}${progressInfo}${completionInfo}\\n\\n💬 **LANGKAH SELANJUTNYA:**\\n${nextSteps}\\n\\n🔍 **CEK STATUS DETAIL:**\\nUntuk informasi lebih lengkap, kunjungi:\\n${statusUrl}\\nMasukkan nomor: *${serviceTicket.ticketNumber}*\\n\\n${serviceTicket.status === 'completed' ? '⚠️ **PENTING:** Harap bawa tanda terima saat pengambilan!' : '📞 **INFO:** Kami akan update jika ada perkembangan baru.'}\\n\\n---\\n🏪 **${storeConfig?.name || 'LaptopPOS Service Center'}**\\n📞 ${storeConfig?.phone || 'Telepon Toko'}`;\n\n    return await this.sendMessage(customerPhone, message);\n  }\n}\n\nexport const whatsappService = new WhatsAppService();","size_bytes":14030},"laptoppos-deployment-20250903-113337/shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  date,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'kasir', 'teknisi', 'purchasing', 'finance', 'owner']);\nexport const transactionTypeEnum = pgEnum('transaction_type', ['sale', 'service', 'purchase', 'return']);\nexport const paymentMethodEnum = pgEnum('payment_method', ['cash', 'transfer', 'qris', 'installment']);\nexport const serviceStatusEnum = pgEnum('service_status', ['pending', 'checking', 'in-progress', 'waiting-technician', 'testing', 'waiting-confirmation', 'waiting-parts', 'completed', 'delivered', 'cancelled']);\nexport const stockMovementTypeEnum = pgEnum('stock_movement_type', ['in', 'out', 'adjustment']);\nexport const stockReferenceTypeEnum = pgEnum('stock_reference_type', ['sale', 'service', 'purchase', 'adjustment', 'return']);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\"),\n  password: varchar(\"password\"),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('kasir'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Roles table for role management\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").unique().notNull(),\n  displayName: varchar(\"display_name\").notNull(),\n  description: text(\"description\"),\n  permissions: text(\"permissions\").array(), // JSON array of permissions\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Store configuration\nexport const storeConfig = pgTable(\"store_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default('11.00'),\n  defaultDiscount: decimal(\"default_discount\", { precision: 5, scale: 2 }).default('0.00'),\n  logo: varchar(\"logo\"),\n  // WhatsApp settings\n  whatsappEnabled: boolean(\"whatsapp_enabled\").default(false),\n  whatsappSessionData: text(\"whatsapp_session_data\"), // Store session data\n  whatsappQR: text(\"whatsapp_qr\"), // Store QR code\n  whatsappConnected: boolean(\"whatsapp_connected\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products - Enhanced inventory system\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  sku: varchar(\"sku\").unique().notNull(),\n  barcode: varchar(\"barcode\"),\n  brand: varchar(\"brand\"),\n  model: varchar(\"model\"),\n  unit: varchar(\"unit\").default(\"pcs\"), // unit of measurement\n  specifications: text(\"specifications\"), // JSON string for detailed specs\n  \n  // Pricing\n  lastPurchasePrice: decimal(\"last_purchase_price\", { precision: 12, scale: 2 }),\n  averageCost: decimal(\"average_cost\", { precision: 12, scale: 2 }), // calculated COGS\n  sellingPrice: decimal(\"selling_price\", { precision: 12, scale: 2 }),\n  marginPercent: decimal(\"margin_percent\", { precision: 5, scale: 2 }),\n  \n  // Stock management\n  stock: integer(\"stock\").default(0), // Main stock field for purchasing integration\n  totalStock: integer(\"total_stock\").default(0),\n  availableStock: integer(\"available_stock\").default(0), // total - reserved\n  reservedStock: integer(\"reserved_stock\").default(0),\n  minStock: integer(\"min_stock\").default(0),\n  maxStock: integer(\"max_stock\"),\n  reorderPoint: integer(\"reorder_point\"),\n  reorderQuantity: integer(\"reorder_quantity\"),\n  \n  // Tracking\n  trackBatches: boolean(\"track_batches\").default(false),\n  trackSerial: boolean(\"track_serial\").default(false),\n  trackExpiry: boolean(\"track_expiry\").default(false),\n  \n  // Status\n  isActive: boolean(\"is_active\").default(true),\n  isDiscontinued: boolean(\"is_discontinued\").default(false),\n  \n  // Metadata\n  weight: decimal(\"weight\", { precision: 8, scale: 3 }),\n  dimensions: varchar(\"dimensions\"), // LxWxH format\n  supplierProductCode: varchar(\"supplier_product_code\"),\n  notes: text(\"notes\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Suppliers - Enhanced supplier management\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").unique().notNull(), // supplier code\n  name: varchar(\"name\").notNull(),\n  companyName: varchar(\"company_name\"),\n  \n  // Contact information\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  altPhone: varchar(\"alt_phone\"),\n  website: varchar(\"website\"),\n  \n  // Address\n  address: text(\"address\"),\n  city: varchar(\"city\"),\n  province: varchar(\"province\"),\n  postalCode: varchar(\"postal_code\"),\n  country: varchar(\"country\").default(\"Indonesia\"),\n  \n  // Contact persons\n  contactPerson: varchar(\"contact_person\"),\n  contactTitle: varchar(\"contact_title\"),\n  contactEmail: varchar(\"contact_email\"),\n  contactPhone: varchar(\"contact_phone\"),\n  \n  // Business details\n  taxNumber: varchar(\"tax_number\"), // NPWP\n  businessLicense: varchar(\"business_license\"),\n  \n  // Terms\n  paymentTerms: integer(\"payment_terms\").default(30), // days\n  creditLimit: decimal(\"credit_limit\", { precision: 15, scale: 2 }),\n  \n  // Status and ratings\n  isActive: boolean(\"is_active\").default(true),\n  rating: integer(\"rating\").default(5), // 1-5 stars\n  \n  // Banking\n  bankName: varchar(\"bank_name\"),\n  bankAccount: varchar(\"bank_account\"),\n  bankAccountName: varchar(\"bank_account_name\"),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionNumber: varchar(\"transaction_number\").notNull().unique(),\n  type: transactionTypeEnum(\"type\").notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 12, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 12, scale: 2 }).default('0.00'),\n  discountAmount: decimal(\"discount_amount\", { precision: 12, scale: 2 }).default('0.00'),\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  paymentMethod: paymentMethodEnum(\"payment_method\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transaction Items\nexport const transactionItems = pgTable(\"transaction_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: varchar(\"transaction_id\").references(() => transactions.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }).notNull(),\n});\n\n// Service Tickets\nexport const serviceTickets = pgTable(\"service_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketNumber: varchar(\"ticket_number\").notNull().unique(),\n  customerId: varchar(\"customer_id\").references(() => customers.id).notNull(),\n  deviceType: varchar(\"device_type\").notNull(),\n  deviceBrand: varchar(\"device_brand\"),\n  deviceModel: varchar(\"device_model\"),\n  serialNumber: varchar(\"serial_number\"),\n  completeness: text(\"completeness\"),\n  problem: text(\"problem\").notNull(),\n  diagnosis: text(\"diagnosis\"),\n  solution: text(\"solution\"),\n  estimatedCost: decimal(\"estimated_cost\", { precision: 12, scale: 2 }),\n  actualCost: decimal(\"actual_cost\", { precision: 12, scale: 2 }),\n  laborCost: decimal(\"labor_cost\", { precision: 12, scale: 2 }),\n  partsCost: decimal(\"parts_cost\", { precision: 12, scale: 2 }),\n  status: serviceStatusEnum(\"status\").default('pending'),\n  technicianId: varchar(\"technician_id\").references(() => users.id),\n  estimatedCompletion: timestamp(\"estimated_completion\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Service Ticket Parts - Track parts used in service repairs\nexport const serviceTicketParts = pgTable(\"service_ticket_parts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  serviceTicketId: varchar(\"service_ticket_id\").references(() => serviceTickets.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product Locations - Warehouse/Location management\nexport const locations = pgTable(\"locations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").unique().notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  locationType: varchar(\"location_type\").default(\"warehouse\"), // warehouse, store, etc\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product Batches/Lots - For batch tracking\nexport const productBatches = pgTable(\"product_batches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchNumber: varchar(\"batch_number\").notNull(),\n  serialNumbers: text(\"serial_numbers\").array(), // for serial tracking\n  \n  // Pricing for this batch\n  unitCost: decimal(\"unit_cost\", { precision: 12, scale: 2 }).notNull(),\n  \n  // Quantities\n  receivedQuantity: integer(\"received_quantity\").notNull(),\n  currentQuantity: integer(\"current_quantity\").notNull(),\n  reservedQuantity: integer(\"reserved_quantity\").default(0),\n  \n  // Dates\n  manufactureDate: date(\"manufacture_date\"),\n  expiryDate: date(\"expiry_date\"),\n  receivedDate: timestamp(\"received_date\").defaultNow(),\n  \n  // References\n  purchaseOrderId: varchar(\"purchase_order_id\"),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id),\n  locationId: varchar(\"location_id\").references(() => locations.id),\n  \n  // Status\n  status: varchar(\"status\").default(\"active\"), // active, expired, recalled, sold_out\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchase Orders - Comprehensive purchasing system\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  poNumber: varchar(\"po_number\").unique().notNull(),\n  supplierId: varchar(\"supplier_id\").references(() => suppliers.id).notNull(),\n  \n  // Dates\n  orderDate: date(\"order_date\").defaultNow(),\n  expectedDeliveryDate: date(\"expected_delivery_date\"),\n  actualDeliveryDate: date(\"actual_delivery_date\"),\n  \n  // Status workflow\n  status: varchar(\"status\").default(\"draft\"), // draft, sent, confirmed, partial_received, received, cancelled\n  \n  // Financial\n  subtotal: decimal(\"subtotal\", { precision: 15, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  shippingCost: decimal(\"shipping_cost\", { precision: 15, scale: 2 }).default(\"0\"),\n  totalAmount: decimal(\"total_amount\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Approval workflow\n  requestedBy: varchar(\"requested_by\").references(() => users.id).notNull(),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedDate: timestamp(\"approved_date\"),\n  \n  // Delivery\n  deliveryAddress: text(\"delivery_address\"),\n  shippingMethod: varchar(\"shipping_method\"),\n  trackingNumber: varchar(\"tracking_number\"),\n  \n  // Terms\n  paymentTerms: integer(\"payment_terms\").default(30),\n  \n  notes: text(\"notes\"),\n  internalNotes: text(\"internal_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Purchase Order Items\nexport const purchaseOrderItems = pgTable(\"purchase_order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  purchaseOrderId: varchar(\"purchase_order_id\").references(() => purchaseOrders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  \n  // Quantities - both fields exist in database\n  quantity: integer(\"quantity\").notNull(),\n  orderedQuantity: integer(\"ordered_quantity\"),\n  receivedQuantity: integer(\"received_quantity\").default(0),\n  \n  // Pricing - both naming conventions exist\n  unitCost: varchar(\"unit_cost\").notNull(),\n  totalCost: varchar(\"total_cost\"),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }),\n  \n  // Product info at time of order (for historical tracking)\n  productName: varchar(\"product_name\"),\n  productSku: varchar(\"product_sku\"),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Stock Movements - Enhanced tracking system\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  \n  // Product tracking\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchId: varchar(\"batch_id\").references(() => productBatches.id),\n  locationId: varchar(\"location_id\").references(() => locations.id),\n  \n  // Movement details\n  movementType: varchar(\"movement_type\").notNull(), // in, out, transfer, adjustment\n  quantity: integer(\"quantity\").notNull(),\n  unitCost: decimal(\"unit_cost\", { precision: 12, scale: 2 }),\n  \n  // References\n  referenceId: varchar(\"reference_id\"), // PO ID, Sale ID, Adjustment ID, etc\n  referenceType: varchar(\"reference_type\").notNull(), // purchase, sale, adjustment, transfer, service\n  \n  // Additional tracking\n  fromLocationId: varchar(\"from_location_id\").references(() => locations.id),\n  toLocationId: varchar(\"to_location_id\").references(() => locations.id),\n  \n  // Metadata\n  notes: text(\"notes\"),\n  reason: varchar(\"reason\"), // damaged, expired, sold, etc\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inventory Adjustments - For manual stock corrections\nexport const inventoryAdjustments = pgTable(\"inventory_adjustments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adjustmentNumber: varchar(\"adjustment_number\").unique().notNull(),\n  \n  // Adjustment details\n  type: varchar(\"type\").notNull(), // increase, decrease, recount\n  reason: varchar(\"reason\").notNull(), // damage, theft, expiry, recount, etc\n  \n  // Approval\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedDate: timestamp(\"approved_date\"),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inventory Adjustment Items\nexport const inventoryAdjustmentItems = pgTable(\"inventory_adjustment_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adjustmentId: varchar(\"adjustment_id\").references(() => inventoryAdjustments.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  batchId: varchar(\"batch_id\").references(() => productBatches.id),\n  locationId: varchar(\"location_id\").references(() => locations.id),\n  \n  // Quantities\n  systemQuantity: integer(\"system_quantity\").notNull(), // what system shows\n  actualQuantity: integer(\"actual_quantity\").notNull(), // what was counted\n  adjustmentQuantity: integer(\"adjustment_quantity\").notNull(), // difference\n  \n  // Cost impact\n  unitCost: decimal(\"unit_cost\", { precision: 12, scale: 2 }),\n  totalCostImpact: decimal(\"total_cost_impact\", { precision: 12, scale: 2 }),\n  \n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Financial Records - Complete rebuild\n// Financial Records - Legacy compatibility (keep for migration)\nexport const financialRecords = pgTable(\"financial_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\", { length: 20 }).notNull(), // income, expense, transfer\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  subcategory: varchar(\"subcategory\", { length: 100 }),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  reference: varchar(\"reference\"), // Reference to transaction, service ticket, payroll, etc.\n  referenceType: varchar(\"reference_type\", { length: 50 }), // sale, service, payroll, expense, etc.\n  accountId: varchar(\"account_id\").references(() => accounts.id),\n  journalEntryId: varchar(\"journal_entry_id\").references(() => journalEntries.id), // Link to journal entry\n  paymentMethod: varchar(\"payment_method\", { length: 50 }), // cash, bank_transfer, credit_card, etc.\n  status: varchar(\"status\", { length: 20 }).default(\"confirmed\"), // pending, confirmed, cancelled\n  tags: text(\"tags\").array(), // For better categorization\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chart of Accounts\nexport const accounts: any = pgTable(\"accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 20 }).unique().notNull(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  type: varchar(\"type\", { length: 30 }).notNull(), // asset, liability, equity, revenue, expense\n  subtype: varchar(\"subtype\", { length: 50 }), // current_asset, fixed_asset, operating_revenue, etc.\n  parentId: varchar(\"parent_id\").references((): any => accounts.id),\n  normalBalance: varchar(\"normal_balance\", { length: 10 }).notNull(), // debit or credit\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Journal Entries for Double-Entry Bookkeeping\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  journalNumber: varchar(\"journal_number\", { length: 50 }).unique().notNull(),\n  date: timestamp(\"date\").notNull(),\n  description: text(\"description\").notNull(),\n  reference: varchar(\"reference\"), // Reference to source transaction\n  referenceType: varchar(\"reference_type\", { length: 50 }), // sale, purchase, service, payroll, etc.\n  totalAmount: decimal(\"total_amount\", { precision: 15, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"posted\"), // draft, posted, reversed\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Journal Entry Lines (Debit/Credit entries)\nexport const journalEntryLines = pgTable(\"journal_entry_lines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  journalEntryId: varchar(\"journal_entry_id\").references(() => journalEntries.id).notNull(),\n  accountId: varchar(\"account_id\").references(() => accounts.id).notNull(),\n  description: text(\"description\").notNull(),\n  debitAmount: decimal(\"debit_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  creditAmount: decimal(\"credit_amount\", { precision: 15, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Employees for Payroll\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeNumber: varchar(\"employee_number\", { length: 50 }).unique().notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  position: varchar(\"position\", { length: 100 }).notNull(),\n  department: varchar(\"department\", { length: 100 }),\n  salary: decimal(\"salary\", { precision: 12, scale: 2 }).notNull(),\n  salaryType: varchar(\"salary_type\", { length: 20 }).default(\"monthly\"), // monthly, weekly, daily, hourly\n  joinDate: timestamp(\"join_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // active, inactive, terminated\n  bankAccount: varchar(\"bank_account\", { length: 50 }),\n  taxId: varchar(\"tax_id\", { length: 50 }),\n  address: text(\"address\"),\n  phone: varchar(\"phone\", { length: 20 }),\n  emergencyContact: jsonb(\"emergency_contact\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payroll Records\nexport const payrollRecords = pgTable(\"payroll_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").references(() => employees.id).notNull(),\n  payrollNumber: varchar(\"payroll_number\", { length: 50 }).unique().notNull(),\n  periodStart: timestamp(\"period_start\").notNull(),\n  periodEnd: timestamp(\"period_end\").notNull(),\n  baseSalary: decimal(\"base_salary\", { precision: 12, scale: 2 }).notNull(),\n  overtime: decimal(\"overtime\", { precision: 12, scale: 2 }).default(\"0\"),\n  bonus: decimal(\"bonus\", { precision: 12, scale: 2 }).default(\"0\"),\n  allowances: decimal(\"allowances\", { precision: 12, scale: 2 }).default(\"0\"),\n  grossPay: decimal(\"gross_pay\", { precision: 12, scale: 2 }).notNull(),\n  taxDeduction: decimal(\"tax_deduction\", { precision: 12, scale: 2 }).default(\"0\"),\n  socialSecurity: decimal(\"social_security\", { precision: 12, scale: 2 }).default(\"0\"),\n  healthInsurance: decimal(\"health_insurance\", { precision: 12, scale: 2 }).default(\"0\"),\n  otherDeductions: decimal(\"other_deductions\", { precision: 12, scale: 2 }).default(\"0\"),\n  netPay: decimal(\"net_pay\", { precision: 12, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"draft\"), // draft, approved, paid\n  paidDate: timestamp(\"paid_date\"),\n  notes: text(\"notes\"),\n  userId: varchar(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Attendance Records\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeId: varchar(\"employee_id\").references(() => employees.id).notNull(),\n  date: timestamp(\"date\").notNull(),\n  clockIn: timestamp(\"clock_in\"),\n  clockOut: timestamp(\"clock_out\"),\n  breakStart: timestamp(\"break_start\"),\n  breakEnd: timestamp(\"break_end\"),\n  hoursWorked: decimal(\"hours_worked\", { precision: 4, scale: 2 }).default(\"0\"),\n  overtimeHours: decimal(\"overtime_hours\", { precision: 4, scale: 2 }).default(\"0\"),\n  status: varchar(\"status\", { length: 20 }).default(\"present\"), // present, absent, late, half_day\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations  \nexport const usersRelations = relations(users, ({ many }) => ({\n  transactions: many(transactions),\n  serviceTickets: many(serviceTickets),\n  stockMovements: many(stockMovements),\n  financialRecords: many(financialRecords),\n  employees: many(employees),\n  payrollRecords: many(payrollRecords),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one, many }) => ({\n  parent: one(accounts, {\n    fields: [accounts.parentId],\n    references: [accounts.id],\n  }),\n  children: many(accounts),\n  financialRecords: many(financialRecords),\n  journalEntryLines: many(journalEntryLines),\n}));\n\nexport const journalEntriesRelations = relations(journalEntries, ({ one, many }) => ({\n  user: one(users, {\n    fields: [journalEntries.userId],\n    references: [users.id],\n  }),\n  lines: many(journalEntryLines),\n  financialRecords: many(financialRecords),\n}));\n\nexport const journalEntryLinesRelations = relations(journalEntryLines, ({ one }) => ({\n  journalEntry: one(journalEntries, {\n    fields: [journalEntryLines.journalEntryId],\n    references: [journalEntries.id],\n  }),\n  account: one(accounts, {\n    fields: [journalEntryLines.accountId],\n    references: [accounts.id],\n  }),\n}));\n\nexport const employeesRelations = relations(employees, ({ one, many }) => ({\n  user: one(users, {\n    fields: [employees.userId],\n    references: [users.id],\n  }),\n  payrollRecords: many(payrollRecords),\n  attendanceRecords: many(attendanceRecords),\n}));\n\nexport const payrollRecordsRelations = relations(payrollRecords, ({ one }) => ({\n  employee: one(employees, {\n    fields: [payrollRecords.employeeId],\n    references: [employees.id],\n  }),\n  user: one(users, {\n    fields: [payrollRecords.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const attendanceRecordsRelations = relations(attendanceRecords, ({ one }) => ({\n  employee: one(employees, {\n    fields: [attendanceRecords.employeeId],\n    references: [employees.id],\n  }),\n}));\n\nexport const financialRecordsRelations = relations(financialRecords, ({ one }) => ({\n  account: one(accounts, {\n    fields: [financialRecords.accountId],\n    references: [accounts.id],\n  }),\n  user: one(users, {\n    fields: [financialRecords.userId],\n    references: [users.id],\n  }),\n  journalEntry: one(journalEntries, {\n    fields: [financialRecords.journalEntryId],\n    references: [journalEntries.id],\n  }),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  transactionItems: many(transactionItems),\n  stockMovements: many(stockMovements),\n}));\n\nexport const customersRelations = relations(customers, ({ many }) => ({\n  transactions: many(transactions),\n  serviceTickets: many(serviceTickets),\n}));\n\nexport const suppliersRelations = relations(suppliers, ({ many }) => ({\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one, many }) => ({\n  customer: one(customers, {\n    fields: [transactions.customerId],\n    references: [customers.id],\n  }),\n  supplier: one(suppliers, {\n    fields: [transactions.supplierId],\n    references: [suppliers.id],\n  }),\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n  items: many(transactionItems),\n}));\n\nexport const transactionItemsRelations = relations(transactionItems, ({ one }) => ({\n  transaction: one(transactions, {\n    fields: [transactionItems.transactionId],\n    references: [transactions.id],\n  }),\n  product: one(products, {\n    fields: [transactionItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const serviceTicketsRelations = relations(serviceTickets, ({ one }) => ({\n  customer: one(customers, {\n    fields: [serviceTickets.customerId],\n    references: [customers.id],\n  }),\n  technician: one(users, {\n    fields: [serviceTickets.technicianId],\n    references: [users.id],\n  }),\n}));\n\nexport const stockMovementsRelations = relations(stockMovements, ({ one }) => ({\n  product: one(products, {\n    fields: [stockMovements.productId],\n    references: [products.id],\n  }),\n  user: one(users, {\n    fields: [stockMovements.userId],\n    references: [users.id],\n  }),\n}));\n\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStoreConfigSchema = createInsertSchema(storeConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  sku: true,      // Auto-generated\n  barcode: true,  // Auto-generated\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  transactionNumber: true, // Auto-generated by server\n  userId: true,            // Set by server from auth\n  createdAt: true,\n});\n\nexport const insertTransactionItemSchema = createInsertSchema(transactionItems).omit({\n  id: true,\n  transactionId: true, // This will be set by the server\n});\n\nexport const insertServiceTicketSchema = createInsertSchema(serviceTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStockMovementSchema = createInsertSchema(stockMovements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductBatchSchema = createInsertSchema(productBatches).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPurchaseOrderItemSchema = createInsertSchema(purchaseOrderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInventoryAdjustmentSchema = createInsertSchema(inventoryAdjustments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInventoryAdjustmentItemSchema = createInsertSchema(inventoryAdjustmentItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServiceTicketPartSchema = createInsertSchema(serviceTicketParts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFinancialRecordSchema = createInsertSchema(financialRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPayrollRecordSchema = createInsertSchema(payrollRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAttendanceRecordSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  journalNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJournalEntryLineSchema = createInsertSchema(journalEntryLines).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAccountSchema2 = createInsertSchema(accounts).omit({\n  id: true,\n  balance: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type LoginUser = {\n  username: string;\n  password: string;\n};\nexport type InsertStoreConfig = z.infer<typeof insertStoreConfigSchema>;\nexport type StoreConfig = typeof storeConfig.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\n// Auto-generation utilities\nexport function generateSKU(): string {\n  const date = new Date();\n  const dateString = date.toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD\n  const randomNum = Math.floor(Math.random() * 9999).toString().padStart(4, '0');\n  return `SKU-${dateString}-${randomNum}`;\n}\n\nexport function generateBarcode(): string {\n  // Generate 13-digit EAN barcode format: Country(2) + Manufacturer(5) + Product(5) + Check(1)\n  const country = '62'; // Indonesia country code for barcodes\n  const manufacturer = Math.floor(Math.random() * 99999).toString().padStart(5, '0');\n  const product = Math.floor(Math.random() * 99999).toString().padStart(5, '0');\n  \n  // Simple check digit calculation (modulo 10)\n  const digits = (country + manufacturer + product).split('').map(Number);\n  let checkSum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    checkSum += digits[i] * (i % 2 === 0 ? 1 : 3);\n  }\n  const checkDigit = (10 - (checkSum % 10)) % 10;\n  \n  return country + manufacturer + product + checkDigit;\n}\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransactionItem = z.infer<typeof insertTransactionItemSchema>;\nexport type TransactionItem = typeof transactionItems.$inferSelect;\nexport type InsertServiceTicket = z.infer<typeof insertServiceTicketSchema>;\nexport type ServiceTicket = typeof serviceTickets.$inferSelect;\nexport type InsertStockMovement = z.infer<typeof insertStockMovementSchema>;\nexport type StockMovement = typeof stockMovements.$inferSelect;\nexport type InsertServiceTicketPart = z.infer<typeof insertServiceTicketPartSchema>;\nexport type ServiceTicketPart = typeof serviceTicketParts.$inferSelect;\nexport type InsertFinancialRecord = z.infer<typeof insertFinancialRecordSchema>;\nexport type FinancialRecord = typeof financialRecords.$inferSelect;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertPayrollRecord = z.infer<typeof insertPayrollRecordSchema>;\nexport type PayrollRecord = typeof payrollRecords.$inferSelect;\nexport type InsertAttendanceRecord = z.infer<typeof insertAttendanceRecordSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\nexport type InsertJournalEntryLine = z.infer<typeof insertJournalEntryLineSchema>;\nexport type JournalEntryLine = typeof journalEntryLines.$inferSelect;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertAccount2 = z.infer<typeof insertAccountSchema2>;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type Role = typeof roles.$inferSelect;\n\n// New inventory system types\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\nexport type Location = typeof locations.$inferSelect;\nexport type InsertProductBatch = z.infer<typeof insertProductBatchSchema>;\nexport type ProductBatch = typeof productBatches.$inferSelect;\nexport type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\nexport type InsertPurchaseOrderItem = z.infer<typeof insertPurchaseOrderItemSchema>;\nexport type PurchaseOrderItem = typeof purchaseOrderItems.$inferSelect;\nexport type InsertInventoryAdjustment = z.infer<typeof insertInventoryAdjustmentSchema>;\nexport type InventoryAdjustment = typeof inventoryAdjustments.$inferSelect;\nexport type InsertInventoryAdjustmentItem = z.infer<typeof insertInventoryAdjustmentItemSchema>;\nexport type InventoryAdjustmentItem = typeof inventoryAdjustmentItems.$inferSelect;\n","size_bytes":37821},"client/src/components/installation/daily-expense-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ExpenseCategory, DailyExpense } from \"@shared/schema\";\n\nexport default function DailyExpenseSetup() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const { data: categories = [] } = useQuery<ExpenseCategory[]>({\n    queryKey: [\"/api/expenses/categories\"],\n  });\n\n  const { data: todayExpenses = [] } = useQuery<DailyExpense[]>({\n    queryKey: [\"/api/expenses/daily\"],\n  });\n\n  const addExpenseMutation = useMutation({\n    mutationFn: async (expense: any) => {\n      return await apiRequest('POST', '/api/expenses/daily', expense);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Expense Added\",\n        description: \"Daily expense has been recorded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses/daily\"] });\n      // Reset form\n      setSelectedCategory(\"\");\n      setAmount(\"\");\n      setDescription(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddExpense = () => {\n    if (!selectedCategory || !amount || !description) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const expenseData = {\n      categoryId: selectedCategory,\n      amount: parseFloat(amount.replace(/[^\\d]/g, '')),\n      description,\n      date: new Date(),\n      time: new Date().toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }),\n      userId: \"admin\",\n    };\n\n    addExpenseMutation.mutate(expenseData);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const totalExpenses = todayExpenses.reduce((sum, expense) => sum + expense.amount, 0);\n\n  const getCategoryIcon = (categoryId: string) => {\n    const category = categories.find(cat => cat.id === categoryId);\n    return category?.icon || \"fas fa-receipt\";\n  };\n\n  const getCategoryName = (categoryId: string) => {\n    const category = categories.find(cat => cat.id === categoryId);\n    return category?.name || \"Unknown\";\n  };\n\n  const getCategoryColor = (categoryId: string) => {\n    const category = categories.find(cat => cat.id === categoryId);\n    const colorMap: { [key: string]: string } = {\n      red: \"bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-400\",\n      blue: \"bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400\",\n      green: \"bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400\",\n      purple: \"bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-400\",\n      yellow: \"bg-yellow-100 dark:bg-yellow-900 text-yellow-600 dark:text-yellow-400\",\n      pink: \"bg-pink-100 dark:bg-pink-900 text-pink-600 dark:text-pink-400\",\n      gray: \"bg-gray-100 dark:bg-gray-900 text-gray-600 dark:text-gray-400\",\n      indigo: \"bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400\",\n    };\n    return colorMap[category?.color || 'gray'];\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-orange-100 dark:bg-orange-900 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-wallet text-orange-600 dark:text-orange-400\"></i>\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">Daily Expense Tracking</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Comprehensive expense management system</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\">\n            <i className=\"fas fa-check mr-1\"></i>Installed\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        {/* Expense Categories */}\n        <div className=\"mb-6\">\n          <h4 className=\"font-medium text-foreground mb-4\">Kategori Pengeluaran</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {categories.map((category) => (\n              <div key={category.id} className={`feature-card bg-${category.color}-50 dark:bg-${category.color}-950 border border-${category.color}-200 dark:border-${category.color}-800 rounded-lg p-4 text-center`}>\n                <div className={`w-10 h-10 ${getCategoryColor(category.id)} rounded-full flex items-center justify-center mx-auto mb-2`}>\n                  <i className={`${category.icon} text-sm`}></i>\n                </div>\n                <div className=\"font-medium text-foreground text-sm\" data-testid={`category-${category.id}`}>\n                  {category.name}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">{category.description}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Expense Entry Interface */}\n        <div className=\"mb-6\">\n          <h5 className=\"font-medium text-foreground mb-3\">Quick Expense Entry</h5>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <Label htmlFor=\"category\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Kategori\n                  </Label>\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger data-testid=\"select-expense-category\">\n                      <SelectValue placeholder=\"Pilih kategori...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"amount\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Jumlah\n                  </Label>\n                  <Input \n                    id=\"amount\"\n                    type=\"text\" \n                    placeholder=\"Rp 0\" \n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    data-testid=\"input-expense-amount\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"description\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Keterangan\n                  </Label>\n                  <Input \n                    id=\"description\"\n                    type=\"text\" \n                    placeholder=\"Deskripsi pengeluaran...\" \n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    data-testid=\"input-expense-description\"\n                  />\n                </div>\n                \n                <div className=\"flex items-end\">\n                  <Button \n                    className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                    onClick={handleAddExpense}\n                    disabled={addExpenseMutation.isPending}\n                    data-testid=\"button-add-expense\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    {addExpenseMutation.isPending ? \"Adding...\" : \"Tambah\"}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Today's Expenses Summary */}\n        <div>\n          <h5 className=\"font-medium text-foreground mb-3\">Pengeluaran Hari Ini</h5>\n          <Card>\n            <div className=\"p-4 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">Total Pengeluaran Hari Ini</div>\n                <div className=\"text-2xl font-bold text-foreground\" data-testid=\"total-daily-expenses\">\n                  {formatCurrency(totalExpenses)}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"divide-y divide-border\">\n              {todayExpenses.length > 0 ? (\n                todayExpenses.map((expense) => (\n                  <div key={expense.id} className=\"p-4 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 ${getCategoryColor(expense.categoryId)} rounded-full flex items-center justify-center`}>\n                        <i className={`${getCategoryIcon(expense.categoryId)} text-sm`}></i>\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-foreground\" data-testid={`expense-category-${expense.id}`}>\n                          {getCategoryName(expense.categoryId)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`expense-description-${expense.id}`}>\n                          {expense.description}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-foreground\" data-testid={`expense-amount-${expense.id}`}>\n                        {formatCurrency(expense.amount)}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\" data-testid={`expense-time-${expense.id}`}>\n                        {expense.time}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"p-8 text-center text-muted-foreground\">\n                  <i className=\"fas fa-receipt text-4xl mb-4 opacity-30\"></i>\n                  <p>Belum ada pengeluaran hari ini</p>\n                </div>\n              )}\n            </div>\n          </Card>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11276},"client/src/components/installation/installation-progress.tsx":{"content":"interface InstallationProgressProps {\n  progress: number;\n}\n\nexport default function InstallationProgress({ progress }: InstallationProgressProps) {\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm\">\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground\">Installation Progress</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Setting up new service management features</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-32 bg-muted rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-500\"\n                style={{ width: `${progress}%` }}\n                data-testid=\"progress-bar\"\n              ></div>\n            </div>\n            <span className=\"text-sm font-medium text-muted-foreground\" data-testid=\"progress-text\">\n              {progress}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1123},"client/src/components/installation/online-tracking-setup.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport type { TrackingConfig } from \"@shared/schema\";\n\nexport default function OnlineTrackingSetup() {\n  const { data: trackingConfig } = useQuery<TrackingConfig>({\n    queryKey: [\"/api/tracking/config\"],\n  });\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-link text-blue-600 dark:text-blue-400\"></i>\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">Auto-Generated Tracking Links</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">One-click service status checking</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200\">\n            <i className=\"fas fa-check mr-1\"></i>Active\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Before (Manual) */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n              <i className=\"fas fa-times-circle text-red-500 mr-2\"></i>\n              Sebelumnya (Manual)\n            </h4>\n            <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n              <div className=\"space-y-3\">\n                <div className=\"text-sm\">\n                  <div className=\"text-muted-foreground mb-1\">Link yang dikirim:</div>\n                  <code className=\"bg-red-100 dark:bg-red-900 px-2 py-1 rounded text-xs\">\n                    {trackingConfig?.baseUrl || 'https://service.app'}/tracking\n                  </code>\n                </div>\n                <div className=\"text-sm\">\n                  <div className=\"text-muted-foreground mb-1\">Customer harus input:</div>\n                  <Input \n                    type=\"text\" \n                    placeholder=\"Masukkan nomor service...\" \n                    className=\"border-red-300 dark:border-red-700 bg-background\"\n                    data-testid=\"manual-service-input\"\n                    readOnly\n                  />\n                </div>\n                <div className=\"text-xs text-red-600 dark:text-red-400\">\n                  ❌ Langkah tambahan untuk customer\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* After (Auto) */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n              <i className=\"fas fa-check-circle text-green-500 mr-2\"></i>\n              Sekarang (Otomatis)\n            </h4>\n            <div className=\"bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n              <div className=\"space-y-3\">\n                <div className=\"text-sm\">\n                  <div className=\"text-muted-foreground mb-1\">Link yang dikirim:</div>\n                  <code className=\"bg-green-100 dark:bg-green-900 px-2 py-1 rounded text-xs\">\n                    {trackingConfig?.baseUrl || 'https://service.app'}/track/SVC20241201001\n                  </code>\n                </div>\n                <div className=\"text-sm\">\n                  <div className=\"text-muted-foreground mb-1\">Customer action:</div>\n                  <Button \n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                    data-testid=\"one-click-tracking\"\n                  >\n                    Klik Langsung → Status Muncul\n                  </Button>\n                </div>\n                <div className=\"text-xs text-green-600 dark:text-green-400\">\n                  ✅ Satu klik langsung tampil status\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Sample Tracking Interface */}\n        <div className=\"mt-6\">\n          <h5 className=\"font-medium text-foreground mb-3\">Sample Tracking Status</h5>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h6 className=\"font-semibold text-foreground\" data-testid=\"service-number\">\n                  Service #SVC20241201001\n                </h6>\n                <Badge className=\"bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200\">\n                  Dalam Proses\n                </Badge>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-check text-green-600 dark:text-green-400 text-xs\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-foreground\">Service Diterima</div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"step-received\">\n                      01 Dec 2024, 09:00\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-check text-green-600 dark:text-green-400 text-xs\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-foreground\">Analisa Kerusakan</div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"step-analysis\">\n                      01 Dec 2024, 10:30\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-tools text-blue-600 dark:text-blue-400 text-xs\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-foreground\">Sedang Diperbaiki</div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"step-repair\">\n                      01 Dec 2024, 14:00\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                    <i className=\"fas fa-clock text-muted-foreground text-xs\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-medium text-muted-foreground\">Quality Check</div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"step-pending\">\n                      Pending\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7708},"client/src/components/installation/print-layout-setup.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { PrintLayout } from \"@shared/schema\";\n\nexport default function PrintLayoutSetup() {\n  const { data: printLayouts = [] } = useQuery<PrintLayout[]>({\n    queryKey: [\"/api/print/layouts\"],\n  });\n\n  const ServiceReceiptPreview = () => (\n    <div className=\"print-preview rounded-lg p-4 relative z-10\">\n      <div className=\"text-center border-b border-gray-300 pb-3 mb-3\">\n        <div className=\"font-bold text-lg\">TECH SERVICE</div>\n        <div className=\"text-sm text-gray-600\">Jl. Teknologi No. 123, Jakarta</div>\n        <div className=\"text-sm text-gray-600\">Telp: (021) 12345678</div>\n      </div>\n      \n      <div className=\"space-y-2 text-sm\">\n        <div className=\"flex justify-between\">\n          <span>No. Service:</span>\n          <span className=\"font-medium\" data-testid=\"service-receipt-number\">SVC20241201001</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Tanggal:</span>\n          <span data-testid=\"service-receipt-date\">01/12/2024</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Customer:</span>\n          <span data-testid=\"service-receipt-customer\">John Doe</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>HP/Telepon:</span>\n          <span data-testid=\"service-receipt-phone\">081234567890</span>\n        </div>\n      </div>\n      \n      <div className=\"border-t border-gray-300 mt-3 pt-3\">\n        <div className=\"font-medium mb-2\">Barang yang diserahkan:</div>\n        <div className=\"text-sm\" data-testid=\"service-receipt-item\">\n          Laptop ASUS ROG - Tidak bisa nyala\n        </div>\n        <div className=\"text-sm text-gray-600 mt-1\" data-testid=\"service-receipt-accessories\">\n          Kelengkapan: Charger, Tas\n        </div>\n      </div>\n    </div>\n  );\n\n  const PaymentReceiptPreview = () => (\n    <div className=\"print-preview rounded-lg p-4 relative z-10\">\n      <div className=\"text-center border-b border-gray-300 pb-3 mb-3\">\n        <div className=\"font-bold text-lg\">TECH SERVICE</div>\n        <div className=\"text-sm text-gray-600\">NOTA PEMBAYARAN</div>\n      </div>\n      \n      <div className=\"space-y-2 text-sm\">\n        <div className=\"flex justify-between\">\n          <span>No. Invoice:</span>\n          <span className=\"font-medium\" data-testid=\"payment-receipt-invoice\">INV-20241201-001</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Service:</span>\n          <span data-testid=\"payment-receipt-service\">SVC20241201001</span>\n        </div>\n      </div>\n      \n      <div className=\"border-t border-gray-300 mt-3 pt-3\">\n        <div className=\"space-y-1 text-sm\">\n          <div className=\"flex justify-between\">\n            <span>Service Laptop</span>\n            <span data-testid=\"payment-receipt-service-cost\">Rp 350.000</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Spare Part RAM</span>\n            <span data-testid=\"payment-receipt-parts-cost\">Rp 750.000</span>\n          </div>\n          <div className=\"flex justify-between border-t pt-2 font-medium\">\n            <span>Subtotal</span>\n            <span data-testid=\"payment-receipt-subtotal\">Rp 1.100.000</span>\n          </div>\n          <div className=\"flex justify-between text-green-600\">\n            <span>Diskon (10%)</span>\n            <span data-testid=\"payment-receipt-discount\">- Rp 110.000</span>\n          </div>\n          <div className=\"flex justify-between border-t pt-2 font-bold text-lg\">\n            <span>TOTAL</span>\n            <span data-testid=\"payment-receipt-total\">Rp 990.000</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const SalesReceiptPreview = () => (\n    <div className=\"print-preview rounded-lg p-4 relative z-10\">\n      <div className=\"text-center border-b border-gray-300 pb-3 mb-3\">\n        <div className=\"font-bold text-lg\">TECH SERVICE</div>\n        <div className=\"text-sm text-gray-600\">NOTA PENJUALAN</div>\n      </div>\n      \n      <div className=\"space-y-2 text-sm\">\n        <div className=\"flex justify-between\">\n          <span>No. Penjualan:</span>\n          <span className=\"font-medium\" data-testid=\"sales-receipt-number\">SALE-20241201-001</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Kasir:</span>\n          <span data-testid=\"sales-receipt-cashier\">Admin 1</span>\n        </div>\n      </div>\n      \n      <div className=\"border-t border-gray-300 mt-3 pt-3\">\n        <div className=\"space-y-1 text-sm\">\n          <div className=\"flex justify-between\">\n            <span>Mouse Wireless Logitech</span>\n            <span data-testid=\"sales-receipt-item1\">Rp 250.000</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Keyboard Mechanical</span>\n            <span data-testid=\"sales-receipt-item2\">Rp 650.000</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>USB Flash Drive 32GB</span>\n            <span data-testid=\"sales-receipt-item3\">Rp 85.000</span>\n          </div>\n          <div className=\"flex justify-between border-t pt-2 font-medium\">\n            <span>Subtotal</span>\n            <span data-testid=\"sales-receipt-subtotal\">Rp 985.000</span>\n          </div>\n          <div className=\"flex justify-between text-green-600\">\n            <span>Diskon (Rp 35.000)</span>\n            <span data-testid=\"sales-receipt-discount\">- Rp 35.000</span>\n          </div>\n          <div className=\"flex justify-between border-t pt-2 font-bold text-lg\">\n            <span>TOTAL</span>\n            <span data-testid=\"sales-receipt-total\">Rp 950.000</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-print text-purple-600 dark:text-purple-400\"></i>\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">Enhanced Print Layouts</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Improved receipt and invoice templates</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200\">\n            <i className=\"fas fa-check mr-1\"></i>Updated\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Service Receipt */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-foreground flex items-center\">\n              <i className=\"fas fa-receipt text-blue-500 mr-2\"></i>\n              Tanda Terima Service\n            </h4>\n            <ServiceReceiptPreview />\n          </div>\n          \n          {/* Payment Receipt */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-foreground flex items-center\">\n              <i className=\"fas fa-credit-card text-green-500 mr-2\"></i>\n              Nota Pembayaran\n            </h4>\n            <PaymentReceiptPreview />\n          </div>\n          \n          {/* Sales Receipt */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-foreground flex items-center\">\n              <i className=\"fas fa-shopping-cart text-orange-500 mr-2\"></i>\n              Nota Penjualan\n            </h4>\n            <SalesReceiptPreview />\n          </div>\n        </div>\n        \n        {/* Print Settings */}\n        <div className=\"mt-6\">\n          <h5 className=\"font-medium text-foreground mb-3\">Print Configuration</h5>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-muted/50 dark:bg-muted/20 rounded-lg p-4\">\n              <div className=\"font-medium text-foreground mb-2\">Paper Size</div>\n              <Select defaultValue=\"a4\">\n                <SelectTrigger className=\"w-full\" data-testid=\"select-paper-size\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"a4\">A4 (210x297mm)</SelectItem>\n                  <SelectItem value=\"thermal_80\">Thermal 80mm</SelectItem>\n                  <SelectItem value=\"a5\">Half Letter</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"bg-muted/50 dark:bg-muted/20 rounded-lg p-4\">\n              <div className=\"font-medium text-foreground mb-2\">Logo Position</div>\n              <Select defaultValue=\"center_top\">\n                <SelectTrigger className=\"w-full\" data-testid=\"select-logo-position\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"center_top\">Center Top</SelectItem>\n                  <SelectItem value=\"left_top\">Left Top</SelectItem>\n                  <SelectItem value=\"right_top\">Right Top</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"bg-muted/50 dark:bg-muted/20 rounded-lg p-4\">\n              <div className=\"font-medium text-foreground mb-2\">Font Size</div>\n              <Select defaultValue=\"normal\">\n                <SelectTrigger className=\"w-full\" data-testid=\"select-font-size\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"small\">Small (10pt)</SelectItem>\n                  <SelectItem value=\"normal\">Normal (12pt)</SelectItem>\n                  <SelectItem value=\"large\">Large (14pt)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10353},"client/src/components/installation/transaction-discount-setup.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport type { DiscountConfig } from \"@shared/schema\";\n\nexport default function TransactionDiscountSetup() {\n  const { data: discountConfigs = [] } = useQuery<DiscountConfig[]>({\n    queryKey: [\"/api/discounts/config\"],\n  });\n\n  const percentageDiscount = discountConfigs.find(config => config.type === \"percentage\");\n  const rupiahDiscount = discountConfigs.find(config => config.type === \"rupiah\");\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-percentage text-green-600 dark:text-green-400\"></i>\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">Transaction Discount System</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Percentage & Rupiah based discounts</p>\n            </div>\n          </div>\n          <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\">\n            <i className=\"fas fa-check mr-1\"></i>Installed\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Percentage Discount */}\n          <div className=\"feature-card bg-muted/50 dark:bg-muted/20 rounded-lg p-4 border border-border\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-medium text-foreground\">Diskon Persentase</h4>\n              <i className=\"fas fa-percent text-primary\"></i>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Max Discount:</span>\n                <span className=\"font-medium text-foreground\">\n                  {percentageDiscount?.maxValue || 50}%\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Min Transaction:</span>\n                <span className=\"font-medium text-foreground\">\n                  {formatCurrency(percentageDiscount?.minTransactionAmount || 100000)}\n                </span>\n              </div>\n              <div className=\"mt-3\">\n                <div className=\"text-xs text-muted-foreground mb-1\">Sample Calculation:</div>\n                <div className=\"bg-card border border-border p-2 rounded text-sm\">\n                  <span data-testid=\"percentage-sample\">\n                    Rp 500.000 - 10% = Rp 450.000\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Rupiah Discount */}\n          <div className=\"feature-card bg-muted/50 dark:bg-muted/20 rounded-lg p-4 border border-border\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h4 className=\"font-medium text-foreground\">Diskon Nominal</h4>\n              <i className=\"fas fa-money-bill text-secondary\"></i>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Max Discount:</span>\n                <span className=\"font-medium text-foreground\">\n                  {formatCurrency(rupiahDiscount?.maxValue || 200000)}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Min Transaction:</span>\n                <span className=\"font-medium text-foreground\">\n                  {formatCurrency(rupiahDiscount?.minTransactionAmount || 300000)}\n                </span>\n              </div>\n              <div className=\"mt-3\">\n                <div className=\"text-xs text-muted-foreground mb-1\">Sample Calculation:</div>\n                <div className=\"bg-card border border-border p-2 rounded text-sm\">\n                  <span data-testid=\"rupiah-sample\">\n                    Rp 500.000 - Rp 50.000 = Rp 450.000\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Discount Interface Preview */}\n        <div className=\"mt-6\">\n          <h5 className=\"font-medium text-foreground mb-3\">Interface Preview</h5>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"discount-type\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Jenis Diskon\n                  </Label>\n                  <Select defaultValue=\"percentage\">\n                    <SelectTrigger className=\"w-full\" data-testid=\"select-discount-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"percentage\">Persentase (%)</SelectItem>\n                      <SelectItem value=\"rupiah\">Nominal (Rp)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"discount-value\" className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Nilai Diskon\n                  </Label>\n                  <Input \n                    type=\"text\" \n                    placeholder=\"10\" \n                    defaultValue=\"10\"\n                    data-testid=\"input-discount-value\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Label className=\"text-sm font-medium text-foreground mb-2 block\">\n                    Total Setelah Diskon\n                  </Label>\n                  <div className=\"p-3 bg-muted rounded-md text-lg font-semibold text-foreground\">\n                    <span data-testid=\"total-after-discount\">Rp 450.000</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6960},"client/src/components/installation/whatsapp-troubleshooting.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { WhatsappConfig } from \"@shared/schema\";\n\nexport default function WhatsAppTroubleshooting() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: whatsappConfig } = useQuery<WhatsappConfig>({\n    queryKey: [\"/api/whatsapp/config\"],\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/whatsapp/test');\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Connection Test Successful\",\n        description: \"WhatsApp API is responding correctly\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/config\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection Test Failed\",\n        description: error.message || \"Unable to connect to WhatsApp API\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const retryFailedMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('POST', '/api/whatsapp/retry-failed');\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Retrying Failed Messages\",\n        description: `Attempting to resend ${data.retriedCount} failed messages`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/config\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Retry Failed\",\n        description: error.message || \"Unable to retry failed messages\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"connected\":\n        return \"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\";\n      case \"error\":\n        return \"bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200\";\n      default:\n        return \"bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200\";\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center\">\n              <i className=\"fab fa-whatsapp text-green-600 dark:text-green-400\"></i>\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">WhatsApp API Improvements</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Fixing inconsistent message delivery</p>\n            </div>\n          </div>\n          <Badge className={whatsappConfig?.status === \"connected\" \n            ? \"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200\"\n            : \"bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200\"\n          }>\n            <i className=\"fas fa-wrench mr-1\"></i>\n            {whatsappConfig?.status === \"connected\" ? \"Connected\" : \"In Progress\"}\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Issue Analysis */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n              <i className=\"fas fa-exclamation-triangle text-yellow-500 mr-2\"></i>\n              Identified Issues\n            </h4>\n            <div className=\"space-y-3\">\n              <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg p-3\">\n                <div className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-check-circle text-green-500 mt-1 text-sm\"></i>\n                  <div className=\"text-sm\">\n                    <div className=\"font-medium text-foreground\">Service Reception</div>\n                    <div className=\"text-muted-foreground\" data-testid=\"reception-status\">\n                      WhatsApp notifications working ✓\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg p-3\">\n                <div className=\"flex items-start space-x-2\">\n                  <i className=\"fas fa-times-circle text-red-500 mt-1 text-sm\"></i>\n                  <div className=\"text-sm\">\n                    <div className=\"font-medium text-foreground\">Status Updates</div>\n                    <div className=\"text-muted-foreground\" data-testid=\"update-status\">\n                      Not sending update messages ✗\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Solution Implementation */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n              <i className=\"fas fa-cog text-blue-500 mr-2\"></i>\n              Solution Implementation\n            </h4>\n            <div className=\"space-y-3\">\n              <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium text-foreground mb-1\">Queue System</div>\n                  <div className=\"text-muted-foreground\">Retry mechanism for failed messages</div>\n                  <div className=\"w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2 mt-2\">\n                    <div className=\"bg-blue-600 dark:bg-blue-400 h-2 rounded-full\" style={{ width: \"75%\" }}></div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium text-foreground mb-1\">Webhook Validation</div>\n                  <div className=\"text-muted-foreground\">Enhanced response handling</div>\n                  <div className=\"w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2 mt-2\">\n                    <div className=\"bg-blue-600 dark:bg-blue-400 h-2 rounded-full\" style={{ width: \"90%\" }}></div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium text-foreground mb-1\">Logging System</div>\n                  <div className=\"text-muted-foreground\">Track delivery status</div>\n                  <div className=\"w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2 mt-2\">\n                    <div className=\"bg-blue-600 dark:bg-blue-400 h-2 rounded-full\" style={{ width: \"60%\" }}></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* WhatsApp Testing Interface */}\n        <div className=\"mt-6\">\n          <h5 className=\"font-medium text-foreground mb-3\">API Testing Dashboard</h5>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4 text-center\">\n                  <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <i className=\"fas fa-paper-plane text-green-600 dark:text-green-400\"></i>\n                  </div>\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"messages-sent\">\n                    {whatsappConfig?.messagesSentToday || 247}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Messages Sent Today</div>\n                </div>\n                \n                <div className=\"bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 text-center\">\n                  <div className=\"w-12 h-12 bg-yellow-100 dark:bg-yellow-900 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <i className=\"fas fa-clock text-yellow-600 dark:text-yellow-400\"></i>\n                  </div>\n                  <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\" data-testid=\"pending-messages\">\n                    {whatsappConfig?.pendingMessages || 12}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Pending Messages</div>\n                </div>\n                \n                <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg p-4 text-center\">\n                  <div className=\"w-12 h-12 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mx-auto mb-2\">\n                    <i className=\"fas fa-times text-red-600 dark:text-red-400\"></i>\n                  </div>\n                  <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\" data-testid=\"failed-messages\">\n                    {whatsappConfig?.failedMessages || 3}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Failed Messages</div>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 flex space-x-2\">\n                <Button \n                  className=\"flex-1 bg-primary hover:bg-primary/90 text-primary-foreground\"\n                  onClick={() => testConnectionMutation.mutate()}\n                  disabled={testConnectionMutation.isPending}\n                  data-testid=\"button-test-connection\"\n                >\n                  {testConnectionMutation.isPending ? \"Testing...\" : \"Test Connection\"}\n                </Button>\n                <Button \n                  className=\"flex-1 bg-secondary hover:bg-secondary/90 text-secondary-foreground\"\n                  onClick={() => retryFailedMutation.mutate()}\n                  disabled={retryFailedMutation.isPending || !whatsappConfig?.failedMessages}\n                  data-testid=\"button-retry-failed\"\n                >\n                  {retryFailedMutation.isPending ? \"Retrying...\" : \"Retry Failed\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10870},"client/src/components/installation/wizard-sidebar.tsx":{"content":"import type { InstallationStep } from \"@shared/schema\";\n\ninterface WizardSidebarProps {\n  steps: InstallationStep[];\n  activeStep: string;\n  onStepChange: (stepId: string) => void;\n}\n\nexport default function WizardSidebar({ steps, activeStep, onStepChange }: WizardSidebarProps) {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"fas fa-check\";\n      case \"in_progress\":\n        return \"fas fa-cog fa-spin\";\n      case \"failed\":\n        return \"fas fa-times\";\n      default:\n        return \"fas fa-clock\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-primary/10 border-primary/20\";\n      case \"in_progress\":\n        return \"bg-accent/10 border-accent/20\";\n      case \"failed\":\n        return \"bg-red-50 dark:bg-red-950 border-red-200 dark:border-red-800\";\n      default:\n        return \"bg-muted/50 border-border\";\n    }\n  };\n\n  const getIconBgColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-primary\";\n      case \"in_progress\":\n        return \"bg-accent\";\n      case \"failed\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"w-80 bg-card shadow-xl border-r border-border\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-cogs text-primary-foreground\"></i>\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\">Setup Wizard</h1>\n            <p className=\"text-sm text-muted-foreground\">Service Management System</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Installation Steps */}\n      <div className=\"p-6\">\n        <nav className=\"space-y-3\">\n          {steps.map((step) => (\n            <div key={step.id} className={`wizard-step ${step.status !== \"pending\" ? \"active\" : \"\"}`}>\n              <button\n                onClick={() => onStepChange(step.id)}\n                className={`w-full flex items-center space-x-3 p-3 rounded-lg border transition-colors ${\n                  getStatusColor(step.status)\n                } ${\n                  activeStep === step.id \n                    ? \"ring-2 ring-primary ring-offset-2 ring-offset-background\" \n                    : \"hover:bg-muted/30\"\n                }`}\n                data-testid={`wizard-step-${step.id}`}\n              >\n                <div className={`w-8 h-8 ${getIconBgColor(step.status)} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  <i className={`${getStatusIcon(step.status)} text-white text-xs`}></i>\n                </div>\n                <div className=\"text-left flex-1\">\n                  <div className=\"text-sm font-medium text-foreground\">{step.name}</div>\n                  <div className=\"text-xs text-muted-foreground\">{step.description}</div>\n                  {step.status === \"in_progress\" && (\n                    <div className=\"mt-1 w-full bg-muted rounded-full h-1\">\n                      <div \n                        className=\"bg-accent h-1 rounded-full transition-all duration-300\"\n                        style={{ width: `${step.progress}%` }}\n                      ></div>\n                    </div>\n                  )}\n                </div>\n              </button>\n            </div>\n          ))}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3589},"client/src/pages/installation-wizard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport WizardSidebar from \"@/components/installation/wizard-sidebar\";\nimport InstallationProgress from \"@/components/installation/installation-progress\";\nimport TransactionDiscountSetup from \"@/components/installation/transaction-discount-setup\";\nimport OnlineTrackingSetup from \"@/components/installation/online-tracking-setup\";\nimport WhatsAppTroubleshooting from \"@/components/installation/whatsapp-troubleshooting\";\nimport PrintLayoutSetup from \"@/components/installation/print-layout-setup\";\nimport DailyExpenseSetup from \"@/components/installation/daily-expense-setup\";\nimport { Button } from \"@/components/ui/button\";\nimport type { InstallationStep } from \"@shared/schema\";\n\nexport default function InstallationWizard() {\n  const [activeStep, setActiveStep] = useState(\"transaction-discount\");\n\n  // Fetch installation steps\n  const { data: steps = [], isLoading } = useQuery<InstallationStep[]>({\n    queryKey: [\"/api/installation/steps\"],\n  });\n\n  const calculateOverallProgress = () => {\n    if (steps.length === 0) return 0;\n    const totalProgress = steps.reduce((sum, step) => sum + step.progress, 0);\n    return Math.round(totalProgress / steps.length);\n  };\n\n  const handleFinalizeSetup = () => {\n    console.log(\"Finalizing setup...\");\n    // This would typically complete the installation process\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading installation wizard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const renderActiveComponent = () => {\n    switch (activeStep) {\n      case \"transaction-discount\":\n        return <TransactionDiscountSetup />;\n      case \"online-tracking\":\n        return <OnlineTrackingSetup />;\n      case \"whatsapp-api\":\n        return <WhatsAppTroubleshooting />;\n      case \"print-layouts\":\n        return <PrintLayoutSetup />;\n      case \"daily-expenses\":\n        return <DailyExpenseSetup />;\n      default:\n        return <TransactionDiscountSetup />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      {/* Sidebar Navigation */}\n      <WizardSidebar\n        steps={steps}\n        activeStep={activeStep}\n        onStepChange={setActiveStep}\n      />\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 overflow-auto\">\n        <InstallationProgress progress={calculateOverallProgress()} />\n\n        <main className=\"p-6 space-y-6\">\n          <div className=\"slide-in-up\">\n            {renderActiveComponent()}\n          </div>\n\n          {/* Installation Complete */}\n          <div className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 border border-green-200 dark:border-green-800 rounded-lg p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-check text-green-600 dark:text-green-400 text-xl\"></i>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Installation Nearly Complete!</h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  All major features have been configured. Complete the WhatsApp API optimization to finish the setup.\n                </p>\n              </div>\n              <div className=\"flex-shrink-0\">\n                <Button\n                  onClick={handleFinalizeSetup}\n                  className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3\"\n                  data-testid=\"button-finalize-setup\"\n                >\n                  Finalize Setup\n                </Button>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4092},"INSTALLATION_GUIDE_LINUX.md":{"content":"# Panduan Instalasi LaptopPOS di Linux dengan aaPanel\n\n## Persyaratan Sistem\n\n### Minimum Requirements\n- **OS**: Ubuntu 20.04 LTS / CentOS 7+ / Debian 10+\n- **RAM**: 2GB (Recommended 4GB+)\n- **Storage**: 20GB free space\n- **CPU**: 2 cores minimum\n- **Network**: Koneksi internet stabil\n\n### Software Requirements\n- Node.js 18+\n- PostgreSQL 14+\n- Nginx\n- PM2 (Process Manager)\n\n## 1. Persiapan Server Linux\n\n### Update System\n```bash\n# Ubuntu/Debian\nsudo apt update && sudo apt upgrade -y\n\n# CentOS/RHEL\nsudo yum update -y\n```\n\n### Install Dependencies\n```bash\n# Ubuntu/Debian\nsudo apt install curl wget git unzip -y\n\n# CentOS/RHEL\nsudo yum install curl wget git unzip -y\n```\n\n## 2. Instalasi aaPanel\n\n### Download dan Install aaPanel\n```bash\n# Download installer\nwget -O install.sh http://www.aapanel.com/script/install-ubuntu_6.0_en.sh\n\n# Jalankan installer\nsudo bash install.sh\n```\n\n### Akses aaPanel\n1. Setelah instalasi selesai, catat informasi login:\n   - **Panel URL**: `http://your-server-ip:8888`\n   - **Username**: Akan ditampilkan di terminal\n   - **Password**: Akan ditampilkan di terminal\n\n2. Login ke aaPanel melalui browser\n3. Complete initial setup wizard\n\n## 3. Setup Environment di aaPanel\n\n### Install Software Stack\n1. **Masuk ke aaPanel → Software Store**\n2. **Install komponen berikut:**\n   - **Nginx** (Latest version)\n   - **PostgreSQL** (Version 14+)\n   - **Node.js** (Version 18+)\n   - **PM2** (Process Manager)\n\n### Konfigurasi PostgreSQL\n1. **aaPanel → Database → PostgreSQL**\n2. **Buat database baru:**\n   ```sql\n   Database Name: laptoppos\n   Username: laptoppos_user\n   Password: [strong_password]\n   ```\n3. **Catat connection string:**\n   ```\n   postgresql://laptoppos_user:password@localhost:5432/laptoppos\n   ```\n\n## 4. Setup Akses Online Tanpa Domain/IP Publik\n\n### Opsi 1: Menggunakan Ngrok (Recommended untuk Testing)\n```bash\n# Install Ngrok\nwget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz\ntar xvzf ngrok-v3-stable-linux-amd64.tgz\nsudo cp ngrok /usr/local/bin\n\n# Daftar di ngrok.com untuk mendapat auth token\nngrok config add-authtoken YOUR_AUTH_TOKEN\n\n# Tunnel ke aplikasi (setelah aplikasi running di port 3000)\nngrok http 3000\n```\n\n### Opsi 2: Menggunakan Cloudflare Tunnel (Gratis, Recommended untuk Production)\n```bash\n# Download Cloudflared\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\nsudo dpkg -i cloudflared-linux-amd64.deb\n\n# Login ke Cloudflare\ncloudflared tunnel login\n\n# Buat tunnel\ncloudflared tunnel create laptoppos\n\n# Setup konfigurasi\nmkdir -p ~/.cloudflared\nnano ~/.cloudflared/config.yml\n```\n\n**Isi config.yml:**\n```yaml\ntunnel: YOUR_TUNNEL_ID\ncredentials-file: /home/username/.cloudflared/YOUR_TUNNEL_ID.json\n\ningress:\n  - hostname: laptoppos-your-subdomain.your-domain.workers.dev\n    service: http://localhost:3000\n  - service: http_status:404\n```\n\n### Opsi 3: Menggunakan ServEO (Free subdomain)\n```bash\n# Tidak perlu install, langsung akses via:\n# http://laptoppos.serveo.net\nssh -R 80:localhost:3000 serveo.net\n```\n\n### Opsi 4: Setup Local dengan Port Forwarding Router\n1. **Akses Router Admin Panel**\n2. **Port Forwarding Settings:**\n   - **External Port**: 8080\n   - **Internal IP**: IP server lokal\n   - **Internal Port**: 3000\n   - **Protocol**: TCP\n3. **Akses via**: `http://YOUR_PUBLIC_IP:8080`\n\n### Tambah Website di aaPanel (untuk semua opsi)\n1. **aaPanel → Website → Add Site**\n2. **Isi informasi:**\n   - **Domain**: `localhost` atau `127.0.0.1`\n   - **Port**: `3000` (atau custom port)\n   - **Document Root**: `/www/wwwroot/laptoppos`\n   - **PHP Version**: Tidak diperlukan (Node.js app)\n\n## 5. Deploy LaptopPOS Application\n\n### Clone Repository\n```bash\n# Masuk ke directory website\ncd /www/wwwroot/laptoppos\n\n# Clone source code\ngit clone [repository-url] .\n\n# Install dependencies\nnpm install\n```\n\n### Environment Configuration\n```bash\n# Buat file environment\nnano .env\n```\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://laptoppos_user:password@localhost:5432/laptoppos\nPGHOST=localhost\nPGPORT=5432\nPGUSER=laptoppos_user\nPGPASSWORD=your_password\nPGDATABASE=laptoppos\n\n# Session Configuration\nSESSION_SECRET=your-super-secret-session-key-change-this\n\n# Application Configuration\nNODE_ENV=production\nPORT=3000\n\n# Local deployment configuration (tanpa Replit Auth)\n# Commented out untuk local deployment tanpa domain\n# REPL_ID=your-repl-id\n# REPLIT_DOMAINS=your-domain.com\n# ISSUER_URL=https://replit.com/oidc\n\n# Public URL Configuration (untuk tunnel services)\n# Atur salah satu sesuai dengan tunnel yang digunakan:\n# PUBLIC_URL=https://your-ngrok-url.ngrok.io\n# APP_URL=https://your-ngrok-url.ngrok.io\n# NGROK_URL=https://your-ngrok-url.ngrok.io\n# Contoh: PUBLIC_URL=https://abc123.ngrok.io\n\n# Default Admin (akan dibuat otomatis saat first run)\nDEFAULT_ADMIN_USERNAME=admin\nDEFAULT_ADMIN_PASSWORD=admin123\nDEFAULT_ADMIN_EMAIL=admin@laptoppos.local\n```\n\n### Build Application\n```bash\n# Build production version\nnpm run build\n\n# Run database migration\nnpm run db:push\n```\n\n## 6. Setup Process Manager dengan PM2\n\n### Create PM2 Ecosystem File\n```bash\nnano ecosystem.config.js\n```\n\n```javascript\nmodule.exports = {\n  apps: [{\n    name: 'laptoppos',\n    script: 'npm',\n    args: 'start',\n    cwd: '/www/wwwroot/laptoppos',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    }\n  }]\n}\n```\n\n### Start Application\n```bash\n# Start dengan PM2\npm2 start ecosystem.config.js\n\n# Enable startup script\npm2 startup\npm2 save\n```\n\n## 7. Konfigurasi Nginx (Optional - untuk akses lokal)\n\n### Opsi A: Direct Access (Tanpa Nginx)\nAplikasi bisa diakses langsung melalui:\n- **Local**: `http://localhost:3000`\n- **LAN**: `http://YOUR_LOCAL_IP:3000`\n- **Tunnel**: URL yang diberikan oleh Ngrok/Cloudflare\n\n### Opsi B: Nginx Reverse Proxy (untuk setup yang lebih advanced)\n1. **aaPanel → Website → [localhost] → Config**\n2. **Replace configuration:**\n\n```nginx\nserver {\n    listen 80;\n    server_name localhost 127.0.0.1 YOUR_LOCAL_IP;\n    \n    # Basic security headers\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    \n    # Allow all origins for local development\n    add_header Access-Control-Allow-Origin *;\n    \n    # Proxy to Node.js application\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n    \n    # Static files caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires 1d;\n        add_header Cache-Control \"public\";\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n}\n```\n\n### Restart Nginx\n```bash\n# Via aaPanel\naaPanel → Service → Nginx → Restart\n\n# Via command line\nsudo systemctl restart nginx\n```\n\n## 8. Setup Database dan Initial Configuration\n\n### Akses Aplikasi Online\nPilih salah satu metode akses:\n\n**Ngrok:**\n```bash\n# Start tunnel\nngrok http 3000\n# Akses via URL yang diberikan: https://abc123.ngrok.io\n\n# PENTING: Update environment variable dengan URL ngrok\n# Edit file .env dan tambahkan:\n# PUBLIC_URL=https://abc123.ngrok.io\n# Kemudian restart aplikasi dengan: pm2 restart laptoppos\n```\n\n**Cloudflare Tunnel:**\n```bash\n# Run tunnel\ncloudflared tunnel run laptoppos\n# Akses via: https://laptoppos-subdomain.your-domain.workers.dev\n```\n\n**ServEO:**\n```bash\n# SSH tunnel\nssh -R 80:localhost:3000 serveo.net\n# Akses via: https://laptoppos.serveo.net\n```\n\n**Port Forwarding:**\n```\n# Akses via: http://YOUR_PUBLIC_IP:8080\n```\n\n### Run Initial Setup\n1. **Akses aplikasi** melalui URL tunnel yang dipilih\n2. **Akan muncul Setup Wizard**\n3. **Ikuti langkah-langkah:**\n   - Database migration\n   - Store configuration  \n   - Admin user creation\n   - Complete setup\n\n### Manual Database Setup (jika diperlukan)\n```bash\ncd /www/wwwroot/laptoppos\n\n# Force database migration\nnpm run db:push --force\n\n# Seed initial data (optional)\nnpm run seed\n```\n\n## 9. Monitoring dan Maintenance\n\n### Setup Monitoring\n```bash\n# Install monitoring tools\nnpm install -g pm2-logrotate\n\n# Setup log rotation\npm2 install pm2-logrotate\n```\n\n### Regular Maintenance Tasks\n```bash\n# Update application\ncd /www/wwwroot/laptoppos\ngit pull origin main\nnpm install\nnpm run build\npm2 restart laptoppos\n\n# Database backup\npg_dump -h localhost -U laptoppos_user laptoppos > backup_$(date +%Y%m%d).sql\n\n# View logs\npm2 logs laptoppos\n\n# Monitor processes\npm2 monit\n```\n\n## 10. Security Hardening\n\n### Firewall Configuration\n```bash\n# Ubuntu UFW\nsudo ufw allow 22/tcp     # SSH\nsudo ufw allow 3000/tcp   # Application port\nsudo ufw allow 8888/tcp   # aaPanel\nsudo ufw allow 80/tcp     # HTTP (optional)\nsudo ufw allow 443/tcp    # HTTPS (optional)\nsudo ufw enable\n\n# CentOS Firewalld\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-port=8888/tcp\nsudo firewall-cmd --permanent --add-service=http    # optional\nsudo firewall-cmd --permanent --add-service=https   # optional\nsudo firewall-cmd --reload\n```\n\n### Database Security\n1. **Restrict PostgreSQL connections**\n2. **Use strong passwords**\n3. **Regular backups**\n4. **Monitor access logs**\n\n### Application Security\n1. **Keep dependencies updated**\n2. **Regular security scans**\n3. **Monitor error logs**\n4. **Implement rate limiting**\n\n## 11. Troubleshooting\n\n### Common Issues\n\n**Application tidak start:**\n```bash\n# Check PM2 status\npm2 status\n\n# Check logs\npm2 logs laptoppos\n\n# Restart application\npm2 restart laptoppos\n```\n\n**Database connection error:**\n```bash\n# Check PostgreSQL status\nsudo systemctl status postgresql\n\n# Test connection\npsql -h localhost -U laptoppos_user -d laptoppos\n```\n\n**Nginx errors:**\n```bash\n# Check Nginx status\nsudo systemctl status nginx\n\n# Test configuration\nsudo nginx -t\n\n# Check error logs\nsudo tail -f /var/log/nginx/error.log\n```\n\n### Performance Optimization\n\n**Enable Gzip compression:**\n```nginx\n# Add to Nginx config\ngzip on;\ngzip_vary on;\ngzip_min_length 1024;\ngzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n```\n\n**Database optimization:**\n```sql\n-- Regular maintenance\nVACUUM ANALYZE;\nREINDEX DATABASE laptoppos;\n```\n\n## 12. Opsi Akses Online Tambahan\n\n### Free Dynamic DNS Services\nJika ingin domain gratis untuk akses yang lebih stabil:\n\n**NoIP.com:**\n```bash\n# Install NoIP client\nwget http://www.noip.com/client/linux/noip-duc-linux.tar.gz\ntar xzf noip-duc-linux.tar.gz\ncd noip-2.1.9-1/\nsudo make install\n\n# Configure\nsudo /usr/local/bin/noip2 -C\n# Start service\nsudo /usr/local/bin/noip2\n```\n\n**DuckDNS.org:**\n```bash\n# Create update script\necho 'echo url=\"https://www.duckdns.org/update?domains=YOUR_SUBDOMAIN&token=YOUR_TOKEN&ip=\" | curl -k -o ~/duckdns/duck.log -K -' > ~/duckdns/duck.sh\nchmod 700 ~/duckdns/duck.sh\n\n# Add to crontab\n*/5 * * * * ~/duckdns/duck.sh >/dev/null 2>&1\n```\n\n### VPS Gratis untuk Testing\n**Oracle Cloud Always Free:**\n- 2 VM instances\n- 1/8 OCPU dan 1GB RAM each\n- 10GB storage\n- Gratis selamanya\n\n**Google Cloud Platform:**\n- $300 credit untuk 90 hari\n- Always Free tier tersedia\n- e2-micro instance gratis\n\n**AWS Free Tier:**\n- t2.micro instance\n- 750 jam per bulan\n- 12 bulan gratis\n\n### Setup dengan VPS Gratis\n1. **Daftar VPS gratis**\n2. **Install Ubuntu 20.04**\n3. **Ikuti panduan instalasi ini**\n4. **Gunakan IP publik VPS**\n5. **Setup domain gratis (opsional)**\n\n## 13. Backup Strategy\n\n### Automated Backup Script\n```bash\n#!/bin/bash\n# /etc/cron.daily/laptoppos-backup\n\nBACKUP_DIR=\"/backup/laptoppos\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Database backup\npg_dump -h localhost -U laptoppos_user laptoppos > $BACKUP_DIR/db_$DATE.sql\n\n# Application files backup\ntar -czf $BACKUP_DIR/app_$DATE.tar.gz /www/wwwroot/laptoppos\n\n# Keep only last 7 days\nfind $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\n\necho \"Backup completed: $DATE\"\n```\n\n### Make script executable\n```bash\nsudo chmod +x /etc/cron.daily/laptoppos-backup\n```\n\n## Support dan Dokumentasi\n\n- **Application Documentation**: Tersedia di `/docs` setelah instalasi\n- **aaPanel Documentation**: https://www.aapanel.com/docs/\n- **PM2 Documentation**: https://pm2.keymetrics.io/docs/\n\n---\n\n**Instalasi selesai!** Aplikasi LaptopPOS sekarang dapat diakses melalui domain Anda dengan HTTPS dan running secara production-ready di Linux dengan aaPanel.","size_bytes":13082},"server/controllers/saasController.ts":{"content":"import { Request, Response } from 'express';\nimport { db } from '../db';\nimport { clients, subscriptions, payments, planFeatures } from '../../shared/saas-schema';\nimport { insertClientSchema, insertSubscriptionSchema } from '../../shared/saas-schema';\nimport { eq, and, desc, count } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { storage } from '../storage';\n\nexport class SaasController {\n  \n  // Client registration\n  static async registerClient(req: Request, res: Response) {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      \n      // Check if subdomain is available\n      const existingClient = await db\n        .select()\n        .from(clients)\n        .where(eq(clients.subdomain, validatedData.subdomain))\n        .limit(1);\n\n      if (existingClient.length > 0) {\n        return res.status(400).json({\n          error: 'Subdomain not available',\n          message: 'This subdomain is already taken. Please choose another.'\n        });\n      }\n\n      // Check if email is already registered\n      const existingEmail = await db\n        .select()\n        .from(clients)\n        .where(eq(clients.email, validatedData.email))\n        .limit(1);\n\n      if (existingEmail.length > 0) {\n        return res.status(400).json({\n          error: 'Email already registered',\n          message: 'This email is already associated with another account.'\n        });\n      }\n\n      // Create client\n      const newClient = await db\n        .insert(clients)\n        .values({\n          ...validatedData,\n          status: 'trial'\n        })\n        .returning();\n\n      // Create trial subscription (7 days)\n      const trialEndDate = new Date();\n      trialEndDate.setDate(trialEndDate.getDate() + 7);\n\n      await db.insert(subscriptions).values({\n        clientId: newClient[0].id,\n        plan: 'basic',\n        startDate: new Date(),\n        endDate: trialEndDate,\n        paymentStatus: 'paid',\n        amount: 0,\n        currency: 'IDR',\n        autoRenew: false\n      });\n\n      // Create default admin user for the tenant\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      await storage.createUser({\n        id: `admin-${newClient[0].id}`,\n        clientId: newClient[0].id, // Add client_id to user\n        username: 'admin',\n        email: validatedData.email,\n        firstName: 'Admin',\n        lastName: 'User',\n        password: hashedPassword,\n        role: 'admin',\n        isActive: true\n      });\n\n      res.status(201).json({\n        success: true,\n        client: {\n          id: newClient[0].id,\n          name: newClient[0].name,\n          subdomain: newClient[0].subdomain,\n          status: newClient[0].status\n        },\n        message: 'Client registered successfully. You have 7 days of free trial.',\n        accessUrl: `http://${validatedData.subdomain}.laptoppos.com`\n      });\n\n    } catch (error) {\n      console.error('Client registration error:', error);\n      res.status(500).json({\n        error: 'Registration failed',\n        message: 'Unable to create client account. Please try again.'\n      });\n    }\n  }\n\n  // Get client info\n  static async getClientInfo(req: Request, res: Response) {\n    try {\n      if (!req.tenant) {\n        return res.status(400).json({ error: 'No tenant context' });\n      }\n\n      const clientInfo = await db\n        .select()\n        .from(clients)\n        .where(eq(clients.id, req.tenant.id))\n        .limit(1);\n\n      if (!clientInfo.length) {\n        return res.status(404).json({ error: 'Client not found' });\n      }\n\n      // Get active subscription\n      const subscription = await db\n        .select()\n        .from(subscriptions)\n        .where(eq(subscriptions.clientId, req.tenant.id))\n        .orderBy(desc(subscriptions.createdAt))\n        .limit(1);\n\n      res.json({\n        client: clientInfo[0],\n        subscription: subscription[0] || null\n      });\n\n    } catch (error) {\n      console.error('Get client info error:', error);\n      res.status(500).json({ error: 'Unable to fetch client information' });\n    }\n  }\n\n  // Create subscription\n  static async createSubscription(req: Request, res: Response) {\n    try {\n      if (!req.tenant) {\n        return res.status(400).json({ error: 'No tenant context' });\n      }\n\n      const { plan, duration } = req.body; // duration in months\n\n      // Define pricing\n      const pricing = {\n        basic: { monthly: 99000, yearly: 990000 },\n        pro: { monthly: 199000, yearly: 1990000 },\n        premium: { monthly: 399000, yearly: 3990000 }\n      };\n\n      if (!pricing[plan as keyof typeof pricing]) {\n        return res.status(400).json({ error: 'Invalid plan' });\n      }\n\n      const isYearly = duration === 12;\n      const planPricing = pricing[plan as keyof typeof pricing];\n      const amount = isYearly ? planPricing.yearly : planPricing.monthly;\n\n      // Calculate dates\n      const startDate = new Date();\n      const endDate = new Date();\n      endDate.setMonth(endDate.getMonth() + duration);\n\n      // Create subscription\n      const newSubscription = await db\n        .insert(subscriptions)\n        .values({\n          clientId: req.tenant.id,\n          plan,\n          startDate,\n          endDate,\n          paymentStatus: 'pending',\n          amount,\n          currency: 'IDR',\n          autoRenew: true\n        })\n        .returning();\n\n      res.status(201).json({\n        success: true,\n        subscription: newSubscription[0],\n        paymentUrl: `/payment?subscription=${newSubscription[0].id}`,\n        message: 'Subscription created. Please complete payment to activate.'\n      });\n\n    } catch (error) {\n      console.error('Create subscription error:', error);\n      res.status(500).json({ error: 'Unable to create subscription' });\n    }\n  }\n\n  // Mock payment endpoint\n  static async processPayment(req: Request, res: Response) {\n    try {\n      const { subscriptionId, paymentMethod = 'bank_transfer' } = req.body;\n\n      // Get subscription\n      const subscription = await db\n        .select()\n        .from(subscriptions)\n        .where(eq(subscriptions.id, subscriptionId))\n        .limit(1);\n\n      if (!subscription.length) {\n        return res.status(404).json({ error: 'Subscription not found' });\n      }\n\n      const sub = subscription[0];\n\n      // Create payment record\n      const payment = await db\n        .insert(payments)\n        .values({\n          subscriptionId: sub.id,\n          clientId: sub.clientId,\n          amount: sub.amount,\n          currency: sub.currency,\n          status: 'paid', // Mock payment always succeeds\n          paymentMethod,\n          transactionId: `mock_${Date.now()}`,\n          paidAt: new Date()\n        })\n        .returning();\n\n      // Update subscription status\n      await db\n        .update(subscriptions)\n        .set({ \n          paymentStatus: 'paid',\n          updatedAt: new Date()\n        })\n        .where(eq(subscriptions.id, sub.id));\n\n      // Update client status to active\n      await db\n        .update(clients)\n        .set({ \n          status: 'active',\n          updatedAt: new Date()\n        })\n        .where(eq(clients.id, sub.clientId));\n\n      res.json({\n        success: true,\n        payment: payment[0],\n        message: 'Payment processed successfully. Your subscription is now active!'\n      });\n\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      res.status(500).json({ error: 'Payment processing failed' });\n    }\n  }\n\n  // Get subscription plans\n  static async getPlans(req: Request, res: Response) {\n    try {\n      const plans = await db\n        .select()\n        .from(planFeatures)\n        .orderBy(planFeatures.plan);\n\n      // Group features by plan\n      const planData = {\n        basic: {\n          name: 'Basic',\n          price: { monthly: 99000, yearly: 990000 },\n          features: plans.filter(p => p.plan === 'basic')\n        },\n        pro: {\n          name: 'Pro', \n          price: { monthly: 199000, yearly: 1990000 },\n          features: plans.filter(p => p.plan === 'pro')\n        },\n        premium: {\n          name: 'Premium',\n          price: { monthly: 399000, yearly: 3990000 },\n          features: plans.filter(p => p.plan === 'premium')\n        }\n      };\n\n      res.json({ plans: planData });\n\n    } catch (error) {\n      console.error('Get plans error:', error);\n      res.status(500).json({ error: 'Unable to fetch plans' });\n    }\n  }\n\n  // Super Admin: Get all clients\n  static async getAllClients(req: Request, res: Response) {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const offset = (page - 1) * limit;\n\n      const allClients = await db\n        .select()\n        .from(clients)\n        .limit(limit)\n        .offset(offset)\n        .orderBy(desc(clients.createdAt));\n\n      const totalClients = await db\n        .select({ count: count() })\n        .from(clients);\n\n      res.json({\n        clients: allClients,\n        pagination: {\n          page,\n          limit,\n          total: totalClients[0].count,\n          pages: Math.ceil(totalClients[0].count / limit)\n        }\n      });\n\n    } catch (error) {\n      console.error('Get all clients error:', error);\n      res.status(500).json({ error: 'Unable to fetch clients' });\n    }\n  }\n\n  // Super Admin: Update client status\n  static async updateClientStatus(req: Request, res: Response) {\n    try {\n      const { clientId } = req.params;\n      const { status } = req.body;\n\n      if (!['active', 'suspended', 'expired', 'trial'].includes(status)) {\n        return res.status(400).json({ error: 'Invalid status' });\n      }\n\n      await db\n        .update(clients)\n        .set({ \n          status,\n          updatedAt: new Date()\n        })\n        .where(eq(clients.id, clientId));\n\n      res.json({\n        success: true,\n        message: `Client status updated to ${status}`\n      });\n\n    } catch (error) {\n      console.error('Update client status error:', error);\n      res.status(500).json({ error: 'Unable to update client status' });\n    }\n  }\n\n  // Super Admin: Get dashboard stats\n  static async getDashboardStats(req: Request, res: Response) {\n    try {\n      const totalClients = await db\n        .select({ count: count() })\n        .from(clients);\n\n      const activeClients = await db\n        .select({ count: count() })\n        .from(clients)\n        .where(eq(clients.status, 'active'));\n\n      const trialClients = await db\n        .select({ count: count() })\n        .from(clients)\n        .where(eq(clients.status, 'trial'));\n\n      const totalRevenue = await db\n        .select()\n        .from(payments)\n        .where(eq(payments.status, 'paid'));\n\n      const revenue = totalRevenue.reduce((sum, payment) => sum + payment.amount, 0);\n\n      res.json({\n        stats: {\n          totalClients: totalClients[0].count,\n          activeClients: activeClients[0].count,\n          trialClients: trialClients[0].count,\n          suspendedClients: totalClients[0].count - activeClients[0].count - trialClients[0].count,\n          totalRevenue: revenue,\n          avgRevenuePerClient: activeClients[0].count > 0 ? revenue / activeClients[0].count : 0\n        }\n      });\n\n    } catch (error) {\n      console.error('Get dashboard stats error:', error);\n      res.status(500).json({ error: 'Unable to fetch dashboard stats' });\n    }\n  }\n}","size_bytes":11383},"server/middleware/tenant.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { db } from '../db';\nimport { clients, subscriptions } from '../../shared/saas-schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Extend Express Request to include tenant info\ndeclare global {\n  namespace Express {\n    interface Request {\n      tenant?: {\n        id: string;\n        subdomain: string;\n        name: string;\n        status: string;\n        subscription?: any;\n        settings?: any;\n      };\n      isSuperAdmin?: boolean;\n    }\n  }\n}\n\n// Middleware to detect tenant from subdomain\nexport const tenantMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const host = req.headers.host || '';\n    console.log('Host header:', host);\n    \n    // IMMEDIATE CHECK: In development, if accessing admin routes, grant super admin access\n    if ((host.includes('.replit.dev') || host.includes('.replit.app') || host.includes('localhost')) && req.path.startsWith('/api/admin')) {\n      console.log('Development admin route detected, granting super admin access');\n      req.isSuperAdmin = true;\n      return next();\n    }\n    \n    // Extract subdomain\n    let subdomain = '';\n    \n    // Handle different environments\n    if (host.includes('localhost') || host.includes('127.0.0.1')) {\n      // Development: check for subdomain in query param or header, skip tenant detection if not specified\n      subdomain = req.query.tenant as string || req.headers['x-tenant'] as string;\n      \n      // If no tenant specified in localhost, skip tenant middleware entirely\n      if (!subdomain) {\n        console.log('Localhost development: No tenant specified, skipping tenant middleware');\n        return next();\n      }\n    } else if (host.includes('.ngrok.io') || host.includes('.ngrok-free.app')) {\n      // Ngrok: Use query param or header for tenant\n      subdomain = req.query.tenant as string || req.headers['x-tenant'] as string || 'demo';\n    } else if (host.includes('.replit.dev') || host.includes('.replit.app')) {\n      // Replit development environment: Use query param or header, or skip tenant detection\n      subdomain = req.query.tenant as string || req.headers['x-tenant'] as string;\n      \n      // If no tenant specified in Replit, skip tenant middleware entirely\n      if (!subdomain) {\n        console.log('Replit development: No tenant specified, skipping tenant middleware');\n        return next();\n      }\n    } else {\n      // Production: extract subdomain from domain\n      const parts = host.split('.');\n      \n      // Handle known base domains correctly\n      const knownBaseDomains = ['profesionalservis.my.id'];\n      const isKnownBaseDomain = knownBaseDomains.some(baseDomain => host === baseDomain || host === `www.${baseDomain}`);\n      \n      if (isKnownBaseDomain) {\n        // This is the main domain, not a subdomain\n        subdomain = 'main';\n      } else if (parts.length >= 4) {\n        // Real subdomain: subdomain.profesionalservis.my.id\n        subdomain = parts[0];\n      } else if (parts.length === 3) {\n        // Could be subdomain.domain.com or domain.co.id\n        // Check if it matches our base domain pattern\n        const possibleBaseDomain = parts.slice(1).join('.');\n        if (knownBaseDomains.includes(possibleBaseDomain)) {\n          subdomain = parts[0]; // Real subdomain like client.profesionalservis.my.id\n        } else {\n          subdomain = 'main'; // Main domain like domain.co.id\n        }\n      } else {\n        // Main domain - might be super admin or landing page\n        subdomain = 'main';\n      }\n    }\n\n    console.log('Detected subdomain:', subdomain);\n\n    // Special handling for super admin routes\n    if (subdomain === 'admin' || subdomain === 'main' || req.path.startsWith('/api/admin')) {\n      req.isSuperAdmin = true;\n      return next();\n    }\n\n    // Skip tenant detection for certain routes and original app routes\n    const skipRoutes = [\n      '/api/auth', \n      '/api/health', \n      '/api/saas/register', \n      '/api/saas/plans', \n      '/api/saas/payment', \n      '/api/payment-webhook',\n      '/api/users',\n      '/api/customers',\n      '/api/products',\n      '/api/transactions',\n      '/api/service-tickets',\n      '/api/suppliers',\n      '/api/reports',\n      '/api/financial',\n      '/api/whatsapp'\n    ];\n    \n    // Setup routes are only for super admins - require proper tenant detection\n    const superAdminOnlyRoutes = ['/api/setup', '/api/admin'];\n    \n    if (superAdminOnlyRoutes.some(route => req.path.startsWith(route))) {\n      // Setup routes require super admin access\n      if (subdomain !== 'admin' && subdomain !== 'main' && !req.path.startsWith('/api/admin')) {\n        return res.status(403).json({ \n          error: 'Access denied',\n          message: 'Setup dan admin panel hanya dapat diakses oleh super admin.'\n        });\n      }\n      req.isSuperAdmin = true;\n      return next();\n    }\n    \n    if (skipRoutes.some(route => req.path.startsWith(route))) {\n      return next();\n    }\n\n    // Find client by subdomain\n    const client = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.subdomain, subdomain))\n      .limit(1);\n\n    if (!client.length) {\n      return res.status(404).json({ \n        error: 'Tenant not found',\n        subdomain,\n        message: 'This subdomain is not registered or has been suspended.'\n      });\n    }\n\n    const clientData = client[0];\n\n    // Check client status\n    if (clientData.status === 'suspended') {\n      return res.status(403).json({ \n        error: 'Account suspended',\n        message: 'This account has been suspended. Please contact support.'\n      });\n    }\n\n    if (clientData.status === 'expired') {\n      return res.status(402).json({ \n        error: 'Subscription expired',\n        message: 'Your subscription has expired. Please renew to continue using the service.',\n        renewUrl: `/renew?client=${clientData.id}`\n      });\n    }\n\n    // Get active subscription\n    const subscription = await db\n      .select()\n      .from(subscriptions)\n      .where(\n        and(\n          eq(subscriptions.clientId, clientData.id),\n          eq(subscriptions.paymentStatus, 'paid')\n        )\n      )\n      .orderBy(subscriptions.endDate)\n      .limit(1);\n\n    // Check subscription expiry\n    if (subscription.length && subscription[0].endDate < new Date()) {\n      // Update client status to expired\n      await db\n        .update(clients)\n        .set({ \n          status: 'expired',\n          updatedAt: new Date()\n        })\n        .where(eq(clients.id, clientData.id));\n\n      return res.status(402).json({ \n        error: 'Subscription expired',\n        message: 'Your subscription has expired. Please renew to continue using the service.',\n        renewUrl: `/renew?client=${clientData.id}`\n      });\n    }\n\n    // Parse settings\n    let settings = {};\n    try {\n      settings = clientData.settings ? JSON.parse(clientData.settings) : {};\n    } catch (e) {\n      console.error('Error parsing client settings:', e);\n    }\n\n    // Attach tenant info to request\n    req.tenant = {\n      id: clientData.id,\n      subdomain: clientData.subdomain,\n      name: clientData.name,\n      status: clientData.status,\n      subscription: subscription[0] || null,\n      settings\n    };\n\n    console.log('Tenant loaded:', req.tenant.name, req.tenant.subdomain);\n    next();\n\n  } catch (error) {\n    console.error('Tenant middleware error:', error);\n    res.status(500).json({ \n      error: 'Tenant detection failed',\n      message: 'Unable to determine tenant. Please try again.'\n    });\n  }\n};\n\n// Middleware to require valid tenant\nexport const requireTenant = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.tenant && !req.isSuperAdmin) {\n    return res.status(400).json({ \n      error: 'No tenant context',\n      message: 'This operation requires a valid tenant context.'\n    });\n  }\n  next();\n};\n\n// Middleware to require super admin access\nexport const requireSuperAdmin = (req: Request, res: Response, next: NextFunction) => {\n  console.log('RequireSuperAdmin middleware check:', { \n    isSuperAdmin: req.isSuperAdmin, \n    path: req.path,\n    host: req.headers.host \n  });\n  if (!req.isSuperAdmin) {\n    console.log('Access denied - not super admin');\n    return res.status(403).json({ \n      error: 'Super admin required',\n      message: 'This operation requires super admin privileges.'\n    });\n  }\n  console.log('Super admin access granted');\n  next();\n};\n\n// Middleware to check subscription limits and feature access\nexport const checkSubscriptionLimits = (feature: string) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (req.isSuperAdmin) {\n      return next(); // Super admin bypasses limits\n    }\n\n    if (!req.tenant?.subscription) {\n      return res.status(402).json({\n        error: 'No active subscription',\n        message: 'An active subscription is required for this feature.'\n      });\n    }\n\n    try {\n      // Get the subscription plan and check if feature is enabled\n      const subscription = req.tenant.subscription;\n      \n      // If subscription is expired\n      if (subscription.endDate && new Date(subscription.endDate) < new Date()) {\n        return res.status(402).json({\n          error: 'Subscription expired',\n          message: 'Your subscription has expired. Please renew to continue using this feature.'\n        });\n      }\n\n      // Check if feature is enabled in the plan\n      if (subscription.plan?.features) {\n        const planFeatures = JSON.parse(subscription.plan.features);\n        \n        if (!planFeatures.includes(feature)) {\n          return res.status(403).json({\n            error: 'Feature not available',\n            message: `The '${feature}' feature is not available in your current plan. Please upgrade to access this feature.`,\n            requiredFeature: feature,\n            currentPlan: subscription.planName\n          });\n        }\n      }\n\n      // Check usage limits if applicable\n      if (subscription.plan?.limits) {\n        const planLimits = JSON.parse(subscription.plan.limits);\n        \n        // Example: Check user count limit\n        if (feature === 'users' && planLimits.maxUsers) {\n          // This would require a query to count current users\n          // For now, we'll pass through but this can be extended\n        }\n        \n        // Example: Check transaction limits\n        if (feature === 'pos' && planLimits.maxTransactionsPerMonth) {\n          // This would require checking current month's transactions\n          // For now, we'll pass through but this can be extended\n        }\n      }\n\n      next();\n    } catch (error) {\n      console.error('Error checking subscription limits:', error);\n      res.status(500).json({\n        error: 'Subscription check failed',\n        message: 'Unable to verify subscription status.'\n      });\n    }\n  };\n};\n\n// Middleware to check specific feature access\nexport const requireFeature = (featureName: string) => {\n  return checkSubscriptionLimits(featureName);\n};\n\n// Helper function to check if a client has access to a feature\nexport const hasFeatureAccess = async (clientId: string, feature: string): Promise<boolean> => {\n  try {\n    // Import here to avoid circular dependencies\n    const { db } = await import('../db');\n    const { clients, subscriptions, plans } = await import('../../shared/saas-schema');\n    const { eq, and } = await import('drizzle-orm');\n    \n    const result = await db\n      .select({\n        planFeatures: plans.features,\n        subscriptionEnd: subscriptions.endDate\n      })\n      .from(clients)\n      .leftJoin(subscriptions, and(\n        eq(subscriptions.clientId, clients.id),\n        eq(subscriptions.paymentStatus, 'paid')\n      ))\n      .leftJoin(plans, eq(plans.id, subscriptions.planId))\n      .where(eq(clients.id, clientId))\n      .limit(1);\n\n    if (!result.length || !result[0].planFeatures) {\n      return false; // No active subscription or plan\n    }\n\n    // Check if subscription is still active\n    if (result[0].subscriptionEnd && new Date(result[0].subscriptionEnd) < new Date()) {\n      return false; // Subscription expired\n    }\n\n    const planFeatures = JSON.parse(result[0].planFeatures);\n    return planFeatures.includes(feature);\n  } catch (error) {\n    console.error('Error checking feature access:', error);\n    return false;\n  }\n};","size_bytes":12364},"server/routes/admin.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { db } from '../db';\nimport { clients, subscriptions, plans } from '../../shared/saas-schema';\nimport { users } from '../../shared/schema';\nimport { eq, count, and, desc, gte, lt, sql } from 'drizzle-orm';\nimport type { Request, Response, NextFunction } from 'express';\n\n// Local super admin check since these routes bypass tenant middleware\nconst requireSuperAdmin = (req: Request, res: Response, next: NextFunction) => {\n  // In development, always allow admin access\n  if (process.env.NODE_ENV === 'development') {\n    req.isSuperAdmin = true;\n    console.log('Development mode: Granting super admin access');\n    return next();\n  }\n  \n  // In production, check for proper super admin status\n  if (!req.isSuperAdmin) {\n    return res.status(403).json({ \n      error: 'Super admin required',\n      message: 'This operation requires super admin privileges.'\n    });\n  }\n  next();\n};\n\nconst router = Router();\n\n// All admin routes require super admin access\nrouter.use(requireSuperAdmin);\n\n// Dashboard stats\nrouter.get('/stats', async (req, res) => {\n  try {\n    // Total clients\n    const [totalClientsResult] = await db\n      .select({ count: count() })\n      .from(clients);\n    const totalClients = totalClientsResult.count;\n\n    // Active clients\n    const [activeClientsResult] = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(eq(clients.status, 'active'));\n    const activeClients = activeClientsResult.count;\n\n    // New clients this month\n    const firstDayOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n    const [newClientsResult] = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(gte(clients.createdAt, firstDayOfMonth));\n    const newClientsThisMonth = newClientsResult.count;\n\n    // Monthly revenue (mock for now)\n    const monthlyRevenue = activeClients * 299000; // Assuming average 299k per month\n\n    // Expiring trials (trials ending in next 7 days)\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    const [expiringTrialsResult] = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(\n        and(\n          eq(clients.status, 'trial'),\n          lt(clients.trialEndsAt, nextWeek)\n        )\n      );\n    const expiringTrials = expiringTrialsResult.count;\n\n    res.json({\n      totalClients,\n      activeClients,\n      newClientsThisMonth,\n      monthlyRevenue,\n      revenueGrowth: 15, // Mock growth percentage\n      expiringTrials\n    });\n  } catch (error) {\n    console.error('Error fetching admin stats:', error);\n    res.status(500).json({ message: 'Failed to fetch dashboard stats' });\n  }\n});\n\n// Get all clients with their subscriptions\nrouter.get('/clients', async (req, res) => {\n  try {\n    const clientsWithSubscriptions = await db\n      .select({\n        id: clients.id,\n        name: clients.name,\n        subdomain: clients.subdomain,\n        email: clients.email,\n        status: clients.status,\n        createdAt: clients.createdAt,\n        subscription: {\n          id: subscriptions.id,\n          planName: subscriptions.planName,\n          paymentStatus: subscriptions.paymentStatus,\n          startDate: subscriptions.startDate,\n          endDate: subscriptions.endDate,\n          amount: subscriptions.amount\n        }\n      })\n      .from(clients)\n      .leftJoin(\n        subscriptions, \n        and(\n          eq(subscriptions.clientId, clients.id),\n          eq(subscriptions.paymentStatus, 'paid')\n        )\n      )\n      .orderBy(desc(clients.createdAt));\n\n    res.json(clientsWithSubscriptions);\n  } catch (error) {\n    console.error('Error fetching clients:', error);\n    res.status(500).json({ message: 'Failed to fetch clients' });\n  }\n});\n\n// Create new client\nconst createClientSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  subdomain: z.string().min(1, 'Subdomain is required'),\n  email: z.string().email('Valid email is required'),\n  planId: z.string().min(1, 'Plan is required')\n});\n\nrouter.post('/clients', async (req, res) => {\n  try {\n    const { name, subdomain, email, planId } = createClientSchema.parse(req.body);\n\n    // Check if subdomain already exists\n    const [existingClient] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.subdomain, subdomain))\n      .limit(1);\n\n    if (existingClient) {\n      return res.status(400).json({ message: 'Subdomain already exists' });\n    }\n\n    // Get plan details\n    const [plan] = await db\n      .select()\n      .from(plans)\n      .where(eq(plans.id, planId))\n      .limit(1);\n\n    if (!plan) {\n      return res.status(400).json({ message: 'Plan not found' });\n    }\n\n    // Calculate trial end date (7 days from now)\n    const trialEndsAt = new Date();\n    trialEndsAt.setDate(trialEndsAt.getDate() + 7);\n\n    // Create client\n    const [newClient] = await db\n      .insert(clients)\n      .values({\n        name,\n        subdomain,\n        email,\n        status: 'trial',\n        trialEndsAt,\n        settings: JSON.stringify({\n          planId: plan.id,\n          planName: plan.name,\n          maxUsers: plan.limits?.maxUsers || 10,\n          maxStorage: plan.limits?.maxStorage || 1000\n        })\n      })\n      .returning();\n\n    // Create initial subscription record (pending payment)\n    await db\n      .insert(subscriptions)\n      .values({\n        clientId: newClient.id,\n        planId: plan.id,\n        planName: plan.name,\n        amount: plan.price.toString(),\n        paymentStatus: 'pending',\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now\n      });\n\n    res.json({\n      message: 'Client created successfully',\n      client: newClient\n    });\n  } catch (error) {\n    console.error('Error creating client:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error',\n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to create client' });\n  }\n});\n\n// Update client status\nrouter.patch('/clients/:id/status', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n\n    if (!['active', 'suspended', 'expired', 'trial'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid status' });\n    }\n\n    const [updatedClient] = await db\n      .update(clients)\n      .set({ \n        status,\n        updatedAt: new Date()\n      })\n      .where(eq(clients.id, id))\n      .returning();\n\n    if (!updatedClient) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    res.json({\n      message: 'Client status updated successfully',\n      client: updatedClient\n    });\n  } catch (error) {\n    console.error('Error updating client status:', error);\n    res.status(500).json({ message: 'Failed to update client status' });\n  }\n});\n\n// Get all subscription plans\nrouter.get('/plans', async (req, res) => {\n  try {\n    const allPlans = await db\n      .select()\n      .from(plans)\n      .where(eq(plans.isActive, true))\n      .orderBy(plans.price);\n\n    res.json(allPlans);\n  } catch (error) {\n    console.error('Error fetching plans:', error);\n    res.status(500).json({ message: 'Failed to fetch plans' });\n  }\n});\n\n// Update plan pricing and details\nconst updatePlanSchema = z.object({\n  name: z.string().min(1, 'Plan name is required').optional(),\n  description: z.string().optional(),\n  price: z.number().min(0, 'Price must be non-negative').optional(),\n  currency: z.string().optional(),\n  maxUsers: z.number().min(1, 'Max users must be at least 1').optional(),\n  maxTransactionsPerMonth: z.number().min(1, 'Max transactions must be at least 1').optional(),\n  maxStorageGB: z.number().min(1, 'Max storage must be at least 1GB').optional(),\n  whatsappIntegration: z.boolean().optional(),\n  customBranding: z.boolean().optional(),\n  apiAccess: z.boolean().optional(),\n  prioritySupport: z.boolean().optional(),\n  isActive: z.boolean().optional()\n});\n\nrouter.put('/plans/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const validatedData = updatePlanSchema.parse(req.body);\n\n    // Check if plan exists\n    const [existingPlan] = await db\n      .select()\n      .from(plans)\n      .where(eq(plans.id, id))\n      .limit(1);\n\n    if (!existingPlan) {\n      return res.status(404).json({ message: 'Plan not found' });\n    }\n\n    // Update plan\n    const [updatedPlan] = await db\n      .update(plans)\n      .set({\n        ...validatedData,\n        updatedAt: new Date()\n      })\n      .where(eq(plans.id, id))\n      .returning();\n\n    res.json({\n      message: 'Plan updated successfully',\n      plan: updatedPlan\n    });\n  } catch (error) {\n    console.error('Error updating plan:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to update plan' });\n  }\n});\n\n// IMPORTANT: Put specific routes BEFORE parameter routes to avoid conflicts\n// Move /clients/detailed from saas-complete.ts to here and put it BEFORE /clients/:id\n\n// Get all clients with detailed subscription info (moved from saas-complete.ts)\nrouter.get('/clients/detailed', async (req, res) => {\n  try {\n    const clientsData = await db\n      .select({\n        id: clients.id,\n        name: clients.name,\n        subdomain: clients.subdomain,\n        email: clients.email,\n        status: clients.status,\n        phone: clients.phone,\n        address: clients.address,\n        logo: clients.logo,\n        customDomain: clients.customDomain,\n        settings: clients.settings,\n        trialEndsAt: clients.trialEndsAt,\n        createdAt: clients.createdAt,\n        updatedAt: clients.updatedAt,\n        // Subscription info\n        subscriptionId: subscriptions.id,\n        planName: subscriptions.planName,\n        planAmount: subscriptions.amount,\n        subscriptionStatus: subscriptions.paymentStatus,\n        subscriptionStart: subscriptions.startDate,\n        subscriptionEnd: subscriptions.endDate,\n        autoRenew: subscriptions.autoRenew,\n        // User count\n        userCount: sql<number>`count(${users.id})`.as('user_count')\n      })\n      .from(clients)\n      .leftJoin(subscriptions, and(\n        eq(subscriptions.clientId, clients.id),\n        eq(subscriptions.paymentStatus, 'paid')\n      ))\n      .leftJoin(users, sql`${users.clientId}::uuid = ${clients.id}`)\n      .groupBy(\n        clients.id, \n        subscriptions.id,\n        subscriptions.planName,\n        subscriptions.amount,\n        subscriptions.paymentStatus,\n        subscriptions.startDate,\n        subscriptions.endDate,\n        subscriptions.autoRenew\n      )\n      .orderBy(desc(clients.createdAt));\n\n    res.json(clientsData);\n  } catch (error) {\n    console.error('Error fetching detailed clients:', error);\n    res.status(500).json({ message: 'Failed to fetch client details' });\n  }\n});\n\n// Get client details with subscription history (parameter route - must be AFTER specific routes)\nrouter.get('/clients/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, id))\n      .limit(1);\n\n    if (!client) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    // Get subscription history\n    const subscriptionHistory = await db\n      .select()\n      .from(subscriptions)\n      .where(eq(subscriptions.clientId, id))\n      .orderBy(desc(subscriptions.createdAt));\n\n    // Get user count for this client\n    const [userCount] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.clientId, id));\n\n    res.json({\n      ...client,\n      subscriptionHistory,\n      userCount: userCount.count\n    });\n  } catch (error) {\n    console.error('Error fetching client details:', error);\n    res.status(500).json({ message: 'Failed to fetch client details' });\n  }\n});\n\nexport default router;","size_bytes":12096},"server/routes/saas.ts":{"content":"import { Router } from 'express';\nimport { SaasController } from '../controllers/saasController';\nimport { tenantMiddleware, requireTenant, requireSuperAdmin, checkSubscriptionLimits } from '../middleware/tenant';\n\nconst router = Router();\n\n// Public routes (no authentication required)\nrouter.post('/register', SaasController.registerClient);\nrouter.get('/plans', SaasController.getPlans);\nrouter.post('/payment', SaasController.processPayment);\n\n// Tenant-specific routes (require valid tenant)\nrouter.get('/client/info', tenantMiddleware, requireTenant, SaasController.getClientInfo);\nrouter.post('/subscription', tenantMiddleware, requireTenant, SaasController.createSubscription);\n\n// Super Admin routes (require super admin privileges)\nrouter.get('/admin/clients', requireSuperAdmin, SaasController.getAllClients);\nrouter.put('/admin/clients/:clientId/status', requireSuperAdmin, SaasController.updateClientStatus);\nrouter.get('/admin/dashboard', requireSuperAdmin, SaasController.getDashboardStats);\n\n// Feature-limited routes examples\nrouter.post('/whatsapp/send', requireTenant, checkSubscriptionLimits('whatsapp'), (req, res) => {\n  res.json({ message: 'WhatsApp message sent (requires Pro plan or higher)' });\n});\n\nrouter.post('/api/export', requireTenant, checkSubscriptionLimits('export'), (req, res) => {\n  res.json({ message: 'Data exported (requires Premium plan)' });\n});\n\nexport default router;","size_bytes":1412},"server/storage/tenantStorage.ts":{"content":"import { DatabaseStorage } from '../storage';\nimport { Request } from 'express';\nimport { eq, and } from 'drizzle-orm';\nimport * as schema from '../../shared/schema';\n\n// Tenant-aware storage wrapper that adds client_id filtering to all operations\nexport class TenantStorage extends DatabaseStorage {\n  private clientId: string;\n\n  constructor(clientId: string) {\n    super();\n    this.clientId = clientId;\n  }\n\n  // Override user operations to include tenant filtering\n  async getUserByUsername(username: string) {\n    const users = await this.db\n      .select()\n      .from(schema.users)\n      .where(\n        and(\n          eq(schema.users.username, username),\n          eq(schema.users.clientId, this.clientId)\n        )\n      )\n      .limit(1);\n    \n    return users[0] || null;\n  }\n\n  async getUserById(id: string) {\n    const users = await this.db\n      .select()\n      .from(schema.users)\n      .where(\n        and(\n          eq(schema.users.id, id),\n          eq(schema.users.clientId, this.clientId)\n        )\n      )\n      .limit(1);\n    \n    return users[0] || null;\n  }\n\n  async createUser(data: any) {\n    return await this.db\n      .insert(schema.users)\n      .values({\n        ...data,\n        clientId: this.clientId\n      })\n      .returning();\n  }\n\n  async getUsers() {\n    return await this.db\n      .select()\n      .from(schema.users)\n      .where(eq(schema.users.clientId, this.clientId));\n  }\n\n  // Override product operations to include tenant filtering\n  async getProducts() {\n    return await this.db\n      .select()\n      .from(schema.products)\n      .where(eq(schema.products.clientId, this.clientId));\n  }\n\n  async getProductById(id: string) {\n    const products = await this.db\n      .select()\n      .from(schema.products)\n      .where(\n        and(\n          eq(schema.products.id, id),\n          eq(schema.products.clientId, this.clientId)\n        )\n      )\n      .limit(1);\n    \n    return products[0] || null;\n  }\n\n  async createProduct(data: any) {\n    return await this.db\n      .insert(schema.products)\n      .values({\n        ...data,\n        clientId: this.clientId\n      })\n      .returning();\n  }\n\n  // Override transaction operations to include tenant filtering\n  async getTransactions() {\n    return await this.db\n      .select()\n      .from(schema.transactions)\n      .where(eq(schema.transactions.clientId, this.clientId));\n  }\n\n  async createTransaction(data: any) {\n    return await this.db\n      .insert(schema.transactions)\n      .values({\n        ...data,\n        clientId: this.clientId\n      })\n      .returning();\n  }\n\n  // Override customer operations to include tenant filtering\n  async getCustomers() {\n    return await this.db\n      .select()\n      .from(schema.customers)\n      .where(eq(schema.customers.clientId, this.clientId));\n  }\n\n  async createCustomer(data: any) {\n    return await this.db\n      .insert(schema.customers)\n      .values({\n        ...data,\n        clientId: this.clientId\n      })\n      .returning();\n  }\n\n  // Override service operations to include tenant filtering\n  async getServiceTickets() {\n    return await this.db\n      .select()\n      .from(schema.serviceTickets)\n      .where(eq(schema.serviceTickets.clientId, this.clientId));\n  }\n\n  async createServiceTicket(data: any) {\n    return await this.db\n      .insert(schema.serviceTickets)\n      .values({\n        ...data,\n        clientId: this.clientId\n      })\n      .returning();\n  }\n\n  // Get store config (tenant-specific)\n  async getStoreConfig() {\n    const configs = await this.db\n      .select()\n      .from(schema.storeConfig)\n      .where(eq(schema.storeConfig.clientId, this.clientId))\n      .limit(1);\n    \n    return configs[0] || null;\n  }\n\n  async upsertStoreConfig(data: any) {\n    const existing = await this.getStoreConfig();\n    \n    if (existing) {\n      return await this.db\n        .update(schema.storeConfig)\n        .set({\n          ...data,\n          clientId: this.clientId,\n          updatedAt: new Date()\n        })\n        .where(eq(schema.storeConfig.id, existing.id))\n        .returning();\n    } else {\n      return await this.db\n        .insert(schema.storeConfig)\n        .values({\n          ...data,\n          clientId: this.clientId\n        })\n        .returning();\n    }\n  }\n}\n\n// Helper function to get tenant-aware storage from request\nexport function getTenantStorage(req: Request): TenantStorage {\n  if (!req.tenant?.id) {\n    throw new Error('No tenant context found in request');\n  }\n  return new TenantStorage(req.tenant.id);\n}","size_bytes":4509},"shared/saas-schema.ts":{"content":"import { pgTable, text, timestamp, integer, boolean, uuid, pgEnum } from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\n\n// Enums for SaaS system\nexport const clientStatusEnum = pgEnum('client_status', ['active', 'suspended', 'expired', 'trial']);\nexport const subscriptionPlanEnum = pgEnum('subscription_plan', ['basic', 'pro', 'premium']);\nexport const paymentStatusEnum = pgEnum('payment_status', ['pending', 'paid', 'failed', 'cancelled']);\n\n// Clients table - Each tenant/customer\nexport const clients = pgTable('clients', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  name: text('name').notNull(),\n  email: text('email').notNull().unique(),\n  subdomain: text('subdomain').notNull().unique(),\n  status: clientStatusEnum('status').notNull().default('trial'),\n  phone: text('phone'),\n  address: text('address'),\n  logo: text('logo'), // URL to logo\n  customDomain: text('custom_domain'), // Optional custom domain\n  settings: text('settings'), // JSON settings\n  trialEndsAt: timestamp('trial_ends_at'), // Trial end date\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Subscriptions table - Track client subscriptions\nexport const subscriptions = pgTable('subscriptions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  clientId: uuid('client_id').references(() => clients.id).notNull(),\n  planId: uuid('plan_id').references(() => plans.id),\n  planName: text('plan_name').notNull(),\n  plan: subscriptionPlanEnum('plan').notNull(),\n  startDate: timestamp('start_date').notNull(),\n  endDate: timestamp('end_date').notNull(),\n  paymentStatus: paymentStatusEnum('payment_status').notNull().default('pending'),\n  amount: text('amount').notNull(), // Amount as string to handle different currencies\n  currency: text('currency').notNull().default('IDR'),\n  autoRenew: boolean('auto_renew').notNull().default(true),\n  trialEndDate: timestamp('trial_end_date'),\n  cancelledAt: timestamp('cancelled_at'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Payments table - Track payment history\nexport const payments = pgTable('payments', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  subscriptionId: uuid('subscription_id').references(() => subscriptions.id).notNull(),\n  clientId: uuid('client_id').references(() => clients.id).notNull(),\n  amount: integer('amount').notNull(),\n  currency: text('currency').notNull().default('IDR'),\n  status: paymentStatusEnum('status').notNull().default('pending'),\n  paymentMethod: text('payment_method'), // bank_transfer, credit_card, etc\n  transactionId: text('transaction_id'), // External payment gateway transaction ID\n  gatewayResponse: text('gateway_response'), // JSON response from payment gateway\n  paidAt: timestamp('paid_at'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Subscription plans table - Define available plans\nexport const plans = pgTable('plans', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  name: text('name').notNull(),\n  description: text('description').notNull(),\n  price: integer('price').notNull(), // Price in cents/rupiah\n  currency: text('currency').notNull().default('IDR'),\n  billingPeriod: text('billing_period').notNull().default('monthly'), // monthly, yearly\n  isActive: boolean('is_active').notNull().default(true),\n  features: text('features'), // JSON array of features\n  limits: text('limits'), // JSON object with plan limits\n  maxUsers: integer('max_users').default(5),\n  maxTransactionsPerMonth: integer('max_transactions_per_month').default(1000),\n  maxStorageGB: integer('max_storage_gb').default(1),\n  whatsappIntegration: boolean('whatsapp_integration').default(false),\n  customBranding: boolean('custom_branding').default(false),\n  apiAccess: boolean('api_access').default(false),\n  prioritySupport: boolean('priority_support').default(false),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Plan features table - Define what each plan includes (legacy, keeping for compatibility)\nexport const planFeatures = pgTable('plan_features', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  plan: subscriptionPlanEnum('plan').notNull(),\n  featureName: text('feature_name').notNull(),\n  featureValue: text('feature_value'), // Can be boolean, number, or text\n  maxUsers: integer('max_users').default(5),\n  maxTransactionsPerMonth: integer('max_transactions_per_month').default(1000),\n  maxStorageGB: integer('max_storage_gb').default(1),\n  whatsappIntegration: boolean('whatsapp_integration').default(false),\n  customBranding: boolean('custom_branding').default(false),\n  apiAccess: boolean('api_access').default(false),\n  prioritySupport: boolean('priority_support').default(false),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Tenant-aware user sessions (for multi-tenant auth)\nexport const tenantSessions = pgTable('tenant_sessions', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  clientId: uuid('client_id').references(() => clients.id).notNull(),\n  userId: uuid('user_id').notNull(), // References users.id from main schema\n  sessionToken: text('session_token').notNull().unique(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Audit log for SaaS operations\nexport const saasAuditLog = pgTable('saas_audit_log', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  clientId: uuid('client_id').references(() => clients.id),\n  userId: uuid('user_id'), // Admin or user who performed action\n  action: text('action').notNull(), // create_client, update_subscription, etc\n  resourceType: text('resource_type').notNull(), // client, subscription, payment\n  resourceId: text('resource_id'),\n  details: text('details'), // JSON details of the action\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Zod schemas for validation\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPlanSchema = createInsertSchema(plans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Plan = typeof plans.$inferSelect;\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\nexport type PlanFeature = typeof planFeatures.$inferSelect;\nexport type TenantSession = typeof tenantSessions.$inferSelect;\nexport type SaasAuditLog = typeof saasAuditLog.$inferSelect;","size_bytes":7353},"update-domain.sh":{"content":"#!/bin/bash\n\n# Script untuk update domain di environment file\n# Usage: ./update-domain.sh https://your-ngrok-url.ngrok.io\n\nif [ -z \"$1\" ]; then\n    echo \"❌ Usage: ./update-domain.sh <URL>\"\n    echo \"   Example: ./update-domain.sh https://abc123.ngrok.io\"\n    exit 1\nfi\n\nNEW_URL=\"$1\"\nENV_FILE=\".env\"\n\necho \"🔧 Updating domain configuration...\"\n\n# Check if .env file exists\nif [ ! -f \"$ENV_FILE\" ]; then\n    echo \"❌ File .env tidak ditemukan di directory ini\"\n    exit 1\nfi\n\n# Remove old PUBLIC_URL entries\nsed -i '/^PUBLIC_URL=/d' \"$ENV_FILE\"\nsed -i '/^APP_URL=/d' \"$ENV_FILE\" \nsed -i '/^NGROK_URL=/d' \"$ENV_FILE\"\n\n# Add new PUBLIC_URL\necho \"\" >> \"$ENV_FILE\"\necho \"# Public URL - Updated $(date)\" >> \"$ENV_FILE\"\necho \"PUBLIC_URL=$NEW_URL\" >> \"$ENV_FILE\"\n\necho \"✅ Domain berhasil diupdate ke: $NEW_URL\"\n\n# Check if PM2 is running\nif command -v pm2 &> /dev/null; then\n    if pm2 list | grep -q \"laptoppos\"; then\n        echo \"🔄 Restarting aplikasi dengan PM2...\"\n        pm2 restart laptoppos\n        echo \"✅ Aplikasi berhasil direstart\"\n    else\n        echo \"⚠️  Aplikasi tidak berjalan di PM2\"\n        echo \"   Jalankan: pm2 start npm --name 'laptoppos' -- start\"\n    fi\nelse\n    echo \"⚠️  PM2 tidak terinstall\"\n    echo \"   Restart manual aplikasi jika sedang berjalan\"\nfi\n\necho \"\"\necho \"🎉 Setup selesai!\"\necho \"   Link cek status service sekarang akan menggunakan: $NEW_URL/service-status\"\necho \"\"","size_bytes":1423},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { formatDateShort } from '@shared/utils/timezone';\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Building2, \n  CreditCard, \n  TrendingUp, \n  Settings, \n  Eye,\n  UserPlus,\n  Trash2,\n  Edit,\n  CheckCircle,\n  XCircle,\n  Clock\n} from \"lucide-react\";\n\ninterface Client {\n  id: string;\n  name: string;\n  subdomain: string;\n  email: string;\n  status: 'active' | 'suspended' | 'expired' | 'trial';\n  createdAt: string;\n  trialEndsAt?: string;\n  subscription?: {\n    id: string;\n    planName: string;\n    paymentStatus: string;\n    startDate: string;\n    endDate: string;\n    amount: number;\n  };\n}\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  features: string[];\n  limits: any;\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n  const [createClientOpen, setCreateClientOpen] = useState(false);\n  const [newClient, setNewClient] = useState({\n    name: '',\n    subdomain: '',\n    email: '',\n    planId: ''\n  });\n\n  // Define stats interface with proper types\n  interface AdminStats {\n    totalClients?: number;\n    newClientsThisMonth?: number;\n    activeClients?: number;\n    monthlyRevenue?: number;\n    revenueGrowth?: number;\n    expiringTrials?: number;\n  }\n\n  // Fetch dashboard stats\n  const { data: stats } = useQuery<AdminStats>({\n    queryKey: ['/api/admin/stats'],\n  });\n\n  // Fetch all clients\n  const { data: clients, isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: ['/api/admin/clients'],\n  });\n\n  // Fetch subscription plans\n  const { data: plans } = useQuery<Plan[]>({\n    queryKey: ['/api/admin/plans'],\n  });\n\n  // Create client mutation\n  const createClientMutation = useMutation({\n    mutationFn: async (clientData: any) => {\n      return await apiRequest('POST', '/api/admin/clients', clientData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Client berhasil dibuat\",\n        description: \"Client baru telah ditambahkan ke sistem\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/clients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      setCreateClientOpen(false);\n      setNewClient({ name: '', subdomain: '', email: '', planId: '' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Gagal membuat client\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update client status mutation\n  const updateClientStatusMutation = useMutation({\n    mutationFn: async ({ clientId, status }: { clientId: string; status: string }) => {\n      return await apiRequest('PATCH', `/api/admin/clients/${clientId}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Status client berhasil diupdate\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/clients'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Gagal mengupdate status client\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active: { variant: \"default\" as const, label: \"Aktif\", icon: CheckCircle },\n      trial: { variant: \"secondary\" as const, label: \"Trial\", icon: Clock },\n      expired: { variant: \"destructive\" as const, label: \"Expired\", icon: XCircle },\n      suspended: { variant: \"outline\" as const, label: \"Suspended\", icon: XCircle }\n    };\n    \n    const config = variants[status as keyof typeof variants] || variants.active;\n    const Icon = config.icon;\n    \n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\n        <Icon className=\"h-3 w-3\" />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n            <p className=\"text-gray-600\">Kelola client dan langganan SaaS</p>\n          </div>\n          <Dialog open={createClientOpen} onOpenChange={setCreateClientOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-client\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Tambah Client\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Tambah Client Baru</DialogTitle>\n                <DialogDescription>\n                  Buat client baru dengan langganan\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"client-name\">Nama Client</Label>\n                  <Input\n                    id=\"client-name\"\n                    data-testid=\"input-client-name\"\n                    value={newClient.name}\n                    onChange={(e) => setNewClient(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"PT. Contoh Perusahaan\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"client-subdomain\">Subdomain</Label>\n                  <Input\n                    id=\"client-subdomain\"\n                    data-testid=\"input-client-subdomain\"\n                    value={newClient.subdomain}\n                    onChange={(e) => setNewClient(prev => ({ ...prev, subdomain: e.target.value }))}\n                    placeholder=\"contoh\"\n                  />\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Client akan mengakses di: {newClient.subdomain}.yourdomain.com\n                  </p>\n                </div>\n                <div>\n                  <Label htmlFor=\"client-email\">Email</Label>\n                  <Input\n                    id=\"client-email\"\n                    data-testid=\"input-client-email\"\n                    type=\"email\"\n                    value={newClient.email}\n                    onChange={(e) => setNewClient(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"admin@contoh.com\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"client-plan\">Paket Langganan</Label>\n                  <Select onValueChange={(value) => setNewClient(prev => ({ ...prev, planId: value }))}>\n                    <SelectTrigger data-testid=\"select-client-plan\">\n                      <SelectValue placeholder=\"Pilih paket\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {plans?.map((plan) => (\n                        <SelectItem key={plan.id} value={plan.id}>\n                          {plan.name} - Rp {plan.price.toLocaleString()}/bulan\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button \n                  data-testid=\"button-submit-client\"\n                  onClick={() => createClientMutation.mutate(newClient)}\n                  disabled={createClientMutation.isPending}\n                >\n                  {createClientMutation.isPending ? 'Membuat...' : 'Buat Client'}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Client</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-clients\">\n                {stats?.totalClients ?? 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                +{stats?.newClientsThisMonth ?? 0} bulan ini\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Client Aktif</CardTitle>\n              <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-active-clients\">\n                {stats?.activeClients ?? 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats?.activeClients && stats?.totalClients ? ((stats.activeClients / stats.totalClients) * 100).toFixed(1) : '0'}% dari total\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Revenue Bulan Ini</CardTitle>\n              <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-monthly-revenue\">\n                Rp {(stats?.monthlyRevenue ?? 0).toLocaleString()}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                +{stats?.revenueGrowth ?? 0}% dari bulan lalu\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Trial yang Berakhir</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-expiring-trials\">\n                {stats?.expiringTrials ?? 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                7 hari ke depan\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"clients\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"clients\">Client Management</TabsTrigger>\n            <TabsTrigger value=\"subscriptions\">Langganan</TabsTrigger>\n            <TabsTrigger value=\"plans\">Paket Langganan</TabsTrigger>\n            <TabsTrigger value=\"settings\">Pengaturan</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"clients\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Daftar Client</CardTitle>\n                <CardDescription>\n                  Kelola semua client dan status langganan mereka\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Subdomain</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Paket</TableHead>\n                      <TableHead>Terdaftar</TableHead>\n                      <TableHead>Aksi</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {clients?.map((client) => (\n                      <TableRow key={client.id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{client.name}</div>\n                            <div className=\"text-sm text-gray-500\">{client.email}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">\n                            {client.subdomain}\n                          </code>\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(client.status)}\n                        </TableCell>\n                        <TableCell>\n                          {client.subscription ? (\n                            <div>\n                              <div className=\"font-medium\">{client.subscription.planName}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                Rp {client.subscription.amount.toLocaleString()}/bulan\n                              </div>\n                            </div>\n                          ) : (\n                            <span className=\"text-gray-400\">No subscription</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {formatDateShort(client.createdAt)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              data-testid={`button-view-client-${client.id}`}\n                              onClick={() => setSelectedClient(client)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Select onValueChange={(status) => \n                              updateClientStatusMutation.mutate({ clientId: client.id, status })\n                            }>\n                              <SelectTrigger className=\"w-32\">\n                                <SelectValue placeholder=\"Status\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"active\">Aktifkan</SelectItem>\n                                <SelectItem value=\"suspended\">Suspend</SelectItem>\n                                <SelectItem value=\"expired\">Expire</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"subscriptions\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monitoring Langganan</CardTitle>\n                <CardDescription>\n                  Monitor status pembayaran dan perpanjangan langganan\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\">\n                  <CreditCard className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  Feature monitoring langganan akan ditambahkan di sini\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"plans\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Paket Langganan</CardTitle>\n                <CardDescription>\n                  Kelola paket dan harga langganan\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {plans?.map((plan) => (\n                    <Card key={plan.id} className=\"border-2\">\n                      <CardHeader>\n                        <CardTitle className=\"text-lg\">{plan.name}</CardTitle>\n                        <CardDescription>{plan.description}</CardDescription>\n                        <div className=\"text-2xl font-bold\">\n                          Rp {plan.price.toLocaleString()}\n                          <span className=\"text-sm font-normal text-gray-500\">/bulan</span>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <ul className=\"space-y-2 text-sm\">\n                          {(Array.isArray(plan.features) ? plan.features : JSON.parse(plan.features || '[]')).map((feature: string, index: number) => (\n                            <li key={index} className=\"flex items-center gap-2\">\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                              {feature}\n                            </li>\n                          ))}\n                        </ul>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pengaturan Sistem</CardTitle>\n                <CardDescription>\n                  Konfigurasi umum untuk sistem SaaS\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  Pengaturan sistem akan ditambahkan di sini\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":18702},"client/src/pages/client-onboarding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { \n  CheckCircle, \n  Circle, \n  Store, \n  User, \n  Settings, \n  ArrowRight, \n  Loader2,\n  Rocket,\n  Users,\n  Building2\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface OnboardingStatus {\n  completed: boolean;\n  currentStep: number;\n  clientInfo?: {\n    name: string;\n    subdomain: string;\n    planName: string;\n    trialEndsAt: string;\n  };\n}\n\nexport default function ClientOnboarding() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [onboardingData, setOnboardingData] = useState({\n    storeName: '',\n    storeAddress: '',\n    storePhone: '',\n    storeEmail: '',\n    adminUsername: '',\n    adminPassword: '',\n    adminEmail: '',\n    adminFirstName: '',\n    adminLastName: '',\n  });\n\n  // Check onboarding status\n  const { data: onboardingStatus, isLoading } = useQuery<OnboardingStatus>({\n    queryKey: ['/api/client/onboarding/status'],\n    refetchInterval: false,\n  });\n\n  useEffect(() => {\n    // Redirect if onboarding is already completed\n    if (onboardingStatus?.completed) {\n      toast({\n        title: \"Setup Selesai\",\n        description: \"Aplikasi sudah siap digunakan. Mengarahkan ke dashboard...\",\n      });\n      setTimeout(() => setLocation('/dashboard'), 2000);\n    }\n  }, [onboardingStatus, setLocation, toast]);\n\n  // Store setup mutation\n  const storeSetupMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/client/onboarding/store', data);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Konfigurasi Toko Berhasil\",\n        description: \"Informasi toko telah disimpan\",\n      });\n      setCurrentStep(2);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Gagal Menyimpan Konfigurasi Toko\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Admin user creation mutation\n  const adminSetupMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/client/onboarding/admin', data);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Admin User Berhasil Dibuat\",\n        description: \"Account administrator telah dibuat\",\n      });\n      setCurrentStep(3);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Gagal Membuat Admin User\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete onboarding mutation\n  const completeOnboardingMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/client/onboarding/complete', {});\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Onboarding Selesai!\",\n        description: \"Selamat datang di LaptopPOS! Aplikasi siap digunakan.\",\n      });\n      setTimeout(() => setLocation('/dashboard'), 2000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Gagal Menyelesaikan Onboarding\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStoreSetup = () => {\n    const { storeName, storeAddress, storePhone, storeEmail } = onboardingData;\n    \n    if (!storeName) {\n      toast({\n        title: \"Data Tidak Lengkap\",\n        description: \"Nama toko harus diisi\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    storeSetupMutation.mutate({\n      name: storeName,\n      address: storeAddress,\n      phone: storePhone,\n      email: storeEmail,\n    });\n  };\n\n  const handleAdminSetup = () => {\n    const { adminUsername, adminPassword, adminEmail, adminFirstName, adminLastName } = onboardingData;\n    \n    if (!adminUsername || !adminPassword || !adminEmail) {\n      toast({\n        title: \"Data Tidak Lengkap\",\n        description: \"Username, password, dan email harus diisi\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    adminSetupMutation.mutate({\n      username: adminUsername,\n      password: adminPassword,\n      email: adminEmail,\n      firstName: adminFirstName,\n      lastName: adminLastName,\n    });\n  };\n\n  const getStepIcon = (step: number, currentStep: number) => {\n    if (step < currentStep) {\n      return <CheckCircle className=\"h-6 w-6 text-green-500\" />;\n    } else if (step === currentStep) {\n      return <Circle className=\"h-6 w-6 text-blue-500 fill-blue-500\" />;\n    } else {\n      return <Circle className=\"h-6 w-6 text-gray-300\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Memuat status onboarding...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Rocket className=\"h-8 w-8 text-blue-600 mr-2\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Selamat Datang!</h1>\n          </div>\n          <p className=\"text-gray-600 text-lg\">\n            Mari siapkan aplikasi LaptopPOS untuk {onboardingStatus?.clientInfo?.name}\n          </p>\n          {onboardingStatus?.clientInfo && (\n            <div className=\"mt-4 flex items-center justify-center gap-4 text-sm text-gray-500\">\n              <span className=\"flex items-center gap-1\">\n                <Building2 className=\"h-4 w-4\" />\n                {onboardingStatus.clientInfo.subdomain}.yourdomain.com\n              </span>\n              <span>•</span>\n              <span className=\"flex items-center gap-1\">\n                <Rocket className=\"h-4 w-4\" />\n                {onboardingStatus.clientInfo.planName}\n              </span>\n              <span>•</span>\n              <span>\n                Trial hingga {new Date(onboardingStatus.clientInfo.trialEndsAt).toLocaleDateString('id-ID')}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-8\">\n            <div className=\"flex items-center\">\n              {getStepIcon(1, currentStep)}\n              <span className={`ml-2 text-sm font-medium ${currentStep >= 1 ? 'text-gray-900' : 'text-gray-400'}`}>\n                Konfigurasi Toko\n              </span>\n            </div>\n            <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n            <div className=\"flex items-center\">\n              {getStepIcon(2, currentStep)}\n              <span className={`ml-2 text-sm font-medium ${currentStep >= 2 ? 'text-gray-900' : 'text-gray-400'}`}>\n                Admin User\n              </span>\n            </div>\n            <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n            <div className=\"flex items-center\">\n              {getStepIcon(3, currentStep)}\n              <span className={`ml-2 text-sm font-medium ${currentStep >= 3 ? 'text-gray-900' : 'text-gray-400'}`}>\n                Selesai\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <Progress value={(currentStep / 3) * 100} className=\"h-2\" />\n        </div>\n\n        {/* Step Content */}\n        <div className=\"space-y-6\">\n          {currentStep === 1 && (\n            <Card className=\"shadow-lg\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-4\">\n                  <Store className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <CardTitle>Konfigurasi Toko</CardTitle>\n                <CardDescription>\n                  Atur informasi dasar toko Anda\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"store-name\">Nama Toko *</Label>\n                    <Input\n                      id=\"store-name\"\n                      data-testid=\"input-store-name\"\n                      value={onboardingData.storeName}\n                      onChange={(e) => setOnboardingData(prev => ({ ...prev, storeName: e.target.value }))}\n                      placeholder=\"Nama toko Anda\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"store-email\">Email Toko</Label>\n                    <Input\n                      id=\"store-email\"\n                      data-testid=\"input-store-email\"\n                      type=\"email\"\n                      value={onboardingData.storeEmail}\n                      onChange={(e) => setOnboardingData(prev => ({ ...prev, storeEmail: e.target.value }))}\n                      placeholder=\"email@toko.com\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"store-address\">Alamat Toko</Label>\n                  <Input\n                    id=\"store-address\"\n                    data-testid=\"input-store-address\"\n                    value={onboardingData.storeAddress}\n                    onChange={(e) => setOnboardingData(prev => ({ ...prev, storeAddress: e.target.value }))}\n                    placeholder=\"Alamat lengkap toko\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"store-phone\">Nomor Telepon</Label>\n                  <Input\n                    id=\"store-phone\"\n                    data-testid=\"input-store-phone\"\n                    value={onboardingData.storePhone}\n                    onChange={(e) => setOnboardingData(prev => ({ ...prev, storePhone: e.target.value }))}\n                    placeholder=\"08123456789\"\n                  />\n                </div>\n                <Button \n                  data-testid=\"button-next-store\"\n                  onClick={handleStoreSetup}\n                  disabled={storeSetupMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {storeSetupMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Menyimpan...\n                    </>\n                  ) : (\n                    <>\n                      Lanjutkan\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {currentStep === 2 && (\n            <Card className=\"shadow-lg\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-4\">\n                  <User className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <CardTitle>Buat Admin User</CardTitle>\n                <CardDescription>\n                  Buat account administrator untuk mengelola sistem\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"admin-username\">Username *</Label>\n                    <Input\n                      id=\"admin-username\"\n                      data-testid=\"input-admin-username\"\n                      value={onboardingData.adminUsername}\n                      onChange={(e) => setOnboardingData(prev => ({ ...prev, adminUsername: e.target.value }))}\n                      placeholder=\"admin\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"admin-email\">Email *</Label>\n                    <Input\n                      id=\"admin-email\"\n                      data-testid=\"input-admin-email\"\n                      type=\"email\"\n                      value={onboardingData.adminEmail}\n                      onChange={(e) => setOnboardingData(prev => ({ ...prev, adminEmail: e.target.value }))}\n                      placeholder=\"admin@email.com\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"admin-password\">Password *</Label>\n                  <Input\n                    id=\"admin-password\"\n                    data-testid=\"input-admin-password\"\n                    type=\"password\"\n                    value={onboardingData.adminPassword}\n                    onChange={(e) => setOnboardingData(prev => ({ ...prev, adminPassword: e.target.value }))}\n                    placeholder=\"Password yang kuat\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"admin-first-name\">Nama Depan</Label>\n                    <Input\n                      id=\"admin-first-name\"\n                      data-testid=\"input-admin-first-name\"\n                      value={onboardingData.adminFirstName}\n                      onChange={(e) => setOnboardingData(prev => ({ ...prev, adminFirstName: e.target.value }))}\n                      placeholder=\"Nama depan\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"admin-last-name\">Nama Belakang</Label>\n                    <Input\n                      id=\"admin-last-name\"\n                      data-testid=\"input-admin-last-name\"\n                      value={onboardingData.adminLastName}\n                      onChange={(e) => setOnboardingData(prev => ({ ...prev, adminLastName: e.target.value }))}\n                      placeholder=\"Nama belakang\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setCurrentStep(1)}\n                    className=\"flex-1\"\n                  >\n                    Kembali\n                  </Button>\n                  <Button \n                    data-testid=\"button-next-admin\"\n                    onClick={handleAdminSetup}\n                    disabled={adminSetupMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {adminSetupMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Membuat...\n                      </>\n                    ) : (\n                      <>\n                        Buat Admin\n                        <ArrowRight className=\"ml-2 h-4 w-4\" />\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {currentStep === 3 && (\n            <Card className=\"shadow-lg\">\n              <CardHeader className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-4\">\n                  <CheckCircle className=\"h-12 w-12 text-green-500\" />\n                </div>\n                <CardTitle className=\"text-green-600\">Setup Hampir Selesai!</CardTitle>\n                <CardDescription>\n                  Aplikasi LaptopPOS siap digunakan untuk {onboardingStatus?.clientInfo?.name}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"text-center space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                  <div className=\"flex flex-col items-center p-4 bg-green-50 rounded-lg\">\n                    <Store className=\"h-8 w-8 text-green-600 mb-2\" />\n                    <p className=\"font-medium\">Toko Dikonfigurasi</p>\n                    <p className=\"text-gray-600\">Informasi toko tersimpan</p>\n                  </div>\n                  <div className=\"flex flex-col items-center p-4 bg-blue-50 rounded-lg\">\n                    <Users className=\"h-8 w-8 text-blue-600 mb-2\" />\n                    <p className=\"font-medium\">Admin Dibuat</p>\n                    <p className=\"text-gray-600\">Account administrator siap</p>\n                  </div>\n                  <div className=\"flex flex-col items-center p-4 bg-purple-50 rounded-lg\">\n                    <Settings className=\"h-8 w-8 text-purple-600 mb-2\" />\n                    <p className=\"font-medium\">Sistem Siap</p>\n                    <p className=\"text-gray-600\">Siap untuk digunakan</p>\n                  </div>\n                </div>\n                \n                <Button \n                  data-testid=\"button-complete-onboarding\"\n                  onClick={() => completeOnboardingMutation.mutate()}\n                  disabled={completeOnboardingMutation.isPending}\n                  size=\"lg\"\n                  className=\"w-full\"\n                >\n                  {completeOnboardingMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Menyelesaikan Setup...\n                    </>\n                  ) : (\n                    <>\n                      <Rocket className=\"mr-2 h-4 w-4\" />\n                      Mulai Menggunakan LaptopPOS\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18317},"server/routes/client.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { db } from '../db';\nimport { users, storeConfig } from '../../shared/schema';\nimport { clients } from '../../shared/saas-schema';\nimport { eq } from 'drizzle-orm';\nimport { requireTenant } from '../middleware/tenant';\nimport bcrypt from 'bcryptjs';\n\nconst router = Router();\n\n// All client routes require valid tenant context\nrouter.use(requireTenant);\n\n// Client onboarding status\nrouter.get('/onboarding/status', async (req: any, res) => {\n  try {\n    const clientId = req.tenant?.id;\n    \n    if (!clientId) {\n      return res.status(400).json({ message: 'No client context found' });\n    }\n\n    // Get client info\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, clientId))\n      .limit(1);\n\n    if (!client) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    // Check if store config exists\n    const [config] = await db\n      .select()\n      .from(storeConfig)\n      .where(eq(storeConfig.clientId, clientId))\n      .limit(1);\n\n    // Check if admin user exists\n    const [adminUser] = await db\n      .select()\n      .from(users)\n      .where(eq(users.clientId, clientId))\n      .limit(1);\n\n    const completed = Boolean(config && adminUser && config.setupCompleted);\n\n    res.json({\n      completed,\n      currentStep: completed ? 3 : (config ? (adminUser ? 3 : 2) : 1),\n      clientInfo: {\n        name: client.name,\n        subdomain: client.subdomain,\n        planName: client.settings ? JSON.parse(client.settings).planName : 'Trial',\n        trialEndsAt: client.trialEndsAt\n      }\n    });\n  } catch (error) {\n    console.error('Error checking onboarding status:', error);\n    res.status(500).json({ message: 'Failed to check onboarding status' });\n  }\n});\n\n// Store setup for client onboarding\nconst storeSetupSchema = z.object({\n  name: z.string().min(1, 'Store name is required'),\n  address: z.string().optional(),\n  phone: z.string().optional(),\n  email: z.string().email().optional().or(z.literal(''))\n});\n\nrouter.post('/onboarding/store', async (req: any, res) => {\n  try {\n    const clientId = req.tenant?.id;\n    \n    if (!clientId) {\n      return res.status(400).json({ message: 'No client context found' });\n    }\n\n    const { name, address, phone, email } = storeSetupSchema.parse(req.body);\n\n    // Check if store config already exists\n    const [existingConfig] = await db\n      .select()\n      .from(storeConfig)\n      .where(eq(storeConfig.clientId, clientId))\n      .limit(1);\n\n    if (existingConfig) {\n      // Update existing config\n      const [updatedConfig] = await db\n        .update(storeConfig)\n        .set({\n          name,\n          address: address || '',\n          phone: phone || '',\n          email: email || '',\n          updatedAt: new Date()\n        })\n        .where(eq(storeConfig.id, existingConfig.id))\n        .returning();\n\n      res.json({\n        success: true,\n        message: 'Store configuration updated successfully',\n        config: updatedConfig\n      });\n    } else {\n      // Create new config\n      const [newConfig] = await db\n        .insert(storeConfig)\n        .values({\n          clientId,\n          name,\n          address: address || '',\n          phone: phone || '',\n          email: email || '',\n          taxRate: '11.00',\n          setupCompleted: false\n        })\n        .returning();\n\n      res.json({\n        success: true,\n        message: 'Store configuration created successfully',\n        config: newConfig\n      });\n    }\n  } catch (error) {\n    console.error('Error setting up store:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error',\n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to setup store configuration' });\n  }\n});\n\n// Admin user creation for client onboarding\nconst adminSetupSchema = z.object({\n  username: z.string().min(1, 'Username is required'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  email: z.string().email('Valid email is required'),\n  firstName: z.string().optional(),\n  lastName: z.string().optional()\n});\n\nrouter.post('/onboarding/admin', async (req: any, res) => {\n  try {\n    const clientId = req.tenant?.id;\n    \n    if (!clientId) {\n      return res.status(400).json({ message: 'No client context found' });\n    }\n\n    const { username, password, email, firstName, lastName } = adminSetupSchema.parse(req.body);\n\n    // Check if admin user already exists for this client\n    const [existingUser] = await db\n      .select()\n      .from(users)\n      .where(eq(users.clientId, clientId))\n      .limit(1);\n\n    if (existingUser) {\n      return res.status(400).json({ message: 'Admin user already exists for this client' });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create admin user\n    const [newUser] = await db\n      .insert(users)\n      .values({\n        clientId,\n        username,\n        password: hashedPassword,\n        email,\n        firstName: firstName || 'Admin',\n        lastName: lastName || 'User',\n        role: 'admin',\n        isActive: true\n      })\n      .returning();\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = newUser;\n\n    res.json({\n      success: true,\n      message: 'Admin user created successfully',\n      user: userWithoutPassword\n    });\n  } catch (error) {\n    console.error('Error creating admin user:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error',\n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to create admin user' });\n  }\n});\n\n// Complete onboarding\nrouter.post('/onboarding/complete', async (req: any, res) => {\n  try {\n    const clientId = req.tenant?.id;\n    \n    if (!clientId) {\n      return res.status(400).json({ message: 'No client context found' });\n    }\n\n    // Update store config to mark setup as completed\n    const [updatedConfig] = await db\n      .update(storeConfig)\n      .set({\n        setupCompleted: true,\n        updatedAt: new Date()\n      })\n      .where(eq(storeConfig.clientId, clientId))\n      .returning();\n\n    if (!updatedConfig) {\n      return res.status(400).json({ message: 'Store configuration not found' });\n    }\n\n    res.json({\n      success: true,\n      message: 'Onboarding completed successfully! Welcome to LaptopPOS!'\n    });\n  } catch (error) {\n    console.error('Error completing onboarding:', error);\n    res.status(500).json({ message: 'Failed to complete onboarding' });\n  }\n});\n\nexport default router;","size_bytes":6708},"server/seed-plans.ts":{"content":"import { db } from './db';\nimport { plans } from '../shared/saas-schema';\n\nconst seedPlans = async () => {\n  console.log('Seeding subscription plans...');\n\n  const planData = [\n    {\n      name: 'Basic',\n      description: 'Perfect untuk usaha kecil dengan fitur lengkap untuk mengelola laptop service',\n      price: 149000, // Rp 149.000\n      currency: 'IDR',\n      billingPeriod: 'monthly',\n      isActive: true,\n      features: JSON.stringify([\n        'Manajemen stok laptop & sparepart',\n        'POS system untuk penjualan',\n        'Tiket servis & tracking',\n        'Laporan penjualan dasar',\n        'Backup data otomatis'\n      ]),\n      limits: JSON.stringify({\n        maxUsers: 3,\n        maxStorage: 1000, // MB\n        maxTransactionsPerMonth: 500\n      }),\n      maxUsers: 3,\n      maxTransactionsPerMonth: 500,\n      maxStorageGB: 1,\n      whatsappIntegration: false,\n      customBranding: false,\n      apiAccess: false,\n      prioritySupport: false\n    },\n    {\n      name: 'Professional',\n      description: 'Solusi lengkap untuk toko laptop dengan volume menengah dan fitur advanced',\n      price: 299000, // Rp 299.000\n      currency: 'IDR',\n      billingPeriod: 'monthly',\n      isActive: true,\n      features: JSON.stringify([\n        'Semua fitur Basic',\n        'Integrasi WhatsApp untuk notifikasi',\n        'Laporan keuangan lengkap',\n        'Multi-user access',\n        'Custom branding toko',\n        'API access untuk integrasi'\n      ]),\n      limits: JSON.stringify({\n        maxUsers: 10,\n        maxStorage: 5000, // MB\n        maxTransactionsPerMonth: 2000\n      }),\n      maxUsers: 10,\n      maxTransactionsPerMonth: 2000,\n      maxStorageGB: 5,\n      whatsappIntegration: true,\n      customBranding: true,\n      apiAccess: true,\n      prioritySupport: false\n    },\n    {\n      name: 'Enterprise',\n      description: 'Untuk toko laptop besar dengan multiple cabang dan fitur enterprise',\n      price: 599000, // Rp 599.000\n      currency: 'IDR',\n      billingPeriod: 'monthly',\n      isActive: true,\n      features: JSON.stringify([\n        'Semua fitur Professional',\n        'Multi-branch management',\n        'Advanced analytics & reporting',\n        'Priority customer support',\n        'Custom domain',\n        'Advanced API features',\n        'Dedicated account manager'\n      ]),\n      limits: JSON.stringify({\n        maxUsers: 50,\n        maxStorage: 20000, // MB\n        maxTransactionsPerMonth: 10000\n      }),\n      maxUsers: 50,\n      maxTransactionsPerMonth: 10000,\n      maxStorageGB: 20,\n      whatsappIntegration: true,\n      customBranding: true,\n      apiAccess: true,\n      prioritySupport: true\n    }\n  ];\n\n  try {\n    // Check if plans already exist\n    const existingPlans = await db.select().from(plans);\n    \n    if (existingPlans.length === 0) {\n      await db.insert(plans).values(planData);\n      console.log('✅ Subscription plans seeded successfully!');\n      console.log(`Created ${planData.length} plans:`, planData.map(p => p.name).join(', '));\n    } else {\n      console.log('✅ Plans already exist, skipping seed');\n    }\n  } catch (error) {\n    console.error('❌ Error seeding plans:', error);\n  }\n};\n\n// Run if called directly\nif (require.main === module) {\n  seedPlans().then(() => process.exit(0));\n}\n\nexport { seedPlans };","size_bytes":3303},"client/src/components/CreateClientForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\n\ninterface Plan {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n}\n\ninterface CreateClientFormProps {\n  plans: Plan[];\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}\n\nexport function CreateClientForm({ plans, onSubmit, isLoading }: CreateClientFormProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    subdomain: '',\n    email: '',\n    phone: '',\n    address: '',\n    planId: '',\n    trialDays: 7\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Nama Client *</Label>\n          <Input\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n            placeholder=\"Contoh: Toko Laptop Jaya\"\n            required\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"subdomain\">Subdomain *</Label>\n          <div className=\"flex items-center\">\n            <Input\n              id=\"subdomain\"\n              value={formData.subdomain}\n              onChange={(e) => setFormData({ ...formData, subdomain: e.target.value.toLowerCase() })}\n              placeholder=\"tokojaya\"\n              required\n              className=\"rounded-r-none\"\n            />\n            <div className=\"px-3 py-2 bg-gray-50 border border-l-0 rounded-r-md text-sm text-gray-600\">\n              .laptoppos.com\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email *</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n          placeholder=\"admin@tokojaya.com\"\n          required\n        />\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"phone\">Nomor Telepon</Label>\n          <Input\n            id=\"phone\"\n            value={formData.phone}\n            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n            placeholder=\"+62 812-3456-7890\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"trial-days\">Periode Trial (hari)</Label>\n          <Select \n            value={formData.trialDays.toString()} \n            onValueChange={(value) => setFormData({ ...formData, trialDays: parseInt(value) })}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">7 hari</SelectItem>\n              <SelectItem value=\"14\">14 hari</SelectItem>\n              <SelectItem value=\"30\">30 hari</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"address\">Alamat</Label>\n        <Textarea\n          id=\"address\"\n          value={formData.address}\n          onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n          placeholder=\"Alamat lengkap toko...\"\n          rows={3}\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"plan\">Paket Langganan *</Label>\n        <Select value={formData.planId} onValueChange={(value) => setFormData({ ...formData, planId: value })}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Pilih paket langganan\" />\n          </SelectTrigger>\n          <SelectContent>\n            {plans.map((plan) => (\n              <SelectItem key={plan.id} value={plan.id}>\n                {plan.name} - Rp {plan.price.toLocaleString('id-ID')}/bulan\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Membuat...' : 'Buat Client'}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":4505},"client/src/pages/admin-saas.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { AlertTriangle, Building2, Users, CreditCard, TrendingUp, Plus, Settings, Bell, DollarSign, Calendar, UserPlus, Eye, Edit, Trash2, CheckCircle, XCircle, Clock, Activity, Pencil, Save, X } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { toast, useToast } from '@/hooks/use-toast';\nimport { CreateClientForm } from '@/components/CreateClientForm';\nimport { FeatureConfigurationManager } from '@/components/FeatureConfigurationManager';\n\n// Plan Card Component with Inline Editing\nfunction PlanCard({ plan, onUpdate }: { plan: any, onUpdate: (plan: any) => void }) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedPlan, setEditedPlan] = useState(plan);\n  const { toast } = useToast();\n\n  const updatePlanMutation = useMutation({\n    mutationFn: async (planData: any) => {\n      return apiRequest('PUT', `/api/admin/saas/plans/${plan.id}`, planData);\n    },\n    onSuccess: (data) => {\n      onUpdate(data?.plan || plan);\n      setIsEditing(false);\n      toast({\n        title: 'Plan Updated',\n        description: 'Subscription plan has been updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update plan',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updatePlanMutation.mutate({\n      name: editedPlan.name,\n      description: editedPlan.description,\n      price: parseFloat(editedPlan.price),\n      maxUsers: parseInt(editedPlan.maxUsers),\n      maxTransactionsPerMonth: parseInt(editedPlan.maxTransactionsPerMonth),\n      maxStorageGB: parseInt(editedPlan.maxStorageGB),\n      whatsappIntegration: editedPlan.whatsappIntegration,\n      customBranding: editedPlan.customBranding,\n      apiAccess: editedPlan.apiAccess,\n      prioritySupport: editedPlan.prioritySupport,\n      isActive: editedPlan.isActive\n    });\n  };\n\n  const handleCancel = () => {\n    setEditedPlan(plan);\n    setIsEditing(false);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"border rounded-lg p-4\">\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          {isEditing ? (\n            <div className=\"space-y-3\">\n              <Input\n                value={editedPlan.name}\n                onChange={(e) => setEditedPlan({ ...editedPlan, name: e.target.value })}\n                className=\"font-semibold text-lg\"\n                placeholder=\"Plan name\"\n              />\n              <Input\n                value={editedPlan.description}\n                onChange={(e) => setEditedPlan({ ...editedPlan, description: e.target.value })}\n                className=\"text-sm\"\n                placeholder=\"Plan description\"\n              />\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm\">Rp</span>\n                <Input\n                  type=\"number\"\n                  value={editedPlan.price}\n                  onChange={(e) => setEditedPlan({ ...editedPlan, price: e.target.value })}\n                  className=\"w-32\"\n                  placeholder=\"Price\"\n                />\n                <span className=\"text-sm text-muted-foreground\">/month</span>\n              </div>\n            </div>\n          ) : (\n            <>\n              <h3 className=\"font-semibold\">{plan.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{plan.description}</p>\n              <div className=\"text-lg font-bold mt-2\">\n                {formatCurrency(plan.price)}/month\n              </div>\n            </>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant={plan.isActive ? 'default' : 'secondary'}>\n            {plan.isActive ? 'Active' : 'Inactive'}\n          </Badge>\n          {isEditing ? (\n            <>\n              <Button \n                size=\"sm\" \n                onClick={handleSave}\n                disabled={updatePlanMutation.isPending}\n              >\n                <Save className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"ghost\" \n                onClick={handleCancel}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </>\n          ) : (\n            <Button \n              size=\"sm\" \n              variant=\"ghost\" \n              onClick={() => setIsEditing(true)}\n            >\n              <Pencil className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"mt-3\">\n        <p className=\"text-sm font-medium mb-2\">Plan Limits:</p>\n        {isEditing ? (\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"maxUsers\" className=\"text-xs\">Max Users</Label>\n              <Input\n                id=\"maxUsers\"\n                type=\"number\"\n                value={editedPlan.maxUsers}\n                onChange={(e) => setEditedPlan({ ...editedPlan, maxUsers: e.target.value })}\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"maxStorage\" className=\"text-xs\">Storage (GB)</Label>\n              <Input\n                id=\"maxStorage\"\n                type=\"number\"\n                value={editedPlan.maxStorageGB}\n                onChange={(e) => setEditedPlan({ ...editedPlan, maxStorageGB: e.target.value })}\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"col-span-2\">\n              <Label htmlFor=\"maxTransactions\" className=\"text-xs\">Max Transactions/Month</Label>\n              <Input\n                id=\"maxTransactions\"\n                type=\"number\"\n                value={editedPlan.maxTransactionsPerMonth}\n                onChange={(e) => setEditedPlan({ ...editedPlan, maxTransactionsPerMonth: e.target.value })}\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 gap-2 text-sm text-muted-foreground\">\n            <div>👥 Users: {plan.maxUsers}</div>\n            <div>💾 Storage: {plan.maxStorageGB}GB</div>\n            <div>📊 Transactions: {plan.maxTransactionsPerMonth?.toLocaleString()}</div>\n            <div>📱 WhatsApp: {plan.whatsappIntegration ? '✅' : '❌'}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function AdminSaaS() {\n  const [selectedTab, setSelectedTab] = useState('overview');\n  const [createClientOpen, setCreateClientOpen] = useState(false);\n  const [selectedClient, setSelectedClient] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch comprehensive analytics\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/admin/saas/stats'],\n    retry: false,\n  });\n\n  // Fetch detailed clients\n  const { data: clients, refetch: refetchClients } = useQuery({\n    queryKey: ['/api/admin/saas/clients'],\n    retry: false,\n  });\n\n  // Fetch subscription plans\n  const { data: plans } = useQuery({\n    queryKey: ['/api/admin/saas/plans'],\n    retry: false,\n  });\n\n  // Fetch expiring trials\n  const { data: expiringTrials } = useQuery({\n    queryKey: ['/api/admin/notifications/expiring-trials'],\n    retry: false,\n  });\n\n  // Fetch revenue analytics\n  const { data: revenueData } = useQuery({\n    queryKey: ['/api/admin/analytics/revenue'],\n    retry: false,\n  });\n\n  // Create client mutation\n  const createClient = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('POST', '/api/admin/saas/clients', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Client created successfully with trial period',\n      });\n      refetchClients();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/saas/stats'] });\n      setCreateClientOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create client',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update client status mutation\n  const updateClientStatus = useMutation({\n    mutationFn: async ({ id, status, reason }: { id: string; status: string; reason?: string }) => {\n      return apiRequest('PATCH', `/api/admin/saas/clients/${id}/status`, { status, reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Client status updated successfully',\n      });\n      refetchClients();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/saas/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update client status',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Upgrade subscription mutation\n  const upgradeSubscription = useMutation({\n    mutationFn: async ({ id, planId }: { id: string; planId: string }) => {\n      return apiRequest('POST', `/api/admin/clients/${id}/upgrade`, { planId });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Subscription upgraded successfully',\n      });\n      refetchClients();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to upgrade subscription',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('id-ID', {\n      style: 'currency',\n      currency: 'IDR',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { label: 'Aktif', color: 'bg-green-100 text-green-800' },\n      trial: { label: 'Trial', color: 'bg-blue-100 text-blue-800' },\n      suspended: { label: 'Suspended', color: 'bg-red-100 text-red-800' },\n      expired: { label: 'Expired', color: 'bg-gray-100 text-gray-800' }\n    };\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.expired;\n    return <Badge className={config.color}>{config.label}</Badge>;\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">🚀 SaaS Management Dashboard</h1>\n          <p className=\"text-muted-foreground\">Comprehensive client & subscription management system</p>\n        </div>\n        <Dialog open={createClientOpen} onOpenChange={setCreateClientOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Client\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>🎯 Create New Client</DialogTitle>\n              <DialogDescription>\n                Set up a new client with trial period and subscription plan\n              </DialogDescription>\n            </DialogHeader>\n            <CreateClientForm \n              plans={plans || []} \n              onSubmit={(data) => createClient.mutate(data)}\n              isLoading={createClient.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Enhanced Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n        <Card className=\"border-l-4 border-l-blue-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Clients</CardTitle>\n            <Building2 className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.clients?.total || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">+{analytics?.clients?.newThisMonth || 0} this month</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-green-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Clients</CardTitle>\n            <Users className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.clients?.active || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">{analytics?.clients?.trial || 0} in trial</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-purple-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrency(analytics?.revenue?.monthlyTotal || 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">MRR: {formatCurrency(revenueData?.mrr || 0)}</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-orange-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Expiring Trials</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.clients?.expiringTrials || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Next 7 days</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-l-4 border-l-red-500\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Suspended</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.clients?.suspended || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Need attention</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">📊 Clients</TabsTrigger>\n          <TabsTrigger value=\"analytics\">📈 Analytics</TabsTrigger>\n          <TabsTrigger value=\"subscriptions\">💳 Subscriptions</TabsTrigger>\n          <TabsTrigger value=\"billing\">💰 Billing</TabsTrigger>\n          <TabsTrigger value=\"notifications\">🔔 Alerts</TabsTrigger>\n          <TabsTrigger value=\"settings\">⚙️ Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>🏢 Client Management</CardTitle>\n              <CardDescription>\n                Comprehensive client management with subscription details\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {clients && clients.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Subdomain</TableHead>\n                      <TableHead>Plan</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Users</TableHead>\n                      <TableHead>Payment</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {clients.map((client: any) => (\n                      <TableRow key={client.id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{client.name}</div>\n                            <div className=\"text-sm text-muted-foreground\">{client.email}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">\n                            {client.subdomain}.laptoppos.com\n                          </code>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{client.planName || 'No Plan'}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {client.planAmount ? formatCurrency(parseInt(client.planAmount)) : 'Free Trial'}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>{getStatusBadge(client.status)}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{client.userCount || 0} users</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {client.subscriptionStatus === 'paid' ? (\n                              <Badge className=\"bg-green-100 text-green-800\">\n                                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                Paid\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {client.status === 'trial' ? 'Trial' : 'Pending'}\n                              </Badge>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button variant=\"outline\" size=\"sm\" title=\"View Details\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\" title=\"Edit Client\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              title={client.status === 'active' ? 'Suspend' : 'Activate'}\n                              onClick={() => {\n                                const newStatus = client.status === 'active' ? 'suspended' : 'active';\n                                updateClientStatus.mutate({ \n                                  id: client.id, \n                                  status: newStatus,\n                                  reason: `Status changed via admin dashboard`\n                                });\n                              }}\n                            >\n                              {client.status === 'active' ? \n                                <XCircle className=\"h-4 w-4 text-red-500\" /> : \n                                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                              }\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Building2 className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Clients Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start by creating your first client with a trial period</p>\n                  <Button onClick={() => setCreateClientOpen(true)} className=\"bg-gradient-to-r from-blue-600 to-purple-600\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create First Client\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>📈 Revenue Analytics</CardTitle>\n                <CardDescription>Monthly recurring revenue trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-3xl font-bold\">\n                    {formatCurrency(revenueData?.mrr || 0)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Monthly Recurring Revenue</div>\n                  {revenueData?.dailyRevenue && revenueData.dailyRevenue.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium\">Recent Revenue</h4>\n                      {revenueData.dailyRevenue.slice(-5).map((day: any, index: number) => (\n                        <div key={index} className=\"flex justify-between text-sm p-2 bg-gray-50 rounded\">\n                          <span>{day.date}</span>\n                          <span className=\"font-medium\">{formatCurrency(day.revenue)}</span>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>🏆 Popular Plans</CardTitle>\n                <CardDescription>Most subscribed plans</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {analytics?.insights?.popularPlans && analytics.insights.popularPlans.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {analytics.insights.popularPlans.map((plan: any, index: number) => (\n                      <div key={index} className=\"flex justify-between items-center p-3 border rounded-lg\">\n                        <div>\n                          <div className=\"font-medium\">{plan.planName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{plan.count} subscribers</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium\">{formatCurrency(plan.revenue || 0)}</div>\n                          <div className=\"text-sm text-muted-foreground\">Total Revenue</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Activity className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">No subscription data available yet</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>🔔 Trial Expiry Notifications</CardTitle>\n              <CardDescription>\n                Manage trial expiration alerts and client follow-ups\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {expiringTrials && expiringTrials.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {expiringTrials.map((trial: any) => (\n                    <div key={trial.id} className=\"flex items-center justify-between p-4 border rounded-lg bg-orange-50\">\n                      <div>\n                        <h3 className=\"font-semibold\">{trial.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{trial.email}</p>\n                        <p className=\"text-sm text-orange-600 font-medium\">\n                          ⚠️ Trial ends in {Math.ceil(trial.daysRemaining)} days\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Bell className=\"h-4 w-4 mr-2\" />\n                          Send Reminder\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Extend Trial\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"h-16 w-16 mx-auto text-green-500 mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">All Good! 🎉</h3>\n                  <p className=\"text-muted-foreground\">No trials expiring soon</p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    All clients are in good standing\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          {/* Feature Configuration Management */}\n          <Card className=\"border-2 border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Settings className=\"h-5 w-5\" />\n                <span>🎛️ Plan Feature Configuration</span>\n              </CardTitle>\n              <CardDescription>\n                Configure which application features are available for each subscription plan\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <FeatureConfigurationManager />\n            </CardContent>\n          </Card>\n\n          {/* Existing Settings */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>📦 Subscription Plans Overview</CardTitle>\n                <CardDescription>\n                  Current pricing plans and basic features\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {plans && plans.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {plans.map((plan: any) => (\n                      <PlanCard \n                        key={plan.id} \n                        plan={plan}\n                        onUpdate={(updatedPlan) => {\n                          queryClient.invalidateQueries({ queryKey: ['/api/admin/plans'] });\n                          toast({\n                            title: 'Success',\n                            description: 'Plan updated successfully',\n                          });\n                        }}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Settings className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">No subscription plans configured</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>⚙️ Global SaaS Settings</CardTitle>\n                <CardDescription>\n                  System-wide configuration for the SaaS platform\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"trial-period\">Default Trial Period (days)</Label>\n                  <Input id=\"trial-period\" type=\"number\" defaultValue=\"14\" className=\"mt-1\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"auto-suspend\">Auto-suspend after trial</Label>\n                  <Select defaultValue=\"enabled\">\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"enabled\">✅ Enabled</SelectItem>\n                      <SelectItem value=\"disabled\">❌ Disabled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"notification-days\">Trial expiry notification (days before)</Label>\n                  <Input id=\"notification-days\" type=\"number\" defaultValue=\"3\" className=\"mt-1\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"grace-period\">Payment grace period (days)</Label>\n                  <Input id=\"grace-period\" type=\"number\" defaultValue=\"3\" className=\"mt-1\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"webhook-url\">Payment Webhook URL</Label>\n                  <Input id=\"webhook-url\" placeholder=\"https://api.example.com/webhook\" className=\"mt-1\" />\n                </div>\n                <Button className=\"w-full mt-4 bg-gradient-to-r from-green-600 to-blue-600\">\n                  💾 Save Configuration\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Feature Management Guidelines */}\n          <Card className=\"border-orange-200 bg-orange-50/50\">\n            <CardHeader>\n              <CardTitle className=\"text-orange-800\">📋 Feature Management Guidelines</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm space-y-2\">\n              <ul className=\"space-y-2 text-orange-700\">\n                <li>• <strong>Basic Plan:</strong> Essential features for small businesses (POS, basic inventory, customers)</li>\n                <li>• <strong>Pro Plan:</strong> Advanced features for growing businesses (service tickets, reports, purchasing)</li>\n                <li>• <strong>Premium Plan:</strong> Full feature set with integrations (WhatsApp, API access, custom branding)</li>\n                <li>• <strong>Feature Toggles:</strong> Changes take effect immediately for all clients on that plan</li>\n                <li>• <strong>Limits:</strong> Configure user count, transaction volume, and storage per plan</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"billing\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>💰 Billing Overview</CardTitle>\n              <CardDescription>\n                Revenue tracking and payment management\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center p-6 border rounded-lg bg-gradient-to-br from-green-50 to-emerald-50\">\n                  <div className=\"text-3xl font-bold text-green-600\">{formatCurrency(analytics?.revenue?.monthlyTotal || 0)}</div>\n                  <div className=\"text-sm text-muted-foreground\">This Month</div>\n                </div>\n                <div className=\"text-center p-6 border rounded-lg bg-gradient-to-br from-blue-50 to-cyan-50\">\n                  <div className=\"text-3xl font-bold text-blue-600\">{formatCurrency(revenueData?.mrr || 0)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Monthly Recurring Revenue</div>\n                </div>\n                <div className=\"text-center p-6 border rounded-lg bg-gradient-to-br from-purple-50 to-violet-50\">\n                  <div className=\"text-3xl font-bold text-purple-600\">{analytics?.clients?.active || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Paying Clients</div>\n                </div>\n              </div>\n              <div className=\"text-center py-12 border-2 border-dashed rounded-lg\">\n                <DollarSign className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Advanced Billing Features</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  🚀 Coming soon: Invoice generation, payment tracking, and automated billing\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  ✨ Stripe integration, PDF invoices, payment reminders, and more!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"subscriptions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>💳 Subscription Management</CardTitle>\n              <CardDescription>\n                Monitor and manage all client subscriptions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {clients && clients.filter((c: any) => c.subscriptionId).length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Plan</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Period</TableHead>\n                      <TableHead>Auto Renew</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {clients.filter((c: any) => c.subscriptionId).map((client: any) => (\n                      <TableRow key={client.id}>\n                        <TableCell>\n                          <div className=\"font-medium\">{client.name}</div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{client.planName}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {formatCurrency(parseInt(client.planAmount || '0'))}/month\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>{getStatusBadge(client.subscriptionStatus)}</TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <div>{client.subscriptionStart ? new Date(client.subscriptionStart).toLocaleDateString() : '-'}</div>\n                            <div className=\"text-muted-foreground\">to {client.subscriptionEnd ? new Date(client.subscriptionEnd).toLocaleDateString() : '-'}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={client.autoRenew ? 'default' : 'secondary'}>\n                            {client.autoRenew ? '✅ Yes' : '❌ No'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Select onValueChange={(planId) => upgradeSubscription.mutate({ id: client.id, planId })}>\n                              <SelectTrigger className=\"w-[140px]\">\n                                <SelectValue placeholder=\"Change Plan\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {plans?.map((plan: any) => (\n                                  <SelectItem key={plan.id} value={plan.id}>\n                                    {plan.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <CreditCard className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Active Subscriptions</h3>\n                  <p className=\"text-muted-foreground\">\n                    Clients will appear here once they upgrade from trial\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":38018},"server/routes/saas-complete.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { db } from '../db';\nimport { clients, subscriptions, plans, payments } from '../../shared/saas-schema';\nimport { users } from '../../shared/schema';\nimport { eq, count, and, desc, gte, lt, sql, sum, isNull, or } from 'drizzle-orm';\nimport type { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcryptjs';\n\nconst router = Router();\n\n// Super admin middleware for development\nconst requireSuperAdmin = (req: Request, res: Response, next: NextFunction) => {\n  if (process.env.NODE_ENV === 'development') {\n    req.isSuperAdmin = true;\n    return next();\n  }\n  if (!req.isSuperAdmin) {\n    return res.status(403).json({ \n      error: 'Super admin required',\n      message: 'This operation requires super admin privileges.'\n    });\n  }\n  next();\n};\n\nrouter.use(requireSuperAdmin);\n\n// 🎯 COMPREHENSIVE SaaS MANAGEMENT FEATURES\n\n// 1. CLIENT MANAGEMENT CRUD\n// ===========================\n\n// Route moved to admin.ts to fix routing conflicts\n\n// Create new client with trial period\nconst createClientSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  subdomain: z.string().min(1, 'Subdomain is required').regex(/^[a-z0-9-]+$/, 'Invalid subdomain format'),\n  email: z.string().email('Valid email is required'),\n  planId: z.string().min(1, 'Plan is required'),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  trialDays: z.number().default(7)\n});\n\nrouter.post('/clients', async (req, res) => {\n  try {\n    const validatedData = createClientSchema.parse(req.body);\n    const { name, subdomain, email, planId, phone, address, trialDays } = validatedData;\n\n    // Check subdomain availability\n    const [existingClient] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.subdomain, subdomain))\n      .limit(1);\n\n    if (existingClient) {\n      return res.status(400).json({ message: 'Subdomain already exists' });\n    }\n\n    // Get plan details\n    const [plan] = await db\n      .select()\n      .from(plans)\n      .where(eq(plans.id, planId))\n      .limit(1);\n\n    if (!plan) {\n      return res.status(400).json({ message: 'Plan not found' });\n    }\n\n    // Calculate trial end date\n    const trialEndsAt = new Date();\n    trialEndsAt.setDate(trialEndsAt.getDate() + trialDays);\n\n    // Create client\n    const [newClient] = await db\n      .insert(clients)\n      .values({\n        name,\n        subdomain,\n        email,\n        phone,\n        address,\n        status: 'trial',\n        trialEndsAt,\n        settings: JSON.stringify({\n          planId: plan.id,\n          planName: plan.name,\n          maxUsers: plan.maxUsers || 10,\n          maxStorage: plan.maxStorageGB || 1,\n          features: JSON.parse(plan.features || '[]')\n        })\n      })\n      .returning();\n\n    // Create initial subscription (trial)\n    await db\n      .insert(subscriptions)\n      .values({\n        clientId: newClient.id,\n        planId: plan.id,\n        planName: plan.name,\n        plan: 'basic',\n        amount: '0', // Trial is free\n        paymentStatus: 'paid',\n        startDate: new Date(),\n        endDate: trialEndsAt,\n        trialEndDate: trialEndsAt,\n        autoRenew: false\n      });\n\n    res.json({\n      message: 'Client created successfully with trial period',\n      client: newClient,\n      trialEndsAt\n    });\n  } catch (error) {\n    console.error('Error creating client:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error',\n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to create client' });\n  }\n});\n\n// Update client\nrouter.put('/clients/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, email, phone, address, status, customDomain } = req.body;\n\n    const [updatedClient] = await db\n      .update(clients)\n      .set({ \n        ...(name && { name }),\n        ...(email && { email }),\n        ...(phone && { phone }),\n        ...(address && { address }),\n        ...(status && { status }),\n        ...(customDomain && { customDomain }),\n        updatedAt: new Date()\n      })\n      .where(eq(clients.id, id))\n      .returning();\n\n    if (!updatedClient) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    res.json({ message: 'Client updated successfully', client: updatedClient });\n  } catch (error) {\n    console.error('Error updating client:', error);\n    res.status(500).json({ message: 'Failed to update client' });\n  }\n});\n\n// Suspend/Activate client\nrouter.patch('/clients/:id/status', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status, reason } = req.body;\n\n    if (!['active', 'suspended', 'expired', 'trial'].includes(status)) {\n      return res.status(400).json({ message: 'Invalid status' });\n    }\n\n    const [updatedClient] = await db\n      .update(clients)\n      .set({ \n        status,\n        updatedAt: new Date()\n      })\n      .where(eq(clients.id, id))\n      .returning();\n\n    if (!updatedClient) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    // Log status change\n    console.log(`Client ${updatedClient.name} status changed to ${status}. Reason: ${reason || 'No reason provided'}`);\n\n    res.json({\n      message: `Client status updated to ${status}`,\n      client: updatedClient\n    });\n  } catch (error) {\n    console.error('Error updating client status:', error);\n    res.status(500).json({ message: 'Failed to update client status' });\n  }\n});\n\n// Delete client (soft delete)\nrouter.delete('/clients/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Update status to expired instead of hard delete\n    const [deletedClient] = await db\n      .update(clients)\n      .set({ \n        status: 'expired',\n        updatedAt: new Date()\n      })\n      .where(eq(clients.id, id))\n      .returning();\n\n    if (!deletedClient) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    // Cancel all active subscriptions\n    await db\n      .update(subscriptions)\n      .set({ \n        paymentStatus: 'cancelled',\n        cancelledAt: new Date()\n      })\n      .where(and(\n        eq(subscriptions.clientId, id),\n        eq(subscriptions.paymentStatus, 'paid')\n      ));\n\n    res.json({ message: 'Client deactivated successfully' });\n  } catch (error) {\n    console.error('Error deleting client:', error);\n    res.status(500).json({ message: 'Failed to delete client' });\n  }\n});\n\n// 2. ANALYTICS & REPORTING DASHBOARD\n// ===================================\n\n// Comprehensive analytics\nrouter.get('/analytics/overview', async (req, res) => {\n  try {\n    const now = new Date();\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n\n    // Client metrics\n    const [totalClientsResult] = await db.select({ count: count() }).from(clients);\n    const [activeClientsResult] = await db.select({ count: count() }).from(clients).where(eq(clients.status, 'active'));\n    const [trialClientsResult] = await db.select({ count: count() }).from(clients).where(eq(clients.status, 'trial'));\n    const [suspendedClientsResult] = await db.select({ count: count() }).from(clients).where(eq(clients.status, 'suspended'));\n\n    // Trial expiring soon\n    const [expiringTrialsResult] = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(and(\n        eq(clients.status, 'trial'),\n        lt(clients.trialEndsAt, sevenDaysFromNow)\n      ));\n\n    // Revenue metrics\n    const [monthlyRevenueResult] = await db\n      .select({ \n        total: sql<number>`sum(cast(${subscriptions.amount} as numeric))`.as('total')\n      })\n      .from(subscriptions)\n      .where(and(\n        eq(subscriptions.paymentStatus, 'paid'),\n        gte(subscriptions.startDate, thirtyDaysAgo)\n      ));\n\n    // Growth metrics (new clients this month)\n    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const [newClientsThisMonthResult] = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(gte(clients.createdAt, firstDayOfMonth));\n\n    // Popular plans\n    const popularPlans = await db\n      .select({\n        planName: subscriptions.planName,\n        count: count(),\n        revenue: sql<number>`sum(cast(${subscriptions.amount} as numeric))`.as('revenue')\n      })\n      .from(subscriptions)\n      .where(eq(subscriptions.paymentStatus, 'paid'))\n      .groupBy(subscriptions.planName)\n      .orderBy(desc(count()));\n\n    // Client distribution by status\n    const clientsByStatus = await db\n      .select({\n        status: clients.status,\n        count: count()\n      })\n      .from(clients)\n      .groupBy(clients.status);\n\n    res.json({\n      clients: {\n        total: totalClientsResult.count,\n        active: activeClientsResult.count,\n        trial: trialClientsResult.count,\n        suspended: suspendedClientsResult.count,\n        newThisMonth: newClientsThisMonthResult.count,\n        expiringTrials: expiringTrialsResult.count\n      },\n      revenue: {\n        monthlyTotal: monthlyRevenueResult.total || 0,\n        currency: 'IDR'\n      },\n      insights: {\n        popularPlans,\n        clientsByStatus\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching analytics:', error);\n    res.status(500).json({ message: 'Failed to fetch analytics' });\n  }\n});\n\n// Revenue analytics with time series\nrouter.get('/analytics/revenue', async (req, res) => {\n  try {\n    const { period = '30d' } = req.query;\n    \n    let startDate = new Date();\n    switch (period) {\n      case '7d':\n        startDate.setDate(startDate.getDate() - 7);\n        break;\n      case '30d':\n        startDate.setDate(startDate.getDate() - 30);\n        break;\n      case '90d':\n        startDate.setDate(startDate.getDate() - 90);\n        break;\n      case '1y':\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n    }\n\n    // Daily revenue\n    const dailyRevenue = await db\n      .select({\n        date: sql<string>`date(${subscriptions.startDate})`.as('date'),\n        revenue: sql<number>`sum(cast(${subscriptions.amount} as numeric))`.as('revenue'),\n        newSubscriptions: count()\n      })\n      .from(subscriptions)\n      .where(and(\n        eq(subscriptions.paymentStatus, 'paid'),\n        gte(subscriptions.startDate, startDate)\n      ))\n      .groupBy(sql`date(${subscriptions.startDate})`)\n      .orderBy(sql`date(${subscriptions.startDate})`);\n\n    // MRR calculation\n    const [mrrResult] = await db\n      .select({\n        mrr: sql<number>`sum(cast(${subscriptions.amount} as numeric))`.as('mrr')\n      })\n      .from(subscriptions)\n      .where(and(\n        eq(subscriptions.paymentStatus, 'paid'),\n        eq(subscriptions.autoRenew, true)\n      ));\n\n    res.json({\n      period,\n      dailyRevenue,\n      mrr: mrrResult.mrr || 0,\n      currency: 'IDR'\n    });\n  } catch (error) {\n    console.error('Error fetching revenue analytics:', error);\n    res.status(500).json({ message: 'Failed to fetch revenue analytics' });\n  }\n});\n\n// 3. SUBSCRIPTION LIFECYCLE MANAGEMENT\n// ====================================\n\n// Get subscription details for a client\nrouter.get('/clients/:id/subscriptions', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const subscriptionHistory = await db\n      .select()\n      .from(subscriptions)\n      .where(eq(subscriptions.clientId, id))\n      .orderBy(desc(subscriptions.createdAt));\n\n    res.json(subscriptionHistory);\n  } catch (error) {\n    console.error('Error fetching subscriptions:', error);\n    res.status(500).json({ message: 'Failed to fetch subscriptions' });\n  }\n});\n\n// Upgrade/Downgrade subscription\nrouter.post('/clients/:id/upgrade', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { planId, paymentMethod = 'manual' } = req.body;\n\n    // Get new plan\n    const [plan] = await db\n      .select()\n      .from(plans)\n      .where(eq(plans.id, planId))\n      .limit(1);\n\n    if (!plan) {\n      return res.status(400).json({ message: 'Plan not found' });\n    }\n\n    // Cancel current active subscription\n    await db\n      .update(subscriptions)\n      .set({ \n        paymentStatus: 'cancelled',\n        cancelledAt: new Date()\n      })\n      .where(and(\n        eq(subscriptions.clientId, id),\n        eq(subscriptions.paymentStatus, 'paid')\n      ));\n\n    // Create new subscription\n    const [newSubscription] = await db\n      .insert(subscriptions)\n      .values({\n        clientId: id,\n        planId: plan.id,\n        planName: plan.name,\n        plan: plan.name.toLowerCase() as 'basic' | 'pro' | 'premium',\n        amount: plan.price.toString(),\n        paymentStatus: paymentMethod === 'manual' ? 'paid' : 'pending',\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n        autoRenew: true\n      })\n      .returning();\n\n    // Update client status to active\n    await db\n      .update(clients)\n      .set({ \n        status: 'active',\n        settings: sql`jsonb_set(\n          settings::jsonb, \n          '{planName}', \n          '\"${plan.name}\"'\n        )`,\n        updatedAt: new Date()\n      })\n      .where(eq(clients.id, id));\n\n    res.json({\n      message: `Subscription upgraded to ${plan.name}`,\n      subscription: newSubscription\n    });\n  } catch (error) {\n    console.error('Error upgrading subscription:', error);\n    res.status(500).json({ message: 'Failed to upgrade subscription' });\n  }\n});\n\n// 4. USER MANAGEMENT PER CLIENT\n// =============================\n\n// Get users for a specific client\nrouter.get('/clients/:id/users', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const clientUsers = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        role: users.role,\n        email: users.email,\n        isActive: users.isActive,\n        lastLogin: sql<Date | null>`null`.as('last_login'),\n        createdAt: users.createdAt\n      })\n      .from(users)\n      .where(eq(users.clientId, id))\n      .orderBy(desc(users.createdAt));\n\n    res.json(clientUsers);\n  } catch (error) {\n    console.error('Error fetching client users:', error);\n    res.status(500).json({ message: 'Failed to fetch client users' });\n  }\n});\n\n// Create user for client\nconst createUserSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  email: z.string().email('Valid email required'),\n  role: z.enum(['admin', 'kasir', 'teknisi', 'owner', 'purchasing', 'finance'])\n});\n\nrouter.post('/clients/:id/users', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const validatedData = createUserSchema.parse(req.body);\n    const { username, password, email, role } = validatedData;\n\n    // Check client exists and get limits\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, id))\n      .limit(1);\n\n    if (!client) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    // Check user limit\n    const [userCountResult] = await db\n      .select({ count: count() })\n      .from(users)\n      .where(eq(users.clientId, id));\n\n    const settings = JSON.parse(client.settings || '{}');\n    const maxUsers = settings.maxUsers || 3;\n\n    if (userCountResult.count >= maxUsers) {\n      return res.status(400).json({ \n        message: `User limit reached. Maximum ${maxUsers} users allowed for this plan.` \n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create user\n    const [newUser] = await db\n      .insert(users)\n      .values({\n        username,\n        password: hashedPassword,\n        email,\n        role,\n        clientId: id,\n        isActive: true\n      })\n      .returning();\n\n    res.json({\n      message: 'User created successfully',\n      user: {\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n        role: newUser.role\n      }\n    });\n  } catch (error) {\n    console.error('Error creating user:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error',\n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to create user' });\n  }\n});\n\n// 5. TRIAL EXPIRY NOTIFICATIONS\n// =============================\n\n// Get trials expiring soon\nrouter.get('/notifications/expiring-trials', async (req, res) => {\n  try {\n    const { days = 7 } = req.query;\n    const futureDate = new Date();\n    futureDate.setDate(futureDate.getDate() + Number(days));\n\n    const expiringTrials = await db\n      .select({\n        id: clients.id,\n        name: clients.name,\n        email: clients.email,\n        subdomain: clients.subdomain,\n        trialEndsAt: clients.trialEndsAt,\n        daysRemaining: sql<number>`date_part('day', ${clients.trialEndsAt} - now())`.as('days_remaining')\n      })\n      .from(clients)\n      .where(and(\n        eq(clients.status, 'trial'),\n        lt(clients.trialEndsAt, futureDate)\n      ))\n      .orderBy(clients.trialEndsAt);\n\n    res.json(expiringTrials);\n  } catch (error) {\n    console.error('Error fetching expiring trials:', error);\n    res.status(500).json({ message: 'Failed to fetch expiring trials' });\n  }\n});\n\n// Send trial expiry reminder\nrouter.post('/notifications/remind-trial/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, id))\n      .limit(1);\n\n    if (!client) {\n      return res.status(404).json({ message: 'Client not found' });\n    }\n\n    // In a real implementation, you would send email here\n    console.log(`Trial reminder sent to ${client.email} for ${client.name}`);\n    \n    res.json({ \n      message: `Trial reminder sent to ${client.name}`,\n      client: client.name,\n      email: client.email\n    });\n  } catch (error) {\n    console.error('Error sending trial reminder:', error);\n    res.status(500).json({ message: 'Failed to send trial reminder' });\n  }\n});\n\n// PLAN FEATURES CONFIGURATION API\n// ===================================\n\n// Get plan features for a specific plan\nrouter.get('/plan-features/:planId', async (req, res) => {\n  try {\n    const { planId } = req.params;\n    \n    const plan = await db\n      .select()\n      .from(plans)\n      .where(eq(plans.id, planId))\n      .limit(1);\n    \n    if (!plan.length) {\n      return res.status(404).json({ error: 'Plan not found' });\n    }\n    \n    const planData = plan[0];\n    const features = planData.features ? JSON.parse(planData.features) : [];\n    const limits = planData.limits ? JSON.parse(planData.limits) : {};\n    \n    res.json({\n      planId: planData.id,\n      planName: planData.name,\n      features,\n      limits: {\n        maxUsers: limits.maxUsers || planData.maxUsers,\n        maxTransactionsPerMonth: limits.maxTransactionsPerMonth || planData.maxTransactionsPerMonth,\n        maxStorageGB: limits.maxStorageGB || planData.maxStorageGB,\n        ...limits\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching plan features:', error);\n    res.status(500).json({ error: 'Failed to fetch plan features' });\n  }\n});\n\n// Update plan features and limits\nrouter.put('/plans/:planId/features', async (req, res) => {\n  try {\n    const { planId } = req.params;\n    const { features, limits } = req.body;\n    \n    // Validate input\n    if (!Array.isArray(features)) {\n      return res.status(400).json({ error: 'Features must be an array' });\n    }\n    \n    if (typeof limits !== 'object') {\n      return res.status(400).json({ error: 'Limits must be an object' });\n    }\n    \n    // Update plan with new features and limits\n    const updatedPlan = await db\n      .update(plans)\n      .set({\n        features: JSON.stringify(features),\n        limits: JSON.stringify(limits),\n        maxUsers: limits.maxUsers || null,\n        maxTransactionsPerMonth: limits.maxTransactionsPerMonth || null,\n        maxStorageGB: limits.maxStorageGB || null,\n        whatsappIntegration: features.includes('whatsapp'),\n        customBranding: features.includes('custom_branding'),\n        apiAccess: features.includes('api_access'),\n        prioritySupport: features.includes('priority_support'),\n        updatedAt: new Date()\n      })\n      .where(eq(plans.id, planId))\n      .returning();\n    \n    if (!updatedPlan.length) {\n      return res.status(404).json({ error: 'Plan not found' });\n    }\n    \n    res.json({\n      success: true,\n      message: 'Plan features updated successfully',\n      plan: updatedPlan[0]\n    });\n  } catch (error) {\n    console.error('Error updating plan features:', error);\n    res.status(500).json({ error: 'Failed to update plan features' });\n  }\n});\n\n// Get available features list\nrouter.get('/available-features', async (req, res) => {\n  try {\n    const availableFeatures = [\n      'dashboard', 'pos', 'service', 'inventory', 'purchasing', 'finance',\n      'customers', 'suppliers', 'users', 'roles', 'reports', 'stock_movements',\n      'settings', 'whatsapp', 'custom_branding', 'api_access', 'priority_support'\n    ];\n    \n    res.json({ features: availableFeatures });\n  } catch (error) {\n    console.error('Error fetching available features:', error);\n    res.status(500).json({ error: 'Failed to fetch available features' });\n  }\n});\n\nexport default router;","size_bytes":21542},"server/routes/stripe-integration.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { db } from '../db';\nimport { clients, subscriptions, plans, payments } from '../../shared/saas-schema';\nimport { eq, and } from 'drizzle-orm';\nimport type { Request, Response, NextFunction } from 'express';\n// Note: Stripe will be added when user provides API keys\n\nconst router = Router();\n\n// Super admin middleware\nconst requireSuperAdmin = (req: Request, res: Response, next: NextFunction) => {\n  if (process.env.NODE_ENV === 'development') {\n    req.isSuperAdmin = true;\n    return next();\n  }\n  if (!req.isSuperAdmin) {\n    return res.status(403).json({ \n      error: 'Super admin required',\n      message: 'This operation requires super admin privileges.'\n    });\n  }\n  next();\n};\n\nrouter.use(requireSuperAdmin);\n\n// 💳 STRIPE PAYMENT PROCESSING\n// ============================\n\n// Create payment intent for subscription\nconst createPaymentSchema = z.object({\n  clientId: z.string().min(1, 'Client ID required'),\n  planId: z.string().min(1, 'Plan ID required'),\n  paymentMethod: z.enum(['stripe', 'bank_transfer', 'manual']).default('stripe')\n});\n\nrouter.post('/payments/create-intent', async (req, res) => {\n  try {\n    const { clientId, planId, paymentMethod } = createPaymentSchema.parse(req.body);\n\n    // Get client and plan\n    const [client] = await db.select().from(clients).where(eq(clients.id, clientId)).limit(1);\n    const [plan] = await db.select().from(plans).where(eq(plans.id, planId)).limit(1);\n\n    if (!client || !plan) {\n      return res.status(404).json({ message: 'Client or plan not found' });\n    }\n\n    // For now, simulate payment creation without Stripe\n    // When Stripe keys are provided, this will use real Stripe API\n    const mockPaymentIntent = {\n      id: `pi_mock_${Date.now()}`,\n      clientSecret: `pi_mock_${Date.now()}_secret_mock`,\n      amount: plan.price,\n      currency: 'idr',\n      status: 'requires_payment_method'\n    };\n\n    // Create payment record\n    const [payment] = await db\n      .insert(payments)\n      .values({\n        subscriptionId: null as any, // Will be set after subscription creation\n        clientId: client.id,\n        amount: plan.price,\n        currency: 'IDR',\n        status: 'pending',\n        paymentMethod,\n        transactionId: mockPaymentIntent.id,\n        gatewayResponse: JSON.stringify(mockPaymentIntent)\n      })\n      .returning();\n\n    res.json({\n      paymentIntent: mockPaymentIntent,\n      payment,\n      message: 'Payment intent created (mock mode - provide Stripe keys for real payments)'\n    });\n  } catch (error) {\n    console.error('Error creating payment intent:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error',\n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: 'Failed to create payment intent' });\n  }\n});\n\n// Confirm payment and activate subscription\nrouter.post('/payments/confirm/:paymentId', async (req, res) => {\n  try {\n    const { paymentId } = req.params;\n    const { paymentIntentId } = req.body;\n\n    // Get payment record\n    const [payment] = await db\n      .select()\n      .from(payments)\n      .where(eq(payments.id, paymentId))\n      .limit(1);\n\n    if (!payment) {\n      return res.status(404).json({ message: 'Payment not found' });\n    }\n\n    // Update payment status to paid\n    await db\n      .update(payments)\n      .set({ \n        status: 'paid',\n        paidAt: new Date(),\n        gatewayResponse: JSON.stringify({ \n          paymentIntentId,\n          confirmedAt: new Date().toISOString() \n        })\n      })\n      .where(eq(payments.id, paymentId));\n\n    // Get client and create/update subscription\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(eq(clients.id, payment.clientId))\n      .limit(1);\n\n    if (client) {\n      // Cancel existing active subscriptions\n      await db\n        .update(subscriptions)\n        .set({ \n          paymentStatus: 'cancelled',\n          cancelledAt: new Date()\n        })\n        .where(and(\n          eq(subscriptions.clientId, client.id),\n          eq(subscriptions.paymentStatus, 'paid')\n        ));\n\n      // Find the plan for this payment amount\n      const [plan] = await db\n        .select()\n        .from(plans)\n        .where(eq(plans.price, payment.amount))\n        .limit(1);\n\n      if (plan) {\n        // Create new active subscription\n        const [newSubscription] = await db\n          .insert(subscriptions)\n          .values({\n            clientId: client.id,\n            planId: plan.id,\n            planName: plan.name,\n            plan: plan.name.toLowerCase() as 'basic' | 'pro' | 'premium',\n            amount: payment.amount.toString(),\n            paymentStatus: 'paid',\n            startDate: new Date(),\n            endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n            autoRenew: true\n          })\n          .returning();\n\n        // Update payment with subscription ID\n        await db\n          .update(payments)\n          .set({ subscriptionId: newSubscription.id })\n          .where(eq(payments.id, paymentId));\n\n        // Update client status to active\n        await db\n          .update(clients)\n          .set({ \n            status: 'active',\n            updatedAt: new Date()\n          })\n          .where(eq(clients.id, client.id));\n      }\n    }\n\n    res.json({ \n      message: 'Payment confirmed and subscription activated',\n      paymentId,\n      status: 'paid'\n    });\n  } catch (error) {\n    console.error('Error confirming payment:', error);\n    res.status(500).json({ message: 'Failed to confirm payment' });\n  }\n});\n\n// Get payment history for a client\nrouter.get('/clients/:id/payments', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const paymentHistory = await db\n      .select({\n        id: payments.id,\n        amount: payments.amount,\n        currency: payments.currency,\n        status: payments.status,\n        paymentMethod: payments.paymentMethod,\n        transactionId: payments.transactionId,\n        paidAt: payments.paidAt,\n        createdAt: payments.createdAt,\n        subscriptionId: payments.subscriptionId\n      })\n      .from(payments)\n      .where(eq(payments.clientId, id))\n      .orderBy(payments.createdAt);\n\n    res.json(paymentHistory);\n  } catch (error) {\n    console.error('Error fetching payment history:', error);\n    res.status(500).json({ message: 'Failed to fetch payment history' });\n  }\n});\n\n// 📊 BILLING & INVOICING SYSTEM\n// =============================\n\n// Generate invoice for subscription\nrouter.post('/invoices/generate/:subscriptionId', async (req, res) => {\n  try {\n    const { subscriptionId } = req.params;\n\n    // Get subscription with client and plan details\n    const [subscription] = await db\n      .select({\n        id: subscriptions.id,\n        clientId: subscriptions.clientId,\n        planName: subscriptions.planName,\n        amount: subscriptions.amount,\n        startDate: subscriptions.startDate,\n        endDate: subscriptions.endDate,\n        clientName: clients.name,\n        clientEmail: clients.email,\n        clientAddress: clients.address\n      })\n      .from(subscriptions)\n      .leftJoin(clients, eq(clients.id, subscriptions.clientId))\n      .where(eq(subscriptions.id, subscriptionId))\n      .limit(1);\n\n    if (!subscription) {\n      return res.status(404).json({ message: 'Subscription not found' });\n    }\n\n    // Generate invoice (in real implementation, you'd create PDF)\n    const invoice = {\n      invoiceNumber: `INV-${Date.now()}`,\n      date: new Date().toISOString().split('T')[0],\n      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      client: {\n        name: subscription.clientName,\n        email: subscription.clientEmail,\n        address: subscription.clientAddress\n      },\n      items: [{\n        description: `${subscription.planName} Subscription`,\n        period: `${subscription.startDate?.toISOString().split('T')[0]} - ${subscription.endDate?.toISOString().split('T')[0]}`,\n        amount: parseInt(subscription.amount),\n        currency: 'IDR'\n      }],\n      total: parseInt(subscription.amount),\n      currency: 'IDR'\n    };\n\n    res.json({\n      message: 'Invoice generated successfully',\n      invoice\n    });\n  } catch (error) {\n    console.error('Error generating invoice:', error);\n    res.status(500).json({ message: 'Failed to generate invoice' });\n  }\n});\n\n// Get billing summary for all clients\nrouter.get('/billing/summary', async (req, res) => {\n  try {\n    const billingSummary = await db\n      .select({\n        clientId: clients.id,\n        clientName: clients.name,\n        planName: subscriptions.planName,\n        monthlyAmount: subscriptions.amount,\n        status: subscriptions.paymentStatus,\n        nextBilling: subscriptions.endDate,\n        autoRenew: subscriptions.autoRenew\n      })\n      .from(clients)\n      .leftJoin(subscriptions, and(\n        eq(subscriptions.clientId, clients.id),\n        eq(subscriptions.paymentStatus, 'paid')\n      ))\n      .where(eq(clients.status, 'active'));\n\n    res.json(billingSummary);\n  } catch (error) {\n    console.error('Error fetching billing summary:', error);\n    res.status(500).json({ message: 'Failed to fetch billing summary' });\n  }\n});\n\nexport default router;","size_bytes":9340},"client/src/components/FeatureConfigurationManager.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { toast } from '@/hooks/use-toast';\nimport { \n  ChartLine, ScanBarcode, Wrench, Package, PieChart, Users, Truck, \n  FileText, Settings, UserCog, Shield, Layers, MessageCircle, Palette,\n  Database, CreditCard, BarChart3, CheckCircle, XCircle, Save\n} from 'lucide-react';\n\n// Define all available application features\nconst APPLICATION_FEATURES = [\n  { \n    id: 'dashboard', \n    name: 'Dashboard & Analytics', \n    icon: ChartLine, \n    description: 'Main dashboard with business analytics and reports',\n    permission: 'dashboard_view'\n  },\n  { \n    id: 'pos', \n    name: 'Point of Sale (POS)', \n    icon: ScanBarcode, \n    description: 'Cash register and sales transactions',\n    permission: 'pos_access'\n  },\n  { \n    id: 'service', \n    name: 'Service Tickets', \n    icon: Wrench, \n    description: 'Repair service management and tracking',\n    permission: 'service_tickets_full'\n  },\n  { \n    id: 'inventory', \n    name: 'Inventory Management', \n    icon: Package, \n    description: 'Stock management and product catalog',\n    permission: 'inventory_full'\n  },\n  { \n    id: 'purchasing', \n    name: 'Purchasing System', \n    icon: Truck, \n    description: 'Purchase orders and supplier management',\n    permission: 'purchasing_full'\n  },\n  { \n    id: 'finance', \n    name: 'Finance & Payroll', \n    icon: PieChart, \n    description: 'Financial management and payroll processing',\n    permission: 'financial_full'\n  },\n  { \n    id: 'customers', \n    name: 'Customer Management', \n    icon: Users, \n    description: 'Customer database and relationship management',\n    permission: 'customers_full'\n  },\n  { \n    id: 'suppliers', \n    name: 'Supplier Management', \n    icon: Truck, \n    description: 'Supplier database and purchase management',\n    permission: 'suppliers_full'\n  },\n  { \n    id: 'users', \n    name: 'User Management', \n    icon: UserCog, \n    description: 'Staff accounts and access control',\n    permission: 'users_full'\n  },\n  { \n    id: 'roles', \n    name: 'Role Management', \n    icon: Shield, \n    description: 'User roles and permission management',\n    permission: 'roles_full'\n  },\n  { \n    id: 'reports', \n    name: 'Reports & Analytics', \n    icon: FileText, \n    description: 'Business reports and data analytics',\n    permission: 'reports_full'\n  },\n  { \n    id: 'stock_movements', \n    name: 'Stock Movements', \n    icon: Layers, \n    description: 'Inventory tracking and movement history',\n    permission: 'reports_inventory_view'\n  },\n  { \n    id: 'settings', \n    name: 'System Settings', \n    icon: Settings, \n    description: 'Application configuration and preferences',\n    permission: 'settings_full'\n  },\n  { \n    id: 'whatsapp', \n    name: 'WhatsApp Integration', \n    icon: MessageCircle, \n    description: 'WhatsApp business messaging and notifications',\n    permission: 'whatsapp_settings'\n  },\n  { \n    id: 'custom_branding', \n    name: 'Custom Branding', \n    icon: Palette, \n    description: 'Logo customization and brand colors',\n    permission: 'settings_full'\n  },\n  { \n    id: 'api_access', \n    name: 'API Access', \n    icon: Database, \n    description: 'REST API access for integrations',\n    permission: 'system_admin'\n  },\n  { \n    id: 'priority_support', \n    name: 'Priority Support', \n    icon: CreditCard, \n    description: 'Premium customer support and assistance',\n    permission: 'system_admin'\n  },\n];\n\nexport function FeatureConfigurationManager() {\n  const [selectedPlan, setSelectedPlan] = useState<string>('');\n  const [activeTab, setActiveTab] = useState('features');\n  const queryClient = useQueryClient();\n\n  // Fetch subscription plans\n  const { data: plans, isLoading: plansLoading } = useQuery({\n    queryKey: ['/api/admin/plans'],\n    retry: false,\n  });\n\n  // Fetch plan features configuration\n  const { data: planFeatures } = useQuery({\n    queryKey: ['/api/admin/plan-features', selectedPlan],\n    enabled: !!selectedPlan,\n    retry: false,\n  });\n\n  // Update plan features mutation\n  const updatePlanFeatures = useMutation({\n    mutationFn: async (data: { planId: string; features: any; limits: any }) => {\n      return apiRequest('PUT', `/api/admin/plans/${data.planId}/features`, {\n        features: data.features,\n        limits: data.limits\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Plan features updated successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/plans'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/plan-features', selectedPlan] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update plan features',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleFeatureToggle = (featureId: string, enabled: boolean) => {\n    const currentFeatures = planFeatures?.features || [];\n    const updatedFeatures = enabled \n      ? [...currentFeatures.filter((f: string) => f !== featureId), featureId]\n      : currentFeatures.filter((f: string) => f !== featureId);\n    \n    updatePlanFeatures.mutate({\n      planId: selectedPlan,\n      features: updatedFeatures,\n      limits: planFeatures?.limits || {}\n    });\n  };\n\n  const handleLimitUpdate = (limitType: string, value: number) => {\n    const updatedLimits = {\n      ...planFeatures?.limits || {},\n      [limitType]: value\n    };\n    \n    updatePlanFeatures.mutate({\n      planId: selectedPlan,\n      features: planFeatures?.features || [],\n      limits: updatedLimits\n    });\n  };\n\n  const selectedPlanData = plans?.find((p: any) => p.id === selectedPlan);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Plan Selection */}\n      <div className=\"flex items-center space-x-4\">\n        <Label htmlFor=\"plan-select\" className=\"text-sm font-medium\">Select Plan to Configure:</Label>\n        <Select value={selectedPlan} onValueChange={setSelectedPlan}>\n          <SelectTrigger className=\"w-[250px]\">\n            <SelectValue placeholder=\"Choose a subscription plan\" />\n          </SelectTrigger>\n          <SelectContent>\n            {plans?.map((plan: any) => (\n              <SelectItem key={plan.id} value={plan.id}>\n                <div className=\"flex items-center space-x-2\">\n                  <span>{plan.name}</span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {new Intl.NumberFormat('id-ID', {\n                      style: 'currency',\n                      currency: 'IDR',\n                      minimumFractionDigits: 0\n                    }).format(plan.price)}/mo\n                  </Badge>\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {selectedPlan && selectedPlanData && (\n        <Card className=\"border-2 border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              <span>Configure: {selectedPlanData.name}</span>\n            </CardTitle>\n            <CardDescription>\n              Customize features and limitations for this subscription plan\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"features\">🎛️ Features</TabsTrigger>\n                <TabsTrigger value=\"limits\">📊 Limits & Quotas</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"features\" className=\"space-y-4 mt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {APPLICATION_FEATURES.map((feature) => {\n                    const isEnabled = planFeatures?.features?.includes(feature.id) || false;\n                    const IconComponent = feature.icon;\n                    \n                    return (\n                      <Card key={feature.id} className={`transition-all ${isEnabled ? 'border-green-200 bg-green-50/50' : 'border-gray-200'}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <div className={`p-2 rounded-lg ${isEnabled ? 'bg-green-100' : 'bg-gray-100'}`}>\n                              <IconComponent className={`h-4 w-4 ${isEnabled ? 'text-green-600' : 'text-gray-500'}`} />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center justify-between\">\n                                <h4 className=\"text-sm font-medium truncate\">{feature.name}</h4>\n                                <Switch\n                                  checked={isEnabled}\n                                  onCheckedChange={(checked) => handleFeatureToggle(feature.id, checked)}\n                                  disabled={updatePlanFeatures.isPending}\n                                />\n                              </div>\n                              <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                                {feature.description}\n                              </p>\n                              <Badge variant={isEnabled ? \"default\" : \"secondary\"} className=\"mt-2 text-xs\">\n                                {isEnabled ? (\n                                  <>\n                                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                    Enabled\n                                  </>\n                                ) : (\n                                  <>\n                                    <XCircle className=\"h-3 w-3 mr-1\" />\n                                    Disabled\n                                  </>\n                                )}\n                              </Badge>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"limits\" className=\"space-y-6 mt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm flex items-center space-x-2\">\n                        <Users className=\"h-4 w-4\" />\n                        <span>User Limits</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div>\n                        <Label htmlFor=\"max-users\" className=\"text-xs\">Maximum Users</Label>\n                        <Input\n                          id=\"max-users\"\n                          type=\"number\"\n                          value={planFeatures?.limits?.maxUsers || selectedPlanData.maxUsers || 5}\n                          onChange={(e) => handleLimitUpdate('maxUsers', parseInt(e.target.value))}\n                          className=\"mt-1\"\n                          min=\"1\"\n                          max=\"1000\"\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm flex items-center space-x-2\">\n                        <CreditCard className=\"h-4 w-4\" />\n                        <span>Transaction Limits</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div>\n                        <Label htmlFor=\"max-transactions\" className=\"text-xs\">Transactions/Month</Label>\n                        <Input\n                          id=\"max-transactions\"\n                          type=\"number\"\n                          value={planFeatures?.limits?.maxTransactionsPerMonth || selectedPlanData.maxTransactionsPerMonth || 1000}\n                          onChange={(e) => handleLimitUpdate('maxTransactionsPerMonth', parseInt(e.target.value))}\n                          className=\"mt-1\"\n                          min=\"1\"\n                          step=\"100\"\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm flex items-center space-x-2\">\n                        <Database className=\"h-4 w-4\" />\n                        <span>Storage Limits</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div>\n                        <Label htmlFor=\"max-storage\" className=\"text-xs\">Storage (GB)</Label>\n                        <Input\n                          id=\"max-storage\"\n                          type=\"number\"\n                          value={planFeatures?.limits?.maxStorageGB || selectedPlanData.maxStorageGB || 1}\n                          onChange={(e) => handleLimitUpdate('maxStorageGB', parseInt(e.target.value))}\n                          className=\"mt-1\"\n                          min=\"1\"\n                          max=\"1000\"\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Summary */}\n                <Card className=\"bg-blue-50/50 border-blue-200\">\n                  <CardHeader>\n                    <CardTitle className=\"text-sm text-blue-800\">📋 Configuration Summary</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <span className=\"font-medium text-blue-700\">Active Features:</span>\n                        <span className=\"ml-2 font-bold\">{planFeatures?.features?.length || 0}</span>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-blue-700\">Max Users:</span>\n                        <span className=\"ml-2 font-bold\">{planFeatures?.limits?.maxUsers || selectedPlanData.maxUsers}</span>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-blue-700\">Monthly Transactions:</span>\n                        <span className=\"ml-2 font-bold\">{(planFeatures?.limits?.maxTransactionsPerMonth || selectedPlanData.maxTransactionsPerMonth)?.toLocaleString()}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n\n      {!selectedPlan && (\n        <Card className=\"border-dashed border-2\">\n          <CardContent className=\"text-center py-12\">\n            <Settings className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Select a Plan to Configure</h3>\n            <p className=\"text-muted-foreground\">\n              Choose a subscription plan above to configure its features and limitations\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16197},"server/realtime.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\n\ninterface ClientConnection {\n  ws: WebSocket;\n  tenantId?: string;\n  userId?: string;\n}\n\nexport class RealtimeService {\n  private wss: WebSocketServer | null = null;\n  private clients: Map<string, ClientConnection> = new Map();\n\n  initialize(server: Server) {\n    console.log('🔄 Initializing WebSocket server for real-time updates...');\n    \n    this.wss = new WebSocketServer({ \n      server,\n      path: '/ws'\n    });\n\n    this.wss.on('connection', (ws: WebSocket, req) => {\n      const clientId = this.generateClientId();\n      console.log(`🔌 WebSocket client connected: ${clientId}`);\n\n      this.clients.set(clientId, { ws });\n\n      // Handle authentication and tenant setup\n      ws.on('message', (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString());\n          \n          if (message.type === 'auth') {\n            const client = this.clients.get(clientId);\n            if (client) {\n              client.tenantId = message.tenantId;\n              client.userId = message.userId;\n              console.log(`✅ Client ${clientId} authenticated for tenant: ${message.tenantId}`);\n              \n              // Send acknowledgment\n              ws.send(JSON.stringify({\n                type: 'auth_success',\n                clientId\n              }));\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      });\n\n      ws.on('close', () => {\n        console.log(`🔌 WebSocket client disconnected: ${clientId}`);\n        this.clients.delete(clientId);\n      });\n\n      ws.on('error', (error) => {\n        console.error(`WebSocket error for client ${clientId}:`, error);\n        this.clients.delete(clientId);\n      });\n\n      // Send welcome message\n      ws.send(JSON.stringify({\n        type: 'connected',\n        clientId,\n        message: 'Real-time connection established'\n      }));\n    });\n\n    console.log('✅ WebSocket server initialized');\n  }\n\n  // Broadcast data change to all clients of a tenant\n  broadcastToTenant(tenantId: string | undefined, event: {\n    resource: string;\n    action: 'create' | 'update' | 'delete';\n    data?: any;\n    id?: string;\n  }) {\n    if (!this.wss) return;\n\n    const message = JSON.stringify({\n      type: 'data_update',\n      timestamp: new Date().toISOString(),\n      ...event\n    });\n\n    let sentCount = 0;\n    \n    this.clients.forEach((client, clientId) => {\n      if (client.ws.readyState === WebSocket.OPEN) {\n        // Send to all clients if no tenant specified, or matching tenant clients\n        if (!tenantId || client.tenantId === tenantId) {\n          client.ws.send(message);\n          sentCount++;\n        }\n      } else {\n        // Clean up dead connections\n        this.clients.delete(clientId);\n      }\n    });\n\n    console.log(`📡 Broadcasted ${event.resource} ${event.action} to ${sentCount} clients`);\n  }\n\n  // Broadcast to all clients (for global updates)\n  broadcast(event: any) {\n    this.broadcastToTenant(undefined, event);\n  }\n\n  // Get connected clients count\n  getConnectedClientsCount(tenantId?: string): number {\n    if (!tenantId) {\n      return this.clients.size;\n    }\n    \n    return Array.from(this.clients.values())\n      .filter(client => client.tenantId === tenantId).length;\n  }\n\n  private generateClientId(): string {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const realtimeService = new RealtimeService();","size_bytes":3559},"client/src/lib/websocket.ts":{"content":"import { useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface WebSocketMessage {\n  type: string;\n  resource?: string;\n  action?: 'create' | 'update' | 'delete';\n  data?: any;\n  id?: string;\n  timestamp?: string;\n}\n\nclass WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectInterval = 3000;\n  private isConnecting = false;\n  private queryClient: any = null;\n  private toast: any = null;\n\n  connect(queryClient: any, toast: any) {\n    if (this.isConnecting || (this.ws && this.ws.readyState === WebSocket.OPEN)) {\n      return;\n    }\n\n    this.queryClient = queryClient;\n    this.toast = toast;\n    this.isConnecting = true;\n\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      console.log('🔄 Connecting to WebSocket...', wsUrl);\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('✅ WebSocket connected');\n        this.reconnectAttempts = 0;\n        this.isConnecting = false;\n        \n        // Send authentication if user is logged in\n        // We'll get user info from session/auth state\n        this.sendAuth();\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          this.handleMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('🔌 WebSocket disconnected', event.code, event.reason);\n        this.isConnecting = false;\n        this.ws = null;\n        \n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          console.log(`🔄 Attempting reconnect ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n          setTimeout(() => this.connect(queryClient, toast), this.reconnectInterval);\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.isConnecting = false;\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      this.isConnecting = false;\n    }\n  }\n\n  private sendAuth() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      // For now, send basic auth - we can enhance this later\n      this.ws.send(JSON.stringify({\n        type: 'auth',\n        tenantId: 'main', // Default tenant for now\n        userId: 'current_user'\n      }));\n    }\n  }\n\n  private handleMessage(message: WebSocketMessage) {\n    console.log('📨 WebSocket message received:', message);\n\n    switch (message.type) {\n      case 'connected':\n        console.log('🎉 Real-time connection established');\n        break;\n        \n      case 'auth_success':\n        console.log('✅ WebSocket authenticated');\n        break;\n        \n      case 'data_update':\n        this.handleDataUpdate(message);\n        break;\n        \n      default:\n        console.log('❓ Unknown WebSocket message type:', message.type, message);\n    }\n  }\n\n  private handleDataUpdate(message: WebSocketMessage) {\n    if (!this.queryClient || !message.resource) return;\n\n    console.log(`🔄 Updating ${message.resource} data (${message.action})`);\n\n    // Map resources to their query keys\n    const queryKeyMap: Record<string, string[]> = {\n      users: ['/api/users'],\n      customers: ['/api/customers'],\n      products: ['/api/products', '/api/products/low-stock'],\n      categories: ['/api/categories'],\n      'service-tickets': ['/api/service-tickets'],\n      suppliers: ['/api/suppliers'],\n      transactions: ['/api/transactions'],\n      'warranty-claims': ['/api/warranty-claims'],\n      roles: ['/api/roles'],\n      dashboard: ['/api/dashboard/stats'],\n      whatsapp: ['/api/whatsapp/status'],\n      inventory: ['/api/products', '/api/categories', '/api/reports/stock-movements'],\n      'purchase-orders': ['/api/purchase-orders', '/api/purchase-orders/outstanding-items'],\n      'stock-movements': ['/api/reports/stock-movements', '/api/products']\n    };\n\n    // Invalidate relevant queries to trigger refetch\n    const queryKeys = queryKeyMap[message.resource] || [];\n    \n    queryKeys.forEach(queryKey => {\n      this.queryClient.invalidateQueries({ queryKey: [queryKey] });\n    });\n\n    // Also invalidate dashboard stats for most updates\n    if (message.resource !== 'dashboard') {\n      this.queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    }\n\n    // Show toast notification for updates from other users\n    if (this.toast && message.action) {\n      const resourceNames: Record<string, string> = {\n        users: 'User',\n        customers: 'Customer',\n        products: 'Produk',\n        'service-tickets': 'Tiket Servis',\n        suppliers: 'Supplier',\n        transactions: 'Transaksi',\n        'warranty-claims': 'Garansi',\n        roles: 'Role'\n      };\n      \n      const actionNames = {\n        create: 'ditambahkan',\n        update: 'diperbarui',\n        delete: 'dihapus'\n      };\n\n      const resourceName = resourceNames[message.resource] || message.resource;\n      const actionName = actionNames[message.action] || message.action;\n\n      this.toast({\n        title: \"Data Diperbarui\",\n        description: `${resourceName} telah ${actionName}`,\n        duration: 3000\n      });\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}\n\nexport const websocketManager = new WebSocketManager();\n\n// React hook for easy WebSocket integration\nexport function useWebSocket() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const connect = () => {\n    websocketManager.connect(queryClient, toast);\n  };\n\n  const disconnect = () => {\n    websocketManager.disconnect();\n  };\n\n  return {\n    connect,\n    disconnect,\n    isConnected: websocketManager.isConnected()\n  };\n}","size_bytes":6171},"client/src/pages/warranty.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Search, Calendar, Clock, Wrench, ShoppingCart, Filter, CheckCircle, AlertCircle, Package, ArrowRight } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { getCurrentJakartaTime, formatDateShort } from '@shared/utils/timezone';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\ninterface WarrantyItem {\n  id: string;\n  type: 'service' | 'sale';\n  customerName: string;\n  customerPhone?: string;\n  productName?: string;\n  deviceInfo?: string;\n  warrantyDuration: number;\n  warrantyStartDate: string;\n  warrantyEndDate?: string;\n  status: 'active' | 'expired' | 'unlimited';\n  daysRemaining?: number;\n  ticketNumber?: string;\n  transactionNumber?: string;\n  customerId: string; // Add customerId to warranty item\n}\n\n// Import specific schema types with aliasing\nimport { WarrantyClaim as SharedWarrantyClaim } from \"@shared/schema\";\n\n// Extended WarrantyClaim interface with joined reference fields (type-safe)\ntype EnhancedWarrantyClaim = SharedWarrantyClaim & {\n  customerName?: string;\n  transactionNumber?: string;\n  serviceTicketNumber?: string;\n};\n\n\nfunction getWarrantyStatus(endDate?: string, duration?: number): { status: 'active' | 'expired' | 'unlimited', daysRemaining?: number } {\n  if (!duration || duration >= 9999) {\n    return { status: 'unlimited' };\n  }\n  \n  if (!endDate) {\n    return { status: 'expired' };\n  }\n  \n  const now = getCurrentJakartaTime();\n  const end = new Date(endDate);\n  const diffTime = end.getTime() - now.getTime();\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  if (diffDays <= 0) {\n    return { status: 'expired' };\n  }\n  \n  return { status: 'active', daysRemaining: diffDays };\n}\n\nfunction formatDaysRemaining(days?: number): string {\n  if (!days) return \"-\";\n  \n  if (days === 1) return \"1 hari\";\n  if (days < 30) return `${days} hari`;\n  if (days < 365) {\n    const months = Math.floor(days / 30);\n    const remainingDays = days % 30;\n    return `${months} bulan ${remainingDays} hari`;\n  }\n  \n  const years = Math.floor(days / 365);\n  const remainingDays = days % 365;\n  const months = Math.floor(remainingDays / 30);\n  \n  return `${years} tahun ${months} bulan`;\n}\n\nexport default function WarrantyPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<\"all\" | \"service\" | \"sale\">(\"all\");\n  const [filterStatus, setFilterStatus] = useState<\"all\" | \"active\" | \"expired\" | \"unlimited\">(\"all\");\n  const [claimDialogOpen, setClaimDialogOpen] = useState(false);\n  const [processDialogOpen, setProcessDialogOpen] = useState(false);\n  const [acceptDialogOpen, setAcceptDialogOpen] = useState(false);\n  const [selectedWarranty, setSelectedWarranty] = useState<WarrantyItem | null>(null);\n  const [selectedClaim, setSelectedClaim] = useState<EnhancedWarrantyClaim | null>(null);\n  const [activeTab, setActiveTab] = useState(\"warranties\");\n  \n  const { toast } = useToast();\n\n  // Fetch service tickets with warranties\n  const { data: serviceTickets = [] } = useQuery({\n    queryKey: [\"/api/service-tickets\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/service-tickets\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch service tickets\");\n      return response.json();\n    },\n  });\n\n  // Fetch transactions with warranties\n  const { data: transactions = [] } = useQuery({\n    queryKey: [\"/api/transactions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/transactions\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch transactions\");\n      return response.json();\n    },\n  });\n\n  // Fetch customers for lookup\n  const { data: customers = [] } = useQuery({\n    queryKey: [\"/api/customers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/customers\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch customers\");\n      return response.json();\n    },\n  });\n\n  // Fetch products for lookup\n  const { data: products = [] } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/products\", { credentials: \"include\" });\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n  });\n\n  // Fetch warranty claims\n  const { data: warrantyClaims = [] } = useQuery<EnhancedWarrantyClaim[]>({\n    queryKey: [\"/api/warranty-claims\"],\n  });\n\n  // Enhance warranty claims with customer data\n  const enhancedClaims: EnhancedWarrantyClaim[] = warrantyClaims.map((claim: EnhancedWarrantyClaim) => {\n    const customer = customers.find((c: any) => c.id === claim.customerId);\n    let deviceInfo = \"\";\n    let productName = \"\";\n\n    if (claim.originalServiceTicketId) {\n      const ticket = serviceTickets.find((t: any) => t.id === claim.originalServiceTicketId);\n      if (ticket) {\n        deviceInfo = `${ticket.deviceType}${ticket.deviceBrand ? ` - ${ticket.deviceBrand}` : ''}${ticket.deviceModel ? ` ${ticket.deviceModel}` : ''}`;\n      }\n    }\n\n    if (claim.originalTransactionId) {\n      const transaction = transactions.find((t: any) => t.id === claim.originalTransactionId);\n      if (transaction) {\n        productName = transaction.items?.map((item: any) => item.product?.name || 'Unknown Product').join(', ') || 'Unknown Product';\n      }\n    }\n\n    return {\n      ...claim,\n      customerName: customer?.name || 'Unknown Customer',\n      deviceInfo,\n      productName,\n    };\n  });\n\n  // Transform data into warranty items\n  const warrantyItems: WarrantyItem[] = [\n    // Service warranties\n    ...serviceTickets\n      .filter((ticket: any) => ticket.warrantyDuration && ticket.warrantyDuration > 0)\n      .map((ticket: any) => {\n        const customer = customers.find((c: any) => c.id === ticket.customerId);\n        const warrantyStatus = getWarrantyStatus(ticket.warrantyEndDate, ticket.warrantyDuration);\n        \n        return {\n          id: ticket.id,\n          type: 'service' as const,\n          customerName: customer?.name || 'Unknown Customer',\n          customerPhone: customer?.phone,\n          deviceInfo: `${ticket.deviceType}${ticket.deviceBrand ? ` - ${ticket.deviceBrand}` : ''}${ticket.deviceModel ? ` ${ticket.deviceModel}` : ''}`,\n          warrantyDuration: ticket.warrantyDuration,\n          warrantyStartDate: ticket.warrantyStartDate,\n          warrantyEndDate: ticket.warrantyEndDate,\n          status: warrantyStatus.status,\n          daysRemaining: warrantyStatus.daysRemaining,\n          ticketNumber: ticket.ticketNumber,\n          customerId: ticket.customerId,\n        };\n      }),\n    \n    // Transaction/POS warranties\n    ...transactions\n      .filter((transaction: any) => transaction.warrantyDuration && transaction.warrantyDuration > 0)\n      .map((transaction: any) => {\n        const customer = customers.find((c: any) => c.id === transaction.customerId);\n        const warrantyStatus = getWarrantyStatus(transaction.warrantyEndDate, transaction.warrantyDuration);\n        \n        // Get product names from transaction items\n        const productNames = transaction.items?.map((item: any) => {\n          return item.product?.name || 'Unknown Product';\n        }).join(', ') || 'Unknown Product';\n        \n        return {\n          id: transaction.id,\n          type: 'sale' as const,\n          customerName: customer?.name || 'Walk-in Customer',\n          customerPhone: customer?.phone,\n          productName: productNames,\n          warrantyDuration: transaction.warrantyDuration,\n          warrantyStartDate: transaction.warrantyStartDate,\n          warrantyEndDate: transaction.warrantyEndDate,\n          status: warrantyStatus.status,\n          daysRemaining: warrantyStatus.daysRemaining,\n          transactionNumber: transaction.transactionNumber,\n          customerId: transaction.customerId,\n        };\n      }),\n  ];\n\n  // Filter warranties\n  const filteredWarranties = warrantyItems.filter((item) => {\n    const matchesSearch = \n      item.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.customerPhone?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.productName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.deviceInfo?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.ticketNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.transactionNumber?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterType === \"all\" || item.type === filterType;\n    const matchesStatus = filterStatus === \"all\" || item.status === filterStatus;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  // Sort by most recent warranties and urgent expiring ones\n  const sortedWarranties = filteredWarranties.sort((a, b) => {\n    // Priority: expiring soon (1-7 days) > active > expired > unlimited\n    if (a.status === 'active' && b.status === 'active') {\n      const aDays = a.daysRemaining || 999999;\n      const bDays = b.daysRemaining || 999999;\n      return aDays - bDays; // Sort by days remaining (ascending)\n    }\n    \n    if (a.status === 'active' && b.status !== 'active') return -1;\n    if (a.status !== 'active' && b.status === 'active') return 1;\n    \n    // Sort by start date (most recent first)\n    return new Date(b.warrantyStartDate).getTime() - new Date(a.warrantyStartDate).getTime();\n  });\n\n  const getStatusBadge = (item: WarrantyItem) => {\n    switch (item.status) {\n      case 'active':\n        const isUrgent = item.daysRemaining && item.daysRemaining <= 7;\n        const isExpiringSoon = item.daysRemaining && item.daysRemaining <= 30;\n        \n        if (isUrgent) {\n          return (\n            <Badge variant=\"destructive\" className=\"flex items-center space-x-1\">\n              <span>🚨</span>\n              <span>Segera Berakhir ({item.daysRemaining} hari)</span>\n            </Badge>\n          );\n        } else if (isExpiringSoon) {\n          return (\n            <Badge variant=\"outline\" className=\"flex items-center space-x-1 text-orange-600 border-orange-200\">\n              <span>⏰</span>\n              <span>Perhatian ({item.daysRemaining} hari)</span>\n            </Badge>\n          );\n        } else {\n          return (\n            <Badge variant=\"default\" className=\"flex items-center space-x-1 bg-green-100 text-green-800\">\n              <span>✅</span>\n              <span>Aktif ({item.daysRemaining} hari)</span>\n            </Badge>\n          );\n        }\n      case 'expired':\n        return (\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1 bg-red-100 text-red-800\">\n            <span>❌</span>\n            <span>Berakhir</span>\n          </Badge>\n        );\n      case 'unlimited':\n        return (\n          <Badge variant=\"outline\" className=\"flex items-center space-x-1 bg-blue-100 text-blue-800\">\n            <span>♾️</span>\n            <span>Tanpa Batas</span>\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\" className=\"flex items-center space-x-1\">\n            <span>❓</span>\n            <span>Tidak Diketahui</span>\n          </Badge>\n        );\n    }\n  };\n\n  const activeCount = warrantyItems.filter(item => item.status === 'active').length;\n  const expiredCount = warrantyItems.filter(item => item.status === 'expired').length;\n  const unlimitedCount = warrantyItems.filter(item => item.status === 'unlimited').length;\n  const urgentCount = warrantyItems.filter(item => \n    item.status === 'active' && item.daysRemaining && item.daysRemaining <= 7\n  ).length;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Management Garansi\" breadcrumb=\"Beranda / Management Garansi\" />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"warranties\" data-testid=\"tab-warranties\">Daftar Garansi</TabsTrigger>\n              <TabsTrigger value=\"claims\" data-testid=\"tab-claims\">Klaim Garansi</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"warranties\" className=\"space-y-6\">\n              {/* Summary Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Garansi Aktif</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{activeCount}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Segera Berakhir</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-destructive\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-destructive\">{urgentCount}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      ≤ 7 hari\n                    </p>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Tanpa Batas</CardTitle>\n                    <Clock className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{unlimitedCount}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Berakhir</CardTitle>\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{expiredCount}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Filters and Search */}\n              <Card className=\"mb-6\">\n                <CardHeader>\n                  <CardTitle>Filter Garansi</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col md:flex-row gap-4\">\n                    <div className=\"relative flex-1\">\n                      <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Cari berdasarkan customer, produk, nomor tiket...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10\"\n                        data-testid=\"input-warranty-search\"\n                      />\n                    </div>\n                    \n                    <Select value={filterType} onValueChange={(value: any) => setFilterType(value)}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"Filter Tipe\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Semua Tipe</SelectItem>\n                        <SelectItem value=\"service\">Service</SelectItem>\n                        <SelectItem value=\"sale\">Penjualan</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    \n                    <Select value={filterStatus} onValueChange={(value: any) => setFilterStatus(value)}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"Filter Status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Semua Status</SelectItem>\n                        <SelectItem value=\"active\">Aktif</SelectItem>\n                        <SelectItem value=\"expired\">Berakhir</SelectItem>\n                        <SelectItem value=\"unlimited\">Tanpa Batas</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Warranty Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Daftar Garansi ({sortedWarranties.length})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Tipe</TableHead>\n                      <TableHead>Customer</TableHead>\n                      <TableHead>Produk/Device</TableHead>\n                      <TableHead>Nomor Referensi</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Mulai</TableHead>\n                      <TableHead>Berakhir</TableHead>\n                      <TableHead>Sisa Waktu</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {sortedWarranties.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={8} className=\"text-center py-8\">\n                          {searchTerm || filterType !== \"all\" || filterStatus !== \"all\" \n                            ? \"Tidak ada garansi yang sesuai dengan filter\"\n                            : \"Belum ada garansi terdaftar\"}\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      sortedWarranties.map((warranty) => (\n                        <TableRow key={`${warranty.type}-${warranty.id}`}>\n                          <TableCell>\n                            <div className=\"flex items-center gap-2\">\n                              {warranty.type === 'service' ? (\n                                <Wrench className=\"h-4 w-4 text-blue-600\" />\n                              ) : (\n                                <ShoppingCart className=\"h-4 w-4 text-green-600\" />\n                              )}\n                              <span className=\"capitalize\">\n                                {warranty.type === 'service' ? 'Service' : 'Penjualan'}\n                              </span>\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{warranty.customerName}</div>\n                              {warranty.customerPhone && (\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {warranty.customerPhone}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <div className=\"max-w-xs truncate\">\n                              {warranty.productName || warranty.deviceInfo}\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <code className=\"text-sm bg-muted px-1 py-0.5 rounded\">\n                              {warranty.ticketNumber || warranty.transactionNumber}\n                            </code>\n                          </TableCell>\n                          \n                          <TableCell>\n                            {getStatusBadge(warranty)}\n                          </TableCell>\n                          \n                          <TableCell>\n                            {formatDateShort(warranty.warrantyStartDate)}\n                          </TableCell>\n                          \n                          <TableCell>\n                            {warranty.status === 'unlimited' \n                              ? 'Tanpa Batas' \n                              : warranty.warrantyEndDate \n                                ? formatDateShort(warranty.warrantyEndDate)\n                                : '-'\n                            }\n                          </TableCell>\n                          \n                          <TableCell>\n                            {warranty.status === 'unlimited' \n                              ? 'Tanpa Batas'\n                              : warranty.status === 'expired'\n                                ? 'Berakhir'\n                                : formatDaysRemaining(warranty.daysRemaining)\n                            }\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                    </Table>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"claims\" className=\"space-y-6\">\n              {/* Warranty Claims Section */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Klaim Pending</CardTitle>\n                    <AlertCircle className=\"h-4 w-4 text-orange-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{enhancedClaims.filter(c => c.status === 'pending').length}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Klaim Disetujui</CardTitle>\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{enhancedClaims.filter(c => c.status === 'approved').length}</div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Klaim Selesai</CardTitle>\n                    <Package className=\"h-4 w-4 text-blue-600\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{enhancedClaims.filter(c => c.status === 'processed').length}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Warranty Claims Table */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle>Daftar Klaim Garansi</CardTitle>\n                  <Button \n                    onClick={() => setClaimDialogOpen(true)}\n                    data-testid=\"button-create-claim\"\n                  >\n                    Buat Klaim Garansi\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>No. Klaim</TableHead>\n                          <TableHead>Referensi</TableHead>\n                          <TableHead>Tipe</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Produk/Device</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Tanggal</TableHead>\n                          <TableHead>Aksi</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {enhancedClaims.length === 0 ? (\n                          <TableRow>\n                            <TableCell colSpan={8} className=\"text-center py-8\">\n                              Belum ada klaim garansi\n                            </TableCell>\n                          </TableRow>\n                        ) : (\n                          enhancedClaims.map((claim) => (\n                            <TableRow key={claim.id}>\n                              <TableCell>\n                                <code className=\"text-sm bg-muted px-1 py-0.5 rounded\">\n                                  {claim.claimNumber}\n                                </code>\n                              </TableCell>\n                              \n                              <TableCell>\n                                <div className=\"space-y-1\">\n                                  {claim.transactionNumber ? (\n                                    <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 text-xs\">\n                                      📋 {claim.transactionNumber}\n                                    </Badge>\n                                  ) : claim.serviceTicketNumber ? (\n                                    <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 text-xs\">\n                                      🔧 {claim.serviceTicketNumber}\n                                    </Badge>\n                                  ) : (\n                                    <span className=\"text-gray-400 text-xs\">-</span>\n                                  )}\n                                </div>\n                              </TableCell>\n                              \n                              <TableCell>\n                                <div className=\"flex items-center gap-2\">\n                                  {claim.claimType === 'service' ? (\n                                    <Wrench className=\"h-4 w-4 text-blue-600\" />\n                                  ) : (\n                                    <ShoppingCart className=\"h-4 w-4 text-green-600\" />\n                                  )}\n                                  <span className=\"capitalize\">\n                                    {claim.claimType === 'service' ? 'Service' : 'Retur Penjualan'}\n                                  </span>\n                                </div>\n                              </TableCell>\n                              \n                              <TableCell>\n                                <div className=\"font-medium\">{claim.customerName}</div>\n                              </TableCell>\n                              \n                              <TableCell>\n                                <div className=\"max-w-xs truncate\">\n                                  {claim.productName || claim.deviceInfo}\n                                </div>\n                              </TableCell>\n                              \n                              <TableCell>\n                                <Badge variant={\n                                  claim.status === 'pending' ? 'secondary' :\n                                  claim.status === 'approved' ? 'default' :\n                                  claim.status === 'processed' ? 'outline' :\n                                  'destructive'\n                                }>\n                                  {claim.status === 'pending' ? 'Pending' :\n                                   claim.status === 'approved' ? 'Disetujui' :\n                                   claim.status === 'processed' ? 'Selesai' :\n                                   'Ditolak'}\n                                </Badge>\n                              </TableCell>\n                              \n                              <TableCell>\n                                {formatDateShort(claim.claimDate)}\n                              </TableCell>\n                              \n                              <TableCell>\n                                <div className=\"flex gap-2\">\n                                  {claim.status === 'pending' && (\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      onClick={() => {\n                                        setSelectedClaim(claim);\n                                        setProcessDialogOpen(true);\n                                      }}\n                                      data-testid={`button-process-${claim.id}`}\n                                    >\n                                      Proses\n                                    </Button>\n                                  )}\n                                  {claim.status === 'approved' && (\n                                    <Button\n                                      size=\"sm\"\n                                      onClick={() => {\n                                        setSelectedClaim(claim);\n                                        setAcceptDialogOpen(true);\n                                      }}\n                                      data-testid={`button-accept-${claim.id}`}\n                                    >\n                                      Terima Garansi\n                                    </Button>\n                                  )}\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          {/* Create Warranty Claim Dialog */}\n          <Dialog open={claimDialogOpen} onOpenChange={setClaimDialogOpen}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Buat Klaim Garansi</DialogTitle>\n              </DialogHeader>\n              <CreateClaimForm \n                onSuccess={() => {\n                  setClaimDialogOpen(false);\n                }}\n                warrantyItems={sortedWarranties}\n              />\n            </DialogContent>\n          </Dialog>\n\n          {/* Process Warranty Claim Dialog */}\n          <Dialog open={processDialogOpen} onOpenChange={setProcessDialogOpen}>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Proses Klaim Garansi</DialogTitle>\n              </DialogHeader>\n              {selectedClaim && (\n                <ProcessClaimForm \n                  claim={selectedClaim}\n                  onSuccess={() => {\n                    setProcessDialogOpen(false);\n                    setSelectedClaim(null);\n                  }}\n                />\n              )}\n            </DialogContent>\n          </Dialog>\n\n          {/* Accept Warranty Dialog */}\n          <Dialog open={acceptDialogOpen} onOpenChange={setAcceptDialogOpen}>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Terima Garansi</DialogTitle>\n              </DialogHeader>\n              {selectedClaim && (\n                <AcceptWarrantyForm \n                  claim={selectedClaim}\n                  onSuccess={() => {\n                    setAcceptDialogOpen(false);\n                    setSelectedClaim(null);\n                  }}\n                />\n              )}\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}\n\n// Form schemas - aligned with shared/schema.ts\nconst createClaimSchema = z.object({\n  warrantyItemId: z.string().min(1, \"Pilih item garansi\"),\n  claimType: z.enum(['service', 'sales_return']),\n  claimReason: z.string().min(1, \"Deskripsi diperlukan\"),\n  notes: z.string().optional(),\n});\n\n// Dynamic schema for process claim - returnCondition required for approved sales_return\nconst createProcessClaimSchema = (claimType: string, action: string) => z.object({\n  action: z.enum(['approve', 'reject']),\n  adminNotes: z.string().optional(),\n  returnCondition: (claimType === 'sales_return' && action === 'approve')\n    ? z.enum(['normal_stock', 'damaged_stock'], {\n        required_error: \"Pilih kondisi barang untuk sales return yang disetujui\"\n      })\n    : z.enum(['normal_stock', 'damaged_stock']).optional(),\n});\n\n// Dynamic schema validation for accept warranty - returnCondition required for sales_return\nconst createAcceptWarrantySchema = (claimType: string) => z.object({\n  returnCondition: claimType === 'sales_return' \n    ? z.enum(['normal_stock', 'damaged_stock'], { \n        required_error: \"Pilih kondisi barang untuk sales return\" \n      })\n    : z.enum(['normal_stock', 'damaged_stock']).optional(),\n  notes: z.string().optional(),\n});\n\n// Helper function for status badges\nfunction getStatusBadge(status: string) {\n  const statusConfig = {\n    'active': { color: 'bg-green-500', label: 'Aktif' },\n    'expired': { color: 'bg-red-500', label: 'Berakhir' },\n    'claimed': { color: 'bg-blue-500', label: 'Diklaim' },\n    'completed': { color: 'bg-gray-500', label: 'Selesai' }\n  };\n  \n  const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.expired;\n  return (\n    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ${config.color}`}>\n      {config.label}\n    </span>\n  );\n}\n\n// Form Components\nfunction CreateClaimForm({ onSuccess, warrantyItems }: { onSuccess: () => void; warrantyItems: WarrantyItem[] }) {\n  const { toast } = useToast();\n  const [noteNumber, setNoteNumber] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<WarrantyItem[]>([]);\n\n  const form = useForm({\n    resolver: zodResolver(createClaimSchema),\n    defaultValues: {\n      warrantyItemId: \"\",\n      claimType: \"service\" as const,\n      claimReason: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Search function for warranty items\n  useEffect(() => {\n    if (noteNumber.trim().length >= 3) {\n      const activeWarranties = warrantyItems.filter(item => item.status === 'active');\n      const filtered = activeWarranties.filter(item => \n        (item.ticketNumber && item.ticketNumber.toLowerCase().includes(noteNumber.toLowerCase())) ||\n        (item.transactionNumber && item.transactionNumber.toLowerCase().includes(noteNumber.toLowerCase()))\n      );\n      setSearchResults(filtered);\n    } else {\n      setSearchResults([]);\n    }\n  }, [noteNumber, warrantyItems]);\n\n  const createClaimMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createClaimSchema>) => {\n      // Find the selected warranty item to get the correct mapping\n      const selectedItem = warrantyItems.find(item => item.id === data.warrantyItemId);\n      if (!selectedItem) {\n        throw new Error(\"Item garansi tidak ditemukan\");\n      }\n\n      // Get customerId directly from the warranty item\n      const customerId = selectedItem.customerId;\n      \n      if (!customerId) {\n        throw new Error(\"Customer ID tidak ditemukan untuk item garansi ini\");\n      }\n\n      // Transform data to match backend schema\n      const payload = {\n        claimType: data.claimType,\n        claimReason: data.claimReason,\n        notes: data.notes,\n        customerId: customerId,\n        // Map based on warranty item type\n        originalTransactionId: selectedItem.type === 'sale' ? selectedItem.id : undefined,\n        originalServiceTicketId: selectedItem.type === 'service' ? selectedItem.id : undefined,\n      };\n\n      return apiRequest(\"POST\", \"/api/warranty-claims\", payload);\n    },\n    onSuccess: () => {\n      toast({ title: \"Klaim garansi berhasil dibuat\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/warranty-claims\"] });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Gagal membuat klaim\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const activeWarranties = warrantyItems.filter(item => item.status === 'active');\n\n  return (\n    <form onSubmit={form.handleSubmit((data) => createClaimMutation.mutate(data))} className=\"space-y-4\">\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"warrantyItemId\">Nomor Nota/Tiket</Label>\n          <div className=\"text-sm text-muted-foreground mb-2\">\n            🔍 Masukan nomor nota service atau nomor garansi untuk mencari item yang akan diklaim\n          </div>\n          <div className=\"space-y-3\">\n            <Input\n              placeholder=\"Masukan nomor nota/tiket (contoh: TKT-001, TXN-001)\"\n              value={noteNumber}\n              onChange={(e) => setNoteNumber(e.target.value)}\n              data-testid=\"input-note-number\"\n              className=\"text-base\"\n            />\n            \n            {noteNumber && searchResults.length > 0 && (\n              <div className=\"border rounded-lg p-3 bg-gray-50\">\n                <p className=\"text-sm font-medium mb-2\">📋 Item ditemukan:</p>\n                <div className=\"space-y-2\">\n                  {searchResults.map((item) => (\n                    <div \n                      key={item.id}\n                      className={`p-3 border rounded cursor-pointer transition-colors ${\n                        form.watch(\"warrantyItemId\") === item.id \n                          ? 'border-blue-500 bg-blue-50' \n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => form.setValue(\"warrantyItemId\", item.id)}\n                      data-testid={`search-result-${item.id}`}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <div className=\"font-medium\">\n                            {item.customerName} - {item.productName || item.deviceInfo}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            📄 {item.ticketNumber || item.transactionNumber}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            📅 Berakhir: {item.warrantyEndDate ? \n                              new Date(item.warrantyEndDate).toLocaleDateString('id-ID') : 'Tidak diketahui'\n                            }\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          {getStatusBadge(item.status)}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {noteNumber && searchResults.length === 0 && (\n              <div className=\"border rounded-lg p-3 bg-yellow-50 text-center\">\n                <div className=\"text-yellow-600\">⚠️ Tidak ditemukan item garansi</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  Pastikan nomor nota/tiket benar dan masih dalam masa garansi\n                </div>\n              </div>\n            )}\n          </div>\n          {form.formState.errors.warrantyItemId && (\n            <p className=\"text-sm text-destructive mt-1\">\n              {form.formState.errors.warrantyItemId.message}\n            </p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"claimType\">Tipe Klaim</Label>\n          <Select \n            value={form.watch(\"claimType\")} \n            onValueChange={(value) => {\n              form.setValue(\"claimType\", value as any);\n            }}\n          >\n            <SelectTrigger data-testid=\"select-claim-type\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"service\">Service Warranty</SelectItem>\n              <SelectItem value=\"sales_return\">Sales Return</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"claimReason\">Deskripsi Masalah</Label>\n          <Textarea\n            {...form.register(\"claimReason\")}\n            placeholder=\"Jelaskan masalah yang dialami...\"\n            rows={3}\n            data-testid=\"textarea-claim-reason\"\n          />\n          {form.formState.errors.claimReason && (\n            <p className=\"text-sm text-destructive mt-1\">\n              {form.formState.errors.claimReason.message}\n            </p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"notes\">Catatan (Opsional)</Label>\n          <Textarea\n            {...form.register(\"notes\")}\n            placeholder=\"Catatan tambahan...\"\n            rows={2}\n            data-testid=\"textarea-notes\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex justify-end gap-2\">\n        <Button \n          type=\"submit\" \n          disabled={createClaimMutation.isPending}\n          data-testid=\"button-submit-claim\"\n        >\n          {createClaimMutation.isPending ? \"Membuat...\" : \"Buat Klaim\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\nfunction ProcessClaimForm({ claim, onSuccess }: { claim: EnhancedWarrantyClaim; onSuccess: () => void }) {\n  const { toast } = useToast();\n  const [action, setAction] = useState<'approve' | 'reject'>('approve');\n  \n  const schema = createProcessClaimSchema(claim.claimType, action);\n  \n  const form = useForm({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      action: \"approve\" as const,\n      adminNotes: \"\",\n      returnCondition: \"normal_stock\" as const,\n    },\n  });\n\n  const processClaimMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"PUT\", `/api/warranty-claims/${claim.id}/process`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Klaim berhasil diproses\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/warranty-claims\"] });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Gagal memproses klaim\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium\">Detail Klaim:</h4>\n        <p className=\"text-sm\"><strong>No:</strong> {claim.claimNumber}</p>\n        <p className=\"text-sm\"><strong>Customer:</strong> {claim.customerName}</p>\n        <p className=\"text-sm\"><strong>Tipe:</strong> {claim.claimType === 'service' ? 'Service' : 'Retur Penjualan'}</p>\n        <p className=\"text-sm\"><strong>Deskripsi:</strong> {claim.claimReason}</p>\n      </div>\n\n      <form onSubmit={form.handleSubmit((data) => processClaimMutation.mutate(data))} className=\"space-y-4\">\n        <div>\n          <Label>Keputusan</Label>\n          <Select \n            value={action} \n            onValueChange={(value) => {\n              const newAction = value as 'approve' | 'reject';\n              setAction(newAction);\n              form.setValue(\"action\", newAction as any);\n            }}\n          >\n            <SelectTrigger data-testid=\"select-process-action\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"approve\">Setujui</SelectItem>\n              <SelectItem value=\"reject\">Tolak</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Conditional return condition for sales return claims when approved */}\n        {claim.claimType === 'sales_return' && action === 'approve' && (\n          <div>\n            <Label>Kondisi Barang Retur <span className=\"text-red-500\">*</span></Label>\n            <Select \n              value={form.watch(\"returnCondition\")} \n              onValueChange={(value) => {\n                form.setValue(\"returnCondition\", value as any);\n              }}\n            >\n              <SelectTrigger data-testid=\"select-return-condition\">\n                <SelectValue placeholder=\"Pilih kondisi barang\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"normal_stock\">Normal - Masuk Stok</SelectItem>\n                <SelectItem value=\"damaged_stock\">Rusak - Stok Rusak</SelectItem>\n              </SelectContent>\n            </Select>\n            {form.formState.errors.returnCondition && (\n              <p className=\"text-sm text-red-500 mt-1\">\n                {form.formState.errors.returnCondition.message}\n              </p>\n            )}\n          </div>\n        )}\n\n        <div>\n          <Label htmlFor=\"adminNotes\">Catatan Admin (Opsional)</Label>\n          <Textarea\n            {...form.register(\"adminNotes\")}\n            placeholder=\"Catatan untuk keputusan ini...\"\n            rows={2}\n            data-testid=\"textarea-admin-notes\"\n          />\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <Button \n            type=\"submit\" \n            disabled={processClaimMutation.isPending}\n            data-testid=\"button-submit-process\"\n          >\n            {processClaimMutation.isPending ? \"Memproses...\" : \"Simpan Keputusan\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nfunction AcceptWarrantyForm({ claim, onSuccess }: { claim: EnhancedWarrantyClaim; onSuccess: () => void }) {\n  const { toast } = useToast();\n  const acceptWarrantySchema = createAcceptWarrantySchema(claim.claimType);\n  \n  const form = useForm({\n    resolver: zodResolver(acceptWarrantySchema),\n    defaultValues: {\n      returnCondition: claim.claimType === 'sales_return' ? 'normal_stock' as const : undefined,\n      notes: \"\",\n    },\n  });\n\n  const acceptWarrantyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"PUT\", `/api/warranty-claims/${claim.id}/complete`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Garansi berhasil diterima\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/warranty-claims\"] });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Gagal menerima garansi\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <h4 className=\"font-medium\">Terima Garansi:</h4>\n        <p className=\"text-sm\"><strong>No:</strong> {claim.claimNumber}</p>\n        <p className=\"text-sm\"><strong>Customer:</strong> {claim.customerName}</p>\n        <p className=\"text-sm\"><strong>Tipe:</strong> {claim.claimType === 'service' ? 'Service' : 'Retur Penjualan'}</p>\n        \n        {claim.claimType === 'service' && (\n          <div className=\"bg-blue-50 p-3 rounded text-sm\">\n            <strong>Service Warranty:</strong> Item akan dikembalikan ke proses service tanpa update stok atau keuangan.\n          </div>\n        )}\n        \n        {claim.claimType === 'sales_return' && (\n          <div className=\"bg-green-50 p-3 rounded text-sm\">\n            <strong>Sales Return:</strong> Pilih kondisi barang untuk update stok dan keuangan yang sesuai.\n          </div>\n        )}\n      </div>\n\n      <form onSubmit={form.handleSubmit((data) => acceptWarrantyMutation.mutate(data))} className=\"space-y-4\">\n        {claim.claimType === 'sales_return' && (\n          <div>\n            <Label>Kondisi Barang</Label>\n            <Select \n              value={form.watch(\"returnCondition\") || ''} \n              onValueChange={(value) => form.setValue(\"returnCondition\", value as any)}\n            >\n              <SelectTrigger data-testid=\"select-return-condition\">\n                <SelectValue placeholder=\"Pilih kondisi barang\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"normal_stock\">Normal (Asset)</SelectItem>\n                <SelectItem value=\"damaged_stock\">Rusak (Penyesuaian)</SelectItem>\n              </SelectContent>\n            </Select>\n            {form.formState.errors.returnCondition && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.returnCondition.message}\n              </p>\n            )}\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Normal: Stok bertambah sebagai aset. Rusak: Stok bertambah dengan penyesuaian keuangan.\n            </p>\n          </div>\n        )}\n\n        <div>\n          <Label htmlFor=\"notes\">Catatan (Opsional)</Label>\n          <Textarea\n            {...form.register(\"notes\")}\n            placeholder=\"Catatan penerimaan garansi...\"\n            rows={2}\n            data-testid=\"textarea-accept-notes\"\n          />\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <Button \n            type=\"submit\" \n            disabled={acceptWarrantyMutation.isPending}\n            data-testid=\"button-submit-accept\"\n          >\n            {acceptWarrantyMutation.isPending ? \"Memproses...\" : \"Terima Garansi\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","size_bytes":50828},"client/src/components/ImportResultsDialog.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, XCircle, AlertTriangle, FileText } from \"lucide-react\";\nimport { ImportResult } from \"@/lib/importExportUtils\";\n\ninterface ImportResultsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  result: ImportResult | null;\n  title?: string;\n}\n\nexport default function ImportResultsDialog({ \n  open, \n  onOpenChange, \n  result, \n  title = \"Import Results\" \n}: ImportResultsDialogProps) {\n  if (!result) return null;\n\n  const hasErrors = result.errorCount > 0;\n  const hasSuccesses = result.successCount > 0;\n  const isPartialSuccess = hasErrors && hasSuccesses;\n\n  const getStatusIcon = () => {\n    if (!hasErrors) return <CheckCircle className=\"w-6 h-6 text-green-600\" />;\n    if (isPartialSuccess) return <AlertTriangle className=\"w-6 h-6 text-yellow-600\" />;\n    return <XCircle className=\"w-6 h-6 text-red-600\" />;\n  };\n\n  const getStatusColor = () => {\n    if (!hasErrors) return \"text-green-600\";\n    if (isPartialSuccess) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getStatusMessage = () => {\n    if (!hasErrors) return `Successfully imported all ${result.successCount} records`;\n    if (isPartialSuccess) return `Imported ${result.successCount} of ${result.totalRows} records`;\n    return `Failed to import any records`;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh]\" data-testid=\"dialog-import-results\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            {getStatusIcon()}\n            <span>{title}</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <div className=\"text-2xl font-bold text-muted-foreground\" data-testid=\"total-rows\">\n                {result.totalRows}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Rows</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"success-count\">\n                {result.successCount}\n              </div>\n              <div className=\"text-sm text-green-600\">Successful</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-red-50 dark:bg-red-950 rounded-lg\">\n              <div className=\"text-2xl font-bold text-red-600\" data-testid=\"error-count\">\n                {result.errorCount}\n              </div>\n              <div className=\"text-sm text-red-600\">Errors</div>\n            </div>\n          </div>\n\n          {/* Status Message */}\n          <div className=\"text-center\">\n            <p className={`text-lg font-medium ${getStatusColor()}`} data-testid=\"status-message\">\n              {getStatusMessage()}\n            </p>\n          </div>\n\n          {/* Error Details */}\n          {hasErrors && (\n            <div className=\"space-y-3\">\n              <Separator />\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"w-4 h-4 text-red-600\" />\n                <h4 className=\"font-medium text-red-600\">Error Details</h4>\n                <Badge variant=\"destructive\" className=\"ml-auto\" data-testid=\"error-badge\">\n                  {result.errors.length} errors\n                </Badge>\n              </div>\n              \n              <ScrollArea className=\"h-48 border rounded-md p-4\">\n                <div className=\"space-y-2\" data-testid=\"error-list\">\n                  {result.errors.map((error, index) => (\n                    <div \n                      key={index}\n                      className=\"flex items-start space-x-3 p-3 bg-red-50 dark:bg-red-950 rounded-md\"\n                      data-testid={`error-item-${index}`}\n                    >\n                      <XCircle className=\"w-4 h-4 text-red-600 mt-0.5 flex-shrink-0\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                          Row {error.row}\n                          {error.field && <span className=\"ml-2 text-red-600\">({error.field})</span>}\n                        </p>\n                        <p className=\"text-sm text-red-600 break-words\">{error.message}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          )}\n\n          {/* Success Message for Perfect Import */}\n          {!hasErrors && (\n            <div className=\"text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n              <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n              <p className=\"text-sm text-green-600\">\n                All records were successfully imported into the system.\n              </p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5376},"client/src/lib/importExportUtils.ts":{"content":"export interface ImportResult {\n  totalRows: number;\n  successCount: number;\n  errorCount: number;\n  errors: Array<{\n    row: number;\n    message: string;\n    field?: string;\n  }>;\n}\n\nexport interface FileValidationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n/**\n * Validates if the selected file is a valid Excel file\n */\nexport const validateExcelFile = (file: File): FileValidationResult => {\n  // Check file size (5MB limit)\n  const maxSizeInBytes = 5 * 1024 * 1024; // 5MB\n  if (file.size > maxSizeInBytes) {\n    return {\n      isValid: false,\n      error: \"File size must be less than 5MB\"\n    };\n  }\n\n  // Check file type\n  const validTypes = [\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n    'application/vnd.ms-excel', // .xls\n  ];\n\n  const validExtensions = ['.xlsx', '.xls'];\n  const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n\n  if (!validTypes.includes(file.type) && !validExtensions.includes(fileExtension)) {\n    return {\n      isValid: false,\n      error: \"Only Excel files (.xlsx, .xls) are allowed\"\n    };\n  }\n\n  return { isValid: true };\n};\n\n/**\n * Downloads a template file from the server\n */\nexport const downloadTemplate = async (templateUrl: string, filename: string): Promise<void> => {\n  try {\n    const response = await fetch(templateUrl, {\n      method: 'GET',\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to download template: ${response.statusText}`);\n    }\n\n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Template download error:', error);\n    throw new Error('Failed to download template file');\n  }\n};\n\n/**\n * Uploads an Excel file for import\n */\nexport const uploadExcelFile = async (file: File, uploadUrl: string): Promise<ImportResult> => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await fetch(uploadUrl, {\n      method: 'POST',\n      credentials: 'include',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `Upload failed: ${response.statusText}`);\n    }\n\n    const result: ImportResult = await response.json();\n    return result;\n  } catch (error) {\n    console.error('File upload error:', error);\n    throw error instanceof Error ? error : new Error('Failed to upload file');\n  }\n};\n\n/**\n * Formats file size for display\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Gets the appropriate icon color based on import result\n */\nexport const getImportResultColor = (result: ImportResult): string => {\n  if (result.errorCount === 0) return 'text-green-600';\n  if (result.successCount > 0) return 'text-yellow-600';\n  return 'text-red-600';\n};\n\n/**\n * Generates a summary message for import results\n */\nexport const getImportSummaryMessage = (result: ImportResult): string => {\n  if (result.errorCount === 0) {\n    return `Successfully imported all ${result.successCount} records`;\n  } else if (result.successCount > 0) {\n    return `Imported ${result.successCount} records with ${result.errorCount} errors`;\n  } else {\n    return `Import failed: ${result.errorCount} errors found`;\n  }\n};","size_bytes":3798},"shared/utils/index.ts":{"content":"// Re-export all timezone utilities\nexport * from './timezone';","size_bytes":63},"shared/utils/timezone.ts":{"content":"import { format, parseISO, startOfDay, endOfDay } from 'date-fns';\nimport { toZonedTime, fromZonedTime } from 'date-fns-tz';\nimport { id } from 'date-fns/locale';\n\n/**\n * Jakarta Timezone Utility Functions\n * Asia/Jakarta (GMT+7) timezone management using proper timezone-aware functions\n */\n\nconst JAKARTA_TIMEZONE = 'Asia/Jakarta';\n\n/**\n * Gets current time in Jakarta timezone\n * @returns Date object representing current time in Jakarta timezone\n */\nexport function getCurrentJakartaTime(): Date {\n  const now = new Date();\n  return toZonedTime(now, JAKARTA_TIMEZONE);\n}\n\n/**\n * Converts any date to Jakarta timezone\n * @param date - Date to convert (assumed to be in UTC if coming from database)\n * @returns Date object adjusted to Jakarta timezone\n */\nexport function toJakartaTime(date: Date): Date {\n  return toZonedTime(date, JAKARTA_TIMEZONE);\n}\n\n/**\n * Converts Jakarta time to UTC for database storage\n * @param jakartaDate - Date in Jakarta timezone\n * @returns Date object in UTC for database storage\n */\nexport function jakartaTimeToUtc(jakartaDate: Date): Date {\n  return fromZonedTime(jakartaDate, JAKARTA_TIMEZONE);\n}\n\n/**\n * Formats date for database insert with proper timezone handling\n * @param date - Date in Jakarta timezone (optional, defaults to current Jakarta time)\n * @returns ISO string in UTC for database storage\n */\nexport function formatDateForDatabase(date?: Date): string {\n  const jakartaDate = date || getCurrentJakartaTime();\n  const utcDate = jakartaTimeToUtc(jakartaDate);\n  return utcDate.toISOString();\n}\n\n/**\n * Formats date for user display with Jakarta timezone\n * @param date - Date to format (UTC from database or Jakarta time)\n * @param formatString - Format pattern (default: 'dd/MM/yyyy HH:mm')\n * @param fromDatabase - Whether the date comes from database (UTC) or is already in Jakarta time\n * @returns Formatted date string in Indonesian locale\n */\nexport function formatDateForDisplay(\n  date: Date | string, \n  formatString: string = 'dd/MM/yyyy HH:mm',\n  fromDatabase: boolean = true\n): string {\n  let dateObj: Date;\n  \n  if (typeof date === 'string') {\n    dateObj = parseISO(date);\n  } else {\n    dateObj = date;\n  }\n  \n  // Convert to Jakarta timezone if coming from database (UTC)\n  const jakartaDate = fromDatabase ? toJakartaTime(dateObj) : dateObj;\n  return format(jakartaDate, formatString, { locale: id });\n}\n\n/**\n * Formats date for display in short format\n * @param date - Date to format\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Short formatted date string (dd/MM/yyyy)\n */\nexport function formatDateShort(date: Date | string, fromDatabase: boolean = true): string {\n  return formatDateForDisplay(date, 'dd/MM/yyyy', fromDatabase);\n}\n\n/**\n * Formats date for display with time\n * @param date - Date to format\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Formatted date string with time (dd/MM/yyyy HH:mm:ss)\n */\nexport function formatDateWithTime(date: Date | string, fromDatabase: boolean = true): string {\n  return formatDateForDisplay(date, 'dd/MM/yyyy HH:mm:ss', fromDatabase);\n}\n\n/**\n * Formats date for display in long format\n * @param date - Date to format\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Long formatted date string (dd MMMM yyyy)\n */\nexport function formatDateLong(date: Date | string, fromDatabase: boolean = true): string {\n  return formatDateForDisplay(date, 'dd MMMM yyyy', fromDatabase);\n}\n\n/**\n * Formats time only\n * @param date - Date to format\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Time string (HH:mm)\n */\nexport function formatTimeOnly(date: Date | string, fromDatabase: boolean = true): string {\n  return formatDateForDisplay(date, 'HH:mm', fromDatabase);\n}\n\n/**\n * Parses string date with Jakarta timezone consideration\n * @param dateString - Date string to parse\n * @param isUTC - Whether the input string is in UTC (default: true for database dates)\n * @returns Date object in Jakarta timezone\n */\nexport function parseWithTimezone(dateString: string, isUTC: boolean = true): Date {\n  const parsed = parseISO(dateString);\n  \n  if (isUTC) {\n    // If the input is UTC (from database), convert to Jakarta time\n    return toJakartaTime(parsed);\n  } else {\n    // If the input is already in Jakarta time\n    return parsed;\n  }\n}\n\n/**\n * Gets start of day in Jakarta timezone\n * @param date - Date to get start of day (optional, defaults to current Jakarta time)\n * @returns Date object at start of day in UTC for database storage\n */\nexport function getStartOfDayJakarta(date?: Date): Date {\n  const jakartaDate = date || getCurrentJakartaTime();\n  const jakartaStartOfDay = startOfDay(jakartaDate);\n  return jakartaTimeToUtc(jakartaStartOfDay);\n}\n\n/**\n * Gets end of day in Jakarta timezone\n * @param date - Date to get end of day (optional, defaults to current Jakarta time)\n * @returns Date object at end of day in UTC for database storage\n */\nexport function getEndOfDayJakarta(date?: Date): Date {\n  const jakartaDate = date || getCurrentJakartaTime();\n  const jakartaEndOfDay = endOfDay(jakartaDate);\n  return jakartaTimeToUtc(jakartaEndOfDay);\n}\n\n/**\n * Gets start of day in Jakarta timezone for display purposes\n * @param date - Date to get start of day (optional, defaults to current Jakarta time)\n * @returns Date object at start of day in Jakarta timezone\n */\nexport function getStartOfDayJakartaDisplay(date?: Date): Date {\n  const jakartaDate = date || getCurrentJakartaTime();\n  return startOfDay(jakartaDate);\n}\n\n/**\n * Gets end of day in Jakarta timezone for display purposes\n * @param date - Date to get end of day (optional, defaults to current Jakarta time)\n * @returns Date object at end of day in Jakarta timezone\n */\nexport function getEndOfDayJakartaDisplay(date?: Date): Date {\n  const jakartaDate = date || getCurrentJakartaTime();\n  return endOfDay(jakartaDate);\n}\n\n/**\n * Checks if a date is today in Jakarta timezone\n * @param date - Date to check (UTC from database or Jakarta time)\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Boolean indicating if date is today\n */\nexport function isToday(date: Date | string, fromDatabase: boolean = true): boolean {\n  const today = getCurrentJakartaTime();\n  let checkDate: Date;\n  \n  if (typeof date === 'string') {\n    checkDate = parseISO(date);\n  } else {\n    checkDate = date;\n  }\n  \n  const jakartaCheckDate = fromDatabase ? toJakartaTime(checkDate) : checkDate;\n  \n  return (\n    today.getFullYear() === jakartaCheckDate.getFullYear() &&\n    today.getMonth() === jakartaCheckDate.getMonth() &&\n    today.getDate() === jakartaCheckDate.getDate()\n  );\n}\n\n/**\n * Gets date range for today in Jakarta timezone (UTC for database queries)\n * @returns Object with start and end of today in UTC for database queries\n */\nexport function getTodayRange(): { start: Date; end: Date } {\n  return {\n    start: getStartOfDayJakarta(),\n    end: getEndOfDayJakarta()\n  };\n}\n\n/**\n * Gets date range for today in Jakarta timezone for display\n * @returns Object with start and end of today in Jakarta timezone\n */\nexport function getTodayRangeDisplay(): { start: Date; end: Date } {\n  return {\n    start: getStartOfDayJakartaDisplay(),\n    end: getEndOfDayJakartaDisplay()\n  };\n}\n\n/**\n * Formats relative time (e.g., \"2 jam yang lalu\")\n * @param date - Date to format (UTC from database or Jakarta time)\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Relative time string in Indonesian\n */\nexport function formatRelativeTime(date: Date | string, fromDatabase: boolean = true): string {\n  const now = getCurrentJakartaTime();\n  let targetDate: Date;\n  \n  if (typeof date === 'string') {\n    targetDate = parseISO(date);\n  } else {\n    targetDate = date;\n  }\n  \n  const jakartaTargetDate = fromDatabase ? toJakartaTime(targetDate) : targetDate;\n  \n  const diffMs = now.getTime() - jakartaTargetDate.getTime();\n  const diffSeconds = Math.floor(diffMs / 1000);\n  const diffMinutes = Math.floor(diffSeconds / 60);\n  const diffHours = Math.floor(diffMinutes / 60);\n  const diffDays = Math.floor(diffHours / 24);\n  \n  if (diffSeconds < 60) {\n    return 'Baru saja';\n  } else if (diffMinutes < 60) {\n    return `${diffMinutes} menit yang lalu`;\n  } else if (diffHours < 24) {\n    return `${diffHours} jam yang lalu`;\n  } else if (diffDays < 7) {\n    return `${diffDays} hari yang lalu`;\n  } else {\n    return formatDateShort(jakartaTargetDate, false);\n  }\n}\n\n/**\n * Creates a new Date object with current Jakarta time\n * Useful for creating timestamps in Jakarta timezone\n * @returns New Date object in Jakarta timezone\n */\nexport function createJakartaTimestamp(): Date {\n  return getCurrentJakartaTime();\n}\n\n/**\n * Utility for creating database-ready timestamp\n * @returns ISO string in UTC of current Jakarta time\n */\nexport function createDatabaseTimestamp(): string {\n  return formatDateForDatabase();\n}\n\n/**\n * Converts database date range to Jakarta timezone for queries\n * @param startDate - Start date in Jakarta timezone\n * @param endDate - End date in Jakarta timezone\n * @returns Object with UTC dates for database queries\n */\nexport function convertDateRangeForDatabase(startDate: Date, endDate: Date): { start: Date; end: Date } {\n  return {\n    start: jakartaTimeToUtc(startOfDay(startDate)),\n    end: jakartaTimeToUtc(endOfDay(endDate))\n  };\n}\n\n/**\n * Parses user input date and converts to UTC for database storage\n * @param dateInput - Date input from user (assumed to be in Jakarta timezone)\n * @returns Date object in UTC for database storage\n */\nexport function parseUserDateForDatabase(dateInput: string | Date): Date {\n  let jakartaDate: Date;\n  \n  if (typeof dateInput === 'string') {\n    jakartaDate = parseISO(dateInput);\n  } else {\n    jakartaDate = dateInput;\n  }\n  \n  return jakartaTimeToUtc(jakartaDate);\n}\n\n/**\n * Helper function to ensure date is in Jakarta timezone for calculations\n * @param date - Date that might be in UTC or Jakarta timezone\n * @param fromDatabase - Whether the date comes from database (UTC)\n * @returns Date in Jakarta timezone\n */\nexport function ensureJakartaTime(date: Date, fromDatabase: boolean = true): Date {\n  return fromDatabase ? toJakartaTime(date) : date;\n}\n\n/**\n * Helper function to create a date range for database queries\n * @param startDateInput - Start date in Jakarta timezone\n * @param endDateInput - End date in Jakarta timezone\n * @returns UTC date range for database queries\n */\nexport function createDatabaseDateRange(startDateInput: Date | string, endDateInput: Date | string): { start: Date; end: Date } {\n  let startDate: Date;\n  let endDate: Date;\n  \n  if (typeof startDateInput === 'string') {\n    startDate = parseISO(startDateInput);\n  } else {\n    startDate = startDateInput;\n  }\n  \n  if (typeof endDateInput === 'string') {\n    endDate = parseISO(endDateInput);\n  } else {\n    endDate = endDateInput;\n  }\n  \n  return convertDateRangeForDatabase(startDate, endDate);\n}\n\n// Common date format patterns for Indonesian locale\nexport const DATE_FORMATS = {\n  SHORT: 'dd/MM/yyyy',\n  LONG: 'dd MMMM yyyy',\n  WITH_TIME: 'dd/MM/yyyy HH:mm',\n  WITH_SECONDS: 'dd/MM/yyyy HH:mm:ss',\n  TIME_ONLY: 'HH:mm',\n  TIME_WITH_SECONDS: 'HH:mm:ss',\n  MONTH_YEAR: 'MMMM yyyy',\n  DAY_MONTH: 'dd MMMM',\n  ISO: \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\"\n} as const;\n\nexport type DateFormat = typeof DATE_FORMATS[keyof typeof DATE_FORMATS];","size_bytes":11453},"client/src/pages/damaged-goods.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Search, \n  Filter, \n  RotateCcw, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  XCircle,\n  Eye,\n  Edit,\n  Trash2,\n  Shield\n} from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\ninterface DamagedClaim {\n  id: string;\n  claimNumber: string;\n  customerName: string;\n  customerPhone?: string;\n  productName: string;\n  productCode: string;\n  claimDate: string;\n  refundStatus: 'approved' | 'pending' | 'rejected';\n  damageType: string;\n  damageDescription: string;\n  purchaseDate?: string;\n  warrantyPeriod?: string;\n}\n\nexport default function DamagedGoodsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"\");\n  const [dateFilter, setDateFilter] = useState<string>(\"\");\n  const [selectedClaim, setSelectedClaim] = useState<DamagedClaim | null>(null);\n  const [detailsOpen, setDetailsOpen] = useState(false);\n\n  // Fetch warranty claims filtered for damaged goods with refund status\n  const { data: damagedClaims = [], isLoading } = useQuery<DamagedClaim[]>({\n    queryKey: [\"/api/warranty-claims/damaged\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/warranty-claims/damaged\", { \n        credentials: \"include\" \n      });\n      if (!response.ok) throw new Error(\"Failed to fetch damaged goods claims\");\n      return response.json();\n    },\n  });\n\n  // Filter claims based on search and filters\n  const filteredClaims = damagedClaims.filter((claim) => {\n    const searchLower = searchTerm.toLowerCase();\n    const phoneSearch = (claim.customerPhone || \"\").toLowerCase();\n    \n    const matchesSearch = \n      claim.claimNumber.toLowerCase().includes(searchLower) ||\n      claim.customerName.toLowerCase().includes(searchLower) ||\n      claim.productName.toLowerCase().includes(searchLower) ||\n      phoneSearch.includes(searchLower);\n    \n    const matchesStatus = !statusFilter || claim.refundStatus === statusFilter;\n    \n    // TODO: Implement date filtering based on dateFilter\n    const matchesDate = true;\n    \n    return matchesSearch && matchesStatus && matchesDate;\n  });\n\n  // Calculate statistics\n  const totalCount = damagedClaims.length;\n  const approvedCount = damagedClaims.filter(c => c.refundStatus === 'approved').length;\n  const pendingCount = damagedClaims.filter(c => c.refundStatus === 'pending').length;\n  const rejectedCount = damagedClaims.filter(c => c.refundStatus === 'rejected').length;\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return (\n          <Badge className=\"bg-emerald-100 text-emerald-800 hover:bg-emerald-100\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Disetujui\n          </Badge>\n        );\n      case 'pending':\n        return (\n          <Badge className=\"bg-amber-100 text-amber-800 hover:bg-amber-100\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Menunggu Review\n          </Badge>\n        );\n      case 'rejected':\n        return (\n          <Badge className=\"bg-red-100 text-red-800 hover:bg-red-100\">\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Ditolak\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const handleViewDetails = (claim: DamagedClaim) => {\n    setSelectedClaim(claim);\n    setDetailsOpen(true);\n  };\n\n  const handleReset = () => {\n    setSearchTerm(\"\");\n    setStatusFilter(\"\");\n    setDateFilter(\"\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-background\">\n        <Sidebar />\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <Header \n            title=\"Barang Rusak\" \n            subtitle=\"Kelola klaim garansi untuk barang rusak yang dikembalikan\"\n            showExport\n          />\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                <p className=\"mt-2 text-muted-foreground\">Memuat data...</p>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Barang Rusak\" \n          subtitle=\"Kelola klaim garansi untuk barang rusak yang dikembalikan\"\n          showExport\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6 bg-muted/30\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Barang Rusak</CardTitle>\n                <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"text-destructive h-5 w-5\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-destructive\" data-testid=\"total-damaged-count\">\n                  {totalCount}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">Total klaim kerusakan</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Refund Disetujui</CardTitle>\n                <div className=\"w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"text-emerald-600 h-5 w-5\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-emerald-600\" data-testid=\"approved-count\">\n                  {approvedCount}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  {totalCount > 0 ? `${((approvedCount / totalCount) * 100).toFixed(1)}% dari total` : '0% dari total'}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Menunggu Review</CardTitle>\n                <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-amber-600 h-5 w-5\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-amber-600\" data-testid=\"pending-count\">\n                  {pendingCount}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  {totalCount > 0 ? `${((pendingCount / totalCount) * 100).toFixed(1)}% dari total` : '0% dari total'}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Refund Ditolak</CardTitle>\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <XCircle className=\"text-red-600 h-5 w-5\" />\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-red-600\" data-testid=\"rejected-count\">\n                  {rejectedCount}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  {totalCount > 0 ? `${((rejectedCount / totalCount) * 100).toFixed(1)}% dari total` : '0% dari total'}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filter and Search */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Cari nomor klaim, customer, atau produk...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-full sm:w-80\"\n                      data-testid=\"input-search-damaged\"\n                    />\n                  </div>\n                  \n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"Semua Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">Semua Status</SelectItem>\n                      <SelectItem value=\"approved\">Refund Disetujui</SelectItem>\n                      <SelectItem value=\"pending\">Menunggu Review</SelectItem>\n                      <SelectItem value=\"rejected\">Refund Ditolak</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  \n                  <Select value={dateFilter} onValueChange={setDateFilter}>\n                    <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-date-filter\">\n                      <SelectValue placeholder=\"Semua Periode\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">Semua Periode</SelectItem>\n                      <SelectItem value=\"7d\">7 Hari Terakhir</SelectItem>\n                      <SelectItem value=\"30d\">30 Hari Terakhir</SelectItem>\n                      <SelectItem value=\"90d\">3 Bulan Terakhir</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex items-center space-x-2\"\n                    data-testid=\"button-advanced-filter\"\n                  >\n                    <Filter className=\"h-4 w-4\" />\n                    <span>Filter Lanjutan</span>\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={handleReset}\n                    className=\"flex items-center space-x-2\"\n                    data-testid=\"button-reset-filter\"\n                  >\n                    <RotateCcw className=\"h-4 w-4\" />\n                    <span>Reset</span>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Damaged Goods Table */}\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"bg-muted/30\">\n                      <TableHead className=\"text-sm font-semibold\">No. Klaim</TableHead>\n                      <TableHead className=\"text-sm font-semibold\">Customer</TableHead>\n                      <TableHead className=\"text-sm font-semibold\">Produk</TableHead>\n                      <TableHead className=\"text-sm font-semibold\">Tanggal Klaim</TableHead>\n                      <TableHead className=\"text-sm font-semibold\">Status Refund</TableHead>\n                      <TableHead className=\"text-sm font-semibold\">Kerusakan</TableHead>\n                      <TableHead className=\"text-sm font-semibold\">Aksi</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredClaims.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8\">\n                          {searchTerm || statusFilter || dateFilter \n                            ? \"Tidak ada klaim yang sesuai dengan filter\" \n                            : \"Belum ada klaim barang rusak\"}\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredClaims.map((claim) => (\n                        <TableRow \n                          key={claim.id} \n                          className=\"hover:bg-muted/20 transition-colors\"\n                          data-testid={`row-claim-${claim.id}`}\n                        >\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Shield className=\"text-primary h-4 w-4\" />\n                              <span className=\"font-medium text-primary\">\n                                {claim.claimNumber}\n                              </span>\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{claim.customerName}</p>\n                              {claim.customerPhone && (\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {claim.customerPhone}\n                                </p>\n                              )}\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{claim.productName}</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {claim.productCode}\n                              </p>\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <p>{claim.claimDate}</p>\n                          </TableCell>\n                          \n                          <TableCell>\n                            {getStatusBadge(claim.refundStatus)}\n                          </TableCell>\n                          \n                          <TableCell>\n                            <div className=\"max-w-xs\">\n                              <p className=\"text-sm font-medium\">{claim.damageType}</p>\n                              <p className=\"text-xs text-muted-foreground mt-1 truncate\">\n                                {claim.damageDescription}\n                              </p>\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleViewDetails(claim)}\n                                data-testid={`button-view-${claim.id}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className=\"text-amber-600 hover:text-amber-700\"\n                                data-testid={`button-edit-${claim.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                className=\"text-red-600 hover:text-red-700\"\n                                data-testid={`button-delete-${claim.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Claim Details Modal */}\n      <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Detail Klaim Barang Rusak</DialogTitle>\n            <DialogDescription>\n              Informasi lengkap klaim garansi\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedClaim && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold mb-3\">Informasi Klaim</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">No. Klaim:</span>\n                      <span className=\"font-medium\">{selectedClaim.claimNumber}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Tanggal Klaim:</span>\n                      <span>{selectedClaim.claimDate}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Status:</span>\n                      {getStatusBadge(selectedClaim.refundStatus)}\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-3\">Informasi Customer</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Nama:</span>\n                      <span>{selectedClaim.customerName}</span>\n                    </div>\n                    {selectedClaim.customerPhone && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Telepon:</span>\n                        <span>{selectedClaim.customerPhone}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-3\">Informasi Produk</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Nama Produk:</span>\n                      <span>{selectedClaim.productName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Kode Produk:</span>\n                      <span>{selectedClaim.productCode}</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {selectedClaim.purchaseDate && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Tanggal Beli:</span>\n                        <span>{selectedClaim.purchaseDate}</span>\n                      </div>\n                    )}\n                    {selectedClaim.warrantyPeriod && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Masa Garansi:</span>\n                        <span>{selectedClaim.warrantyPeriod}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-3\">Detail Kerusakan</h4>\n                <div className=\"bg-muted/30 rounded-lg p-4\">\n                  <p className=\"font-medium mb-2\">\n                    Jenis Kerusakan: <span>{selectedClaim.damageType}</span>\n                  </p>\n                  <p className=\"text-muted-foreground text-sm\">\n                    {selectedClaim.damageDescription}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setDetailsOpen(false)}\n              data-testid=\"button-close-modal\"\n            >\n              Tutup\n            </Button>\n            <Button data-testid=\"button-edit-claim-modal\">\n              Edit Klaim\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":22290},"shared/service-cancellation-schema.ts":{"content":"import { z } from \"zod\";\n\n// Service cancellation type enum for validation\nexport const cancellationTypeEnum = z.enum(['before_completed', 'after_completed', 'warranty_refund']);\n\n// Main cancellation request validation schema\nexport const serviceCancellationSchema = z.object({\n  cancellationFee: z.string()\n    .min(1, \"Biaya pembatalan diperlukan\")\n    .regex(/^\\d+$/, \"Format biaya pembatalan tidak valid\") // Allow only digits (no decimal required)\n    .transform(val => {\n      const num = parseFloat(val);\n      if (isNaN(num) || num < 0) {\n        throw new Error(\"Biaya pembatalan harus berupa angka positif\");\n      }\n      if (num === 0) {\n        throw new Error(\"Biaya pembatalan harus lebih dari 0\");\n      }\n      return val;\n    }),\n    \n  cancellationReason: z.string()\n    .min(5, \"Alasan pembatalan minimal 5 karakter\")\n    .max(500, \"Alasan pembatalan maksimal 500 karakter\")\n    .trim(),\n    \n  cancellationType: cancellationTypeEnum,\n  \n  userId: z.string().min(1, \"User ID diperlukan\")\n});\n\n// Business rule validation result\nexport interface CancellationValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  serviceTicket?: any;\n  serviceParts?: any[];\n}\n\n// Type inference for the schema\nexport type ServiceCancellationRequest = z.infer<typeof serviceCancellationSchema>;\n\n// Additional business rule validations\nexport const validateCancellationBusinessRules = {\n  // Check if service ticket exists and not already cancelled\n  async validateTicketEligibility(ticketId: string, ticket: any): Promise<{ isValid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n    \n    if (!ticket) {\n      errors.push(\"Service ticket tidak ditemukan\");\n      return { isValid: false, errors };\n    }\n    \n    if (ticket.status === 'cancelled') {\n      errors.push(\"Service ticket sudah dibatalkan sebelumnya\");\n      return { isValid: false, errors };\n    }\n    \n    // Additional business rules can be added here\n    if (ticket.status === 'delivered' && ticket.deliveredAt) {\n      const deliveredDate = new Date(ticket.deliveredAt);\n      const now = new Date();\n      const daysDifference = Math.floor((now.getTime() - deliveredDate.getTime()) / (1000 * 60 * 60 * 24));\n      \n      // Example: Cannot cancel service after 30 days of delivery\n      if (daysDifference > 30) {\n        errors.push(\"Service tidak dapat dibatalkan setelah 30 hari dari pengiriman\");\n      }\n    }\n    \n    return { isValid: errors.length === 0, errors };\n  },\n  \n  // Validate warranty claims eligibility\n  async validateWarrantyEligibility(ticketId: string, ticket: any): Promise<{ isValid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n    \n    if (!ticket.warrantyEndDate) {\n      errors.push(\"Service tidak memiliki garansi\");\n      return { isValid: false, errors };\n    }\n    \n    const warrantyEndDate = new Date(ticket.warrantyEndDate);\n    const now = new Date();\n    \n    if (now > warrantyEndDate) {\n      errors.push(\"Garansi service sudah berakhir\");\n      return { isValid: false, errors };\n    }\n    \n    return { isValid: errors.length === 0, errors };\n  },\n  \n  // Validate parts availability for returns\n  async validatePartsAvailability(serviceParts: any[]): Promise<{ isValid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n    \n    // Check if any parts were used that need to be returned to stock\n    if (serviceParts.length === 0) {\n      return { isValid: true, errors }; // No parts to validate\n    }\n    \n    // Additional validations can be added here\n    // For example, checking if parts are still in stock system, etc.\n    \n    return { isValid: errors.length === 0, errors };\n  }\n};","size_bytes":3684},"client/src/components/ServiceCancellationModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, Calculator, RefreshCw, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { serviceCancellationSchema, type ServiceCancellationRequest } from \"@shared/service-cancellation-schema\";\nimport { formatDateShort } from '@shared/utils/timezone';\n\ninterface ServiceCancellationModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  serviceTicket: any;\n  onSuccess?: () => void;\n}\n\ntype CancellationType = 'before_completed' | 'after_completed' | 'warranty_refund';\n\nconst getCancellationScenarios = (ticket: any): CancellationType[] => {\n  if (!ticket) return [];\n  \n  const status = ticket.status;\n  const hasWarranty = ticket.warrantyDuration && ticket.warrantyDuration > 0;\n  \n  // For tickets not yet completed (pending, checking, in-progress, waiting-*)\n  if (['pending', 'checking', 'in-progress', 'waiting-technician', 'testing', 'waiting-confirmation', 'waiting-parts'].includes(status)) {\n    return ['before_completed'];\n  }\n  \n  // For completed/delivered tickets\n  if (['completed', 'delivered'].includes(status)) {\n    const scenarios: CancellationType[] = ['after_completed'];\n    \n    // Add warranty refund option if ticket has warranty\n    if (hasWarranty) {\n      scenarios.push('warranty_refund');\n    }\n    \n    return scenarios;\n  }\n  \n  return [];\n};\n\nconst getScenarioInfo = (type: CancellationType) => {\n  switch (type) {\n    case 'before_completed':\n      return {\n        title: 'Sebelum Selesai',\n        description: 'Biaya pembatalan akan dicatat sebagai pendapatan',\n        icon: <XCircle className=\"h-4 w-4 text-orange-600\" />,\n        color: 'bg-orange-50 border-orange-200 text-orange-800'\n      };\n    case 'after_completed':\n      return {\n        title: 'Setelah Selesai',\n        description: 'Sparepart akan dikembalikan ke stok dan revenue sparepart akan di-reverse',\n        icon: <RefreshCw className=\"h-4 w-4 text-blue-600\" />,\n        color: 'bg-blue-50 border-blue-200 text-blue-800'\n      };\n    case 'warranty_refund':\n      return {\n        title: 'Refund Garansi',\n        description: 'Transaksi asli akan di-refund dan sparepart masuk ke barang rusak',\n        icon: <AlertTriangle className=\"h-4 w-4 text-red-600\" />,\n        color: 'bg-red-50 border-red-200 text-red-800'\n      };\n    default:\n      return {\n        title: 'Tidak Diketahui',\n        description: '',\n        icon: <XCircle className=\"h-4 w-4\" />,\n        color: 'bg-gray-50 border-gray-200 text-gray-800'\n      };\n  }\n};\n\nconst formatCurrency = (value: string): string => {\n  // Remove all non-digit characters\n  const numbers = value.replace(/\\D/g, '');\n  \n  // Add thousands separators\n  if (numbers === '') return '';\n  \n  const formatted = new Intl.NumberFormat('id-ID').format(parseInt(numbers));\n  return formatted;\n};\n\nconst parseCurrency = (value: string): string => {\n  // Remove all formatting and return just numbers with decimal point\n  const numbers = value.replace(/\\D/g, '');\n  return numbers === '' ? '' : numbers;\n};\n\nexport default function ServiceCancellationModal({\n  open,\n  onOpenChange,\n  serviceTicket,\n  onSuccess\n}: ServiceCancellationModalProps) {\n  const [selectedScenario, setSelectedScenario] = useState<CancellationType | null>(null);\n  const { toast } = useToast();\n\n  const availableScenarios = getCancellationScenarios(serviceTicket);\n\n  const form = useForm<ServiceCancellationRequest>({\n    resolver: zodResolver(serviceCancellationSchema),\n    defaultValues: {\n      cancellationFee: '',\n      cancellationReason: '',\n      cancellationType: 'before_completed', // Set default\n      userId: 'current-user', // Set default user ID\n    },\n    mode: 'onChange',\n  });\n\n  const cancelMutation = useMutation({\n    mutationFn: async (data: ServiceCancellationRequest) => {\n      return apiRequest('POST', `/api/service-tickets/${serviceTicket.id}/cancel`, data);\n    },\n    onSuccess: () => {\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-tickets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/finance/summary\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      \n      toast({\n        title: \"Sukses\",\n        description: \"Service ticket berhasil dibatalkan\",\n      });\n      \n      // Reset form and close modal\n      form.reset();\n      setSelectedScenario(null);\n      onOpenChange(false);\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Gagal membatalkan service ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: ServiceCancellationRequest) => {\n    console.log('Form submit triggered, data:', data);\n    console.log('Selected scenario:', selectedScenario);\n    console.log('Form errors:', form.formState.errors);\n    console.log('Form valid:', form.formState.isValid);\n    \n    if (!selectedScenario) {\n      toast({\n        title: \"Error\",\n        description: \"Pilih skenario pembatalan terlebih dahulu\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Parse currency value back to decimal string\n    const parsedFee = parseCurrency(data.cancellationFee);\n    \n    const submitData = {\n      ...data,\n      cancellationFee: parsedFee,\n    };\n\n    console.log('Final submit data:', submitData);\n    cancelMutation.mutate(submitData);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setSelectedScenario(null);\n    onOpenChange(false);\n  };\n\n  if (!serviceTicket || availableScenarios.length === 0) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"dialog-cancellation-unavailable\">\n          <DialogHeader>\n            <DialogTitle>Pembatalan Tidak Tersedia</DialogTitle>\n            <DialogDescription>\n              Service ticket ini tidak dapat dibatalkan saat ini.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={handleClose} data-testid=\"button-close-unavailable\">\n              Tutup\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-service-cancellation\">\n        <DialogHeader>\n          <DialogTitle>Pembatalan Service Ticket</DialogTitle>\n          <DialogDescription>\n            Pilih skenario pembatalan yang sesuai dan isi informasi yang diperlukan\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Service Ticket Information */}\n        <Card className=\"mb-4\">\n          <CardContent className=\"pt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Nomor Ticket:</span>\n                <p className=\"text-muted-foreground\">{serviceTicket.ticketNumber}</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">Status Saat Ini:</span>\n                <Badge variant=\"outline\" className=\"ml-2\">\n                  {serviceTicket.status}\n                </Badge>\n              </div>\n              <div>\n                <span className=\"font-medium\">Customer:</span>\n                <p className=\"text-muted-foreground\">{serviceTicket.customerName || 'Unknown'}</p>\n              </div>\n              <div>\n                <span className=\"font-medium\">Tanggal Dibuat:</span>\n                <p className=\"text-muted-foreground\">\n                  {serviceTicket.createdAt ? formatDateShort(serviceTicket.createdAt) : '-'}\n                </p>\n              </div>\n              <div className=\"md:col-span-2\">\n                <span className=\"font-medium\">Device:</span>\n                <p className=\"text-muted-foreground\">\n                  {serviceTicket.deviceType}\n                  {serviceTicket.deviceBrand && ` - ${serviceTicket.deviceBrand}`}\n                  {serviceTicket.deviceModel && ` ${serviceTicket.deviceModel}`}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Scenario Selection */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Pilih Skenario Pembatalan:</label>\n            <div className=\"grid gap-3 mt-2\">\n              {availableScenarios.map((scenario) => {\n                const info = getScenarioInfo(scenario);\n                const isSelected = selectedScenario === scenario;\n                \n                return (\n                  <Card\n                    key={scenario}\n                    className={`cursor-pointer transition-all border-2 ${\n                      isSelected \n                        ? 'border-primary bg-primary/5' \n                        : 'border-border hover:border-primary/50'\n                    }`}\n                    onClick={() => {\n                      setSelectedScenario(scenario);\n                      form.setValue('cancellationType', scenario);\n                    }}\n                    data-testid={`card-scenario-${scenario}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className={`p-2 rounded-full ${info.color}`}>\n                          {info.icon}\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\">{info.title}</h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {info.description}\n                          </p>\n                        </div>\n                        {isSelected && (\n                          <div className=\"text-primary\">\n                            <Calculator className=\"h-5 w-5\" />\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n\n          {selectedScenario && (\n            <>\n              <Separator />\n              \n              {/* Cancellation Form */}\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"cancellationFee\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Biaya Pembatalan (Rp) *</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground text-sm\">\n                              Rp\n                            </span>\n                            <Input\n                              {...field}\n                              placeholder=\"0\"\n                              className=\"pl-10\"\n                              value={formatCurrency(field.value)}\n                              onChange={(e) => {\n                                const rawValue = parseCurrency(e.target.value);\n                                field.onChange(rawValue);\n                              }}\n                              data-testid=\"input-cancellation-fee\"\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"cancellationReason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Alasan Pembatalan *</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            {...field}\n                            placeholder=\"Jelaskan alasan pembatalan service ticket ini...\"\n                            className=\"min-h-[100px]\"\n                            data-testid=\"textarea-cancellation-reason\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <DialogFooter className=\"pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleClose}\n                      disabled={cancelMutation.isPending}\n                      data-testid=\"button-cancel-cancellation\"\n                    >\n                      Batal\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      variant=\"destructive\"\n                      disabled={cancelMutation.isPending}\n                      data-testid=\"button-confirm-cancellation\"\n                      onClick={(e) => {\n                        console.log('Submit button clicked!');\n                        console.log('Form values:', form.getValues());\n                        console.log('Form errors:', form.formState.errors);\n                        console.log('Form isValid:', form.formState.isValid);\n                        console.log('Selected scenario:', selectedScenario);\n                        console.log('Is pending:', cancelMutation.isPending);\n                      }}\n                    >\n                      {cancelMutation.isPending ? (\n                        <>\n                          <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Membatalkan...\n                        </>\n                      ) : (\n                        'Konfirmasi Pembatalan'\n                      )}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15233}},"version":1}